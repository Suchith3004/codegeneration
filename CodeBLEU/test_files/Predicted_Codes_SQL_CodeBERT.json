{"predicted_codes":{"0":["SELECT","SELECT","select","DEC","CRE","INS","W","decl","UPDATE",";"],"1":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","create","W"],"2":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl",";","create"],"3":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"4":["SELECT","SELECT","select","CRE","DEC","var","$",";","UPDATE"," "],"5":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"6":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"7":["SELECT","SELECT","select","CRE","DEC","UPDATE",";","decl","INS","W"],"8":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","Select"],"9":["SELECT","SELECT","select","DEC","INS","CRE","UPDATE","decl","W","create"],"10":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"11":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","update","decl","W"],"12":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"13":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"14":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl",";"],"15":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"16":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"17":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl","W","create"],"18":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"19":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"20":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"21":["SELECT","SELECT","DEC","select","CRE","INS","decl","UPDATE",";","W"],"22":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"23":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"24":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$","create","decl"],"25":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","Select"],"26":["SELECT","SELECT","DEC","select","CRE","UPDATE","decl","INS","W",";"],"27":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","decl","W"],"28":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"29":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"30":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","INS","Select"],"31":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"32":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"33":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS",";"],"34":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","decl","$"],"35":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"36":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"37":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"38":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"39":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"40":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"41":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"42":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","INS","W","decl"],"43":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"44":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"45":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","W"],"46":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"47":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","$",";"],"48":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"49":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","create"],"50":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"51":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"52":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"53":["SELECT","SELECT","select","DEC","UPDATE","W","CRE","INS","Select","decl"],"54":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"55":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"56":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"57":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"58":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"59":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","Select","decl"],"60":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"61":["SELECT","SELECT","DEC","select","CRE","INS","decl","UPDATE","W",";"],"62":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"63":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create",";"],"64":["SELECT","SELECT","select","UPDATE","CRE","INS","DEC","decl","create","W"],"65":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"66":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","W",";"],"67":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","create","W"],"68":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","W","decl",";"],"69":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"70":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"71":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","with"],"72":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"73":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","Select"],"74":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"75":["SELECT","SELECT","select","UPDATE","CRE","INS","DEC","decl","W",";"],"76":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"77":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"78":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"79":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"80":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl","Select"],"81":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl","W",";"],"82":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"83":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"84":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","decl",";"],"85":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS",";"],"86":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS",";"],"87":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","decl","INS"],"88":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"89":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"90":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","Select","W"],"91":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"92":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"93":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"94":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"95":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","Select"],"96":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"97":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"98":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","decl","INS","Select"],"99":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"100":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"101":["SELECT","SELECT","CRE","DEC","INS","select","UPDATE","decl","create",";"],"102":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"103":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"104":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"105":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"106":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"107":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"108":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"109":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE","W",";"],"110":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"111":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"112":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl",";"],"113":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"114":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"115":["SELECT","SELECT","select","DEC","CRE","INS","decl","W","UPDATE",";"],"116":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"117":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"118":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","INS","decl"],"119":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"120":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"121":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","W","INS","decl"],"122":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W","Select"],"123":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","update","decl","W"],"124":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"125":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"126":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"127":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"128":["SELECT","SELECT","DEC","select","CRE","decl","UPDATE","INS","W","create"],"129":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"130":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"131":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"132":["SELECT","SELECT","select","DEC","CRE","decl","UPDATE","INS","W",";"],"133":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"134":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"135":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"136":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create","W"],"137":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"138":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"139":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","decl","create","$"],"140":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"141":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"142":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W","update"],"143":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"144":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","decl","W"],"145":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"146":["SELECT","SELECT","select","DEC","UPDATE","INS","CRE","W","decl",";"],"147":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","INS","W","decl"],"148":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"149":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","$",";"],"150":["SELECT","SELECT","select","DEC","CRE","$","var","UPDATE"," ",";"],"151":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"152":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"153":["SELECT","SELECT","select","DEC","W","decl","CRE","UPDATE","INS",";"],"154":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"155":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl",";","W"],"156":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"157":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"158":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"159":["SELECT","SELECT","CRE","DEC","UPDATE","select","INS","decl","create","W"],"160":["SELECT","SELECT","CRE","DEC","INS","select","UPDATE","decl","create","W"],"161":["SELECT","SELECT","select","DEC","CRE","decl","UPDATE","INS","W",";"],"162":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","Select","decl"],"163":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl","Select"],"164":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"165":["SELECT","SELECT","select","DEC","CRE","decl","INS","UPDATE",";","create"],"166":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"167":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","WHERE"],"168":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"169":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"170":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"171":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"172":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"173":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"174":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"175":["SELECT","SELECT","select","DEC","INS","CRE","UPDATE","decl","W","create"],"176":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"177":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","W"],"178":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create","W"],"179":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"180":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"181":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"182":["SELECT","SELECT","select","INS","CRE","DEC","UPDATE","decl",";","create"],"183":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"184":["SELECT","SELECT","DEC","UPDATE","select","CRE","INS","decl","W","update"],"185":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","create","decl","W"],"186":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","decl","W"],"187":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"188":["SELECT","SELECT","select","DEC","CRE","W","decl","UPDATE","INS","with"],"189":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$","create","decl"],"190":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"191":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"192":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl",";","create"],"193":["SELECT","SELECT","select","DEC","CRE","Select","UPDATE","W","decl","INS"],"194":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"195":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create",";"],"196":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"197":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl",";","create"],"198":["SELECT","SELECT","DEC","select","CRE","UPDATE","decl","INS","W",";"],"199":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"200":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","decl",";"],"201":["SELECT","SELECT","select","CRE","DEC","$","UPDATE","INS",";","decl"],"202":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"203":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"204":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"205":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"206":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"207":["SELECT","SELECT","DEC","select","CRE","decl","UPDATE","W","INS",";"],"208":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"209":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"210":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"211":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"212":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"213":["SELECT","SELECT","select","UPDATE","DEC","INS","CRE","decl","W","update"],"214":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W",";","decl"],"215":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"216":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"217":["SELECT","SELECT","select","DEC","W","UPDATE","CRE","INS","decl","Select"],"218":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"219":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","$","decl",";"],"220":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"221":["SELECT","SELECT","select","CRE","UPDATE","DEC","INS","decl","create",";"],"222":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"223":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"224":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"225":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"226":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"227":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"228":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"229":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"230":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","create","decl",";"],"231":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create","W"],"232":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"233":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"234":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS",";","W"],"235":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"236":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","INS","W","decl"],"237":["SELECT","SELECT","select","DEC","CRE","decl","INS","UPDATE","create",";"],"238":["SELECT","SELECT","select","DEC","UPDATE","CRE","Select","W","INS","decl"],"239":["SELECT","SELECT","select","DEC","UPDATE","CRE","Select","INS","W","decl"],"240":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"241":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"242":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create","W"],"243":["SELECT","SELECT","CRE","DEC","select","UPDATE","INS","decl","create",";"],"244":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","Select","INS","decl"],"245":["SELECT","SELECT","select","CRE","DEC","var","$","UPDATE","INS",";"],"246":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create","W"],"247":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"248":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","create","decl",";"],"249":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"250":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","create"],"251":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"252":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"253":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"254":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"255":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"256":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS",";","decl","create"],"257":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"258":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","create","W"],"259":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"260":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"261":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"262":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"263":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"264":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"265":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"266":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"267":["SELECT","SELECT","CRE","DEC","select","UPDATE","INS","decl","create","W"],"268":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"269":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"270":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"271":["SELECT","SELECT","select","UPDATE","DEC","INS","CRE","decl",";","W"],"272":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"273":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"274":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS",";"],"275":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl","W",";"],"276":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","Select"],"277":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS",";","decl","W"],"278":["SELECT","SELECT","CRE","DEC","UPDATE","INS","select","decl","create","W"],"279":["SELECT","SELECT","UPDATE","select","DEC","INS","CRE","update","decl","W"],"280":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"281":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"282":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"283":["SELECT","SELECT","select","CRE","DEC","var","$","UPDATE",";"," "],"284":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","Select",";"],"285":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"286":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"287":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"288":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","W",";"],"289":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"290":["SELECT","SELECT","CRE","select","INS","DEC","UPDATE","decl","create",";"],"291":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"292":["SELECT","SELECT","select","DEC","W","CRE","UPDATE","INS","with","decl"],"293":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"294":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","Select"],"295":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"296":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"297":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"298":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS",";","W","decl"],"299":["SELECT","SELECT","CRE","DEC","select","UPDATE","INS","decl","create","W"],"300":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"301":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl",";","W"," "],"302":["SELECT","SELECT","UPDATE","select","DEC","INS","CRE","update","decl","W"],"303":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"304":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS",";"],"305":["SELECT","SELECT","CRE","DEC","INS","select","UPDATE","decl",";","create"],"306":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"307":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"308":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl",";","W"],"309":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W","decl"],"310":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"311":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W","update"],"312":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"313":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"314":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"315":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create",";"],"316":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"317":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"318":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"319":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"320":["SELECT","SELECT","select","DEC","CRE","W","decl","UPDATE","Select","INS"],"321":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","decl","create",";"],"322":["SELECT","SELECT","DEC","select","CRE","INS","decl","UPDATE",";","W"],"323":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","Select"],"324":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE",";","W"],"325":["SELECT","SELECT","DEC","CRE","UPDATE","select","INS","decl",";","create"],"326":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"327":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"328":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl",";","create"],"329":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl",";","W"],"330":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"331":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"332":["SELECT","SELECT","UPDATE","DEC","select","CRE","INS","decl","update","W"],"333":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select","INS"],"334":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"335":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","W","update"],"336":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","Select","decl","INS"],"337":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl",";","W"],"338":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"339":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"340":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"341":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"342":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"343":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"344":["SELECT","SELECT","UPDATE","DEC","select","CRE","INS","decl","W","update"],"345":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create",";"],"346":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl",";","W"],"347":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"348":["SELECT","SELECT","select","CRE","UPDATE","DEC","INS","decl","create","AL"],"349":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"350":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","create","W"],"351":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","W","update"],"352":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","create","decl","$"],"353":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"354":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"355":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","create"],"356":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"357":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","with"],"358":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"359":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","update","decl","W"],"360":["SELECT","SELECT","select","INS","UPDATE","CRE","DEC","decl","W",";"],"361":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"362":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"363":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"364":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","INS","Select"],"365":["SELECT","SELECT","select","UPDATE","CRE","DEC","INS","decl","create","update"],"366":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"367":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","decl","create",";"],"368":["SELECT","SELECT","select","DEC","UPDATE","W","CRE","INS","Select","decl"],"369":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"370":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"371":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"372":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"373":["SELECT","SELECT","UPDATE","select","CRE","INS","DEC","update","decl","create"],"374":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create",";"],"375":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"376":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"377":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"378":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"379":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"380":["SELECT","SELECT","UPDATE","select","CRE","INS","DEC","update","decl",";"],"381":["SELECT","SELECT","CRE","UPDATE","select","DEC","INS","decl","create","update"],"382":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","W","decl","update"],"383":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"384":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl",";","W"],"385":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","W","create"],"386":["SELECT","SELECT","select","DEC","CRE","decl","INS","$","UPDATE",";"],"387":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"388":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"389":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","create","decl","$"],"390":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"391":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"392":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","$"],"393":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"394":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"395":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"396":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"397":["SELECT","SELECT","select","CRE","DEC","$","UPDATE","INS","create",";"],"398":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"399":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"400":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"401":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","W",";"],"402":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","W","update"],"403":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"404":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"405":["SELECT","SELECT","select","DEC","W","CRE","INS","UPDATE","decl","Select"],"406":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"407":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select",";"],"408":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"409":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"410":["SELECT","SELECT","DEC","UPDATE","select","CRE","INS","decl","update","W"],"411":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","decl",";"],"412":["SELECT","SELECT","UPDATE","CRE","select","DEC","INS","decl","create",";"],"413":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","decl","INS","Select"],"414":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"415":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"416":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","INS","decl"],"417":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"418":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select","INS"],"419":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"420":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"421":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","update",";"],"422":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"423":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"424":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"425":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"426":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"427":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"428":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"429":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"430":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select",";"],"431":["SELECT","SELECT","DEC","select","CRE","INS","decl","UPDATE",";","W"],"432":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"433":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl",";","update"],"434":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select","INS"],"435":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W","create"],"436":["SELECT","SELECT","DEC","select","UPDATE","CRE","decl","INS","W","update"],"437":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"438":["SELECT","SELECT","select","CRE","DEC","UPDATE",";","INS","var","decl"],"439":["SELECT","SELECT","select","DEC","CRE","decl","UPDATE","W","INS",";"],"440":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"441":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"442":["SELECT","SELECT","select","CRE","DEC","INS","decl","UPDATE","create",";"],"443":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","decl","INS"],"444":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"445":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"446":["SELECT","SELECT","DEC","select","UPDATE","CRE","INS","decl","W","update"],"447":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"448":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"449":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"450":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"451":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"452":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","W"],"453":["SELECT","SELECT","UPDATE","select","DEC","INS","CRE","update","decl","W"],"454":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"455":["SELECT","SELECT","select","CRE","DEC","INS","decl","UPDATE","create",";"],"456":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"457":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","create","decl","W"],"458":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"459":["SELECT","SELECT","CRE","INS","select","UPDATE","DEC","create","decl",";"],"460":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"461":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"462":["SELECT","SELECT","select","CRE","UPDATE","DEC","INS","W","decl","create"],"463":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"464":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","Select"],"465":["SELECT","SELECT","select","INS","CRE","DEC","UPDATE","decl","W",";"],"466":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"467":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl",";","W"],"468":["SELECT","SELECT","select","DEC","CRE","decl","INS","UPDATE","W",";"],"469":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"470":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"471":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"472":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"473":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create",";"],"474":["SELECT","SELECT","CRE","INS","DEC","select","UPDATE","decl","create",";"],"475":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select",";"],"476":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W","create"],"477":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create",";"],"478":["SELECT","SELECT","select","DEC","CRE","INS","decl","W","UPDATE",";"],"479":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"480":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"481":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"482":["SELECT","SELECT","CRE","select","DEC","INS","decl","UPDATE","create",";"],"483":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"484":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"485":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"486":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"487":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl","Select"],"488":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"489":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"490":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"491":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"492":["SELECT","SELECT","CRE","DEC","INS","select","UPDATE","decl","create",";"],"493":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"494":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"495":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"496":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"497":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"498":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"499":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"500":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"501":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"502":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","W","decl",";"],"503":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"504":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS",";","decl","W"],"505":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"506":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","create"],"507":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"508":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"509":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"510":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"511":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"512":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"513":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","create"],"514":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl",";"],"515":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","$"],"516":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"517":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl",";","create"],"518":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"519":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"520":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","WHERE","decl"],"521":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"522":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"523":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"524":["SELECT","SELECT","select","DEC","CRE","UPDATE",";","decl","var","Select"],"525":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"526":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"527":["SELECT","SELECT","select","DEC","CRE","decl","UPDATE","W","INS",";"],"528":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"529":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"530":["SELECT","SELECT","select","UPDATE","DEC","INS","CRE","W","decl","create"],"531":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$","decl",";"],"532":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","with"],"533":["SELECT","SELECT","select","INS","UPDATE","CRE","DEC","decl",";","create"],"534":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"535":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","create"],"536":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"537":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select","INS"],"538":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"539":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"540":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","decl",";","create"],"541":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"542":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"543":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"544":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","$","create"],"545":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W","update"],"546":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create","W"],"547":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","decl",";"],"548":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl","Select"],"549":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","WHERE"],"550":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"551":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"552":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"553":["SELECT","SELECT","UPDATE","DEC","CRE","select","INS","decl","update",";"],"554":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"555":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"556":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update",";"],"557":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"558":["SELECT","SELECT","DEC","select","CRE","decl","UPDATE","W","INS",";"],"559":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"560":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"561":["SELECT","SELECT","UPDATE","CRE","select","DEC","INS","update","decl",";"],"562":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","W","update"],"563":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"564":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","Select"],"565":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"566":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"567":["SELECT","SELECT","select","DEC","CRE","decl","INS","W",";","UPDATE"],"568":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","$","decl"],"569":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"570":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"571":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"572":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"573":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$","create","decl"],"574":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"575":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"576":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"577":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"578":["SELECT","SELECT","select","UPDATE","DEC","INS","CRE","W","decl",";"],"579":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"580":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"581":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","Select",";"],"582":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"583":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl",";","W"],"584":["SELECT","SELECT","select","DEC","CRE","decl","W","INS","UPDATE",";"],"585":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"586":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"587":["SELECT","SELECT","select","DEC","CRE","INS","decl","W","UPDATE",";"],"588":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","with"],"589":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"590":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"591":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"592":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"593":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","create","W"],"594":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl","Select"],"595":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"596":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","W","update"],"597":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","decl","create","W"],"598":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","W",";"],"599":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"600":["SELECT","SELECT","CRE","INS","DEC","select","UPDATE","decl","create","W"],"601":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"602":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"603":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","with"],"604":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"605":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create","W"],"606":["SELECT","SELECT","CRE","DEC","UPDATE","select","INS","decl","create",";"],"607":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"608":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"609":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"610":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","INS","Select"],"611":["SELECT","SELECT","CRE","INS","select","DEC","UPDATE","decl","create",";"],"612":["SELECT","SELECT","select","DEC","INS","UPDATE","CRE","decl","W",";"],"613":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","create"],"614":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl","W",";"],"615":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","$"],"616":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"617":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"618":["SELECT","SELECT","select","DEC","CRE","decl","INS","UPDATE",";","W"],"619":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"620":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"621":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"622":["SELECT","SELECT","select","DEC","CRE","INS","decl","W","UPDATE",";"],"623":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"624":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"625":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"626":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"627":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","W",";"],"628":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"629":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","decl","W"],"630":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"631":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl",";"],"632":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"633":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"634":["SELECT","SELECT","CRE","UPDATE","select","DEC","INS","decl","create","update"],"635":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"636":["SELECT","SELECT","select","DEC","INS","UPDATE","CRE","W","decl",";"],"637":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","create","decl","W"],"638":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"639":["SELECT","SELECT","UPDATE","select","DEC","INS","CRE","update","decl","W"],"640":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"641":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","decl",";","create"],"642":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"643":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"644":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create","W"],"645":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W","Select"],"646":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"647":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"648":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"649":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"650":["SELECT","SELECT","select","CRE","DEC","UPDATE","decl",";","$","INS"],"651":["SELECT","SELECT","DEC","select","CRE","decl","UPDATE","INS","create","W"],"652":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"653":["SELECT","SELECT","select","CRE","DEC","$","UPDATE","INS",";","decl"],"654":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"655":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"656":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"657":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","create","decl","$"],"658":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"659":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"660":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"661":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select",";"],"662":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"663":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","W"],"664":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"665":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$","create",";"],"666":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","Select","decl","INS"],"667":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"668":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"669":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","decl","create",";"],"670":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"671":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"672":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"673":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE","W",";"],"674":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"675":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"676":["SELECT","SELECT","DEC","select","CRE","INS","decl","UPDATE",";","W"],"677":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"678":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","decl","W"],"679":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","Select"],"680":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"681":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","WHERE"],"682":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"683":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"684":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"685":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","create","decl","W"],"686":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","INS","W","decl"],"687":["SELECT","SELECT","DEC","CRE","INS","select","UPDATE","decl",";","create"],"688":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"689":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"690":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"691":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"692":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"693":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"694":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"695":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","create","decl",";"],"696":["SELECT","SELECT","select","CRE","DEC","var","$",";","UPDATE"," "],"697":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"698":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"699":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"700":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","W",";"],"701":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"702":["SELECT","SELECT","UPDATE","CRE","select","INS","DEC","decl","create","update"],"703":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"704":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","Select","decl","INS"],"705":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"706":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"707":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","decl","INS"],"708":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl",";"],"709":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"710":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"711":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"712":["SELECT","SELECT","select","DEC","CRE","UPDATE","W",";","decl","Select"],"713":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"714":["SELECT","SELECT","select","DEC","CRE","INS","W","decl","UPDATE",";"],"715":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"716":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE","W",";"],"717":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"718":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"719":["SELECT","SELECT","CRE","DEC","select","UPDATE","INS","decl","create",";"],"720":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","create"],"721":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"722":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create",";"],"723":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"724":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"725":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"726":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","Select","decl"],"727":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"728":["SELECT","SELECT","select","DEC","INS","CRE","UPDATE","decl","W",";"],"729":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"730":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"731":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W","create"],"732":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"733":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"734":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"735":["SELECT","SELECT","select","DEC","CRE","INS","W","decl","UPDATE",";"],"736":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W","create"],"737":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","decl","W"],"738":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"739":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"740":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"741":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl",";","create"],"742":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"743":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"744":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"745":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"746":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"747":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"748":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"749":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","create"],"750":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"751":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"752":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"753":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select",";","decl"],"754":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"755":["SELECT","SELECT","select","DEC","W","UPDATE","CRE","INS","decl",";"],"756":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"757":["SELECT","SELECT","select","DEC","INS","CRE","UPDATE","W","decl",";"],"758":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"759":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"760":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE","W",";"],"761":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","with"],"762":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"763":["SELECT","SELECT","CRE","DEC","select","UPDATE","INS","decl","create","W"],"764":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select",";"],"765":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"766":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"767":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl",";"],"768":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl",";","Select"],"769":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$","create","decl"],"770":["SELECT","SELECT","select","DEC","INS","CRE","UPDATE","decl","W",";"],"771":["SELECT","SELECT","select","DEC","CRE","W","decl","UPDATE","INS","with"],"772":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"773":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"774":["SELECT","SELECT","select","UPDATE","DEC","INS","CRE","decl",";","W"],"775":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"776":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"777":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select",";"],"778":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS",";"],"779":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"780":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"781":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"782":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","create","decl",";"],"783":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"784":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"785":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"786":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"787":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","Select"],"788":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","decl",";","W"],"789":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"790":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"791":["SELECT","SELECT","select","DEC","INS","UPDATE","CRE","decl",";","W"],"792":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","INS","Select"],"793":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE",";","create"],"794":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"795":["SELECT","SELECT","DEC","select","CRE","INS","decl","UPDATE",";","W"],"796":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl",";","W"],"797":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"798":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","W"],"799":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"800":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","create",";"],"801":["SELECT","SELECT","DEC","select","INS","CRE","UPDATE","decl",";","W"],"802":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"803":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"804":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create","W"],"805":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"806":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"807":["SELECT","SELECT","select","DEC","INS","CRE","UPDATE","decl",";","W"],"808":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W",";","decl"],"809":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"810":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"811":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl",";","Select"],"812":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"813":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl",";","W","INS"],"814":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","create","decl",";"],"815":["SELECT","SELECT","select","DEC","INS","UPDATE","CRE","W","decl",";"],"816":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","decl",";"],"817":["SELECT","SELECT","DEC","select","CRE","decl","UPDATE","W","INS",";"],"818":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","Select","decl","INS"],"819":["SELECT","SELECT","select","DEC","UPDATE","INS","CRE","W","decl",";"],"820":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"821":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"822":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","create"],"823":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"824":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"825":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"826":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"827":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","decl",";"],"828":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"829":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"830":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"831":["SELECT","SELECT","select","DEC","UPDATE","INS","CRE","decl","W",";"],"832":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","Select","decl"],"833":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"834":["SELECT","SELECT","select","DEC","CRE","decl","W","UPDATE","INS",";"],"835":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"836":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"837":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","decl",";","Select"],"838":["SELECT","SELECT","select","DEC","W","CRE","UPDATE","INS","decl","Select"],"839":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"840":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","with"],"841":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"842":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"843":["SELECT","SELECT","CRE","DEC","select","UPDATE","INS","decl","create","W"],"844":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"845":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"846":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W","WHERE"],"847":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"848":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"849":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"850":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"851":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"852":["SELECT","SELECT","select","DEC","UPDATE","INS","CRE","decl","W",";"],"853":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"854":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"855":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select","INS"],"856":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"857":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","W","create"],"858":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"859":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"860":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"861":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"862":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"863":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"864":["SELECT","SELECT","DEC","select","CRE","UPDATE","decl","INS","W",";"],"865":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"866":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"867":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"868":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"869":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","W"],"870":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"871":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl","W",";"],"872":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"873":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS",";"],"874":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"875":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"876":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"877":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","W","INS","decl"],"878":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","INS","Select"],"879":["SELECT","SELECT","select","DEC","UPDATE","INS","W","CRE","Select","decl"],"880":["SELECT","SELECT","select","DEC","UPDATE","INS","W","CRE","Select","decl"],"881":["SELECT","SELECT","select","DEC","W","CRE","UPDATE","decl","INS","Select"],"882":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"883":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"884":["SELECT","SELECT","DEC","select","CRE","INS","decl","UPDATE",";","W"],"885":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"886":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","create","decl",";"],"887":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","create","decl","W"],"888":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl","Select"],"889":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"890":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"891":["SELECT","SELECT","select","DEC","W","UPDATE","CRE","Select","INS","decl"],"892":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"893":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W","decl"],"894":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"895":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"896":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"897":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"898":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"899":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"900":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","decl","W"],"901":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"902":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"903":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"904":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"905":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"906":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"907":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","W","decl",";"],"908":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"909":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"910":["SELECT","SELECT","CRE","select","INS","UPDATE","DEC","create","$","decl"],"911":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"912":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl",";","Select"],"913":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"914":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"915":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl","W",";"],"916":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"917":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"918":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl","W",";"],"919":["SELECT","SELECT","select","INS","UPDATE","DEC","CRE","decl","create",";"],"920":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"921":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","Select",";"],"922":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"923":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"924":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","decl","W"],"925":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","create"],"926":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"927":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl",";","W"],"928":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE",";","W"],"929":["SELECT","SELECT","DEC","CRE","select","UPDATE","INS","decl","W","create"],"930":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","$",";"],"931":["SELECT","SELECT","select","DEC","CRE","INS","W","decl","UPDATE",";"],"932":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"933":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl","create",";"],"934":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"935":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl",";","create"],"936":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"937":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl",";","W"],"938":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"939":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"940":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","W","create"],"941":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"942":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"943":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","update",";"],"944":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"945":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl","Select"],"946":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"947":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl",";","create"],"948":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"949":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"950":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"951":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"952":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"953":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"954":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"955":["SELECT","SELECT","select","DEC","INS","CRE","UPDATE","decl",";","W"],"956":["SELECT","SELECT","CRE","select","DEC","INS","$","decl","UPDATE","create"],"957":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","decl","create",";"],"958":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W",";","decl"],"959":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","INS",";"],"960":["SELECT","SELECT","select","DEC","CRE","decl","INS","UPDATE","W",";"],"961":["SELECT","SELECT","select","DEC","W","CRE","UPDATE","decl",";","Select"],"962":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"963":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"964":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"965":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"966":["SELECT","SELECT","DEC","select","CRE","UPDATE","decl","INS","W",";"],"967":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"968":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"969":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"970":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"971":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"972":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","with"],"973":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","create","W"],"974":["SELECT","SELECT","UPDATE","CRE","DEC","select","INS","decl","update","W"],"975":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"976":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"977":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","with"],"978":["SELECT","SELECT","select","DEC","UPDATE","INS","CRE","decl","W",";"],"979":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"980":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"981":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"982":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"983":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W","update"],"984":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl",";"],"985":["SELECT","SELECT","UPDATE","DEC","select","CRE","INS","decl","update","W"],"986":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","Select"],"987":["SELECT","SELECT","select","UPDATE","CRE","DEC","INS","create","decl",";"],"988":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"989":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"990":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"991":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"992":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","create","decl",";"],"993":["SELECT","SELECT","select","INS","CRE","DEC","UPDATE","decl","create",";"],"994":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"995":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"996":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl",";"],"997":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"998":["SELECT","SELECT","select","DEC","CRE","decl","INS","UPDATE","W",";"],"999":["SELECT","SELECT","CRE","select","DEC","INS","decl","UPDATE","create",";"],"1000":["SELECT","SELECT","select","DEC","UPDATE","CRE","Select","INS","W","decl"],"1001":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1002":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"1003":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1004":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1005":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"1006":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1007":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE",";","W"],"1008":["SELECT","SELECT","select","DEC","W","Select","UPDATE",";","INS","decl"],"1009":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1010":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"1011":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1012":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1013":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"1014":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"1015":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create",";"],"1016":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update",";"],"1017":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1018":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE","W",";"],"1019":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W","decl"],"1020":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1021":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"1022":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1023":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1024":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl",";","W"],"1025":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1026":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1027":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create","W"],"1028":["SELECT","SELECT","CRE","DEC","UPDATE","select","INS","decl","create","W"],"1029":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1030":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"1031":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"1032":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"1033":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1034":["SELECT","SELECT","select","DEC","CRE","INS","W","UPDATE","decl","with"],"1035":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"1036":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"1037":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1038":["SELECT","SELECT","INS","select","DEC","CRE","UPDATE","decl","create","W"],"1039":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","create"],"1040":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","W","update"],"1041":["SELECT","SELECT","INS","select","CRE","DEC","UPDATE","decl",";","create"],"1042":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1043":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1044":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1045":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","W",";"],"1046":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS","Select"],"1047":["SELECT","SELECT","select","DEC","CRE","INS","decl","W","UPDATE",";"],"1048":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","decl","INS"],"1049":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"1050":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1051":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1052":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS",";","decl","Select"],"1053":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1054":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1055":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"1056":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1057":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1058":["SELECT","SELECT","select","DEC","W","UPDATE","CRE","INS","Select","decl"],"1059":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1060":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W","decl"],"1061":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","INS","with"],"1062":["SELECT","SELECT","CRE","INS","select","UPDATE","DEC","create","decl",";"],"1063":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1064":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","W","INS","decl"],"1065":["SELECT","SELECT","select","UPDATE","CRE","DEC","INS","decl","W",";"],"1066":["SELECT","SELECT","select","UPDATE","CRE","INS","DEC","decl","create",";"],"1067":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1068":["SELECT","SELECT","select","DEC","W","UPDATE","CRE","INS","decl",";"],"1069":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1070":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1071":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1072":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1073":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1074":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","create"],"1075":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","create"],"1076":["SELECT","SELECT","select","DEC","INS","UPDATE","CRE","decl",";","W"],"1077":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","$","decl","create"],"1078":["SELECT","SELECT","select","DEC","CRE","INS","W","UPDATE","decl",";"],"1079":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","$"],"1080":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","with"],"1081":["SELECT","SELECT","select","DEC","W","CRE","INS","UPDATE","decl","Select"],"1082":["SELECT","SELECT","select","UPDATE","DEC","INS","CRE","decl","W","update"],"1083":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","with"],"1084":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","create"],"1085":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1086":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"1087":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1088":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","INS","Select"],"1089":["SELECT","SELECT","select","DEC","UPDATE","CRE","Select","INS","W","decl"],"1090":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1091":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W","WHERE"],"1092":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1093":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1094":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","Select","decl"],"1095":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"1096":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1097":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1098":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","Select","decl","INS"],"1099":["SELECT","SELECT","select","CRE","UPDATE","DEC","INS","create","decl","W"],"1100":["SELECT","SELECT","select","DEC","CRE","decl","UPDATE","W","INS",";"],"1101":["SELECT","SELECT","select","DEC","INS","CRE","UPDATE","decl","W",";"],"1102":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","with"],"1103":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1104":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1105":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"1106":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"1107":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","Select","decl","INS"],"1108":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","create"],"1109":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1110":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE","W",";"],"1111":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1112":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","decl","W"],"1113":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","$",";"],"1114":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1115":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1116":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1117":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1118":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","WHERE"],"1119":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","create","decl","$"],"1120":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"1121":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1122":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select","INS"],"1123":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1124":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1125":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"1126":["SELECT","SELECT","select","DEC","INS","UPDATE","CRE","decl","W",";"],"1127":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1128":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1129":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"1130":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1131":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1132":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select","INS"],"1133":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"1134":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","create","decl",";"],"1135":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1136":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1137":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1138":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1139":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1140":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"1141":["SELECT","SELECT","select","DEC","W","UPDATE","CRE","INS","decl",";"],"1142":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1143":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1144":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"1145":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"1146":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1147":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W","decl"],"1148":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","decl","create",";"],"1149":["SELECT","SELECT","select","CRE","DEC","$","UPDATE","INS","create","decl"],"1150":["SELECT","SELECT","DEC","select","CRE","UPDATE","decl","W","INS",";"],"1151":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1152":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1153":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1154":["SELECT","SELECT","DEC","select","CRE","INS","decl","UPDATE",";","W"],"1155":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1156":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1157":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1158":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","W"],"1159":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1160":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","Select","INS","decl"],"1161":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","WHERE"],"1162":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"1163":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1164":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","Select"],"1165":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1166":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W","create"],"1167":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl",";"],"1168":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W"," "],"1169":["SELECT","SELECT","CRE","INS","DEC","select","UPDATE","decl","create",";"],"1170":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"1171":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1172":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$","create","decl"],"1173":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1174":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","INS","decl","W"],"1175":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1176":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl",";","create"],"1177":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W","create"],"1178":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"1179":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1180":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1181":["SELECT","SELECT","select","DEC","CRE","W","decl","UPDATE","INS",";"],"1182":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1183":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1184":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","decl","create",";"],"1185":["SELECT","SELECT","select","CRE","UPDATE","DEC","INS","decl","W",";"],"1186":["SELECT","SELECT","select","DEC","W","CRE","UPDATE","Select","INS","decl"],"1187":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","create"],"1188":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1189":["SELECT","SELECT","UPDATE","DEC","select","CRE","INS","decl","update","W"],"1190":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1191":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"1192":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1193":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"1194":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1195":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","W"],"1196":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl",";","create"],"1197":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"1198":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"1199":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1200":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1201":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl",";","W"],"1202":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1203":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1204":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select",";","decl"],"1205":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$",";","decl"],"1206":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1207":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1208":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"1209":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1210":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"1211":["SELECT","SELECT","select","DEC","UPDATE","INS","CRE","decl","W",";"],"1212":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"1213":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","$",";"],"1214":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1215":["SELECT","SELECT","CRE","DEC","select","UPDATE","INS","decl",";","create"],"1216":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1217":["CRE","CRE","SELECT","DEC","select","UPDATE","INS","create","decl",";"],"1218":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1219":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1220":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1221":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1222":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE",";","$"],"1223":["SELECT","SELECT","UPDATE","select","DEC","INS","CRE","update","decl",";"],"1224":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl",";","update"],"1225":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","create","decl",";"],"1226":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","Select"],"1227":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","INS","decl"],"1228":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"1229":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","INS","W","decl"],"1230":["SELECT","SELECT","select","CRE","UPDATE","INS","DEC","decl","create",";"],"1231":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1232":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create",";"],"1233":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","INS","W","decl"],"1234":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl","Select"],"1235":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1236":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","INS","W",";"],"1237":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"1238":["SELECT","SELECT","select","DEC","CRE","W","decl","UPDATE","INS","with"],"1239":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","create"],"1240":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1241":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl","W",";"],"1242":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","create",";"],"1243":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1244":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$","create","decl"],"1245":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"1246":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select","INS"],"1247":["SELECT","SELECT","select","DEC","UPDATE","CRE","decl","INS","W",";"],"1248":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1249":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"1250":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1251":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1252":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","decl","create",";"],"1253":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"1254":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1255":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","Select","decl","INS"],"1256":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl","W",";"],"1257":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1258":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create",";"],"1259":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1260":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1261":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1262":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"1263":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1264":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1265":["SELECT","SELECT","CRE","DEC","INS","UPDATE","select","decl","create","W"],"1266":["SELECT","SELECT","select","DEC","W","CRE","UPDATE","INS","decl","Select"],"1267":["SELECT","SELECT","select","DEC","INS","CRE","UPDATE","decl","W",";"],"1268":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1269":["SELECT","SELECT","select","DEC","CRE","INS","decl","W","UPDATE",";"],"1270":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1271":["SELECT","SELECT","select","DEC","CRE","W","decl","UPDATE","Select",";"],"1272":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1273":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","create"],"1274":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1275":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","W","decl",";"],"1276":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1277":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1278":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"1279":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","$"],"1280":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1281":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create","W"],"1282":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1283":["SELECT","SELECT","CRE","DEC","select","UPDATE","INS","decl","create","W"],"1284":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1285":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","INS","Select"],"1286":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1287":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","Select","INS","decl"],"1288":["SELECT","SELECT","UPDATE","select","DEC","INS","CRE","update","decl",";"],"1289":["SELECT","SELECT","CRE","UPDATE","select","DEC","INS","decl","create","update"],"1290":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$","create","decl"],"1291":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1292":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","$"],"1293":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","WHERE"],"1294":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1295":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1296":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1297":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1298":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"1299":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"1300":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W",";","decl"],"1301":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"1302":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create","W"],"1303":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1304":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","INS","Select"],"1305":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create","W"],"1306":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","W","INS","decl"],"1307":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W",";","decl"],"1308":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"1309":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1310":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1311":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","Select"],"1312":["SELECT","SELECT","CRE","UPDATE","DEC","select","INS","decl","create","W"],"1313":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","create","W"],"1314":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"1315":["SELECT","SELECT","select","CRE","INS","DEC","UPDATE","decl",";","create"],"1316":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"1317":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","W",";"],"1318":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1319":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1320":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1321":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"1322":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1323":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"1324":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","create"],"1325":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","update","W"],"1326":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1327":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1328":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1329":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"1330":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1331":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1332":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W","decl"],"1333":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","decl",";","$"],"1334":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"1335":["SELECT","SELECT","select","CRE","UPDATE","DEC","INS","decl","create","update"],"1336":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1337":["SELECT","SELECT","select","CRE","DEC","UPDATE","decl","INS","create",";"],"1338":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","decl",";"],"1339":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1340":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1341":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1342":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select",";"],"1343":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"1344":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1345":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1346":["SELECT","SELECT","select","DEC","CRE","decl","INS","W","UPDATE",";"],"1347":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","decl","create","W"],"1348":["SELECT","SELECT","select","DEC","INS","CRE","UPDATE","decl","W",";"],"1349":["SELECT","SELECT","CRE","DEC","INS","select","UPDATE","decl","create","W"],"1350":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1351":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","with"],"1352":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1353":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl",";"],"1354":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","W"],"1355":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W",";"],"1356":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1357":["SELECT","SELECT","CRE","DEC","INS","select","UPDATE","decl","create",";"],"1358":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl",";","create"],"1359":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","decl","W"],"1360":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"1361":["SELECT","SELECT","DEC","select","CRE","UPDATE","decl","INS","W",";"],"1362":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","create"],"1363":["SELECT","SELECT","select","DEC","CRE","decl","UPDATE","INS","W",";"],"1364":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1365":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select",";","W","decl"],"1366":["SELECT","SELECT","select","DEC","decl","W","CRE","UPDATE","Select",";"],"1367":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1368":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create",";"],"1369":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1370":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select",";"],"1371":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1372":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"1373":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create","W"],"1374":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1375":["SELECT","SELECT","UPDATE","select","CRE","DEC","INS","decl","update","W"],"1376":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1377":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create",";"],"1378":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1379":["SELECT","SELECT","CRE","select","UPDATE","DEC","INS","create","decl",";"],"1380":["SELECT","SELECT","select","DEC","W","Select","decl","CRE",";","INS"],"1381":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","decl","INS"],"1382":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1383":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl",";","create"],"1384":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","create"],"1385":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","$"],"1386":["SELECT","SELECT","select","CRE","UPDATE","DEC","INS","decl","create",";"],"1387":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"1388":["SELECT","SELECT","UPDATE","DEC","select","CRE","INS","decl","update","W"],"1389":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1390":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","INS","Select"],"1391":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE",";","W"],"1392":["SELECT","SELECT","DEC","select","UPDATE","CRE","INS","decl","W",";"],"1393":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1394":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","create","decl","W"],"1395":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1396":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS","Select"],"1397":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1398":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1399":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W","decl"],"1400":["SELECT","SELECT","DEC","select","UPDATE","CRE","INS","decl",";","W"],"1401":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1402":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","create","decl",";"],"1403":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","decl","INS","with"],"1404":["SELECT","SELECT","select","DEC","CRE","decl","W","UPDATE","INS","Select"],"1405":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1406":["SELECT","SELECT","DEC","CRE","select","UPDATE","INS","decl",";","create"],"1407":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"1408":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","create"],"1409":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1410":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$","decl","create"],"1411":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","decl","INS","Select"],"1412":["SELECT","SELECT","select","DEC","W","UPDATE","decl","CRE","INS",";"],"1413":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1414":["SELECT","SELECT","select","DEC","UPDATE","CRE","Select","INS","W","decl"],"1415":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"1416":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1417":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","decl","create","AL"],"1418":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1419":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1420":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1421":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"1422":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1423":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1424":["SELECT","SELECT","DEC","CRE","select","UPDATE","INS","decl",";","W"],"1425":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select","INS"],"1426":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","INS","W","decl"],"1427":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"1428":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1429":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"1430":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1431":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl",";","W"],"1432":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"1433":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl","create","W"],"1434":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","decl","create","W"],"1435":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","Select"],"1436":["SELECT","SELECT","CRE","select","INS","DEC","UPDATE","create","$","decl"],"1437":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"1438":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","decl",";","create"],"1439":["SELECT","SELECT","select","CRE","DEC","$","UPDATE","create","decl","INS"],"1440":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"1441":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1442":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"1443":["SELECT","SELECT","select","DEC","INS","CRE","UPDATE","decl","W",";"],"1444":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W","create"],"1445":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"1446":["SELECT","SELECT","CRE","select","INS","DEC","UPDATE","decl","create",";"],"1447":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1448":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1449":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W",";","INS"],"1450":["SELECT","SELECT","DEC","CRE","UPDATE","select","INS","decl",";","W"],"1451":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1452":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1453":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"1454":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1455":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1456":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1457":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1458":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1459":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W","update"],"1460":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"1461":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1462":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"1463":["SELECT","SELECT","select","CRE","INS","DEC","UPDATE","create","decl",";"],"1464":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","Select","decl","INS"],"1465":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1466":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create","W"],"1467":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W",";","decl"],"1468":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1469":["SELECT","SELECT","DEC","select","CRE","INS","decl","UPDATE","W",";"],"1470":["SELECT","SELECT","select","CRE","DEC","UPDATE","decl","INS","create",";"],"1471":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","WHERE"],"1472":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W",";","decl"],"1473":["SELECT","SELECT","CRE","select","DEC","INS","create","decl","UPDATE",";"],"1474":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1475":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1476":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"1477":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1478":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","Select","INS","decl"],"1479":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1480":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1481":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1482":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1483":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"1484":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","W","create"],"1485":["SELECT","SELECT","select","DEC","CRE","INS","decl","W","UPDATE",";"],"1486":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","WHERE","decl"],"1487":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1488":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","INS","decl"],"1489":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","decl","create","W"],"1490":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1491":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"1492":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","create"],"1493":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1494":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1495":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1496":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1497":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1498":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1499":["SELECT","SELECT","select","DEC","UPDATE","INS","CRE","decl","W",";"],"1500":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1501":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1502":["SELECT","SELECT","select","DEC","UPDATE","CRE","decl","W","INS",";"],"1503":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1504":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1505":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1506":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1507":["SELECT","SELECT","select","INS","CRE","UPDATE","DEC","create","decl",";"],"1508":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","with"],"1509":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1510":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1511":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl",";"],"1512":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1513":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1514":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE",";","W"],"1515":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","create"],"1516":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"1517":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1518":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","decl","W"],"1519":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","INS","W","decl"],"1520":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"1521":["SELECT","SELECT","select","CRE","DEC","var","$","UPDATE",";"," "],"1522":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"1523":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","$",";"],"1524":["SELECT","SELECT","select","DEC","Select","W","CRE","UPDATE","INS","decl"],"1525":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"1526":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1527":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W",";"],"1528":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1529":["SELECT","SELECT","DEC","select","CRE","UPDATE","decl","INS","W",";"],"1530":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1531":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"1532":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1533":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","with"],"1534":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1535":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","create",";"],"1536":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1537":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1538":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"1539":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"1540":["SELECT","SELECT","select","UPDATE","CRE","DEC","INS","decl","W",";"],"1541":["SELECT","SELECT","select","DEC","CRE","INS","W","UPDATE","decl","Select"],"1542":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"1543":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1544":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"1545":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1546":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","$"],"1547":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1548":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1549":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"1550":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create","W"],"1551":["SELECT","SELECT","select","CRE","UPDATE","INS","DEC","create","decl","$"],"1552":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1553":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1554":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"1555":["SELECT","SELECT","DEC","select","CRE","UPDATE","decl","W","INS",";"],"1556":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","Select"],"1557":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1558":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl",";","W"],"1559":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1560":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select",";"],"1561":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"1562":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl",";","W"],"1563":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"1564":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1565":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","create","decl",";"],"1566":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1567":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1568":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"1569":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W",";"],"1570":["SELECT","SELECT","select","CRE","UPDATE","DEC","INS","decl","create","W"],"1571":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","create","W"],"1572":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1573":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W","decl"],"1574":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","W",";"],"1575":["SELECT","SELECT","select","UPDATE","CRE","DEC","INS","decl","update",";"],"1576":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W","update"],"1577":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1578":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS","Select"],"1579":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","create"],"1580":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"1581":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","with"],"1582":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE","W",";"],"1583":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1584":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","W",";"],"1585":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"1586":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create","$"],"1587":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","INS","W","decl"],"1588":["SELECT","SELECT","DEC","select","CRE","decl","W","UPDATE","INS",";"],"1589":["SELECT","SELECT","select","DEC","UPDATE","INS","CRE","W","decl",";"],"1590":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"1591":["SELECT","SELECT","CRE","DEC","select","UPDATE","INS","decl","create","W"],"1592":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1593":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"1594":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1595":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1596":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","W"],"1597":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","create","decl","W"],"1598":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1599":["SELECT","SELECT","UPDATE","CRE","DEC","select","INS","decl",";","W"],"1600":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create",";"],"1601":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1602":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","$"],"1603":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS",";"],"1604":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1605":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1606":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1607":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","create"],"1608":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1609":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1610":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1611":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1612":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","INS","with"],"1613":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1614":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1615":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1616":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1617":["SELECT","SELECT","DEC","CRE","select","UPDATE","INS","decl","W",";"],"1618":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"1619":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1620":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1621":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"1622":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1623":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","with"],"1624":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"1625":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"1626":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","Select"],"1627":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1628":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1629":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1630":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1631":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"1632":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1633":["SELECT","SELECT","DEC","CRE","INS","select","UPDATE","decl",";","create"],"1634":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","with"],"1635":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"1636":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"1637":["SELECT","SELECT","select","DEC","W","CRE","UPDATE","decl","Select",";"],"1638":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl",";","create"],"1639":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"1640":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1641":["SELECT","SELECT","select","DEC","UPDATE","INS","CRE","W","decl",";"],"1642":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"1643":["SELECT","SELECT","DEC","select","CRE","INS","decl","UPDATE",";","W"],"1644":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1645":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"1646":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE","W",";"],"1647":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","decl","$"],"1648":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1649":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","W","decl","create"],"1650":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"1651":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1652":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"1653":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1654":["SELECT","SELECT","select","DEC","UPDATE","CRE","W",";","INS","decl"],"1655":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1656":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1657":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","W","create"],"1658":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1659":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1660":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","create",";"],"1661":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1662":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","decl","W"],"1663":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1664":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","create","W"],"1665":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1666":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1667":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"1668":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1669":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1670":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","create","decl","$"],"1671":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1672":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1673":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","create"],"1674":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1675":["SELECT","SELECT","DEC","CRE","select","INS","decl","UPDATE","create","W"],"1676":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1677":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl",";","INS"],"1678":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1679":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS",";","decl","$"],"1680":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1681":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1682":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create","W"],"1683":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","Select","decl","INS"],"1684":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"1685":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS",";"],"1686":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1687":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1688":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1689":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","create","decl",";"],"1690":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1691":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1692":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","create"],"1693":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1694":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1695":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1696":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1697":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1698":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1699":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"1700":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1701":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1702":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1703":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1704":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","WHERE"],"1705":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1706":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"1707":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1708":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"1709":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"1710":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1711":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"1712":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"1713":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1714":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1715":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1716":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"1717":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","create"],"1718":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","W"],"1719":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1720":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1721":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1722":["SELECT","SELECT","select","CRE","UPDATE","DEC","INS","W","decl","create"],"1723":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","WHERE"],"1724":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl","Select"],"1725":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"1726":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1727":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"1728":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1729":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1730":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1731":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1732":["SELECT","SELECT","select","DEC","W","CRE","UPDATE","INS","Select","decl"],"1733":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1734":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1735":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1736":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","create"],"1737":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","INS","with"],"1738":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1739":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1740":["SELECT","SELECT","select","DEC","CRE","INS","decl","W","UPDATE",";"],"1741":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1742":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","W",";"],"1743":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select","INS"],"1744":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1745":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","decl",";"],"1746":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"1747":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","WHERE"],"1748":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"1749":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W","decl"],"1750":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W","DE"],"1751":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1752":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1753":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1754":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select",";"],"1755":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1756":["SELECT","SELECT","CRE","DEC","INS","select","UPDATE","decl","create","W"],"1757":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1758":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","create"],"1759":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"1760":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1761":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"1762":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1763":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1764":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","create","decl","W"],"1765":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1766":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1767":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"1768":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1769":["SELECT","SELECT","select","CRE","UPDATE","DEC","INS","decl","W",";"],"1770":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"1771":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1772":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"1773":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1774":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE","W",";"],"1775":["SELECT","SELECT","select","DEC","W","CRE","decl","INS","UPDATE",";"],"1776":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1777":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1778":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"1779":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"1780":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1781":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1782":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1783":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"1784":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1785":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"1786":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","with"],"1787":["SELECT","SELECT","select","DEC","CRE","decl","W","UPDATE","INS","with"],"1788":["SELECT","SELECT","select","DEC","W","CRE","UPDATE","INS","decl","Select"],"1789":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1790":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1791":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"1792":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"1793":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1794":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create",";"],"1795":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1796":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1797":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1798":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","create"],"1799":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1800":["SELECT","SELECT","select","DEC","W","CRE","UPDATE","INS","decl","Select"],"1801":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1802":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","Select"],"1803":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"1804":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"1805":["SELECT","SELECT","DEC","select","UPDATE","CRE","INS","decl","W",";"],"1806":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1807":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1808":["SELECT","SELECT","INS","select","CRE","DEC","UPDATE","decl",";","create"],"1809":["SELECT","SELECT","DEC","select","CRE","INS","decl","UPDATE",";","W"],"1810":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1811":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1812":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1813":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","create","W"],"1814":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1815":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"1816":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"1817":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1818":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1819":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"1820":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","create","decl","W"],"1821":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"1822":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE","W",";"],"1823":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"1824":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","create"],"1825":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","create"],"1826":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1827":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1828":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1829":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1830":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1831":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl","Select"],"1832":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl",";"],"1833":["SELECT","SELECT","select","DEC","CRE","decl","INS","UPDATE","W",";"],"1834":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1835":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1836":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1837":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select","INS"],"1838":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1839":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1840":["SELECT","SELECT","select","DEC","CRE","W","INS","UPDATE","decl","Select"],"1841":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl",";","create"],"1842":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1843":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1844":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1845":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1846":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"1847":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1848":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1849":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1850":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"1851":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1852":["SELECT","SELECT","select","DEC","W","CRE","UPDATE","Select","decl",";"],"1853":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"1854":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1855":["SELECT","SELECT","CRE","select","INS","UPDATE","DEC","decl","create",";"],"1856":["SELECT","SELECT","CRE","UPDATE","DEC","select","INS","decl","create","update"],"1857":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1858":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1859":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1860":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W","create"],"1861":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"1862":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1863":["SELECT","SELECT","DEC","CRE","select","INS","decl","UPDATE",";","W"],"1864":["SELECT","SELECT","UPDATE","select","INS","CRE","DEC","update","decl","create"],"1865":["SELECT","SELECT","select","INS","UPDATE","CRE","DEC","decl","create",";"],"1866":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1867":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"1868":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1869":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1870":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl",";","W"],"1871":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1872":["SELECT","SELECT","select","DEC","UPDATE","CRE","Select","INS","W","decl"],"1873":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1874":["SELECT","SELECT","select","DEC","W","CRE","Select","UPDATE","decl","INS"],"1875":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1876":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1877":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W","decl"],"1878":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1879":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"1880":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","W","INS"," "],"1881":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1882":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"1883":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"1884":["SELECT","SELECT","UPDATE","select","INS","CRE","DEC","update","decl",";"],"1885":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1886":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1887":["SELECT","SELECT","DEC","select","CRE","INS","decl","UPDATE",";","W"],"1888":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","W",";"],"1889":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1890":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1891":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"1892":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create","AL"],"1893":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1894":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","create","decl","AL"],"1895":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","WHERE"],"1896":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1897":["SELECT","SELECT","DEC","UPDATE","select","CRE","INS","decl","W",";"],"1898":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"1899":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","create"],"1900":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1901":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1902":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"1903":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1904":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1905":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1906":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create",";"],"1907":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1908":["SELECT","SELECT","select","DEC","INS","CRE","UPDATE","decl",";","W"],"1909":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","decl","W"],"1910":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1911":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"1912":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","create"],"1913":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1914":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"1915":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1916":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","create","decl",";"],"1917":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl",";","Select"],"1918":["SELECT","SELECT","UPDATE","select","CRE","DEC","INS","update","decl",";"],"1919":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"1920":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1921":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1922":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1923":["SELECT","SELECT","CRE","DEC","select","UPDATE","INS","decl","create","W"],"1924":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1925":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"1926":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1927":["SELECT","SELECT","select","DEC","UPDATE","W","CRE","Select","INS","decl"],"1928":["SELECT","SELECT","select","DEC","W","CRE","UPDATE","decl","Select","INS"],"1929":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"1930":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1931":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","create"],"1932":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1933":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"1934":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W","create"],"1935":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1936":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select","INS"],"1937":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1938":["SELECT","SELECT","select","DEC","UPDATE","INS","CRE","decl","W",";"],"1939":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1940":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1941":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1942":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1943":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","W",";"],"1944":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"1945":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"1946":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1947":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","decl","INS","Select"],"1948":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1949":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1950":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","Select","decl"],"1951":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1952":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1953":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create",";"],"1954":["SELECT","SELECT","CRE","DEC","INS","select","UPDATE","decl","create",";"],"1955":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"1956":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1957":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","WHERE"],"1958":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1959":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"1960":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","create","decl","W"],"1961":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"1962":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1963":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1964":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","create","decl",";"],"1965":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"1966":["SELECT","SELECT","CRE","DEC","select","UPDATE","INS","decl","create","W"],"1967":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1968":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"1969":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$","decl",";"],"1970":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","$","decl","create"],"1971":["SELECT","SELECT","DEC","select","CRE","UPDATE","decl","INS","W",";"],"1972":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1973":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1974":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1975":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE","W",";"],"1976":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"1977":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"1978":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1979":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"1980":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1981":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"1982":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"1983":["SELECT","SELECT","select","UPDATE","CRE","INS","DEC","decl","create","W"],"1984":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W","create"],"1985":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","W","decl",";"],"1986":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1987":["SELECT","SELECT","CRE","DEC","UPDATE","INS","select","decl","create",";"],"1988":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"1989":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","update","W"],"1990":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"1991":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","create",";"],"1992":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"1993":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl",";","W"],"1994":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"1995":["SELECT","SELECT","select","CRE","DEC","var","$","UPDATE",";"," "],"1996":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"1997":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create","W"],"1998":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W","create"],"1999":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","create","decl",";"],"2000":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2001":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"2002":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl",";","W"],"2003":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl",";","W"],"2004":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"2005":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"2006":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl",";","W"],"2007":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"2008":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"2009":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2010":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2011":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create",";"],"2012":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2013":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2014":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","create","W"],"2015":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2016":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2017":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"2018":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2019":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"2020":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$",";","decl"],"2021":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"2022":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2023":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2024":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2025":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2026":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS","Select"],"2027":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"2028":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","W","create"],"2029":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2030":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2031":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2032":["SELECT","SELECT","select","DEC","W","CRE","UPDATE","decl","INS","Select"],"2033":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W",";","decl"],"2034":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2035":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"2036":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2037":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2038":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"2039":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","decl","create","W"],"2040":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","W"],"2041":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"2042":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2043":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl",";"],"2044":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"2045":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"2046":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","Select","INS","decl"],"2047":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2048":["SELECT","SELECT","UPDATE","CRE","select","DEC","INS","update","decl","W"],"2049":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2050":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create","W"],"2051":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2052":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2053":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"2054":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"2055":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","$","create","decl"],"2056":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2057":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"2058":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2059":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2060":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"2061":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","create"],"2062":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2063":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","create"],"2064":["SELECT","SELECT","UPDATE","DEC","select","CRE","INS","decl","W",";"],"2065":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2066":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","W","decl",";"],"2067":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","with"],"2068":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","W","decl","create"],"2069":["SELECT","SELECT","CRE","INS","select","DEC","UPDATE","decl","create",";"],"2070":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"2071":["SELECT","SELECT","select","UPDATE","CRE","INS","DEC","decl","DE","W"],"2072":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","W",";"],"2073":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","$"],"2074":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"2075":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"2076":["SELECT","SELECT","select","DEC","UPDATE","INS","CRE","W","decl",";"],"2077":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","with"],"2078":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","INS","decl"],"2079":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"2080":["SELECT","SELECT","DEC","select","CRE","decl","INS","UPDATE","W",";"],"2081":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W",";","decl"],"2082":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2083":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS",";"],"2084":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2085":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"2086":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"2087":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl",";","W"],"2088":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2089":["SELECT","SELECT","DEC","select","CRE","UPDATE","decl","INS","W",";"],"2090":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"2091":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2092":["SELECT","SELECT","DEC","select","CRE","UPDATE","decl","INS","W",";"],"2093":["SELECT","SELECT","DEC","select","CRE","UPDATE","decl","INS","W",";"],"2094":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2095":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2096":["SELECT","SELECT","select","CRE","UPDATE","DEC","INS","decl","W",";"],"2097":["SELECT","SELECT","DEC","CRE","select","UPDATE","INS","decl",";","create"],"2098":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2099":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2100":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2101":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE","create",";"],"2102":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"2103":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl",";"],"2104":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2105":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"2106":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","create","W"],"2107":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2108":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W","decl"],"2109":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2110":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"2111":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"2112":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2113":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2114":["SELECT","SELECT","CRE","select","INS","DEC","UPDATE","create","decl",";"],"2115":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2116":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"2117":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl","W","create"],"2118":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"2119":["SELECT","SELECT","CRE","select","INS","DEC","UPDATE","create","decl",";"],"2120":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select",";"],"2121":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","decl","create",";"],"2122":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2123":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2124":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2125":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","Select","decl"],"2126":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","INS","decl"],"2127":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl",";","create"],"2128":["SELECT","SELECT","DEC","select","CRE","INS","decl","UPDATE","W",";"],"2129":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2130":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2131":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2132":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2133":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2134":["SELECT","SELECT","CRE","DEC","UPDATE","select","INS","decl","create","AL"],"2135":["SELECT","SELECT","INS","UPDATE","select","CRE","DEC","decl","update","create"],"2136":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2137":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl","W",";"],"2138":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"2139":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update",";"],"2140":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2141":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2142":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2143":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2144":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2145":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"2146":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2147":["SELECT","SELECT","select","DEC","CRE","INS","decl","W","UPDATE",";"],"2148":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"2149":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"2150":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2151":["SELECT","SELECT","select","DEC","CRE","decl","INS","UPDATE",";","W"],"2152":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2153":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2154":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"2155":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","WHERE"],"2156":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"2157":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl",";"],"2158":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","decl",";"],"2159":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2160":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"2161":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2162":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"2163":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2164":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2165":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","$"],"2166":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2167":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","with"],"2168":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2169":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2170":["SELECT","SELECT","select","INS","DEC","UPDATE","CRE","decl","W",";"],"2171":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","create"],"2172":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2173":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2174":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","Select","decl"],"2175":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"2176":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"2177":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2178":["SELECT","SELECT","select","CRE","UPDATE","INS","DEC","create","decl",";"],"2179":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"2180":["SELECT","SELECT","select","DEC","UPDATE","CRE","Select","INS","W","decl"],"2181":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"2182":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"2183":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS",";"],"2184":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2185":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2186":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2187":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2188":["SELECT","SELECT","select","DEC","UPDATE","CRE","Select","W","INS"," "],"2189":["SELECT","SELECT","select","INS","UPDATE","CRE","DEC","decl","create",";"],"2190":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2191":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","W","update"],"2192":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create",";"],"2193":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2194":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2195":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2196":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2197":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2198":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","W","create"],"2199":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2200":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","Select"],"2201":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select",";"],"2202":["SELECT","SELECT","DEC","select","UPDATE","CRE","INS","decl",";","W"],"2203":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2204":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"2205":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W","update"],"2206":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W","decl"],"2207":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"2208":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2209":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","Select","INS"],"2210":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","create"],"2211":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2212":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"2213":["SELECT","SELECT","CRE","UPDATE","select","DEC","INS","create","decl","update"],"2214":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2215":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2216":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"2217":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2218":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","W"],"2219":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"2220":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2221":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2222":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","W",";"],"2223":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2224":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create",";"],"2225":["SELECT","SELECT","DEC","UPDATE","select","CRE","INS","decl","W",";"],"2226":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","W"],"2227":["SELECT","SELECT","UPDATE","select","DEC","INS","CRE","update","decl",";"],"2228":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2229":["SELECT","SELECT","select","DEC","W","CRE","decl","UPDATE",";","Select"],"2230":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl",";","Select"],"2231":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE",";","create"],"2232":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W",";","decl"],"2233":["SELECT","SELECT","select","DEC","W","CRE","UPDATE","INS","Select","decl"],"2234":["SELECT","SELECT","DEC","select","INS","CRE","UPDATE","decl","W",";"],"2235":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2236":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"2237":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2238":["SELECT","SELECT","select","DEC","CRE","Select","UPDATE","W","decl",";"],"2239":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2240":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2241":["SELECT","SELECT","UPDATE","CRE","DEC","select","INS","decl","update","create"],"2242":["SELECT","SELECT","DEC","select","CRE","decl","INS","UPDATE",";","W"],"2243":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2244":["SELECT","SELECT","CRE","DEC","select","INS","decl","UPDATE",";","create"],"2245":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2246":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2247":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"2248":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update","W"],"2249":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"2250":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE","W",";"],"2251":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2252":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","INS","Select"],"2253":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"2254":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2255":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","create","decl","$"],"2256":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","WHERE"],"2257":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"2258":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2259":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"2260":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2261":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl",";","W"],"2262":["SELECT","SELECT","UPDATE","CRE","select","INS","DEC","create","update","decl"],"2263":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","W","create"],"2264":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","Select","INS","decl"],"2265":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","Select"],"2266":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"2267":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W","WHERE"],"2268":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$","decl",";"],"2269":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2270":["SELECT","SELECT","UPDATE","INS","CRE","select","DEC","create","decl","update"],"2271":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2272":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","create"],"2273":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","with"],"2274":["SELECT","SELECT","CRE","INS","UPDATE","DEC","select","decl","create","W"],"2275":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"2276":["SELECT","SELECT","DEC","select","CRE","decl","UPDATE","W","INS",";"],"2277":["SELECT","SELECT","DEC","CRE","select","UPDATE","INS","decl",";","W"],"2278":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"2279":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"2280":["SELECT","SELECT","select","DEC","UPDATE","INS","CRE","W","Select",";"],"2281":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2282":["SELECT","SELECT","UPDATE","INS","select","DEC","CRE","decl","update","W"],"2283":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"2284":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2285":["SELECT","SELECT","select","DEC","W","Select","CRE","UPDATE","decl",";"],"2286":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"2287":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS",";","decl","W"],"2288":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2289":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"2290":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"2291":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl","Select"],"2292":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2293":["SELECT","SELECT","UPDATE","CRE","DEC","select","INS","decl","W","create"],"2294":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create",";"],"2295":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","W",";"],"2296":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"2297":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"2298":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl","W",";"],"2299":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","$",";"],"2300":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2301":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl","W",";"],"2302":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","INS","decl","Select"],"2303":["SELECT","SELECT","DEC","select","CRE","decl","UPDATE","W","INS",";"],"2304":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2305":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2306":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl","Select"],"2307":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2308":["SELECT","SELECT","CRE","DEC","select","UPDATE","INS","decl","W","create"],"2309":["SELECT","SELECT","CRE","select","UPDATE","INS","DEC","create","decl","AL"],"2310":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"2311":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl",";","create"],"2312":["SELECT","SELECT","select","CRE","UPDATE","DEC","INS","decl",";","W"],"2313":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"2314":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl",";","create"],"2315":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2316":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2317":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl","W",";"],"2318":["SELECT","SELECT","select","CRE","DEC","UPDATE","$","INS","create",";"],"2319":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"2320":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2321":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2322":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","$","create","decl"],"2323":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","Select","INS","decl"],"2324":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","Select"],"2325":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl",";","W"],"2326":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","decl","create",";"],"2327":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","decl","W",";"],"2328":["SELECT","SELECT","select","DEC","CRE","INS","decl","UPDATE","W",";"],"2329":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"2330":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2331":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2332":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2333":["SELECT","SELECT","select","INS","DEC","CRE","UPDATE","decl","W",";"],"2334":["SELECT","SELECT","select","DEC","UPDATE","W","Select","CRE","INS"," "],"2335":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update",";"],"2336":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2337":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2338":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2339":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","create","W"],"2340":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2341":["SELECT","SELECT","DEC","select","CRE","UPDATE","decl","INS","W",";"],"2342":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","create","W"],"2343":["SELECT","SELECT","DEC","CRE","select","UPDATE","INS","decl",";","W"],"2344":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2345":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2346":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","W","INS","decl"],"2347":["SELECT","SELECT","CRE","DEC","INS","select","UPDATE","decl","create","W"],"2348":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"2349":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"2350":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2351":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","INS","decl","Select"],"2352":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","with"],"2353":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"2354":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","WHERE"],"2355":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2356":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2357":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"2358":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2359":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"2360":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W","create"],"2361":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","Select"],"2362":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2363":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2364":["SELECT","SELECT","UPDATE","select","DEC","CRE","INS","decl","update",";"],"2365":["SELECT","SELECT","UPDATE","CRE","DEC","INS","select","decl","update","create"],"2366":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select",";"],"2367":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","decl","create",";"],"2368":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2369":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2370":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"2371":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","$",";"],"2372":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"2373":["SELECT","SELECT","DEC","select","CRE","INS","UPDATE","decl",";","W"],"2374":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"2375":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2376":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2377":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2378":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","W","INS",";"],"2379":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2380":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"2381":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"2382":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"2383":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2384":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","W"],"2385":["SELECT","SELECT","DEC","select","CRE","decl","UPDATE","INS",";","W"],"2386":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl",";","W"],"2387":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl",";","$"],"2388":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2389":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","Select"],"2390":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"2391":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","decl","create",";"],"2392":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","W","decl",";"],"2393":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2394":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2395":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create","W"],"2396":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2397":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2398":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2399":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2400":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2401":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2402":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2403":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl","W","create"],"2404":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2405":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2406":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","INS","W","decl"],"2407":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2408":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","WHERE"],"2409":["SELECT","SELECT","select","DEC","UPDATE","W","CRE","INS","decl","Select"],"2410":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2411":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2412":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2413":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","W","INS",";"],"2414":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2415":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2416":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select",";"],"2417":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2418":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2419":["SELECT","SELECT","select","CRE","DEC","INS","decl","UPDATE","create",";"],"2420":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"2421":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","with"],"2422":["SELECT","SELECT","DEC","CRE","select","INS","UPDATE","decl",";","create"],"2423":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2424":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"2425":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"2426":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2427":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","create","$","decl"],"2428":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2429":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2430":["SELECT","SELECT","select","DEC","UPDATE","CRE","W","INS","decl","Select"],"2431":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"2432":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"2433":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2434":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2435":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2436":["SELECT","SELECT","select","DEC","UPDATE","INS","CRE","decl","W",";"],"2437":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl",";"],"2438":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","decl","create","AL"],"2439":["SELECT","SELECT","CRE","DEC","INS","select","UPDATE","decl","create",";"],"2440":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2441":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"2442":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2443":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"2444":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2445":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"2446":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2447":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2448":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2449":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2450":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2451":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"2452":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W","Select"],"2453":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS",";"],"2454":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2455":["SELECT","SELECT","CRE","DEC","select","INS","UPDATE","decl",";","create"],"2456":["SELECT","SELECT","select","UPDATE","DEC","CRE","INS","decl","W",";"],"2457":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","Select","W","decl"],"2458":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2459":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","Select","decl"],"2460":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2461":["SELECT","SELECT","DEC","select","CRE","UPDATE","INS","decl",";","W"],"2462":["SELECT","SELECT","select","DEC","CRE","UPDATE","decl","INS","W",";"],"2463":["SELECT","SELECT","UPDATE","select","CRE","INS","DEC","update","decl",";"],"2464":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2465":["SELECT","SELECT","select","DEC","W","decl","Select","CRE","UPDATE",";"],"2466":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2467":["SELECT","SELECT","select","DEC","CRE","W","UPDATE","decl","Select","INS"],"2468":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2469":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2470":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2471":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W",";"],"2472":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","create","W"],"2473":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","create",";"],"2474":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","Select","W","decl"],"2475":["SELECT","SELECT","select","DEC","CRE","UPDATE","Select","INS","W","decl"],"2476":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl",";","create"],"2477":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","W",";"],"2478":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2479":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2480":["SELECT","SELECT","DEC","select","CRE","INS","decl","UPDATE",";","W"],"2481":["SELECT","SELECT","select","DEC","CRE","UPDATE","W","decl","INS","Select"],"2482":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"2483":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2484":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2485":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2486":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","W","decl",";"],"2487":["SELECT","SELECT","select","CRE","DEC","INS","UPDATE","decl","create",";"],"2488":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create",";"],"2489":["SELECT","SELECT","select","CRE","DEC","UPDATE","INS","decl","create","W"],"2490":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2491":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl","W",";"],"2492":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","decl","W","create"],"2493":["SELECT","SELECT","select","DEC","CRE","INS","UPDATE","decl",";","W"],"2494":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl",";"],"2495":["SELECT","SELECT","CRE","select","DEC","INS","UPDATE","create","decl","$"],"2496":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","Select","decl"],"2497":["SELECT","SELECT","select","DEC","CRE","UPDATE","INS","W","decl","Select"],"2498":["SELECT","SELECT","select","DEC","UPDATE","CRE","INS","W","decl","Select"],"2499":["SELECT","SELECT","CRE","select","DEC","UPDATE","INS","decl","create","W"]},"actual_codes":{"0":"select max(id), parent from tree group by parent;\n","1":"CREATE GLOBAL TEMPORARY TABLE comments ON COMMIT PRESERVE ROWS \n    AS SELECT * FROM test@db;\n\nSELECT INTO TEST(ID, NAME,DESCRIPTION, COMMENT)\nSELECT ID, NAME, \n       dbms_lob.substr(description, 4000, 1), \n       dbms_lob.substr(description, 4000, 1)\n  FROM comments;\n","2":"UPDATE categories SET code = CONCAT(code, '_standard') WHERE id = 1;\n","3":"select * from user where id=100 limit 1\n","4":"var queryUsers = dc.lkUsers.Where(p => p.UserID == userId);\nvar queryLinks = dc.lkDeptLinks.Where(p => queryUsers.ref.Any(x=>x== p));\nvar queryDept = dc.lkDepts.Where(p => queryLinks.deptid.Any(x=> x == p.deptid));\nreturn  queryDept\n        .Select(x=>new {ID = x.deptId, Name = x.deptName, Detail = x.Detail})\n        .ToList();\n","5":"IF @dbnum = 1\n    USE Db1;\nELSE\n    USE DefaultDb;\n","6":"SELECT A.name, A.regionID, b.Name\nFROM countries A\n   Join regions B \n      on B.id = A.RegionId\nORDER BY A.name ASC\n","7":"SELECT a.*\nFROM   Article AS a\nJOIN  (\n    SELECT article_id\n    FROM   Comment\n    GROUP  BY article_id\n    ORDER  BY count(*) DESC\n    LIMIT  10\n    ) AS c ON c.article_id = a.id;\n","8":"SELECT \n   (SELECT Max(StartDate) FROM myTable WHERE phName = \"Name\") as MaxDate, \n   id, name , phName , startDate, endDate\nFROM myTable\nWHERE phName = \"Name\"\n","9":"INSERT INTO match VALUES(1001, TO_DATE('20130515', 'YYYYMMDD'), 90000, 'American Airlines Arena', 001);\n","10":"- (void)resetDateFilters {\n    self.dateMinSetFilter = [NSDate distantPast];\n    self.dateMaxSetFilter = [NSDate distantFuture];\n\n    \/\/ destroy the FRC here, delete cache if necessary\n}\n","11":" \/\/Clears learnDataTable:\n mDb.execSQL(\"DELETE FROM learnDataTable\");\n \/\/Insert 5 random rows from dic:\n mDb.execSQL(\"INSERT INTO learnDataTable (english, bangla) SELECT english ,bangla FROM dic ORDER BY RANDOM() LIMIT 5\");\n","12":"SET @year := 2013;\n\nSELECT\nSUM(if (CONCAT(@year, '-01') BETWEEN date_format(date_ini, '%Y-%m') AND date_format(date_expired, '%Y-%m'),i.net_insurance, 0)) Jan,\nSUM(if (CONCAT(@year, '-02') BETWEEN date_format(date_ini, '%Y-%m') AND date_format(date_expired, '%Y-%m'),i.net_insurance, 0)) Feb,\nSUM(if (CONCAT(@year, '-03') BETWEEN date_format(date_ini, '%Y-%m') AND date_format(date_expired, '%Y-%m'),i.net_insurance, 0)) Mar,\nSUM(if (CONCAT(@year, '-04') BETWEEN date_format(date_ini, '%Y-%m') AND date_format(date_expired, '%Y-%m'),i.net_insurance, 0)) Apr,\nSUM(if (CONCAT(@year, '-05') BETWEEN date_format(date_ini, '%Y-%m') AND date_format(date_expired, '%Y-%m'),i.net_insurance, 0)) May,\nSUM(if (CONCAT(@year, '-06') BETWEEN date_format(date_ini, '%Y-%m') AND date_format(date_expired, '%Y-%m'),i.net_insurance, 0)) Jun,\nSUM(if (CONCAT(@year, '-07') BETWEEN date_format(date_ini, '%Y-%m') AND date_format(date_expired, '%Y-%m'),i.net_insurance, 0)) Jul,\nSUM(if (CONCAT(@year, '-08') BETWEEN date_format(date_ini, '%Y-%m') AND date_format(date_expired, '%Y-%m'),i.net_insurance, 0)) Aug,\nSUM(if (CONCAT(@year, '-09') BETWEEN date_format(date_ini, '%Y-%m') AND date_format(date_expired, '%Y-%m'),i.net_insurance, 0)) Sep,\nSUM(if (CONCAT(@year, '-10') BETWEEN date_format(date_ini, '%Y-%m') AND date_format(date_expired, '%Y-%m'),i.net_insurance, 0)) Oct,\nSUM(if (CONCAT(@year, '-11') BETWEEN date_format(date_ini, '%Y-%m') AND date_format(date_expired, '%Y-%m'),i.net_insurance, 0)) Nov,\nSUM(if (CONCAT(@year, '-12') BETWEEN date_format(date_ini, '%Y-%m') AND date_format(date_expired, '%Y-%m'),i.net_insurance, 0)) `Dec`\n\nFROM insurances  i\nINNER JOIN policies p ON p.id = i.policy_id \nWHERE (i.initial_date >= p.date_ini\n   AND i.final_date   <= p.date_expired) \n  ;\n","13":"CREATE VIEW history_view\nAS SELECT h.id, h.name, \nmin(CASE WHEN h.code = 1 THEN time_date) AS start_date,\nmin(CASE when h.code = 2 THEN time_date) AS process_date,\nmin(CASE when h.code = 3 THEN time_date) AS finish_date\nFROM history h\ngroup by h.id, h.name;\n","14":"order by (fruit = 'Melon') desc,\n         rand()\nlimit 3;\n","15":"Select \nmin(DATEADD(HOUR,DATEDIFF (HOUR,'2011-01-01',CreateOn )\/5*5,'2011-01-01')) \n   as Start_time,\nmax(DATEADD(HOUR,(DATEDIFF (HOUR,'2011-01-01',CreateOn )\/5+1)*5,'2011-01-01')) \n   as End_Time,\nDATEDIFF (HOUR,'2011-01-01',CreateOn )\/5 as Interval_Number, \nCount(*) as _Count\nFrom Table1\nGroup By DATEDIFF (HOUR,'2011-01-01',CreateOn )\/5\n","16":"DBMS_OUTPUT.put_line('Some Message');\n","17":"CREATE TABLE #NEWTABLE\n(\n    NEW_CUST_KEY int not null ,\n    CUST_ID int not null, \n    CUST_EMAIL nvarchar(100) null   \n)\n------------------------------------\ninsert into #NEWTABLE (NEW_CUST_KEY,CUST_ID,CUST_EMAIL)\nSELECT ROW_NUMBER() OVER(ORDER BY CUST_ID, CUST_EMAIL) AS NEW_CUST_KEY, CUST_ID, CUST_EMAIL \nFROM\n(\n    SELECT CUST_ID, CUST_EMAIL\n    FROM OLDTABLE \n    GROUP BY CUST_ID, CUST_EMAIL\n) T\n\n\nUPDATE Upd SET NEW_CUST_KEY = T.NEW_CUST_KEY\nFROM #NEWTABLE Upd\njoin (\n    SELECT CUST_ID, min(NEW_CUST_KEY) AS NEW_CUST_KEY \n    FROM #NEWTABLE \n    GROUP BY CUST_ID) T\non Upd.CUST_ID = T.CUST_ID\n\nUPDATE Upd SET NEW_CUST_KEY = T.NEW_CUST_KEY\nFROM #NEWTABLE Upd\njoin (\n    SELECT CUST_EMAIL, min(NEW_CUST_KEY) AS NEW_CUST_KEY \n    FROM #NEWTABLE \n    GROUP BY CUST_EMAIL) T    \non nullif(Upd.CUST_EMAIL,'') = nullif(T.CUST_EMAIL,'')    \n\nUPDATE Upd SET NEW_CUST_KEY = T.CHANGE_CUST_KEY\nFROM #NEWTABLE Upd\njoin (\n    SELECT NEW_CUST_KEY, ROW_NUMBER() OVER(ORDER BY NEW_CUST_KEY) AS CHANGE_CUST_KEY\n    FROM #NEWTABLE \n    GROUP BY NEW_CUST_KEY) T\non Upd.NEW_CUST_KEY = T.NEW_CUST_KEY\n\nselect * from #NEWTABLE\n","18":"SELECT a.ItemID, a.Name\nFROM things a\nWHERE name IN (SELECT name FROM things WHERE itemID = 1)\n","19":"select * from Publisher \nwhere Motor COLLATE Macedonian_BIN like '%\" + ed + \"%' \";\n","20":"select\n    user_id, user_login_date,\n    row_number() over(\n        partition by user_id\n        order by user_login_date\n    ) as date_id\nfrom users\norder by user_id, date_id\n","21":"with xml_source as (select 1 id, 'xyz' val, 'y' flag\n                      from dual\n                    union all\n                    select 2, 'abc', 'y'\n                      from dual\n                    union all\n                    select 3, 'def', 'y'\n                      from dual\n                    union all\n                    select 4, 'ghi', 'y'\n                      from dual\n                    union all\n                    select 5, 'jkl', 'y'\n                      from dual\n                    union all\n                    select 6, 'mno', 'y' from dual)\n\n select xmlagg(xmlelement(TABLE_NAME, (xmlelement(TABLE_ROW, XMLATTRIBUTES(x.id AS ID), xmlforest(x.val as Value)))))\n  from xml_source x\n","22":"SELECT COUNT(sid) FROM\n(\n    SELECT sid FROM Labs LIMIT 2, 18446744073709551615\n) T1\n","23":"SELECT   DAY(`date`) AS `date`\n         SUM(CASE WHEN HOUR(`date`) BETWEEN 6 AND 12 THEN value ELSE 0 END) AS `morning`,\n         SUM(CASE WHEN HOUR(`date`) BETWEEN 12 AND 18 THEN value ELSE 0 END) AS `afternoon`,\n         SUM(CASE WHEN HOUR(`date`) < 6 OR HOUR(`date`) > 18 THEN value ELSE 0 END) AS `evening`\nFROM     my_table\nGROUP BY DAY(`date`)\n","24":"def cartest(request):\n    cars = list(Car._default_manager.filter(user__username__exact='michael')[:5])\n    first_car_name = car[0]\n    another_car = car[1]\n    return HttpResponse(len(connection.queries))\n","25":"WITH recordList\nAS\n(\n    SELECT  ID, DATE, Amt,\n            DENSE_RANK() OVER (PARTITION BY ID ORDER BY DATE ASC) rn\n    FROM    tableName\n)\nSELECT  ID, DATE, Amt\nFROM    recordList\nWHERE   rn <= 2\n","26":"(DT_WSTR,4)YEAR(DATEADD(\"dd\", - @[User::Days] , GETDATE())) + \"-\"    \n+ RIGHT(\"0\" + (DT_WSTR,2)MONTH(DATEADD(\"dd\", - @[User::Days] , GETDATE())), 2) + \"-\"\n+   RIGHT(\"0\" + (DT_WSTR,2)DAY(DATEADD(\"dd\", - @[User::Days] , GETDATE())), 2)\n","27":"SELECT trippin.PostData.Id, trippin.AccountData.username, trippin.PostData.posttext,     \n    trippin.CategoryData.categoryname, \n    SUM(CASE WHEN likes.liked = 1 THEN 1 ELSE 0 END) as TimesLiked, \n    SUM(CASE WHEN likes.liked = 0 THEN 1 ELSE 0 END) as TimesDisLiked \nFROM trippin.PostData    \nINNER JOIN trippin.AccountData ON trippin.PostData.accountid = trippin.AccountData.id\nINNER JOIN trippin.CategoryData ON trippin.CategoryData.id = trippin.PostData.categoryid\nLEFT OUTER JOIN trippin.LikesDislikesData likes ON likes.postid = trippin.PostData.id\n                    -- remove                      AND likes.accountid = trippin.AccountData.id\n\nGROUP BY trippin.PostData.Id, (trippin.AccountData.username), (trippin.PostData.posttext), (trippin.categorydata.categoryname);\n","28":"Select Cast(Dep_Gender as Char(6)) as Gender,\n    Count(1) 'Number Counted'\nFrom Dependent\nGroup By Cast(Dep_Gender as Char(6))\n","29":"with\nsrc_type_2 as (\n  select c.target_id, a.name\n    from table_c c\n    join table_a on a.id = c.source_id\n    join table_b on b.id = a.type_id\n    where b.type_name = 'Type 2'\n),\nall_type_1 as (\n  select a.id, a.name\n  from table_a a\n  join table_b on b.id = a.type_id\n  where b.type_name = 'Type 1'\n)\nselect tgt.name, src.name\n  from all_type_1 tgt\n  left join src_type_2 src on src.target_id = tgt.id\n","30":"SELECT * FROM T \nWHERE  tog = 'yes' and val in (select val from t where tog='no')\n\nUNION \n\nSELECT * FROM T \nWHERE  tog = 'no'  and val in (select val from t where tog='yes')\n","31":"SELECT  table1.FullName\n,       sub1.sum_points\n,       table3.Name\n,       sub2.sum_points\nFROM    table1\nJOIN    table3\nON      table1.ParentCustomerId = table3.AccountId\nJOIN    (\n        SELECT  Asp_SalemadebyId\n        ,       SUM(Asp_PointsAwarded) sum_points\n        FROM    table2\n        GROUP BY\n                Asp_SalemadebyId\n        ) sub1 \nON      table1.ContactId = sub1.Asp_SalemadebyId\nJOIN    (\n        SELECT  Asp_PointsAwardedToId\n        ,       SUM(Asp_PointsAwarded) sum_points\n        FROM    table4\n        GROUP BY\n                Asp_PointsAwardedToId\n        ) sub2\nON      table1.ContactId = sub2.Asp_PointsAwardedToId\nWHERE   table3.asp_mimanagerid = '10CACCBD-70A7-DD11-9C65-001EC9B77038')\n","32":"DECLARE @Sql varchar(50) = 'TEST|00000298398293|EQ5|Patient'\n\n\nSELECT\n    PARSENAME(REPLACE(@sql,'|','.'),4),\n    PARSENAME(REPLACE(@sql,'|','.'),3),\n    PARSENAME(REPLACE(@sql,'|','.'),2),\n    PARSENAME(REPLACE(@sql,'|','.'),1)\n","33":"SELECT  AVG(period)\nFROM    (\n        SELECT  TIME_TO_SEC(TIMEDIFF(@date_posted, date_posted)) AS period,\n                @date_posted := date_posted\n        FROM    (\n                SELECT @date_posted := NULL\n                ) vars,\n                messages\n        ORDER BY\n                date_posted\n        ) q\n","34":"{% for item in query_results %}\n    <tr>\n        <td>{{ item.name }}<\/td>\n        <td>{{ item.definition }}<\/td>\n        <td>{{ item.fundstellen }}<\/td>\n        <td>{{ item.wissenswertes }}<\/td>\n        <td>\n            {% for tag in item.tags.all %}\n                {{ tag }}\n            {% endfor %}\n        <\/td>\n    <\/tr>\n{% endfor %}\n","35":"    SELECT fp.id, \n           usr.id as UserID, \n           usr.firstname,\n           usr.lastname, \n           c.id as CourseID, \n           c.fullname, \n           c.idnumber, \n           fd.name, \n           fd.timemodified as DiscussionCreatedOn, \n           fp.created AS TimeofPost, \n           fp.modified, \n           fp.subject, \n           fp.message\n      FROM mdl_forum_posts fp\nINNER JOIN mdl_forum_discussions fd ON fp.discussion = fd.id\nINNER JOIN mdl_forum f ON f.id = fd.forum\nINNER JOIN mdl_course c ON f.course = c.id \nINNER JOIN mdl_user usr ON fp.userid = usr.id\n     WHERE EXISTS (SELECT 1 \n                     FROM mdl_user_enrolments ue\n               INNER JOIN mdl_enrol e ON ue.enrolid = e.id \n                    WHERE usr.id = ue.userid \n                      AND e.courseid = f.course)\n","36":"WITH tblB AS (\n  SELECT 1 CountryID, 'England' Country FROM dual\n  UNION\n  SELECT 2 CountryID, 'Wales' Country FROM dual\n  UNION\n  SELECT 3 CountryID, 'Scotland' Country FROM dual\n  UNION\n  SELECT 4 CountryID, 'Ireland' Country FROM dual\n), tblC AS (\n  SELECT 1 StudentID, 1 CountryID, 'ABC-Student' Student FROM dual\n  UNION\n  SELECT 2 StudentID, 2 CountryID, 'XYZ-Student' Student FROM dual\n), tblA AS (\n  SELECT 1 SchoolID, 3 CountryID, 1 StudentID, 'ABC-School' School FROM dual\n  UNION\n  SELECT 2 SchoolID, 4 CountryID, 2 StudentID, 'XYZ-SChool' School FROM dual\n)\nSELECT a.SchoolID, a.School, b.Country, c.Student, b2.Country     Student_Country\nFROM tblA a \nJOIN tblB b ON b.CountryID = a.CountryID\nJOIN tblC c ON c.StudentID = a.StudentID\nJOIN tblB b2 ON b2.CountryID = c.CountryID\n","37":"WITH cte AS (\n  -- Base condition, where do we start the search?\n  SELECT t.* FROM tblPartTable t WHERE t.PartNumber = '100X'\n  UNION ALL\n  -- Continue condition, how do we find the next part from the current one?\n  SELECT t.* FROM tblPartTable t JOIN cte ON t.PartNumber = cte.NextPartNumber\n)\nSELECT partnumber, active FROM cte;\n","38":"select min(DateAndTime) as minDateAndTime, max(DateAndTime) as maxDateAndTime\nfrom (select pt.*,\n             sum(case when datediff(second, prevdt, DateAndTime) <= 1 then 0 else 1 end) over \n                 (order by DateAndTime) as grp\n      from (select pt.*, lag(DateAndTime) over (order by DateAndTime) as prevdt\n            from ProductTracker pt\n            where LineFaultStatus = 1 and\n                  DateAndTime > '2014-04-07 8:00:00' and\n                  DateAndTime < '2014-04-07 17:00:00'\n           ) pt\n     ) pt\ngroup by grp\norder by 1;\n","39":"SELECT SUM(Qty) as Qty,DATE_FORMAT(Date, '%b') Month from table\nGROUP BY DATE_FORMAT(Date,'%Y-%m')\n","40":"select  count(distinct author)\nfrom    (\n        SELECT  author\n        FROM    comics \n        WHERE   author NOT IN ( SELECT email FROM bans ) \n        UNION ALL\n        SELECT  email \n        FROM    users \n        WHERE   email NOT IN ( SELECT email FROM bans )\n        ) as SubQueryAlias\n","41":"SELECT ID, Name, Addr, PhoneNumber, Descr FROM CusInfo i\nWHERE Type_ID = 'type_01' AND \n      3 = (select count(distinct case when c.Cri_ID in ('a','b') then 1\n                                      when c.Cri_ID in ('c','d') then 2\n                                      when c.Cri_ID in ('e','f') then 3\n                                 end)\n           from CusCri c\n           WHERE c.Cus_ID = i.ID and c.Cri_ID in ('a','b','c','d','e','f') )\n","42":"SELECT\n   MONTH([Date]) [Month],\n   YEAR([Date]) [Year],\n   COUNT(*) [Total],\n   COUNT(CASE WHEN Status IN ('Gone', 'Cancelled') THEN 1 END) [Lost],\n   COUNT(CASE WHEN Status= 'Won' THEN 1 END) [Won]\nFROM\n   MyTable\nGROUP BY\n   MONTH([Date]),\n   YEAR([Date])\n","43":"select\n    ic.UserName, \n    ic.primaryconsultantid, \n    ic.starters, \n    ic.[month],\n    ic.[year],\n    ic.totalvalue,\n    cg.threshold as Threshold, \n    cgv.percentage as Percentage\nfrom\n(\n    select\n        u.username + ' ' + u.surname as UserName, \n        tt.primaryconsultantid, \n        count(tt.invoiceid) as starters,\n        datename(mm, tt.invoiceissueddate) as [month], \n        datepartT(yy, tt.invoiceissueddate) as [year],\n        cast(sum((tt.value \/ tt.exchangerate) * (tt.primaryconsultantperc \/ 100)) as numeric(8,2)) as totalvalue,\n    from InvoiceCommissions as tt\n        inner join Users as u on u.userid = tt.primaryconsultantid\n    group by\n        tt.primaryconsultantid, \n        datename(mm, tt.invoiceissueddate), datepart(yy, tt.invoiceissueddate),\n        u.username + ' ' + u.surname\n) as ic\n    inner join commissionconsultants as cc on cc.userid = ic.primaryconsultantid\n    inner join commissiongrades as cg on cg.gradeid = cc.gradeid\n    inner join commissiongradevalues as cgv on cgv.gradeid = cc.gradeid and cgv.starters = ic.starters\n","44":"SELECT k.KUNDENID AS ID, \n       vorname AS Vorname, \n       nachname AS Nachname, \n       LPAD(\n         CONCAT(IFNULL(ROUND(SUM(Betrag), 2), 0), ' Euro')\n       , 13, ' ') AS Gesamt  \nFROM kunde k  \nLEFT JOIN verkauf v ON k.KUNDENID = v.KUNDENID  \nGROUP BY k.KUNDENID;\n","45":"select r.* from R where R.a = 100\n","46":"SELECT  SQL_CALC_FOUND_ROWS\n    `contact_data`.`id`,\n    `contact_data`.`name`,\n    MAX(CASE WHEN fields.`key` = :field1 THEN fields.`value` END) AS `fields0`,\n    MAX(CASE WHEN fields.`key` = :field2 THEN fields.`value` END) AS `fields1`,\n    MAX(CASE WHEN fields.`key` = :field3 THEN fields.`value` END) AS `fields2`,\n    ...etc...\n    CONTACT_DATA_TAGS(\n        GROUP_CONCAT(DISTINCT `contact_data_tags`.`name`),\n        GROUP_CONCAT(DISTINCT `contact_data_assignment`.`user`),\n        GROUP_CONCAT(DISTINCT `contact_data_read`.`user`)\n    ) AS `tags`,\n    GROUP_CONCAT(DISTINCT `contact_data_assignment`.`user`) AS `assignments`,\n    `contact_data`.`updated`,\n    `contact_data`.`created`\nFROM\n    `contact_data`\nLEFT JOIN contact_data_tags ON contact_data.`id` = contact_data_tags.`data`\nLEFT JOIN contact_data_assignment ON contact_data.`id` = contact_data_assignment.`data`\nLEFT JOIN contact_data_read ON contact_data.`id` = contact_data_read.`data`\nLEFT JOIN contact_data_fields AS fields\n       ON contact_data.`id` = fields.`contact_data_id` \n...etc...\nGROUP BY contact_data.`id`\nORDER BY `id` DESC\n","47":"factory.selectFrom(ScoreCard.SCORE_CARD)\n       .orderBy(OloScoreCard.SCORE_CARD_ID.cast(Integer.class).descending())\n       .limit(0, 1);\n","48":"select group_concat(sub)\nfrom post\nwhere cat = 1;\n","49":"select set_vertica_options('EE','ENABLE_JOIN_SPILL');  \n","50":"SELECT \n    one.id AS id,\n    one.something1 AS something1,\n    one.something2 AS something2,\n    two.name AS name\nFROM one\nJOIN two ON one.id = two.id\n","51":"  SELECT MemberId = y.i.value('(.\/text())[1]', 'nvarchar(1000)'),\n         TokenId  = u.j.value('(.\/text())[1]', 'nvarchar(1000)')             \n  FROM \n  ( \n    SELECT \n        m = CONVERT(XML, '<i>' \n            + REPLACE(MemberId, ',' , '<\/i><i>') \n            + '<\/i>').query('.'),\n        t= CONVERT(XML, '<j>' \n            + REPLACE(TokenId, ',' , '<\/j><j>') \n            + '<\/j>').query('.')\n    FROM member_tokens\n  ) AS a \n  CROSS APPLY m.nodes('i') AS y(i)\n  CROSS APPLY t.nodes('j') AS u(j)\n","52":"KeyWords\n----------\nKeyWordId Int Identity(1,1)\nKeyWord VarChar(200)\n\nKeyFieldKeyWords\n----------------\nKeyfield Int\nKeyWordId Int\n","53":"select distinct on (name) id, name, version\nfrom metadata\nwhere name in ('foo', 'bar')\norder by name, version desc\n","54":"SELECT TableA.[Name] AS FirstName, TableB.LastName\nFROM TableA \n  INNER JOIN TableB ON TableA.LastNameId = TableB.LastNameId\n","55":"SELECT\n    sfo.entity_id,\n    sfo.increment_id,\n    sfoi.name,\n    sfoi.product_type,\n    sfoi.price,\n    sfoi.original_price,\n    sfo.status,\n    sfi.state\nFROM\n    sales_flat_order sfo\nINNER JOIN\n    sales_flat_order_item sfoi ON sfoi.order_id = sfo.entity_id\nLEFT JOIN\n    sales_flat_invoice sfi ON sfi.order_id = sfo.entity_id\nORDER BY\n    sfo.entity_id DESC\nLIMIT\n    500\n","56":"SELECT DISTINCT\n    A.ID,\n    A.SurveyID,\n    A.PersonID,\n    A.Answer,\n    B.QuestionID,\n    B.Question\nFROM TblAnswers A INNER JOIN TblQuestion B\n    ON A.QuestionID=B.QuestionID\n","57":"SELECT  M.ID,\n        M.Value,\n        D.ID DETAILID,\n        D.Value DetailValue,\n        D.Date\nFROM TABLE_MASTER M\nLEFT JOIN ( SELECT *\n            FROM TABLE_DETAIL1\n            UNION ALL\n            SELECT *\n            FROM TABLE_DETAIL2) D\n    ON M.ID = D.MASTER_ID\n","58":"    select a.Id L,b.id R\n      into #cross\n      from MyTable a\ninner join mytable b on a.id <= b.id\n","59":"SELECT cm.*\nFROM conversations_messages cm\nJOIN conversations c ON cm.conversation_id = c.id\nJOIN conversations_users cu ON cu.conversation_id = c.id\nWHERE cu.user_id = 1\nAND NOT EXISTS (    SELECT 'a'\n                    FROM conversations_messages cm2\n                    WHERE cm2.conversation_id = cm.conversation_id\n                    AND cm2.created_at > cm.created_at\n                    )\nGROUP BY c.id\n","60":"SELECT TO_CHAR(TRUNC(scheme.table.reg_date,'dd'),'DD.MM.YYYY') AS \"DATE\", COUNT(*)\nFROM scheme.table\nWHERE scheme.table.reg_date\nBETWEEN TO_DATE('01.08.2013','dd.mm.yyyy') AND TO_DATE('28.08.2013','dd.mm.yyyy')\nGROUP BY TRUNC(scheme.table.reg_date,'dd');\n","61":"DECLARE @input XML = '<root>\n <log realm=\"ABC\" at=\"Wed Oct 15 00:00:02 2014.211\" lifespan=\"2279ms\">\n  <receive>\n    <isomsg direction=\"IN\">\n      <header>6000911384<\/header>\n      <field id=\"0\" value=\"0800\"\/>\n      <field id=\"3\" value=\"980000\"\/>\n      <field id=\"11\" value=\"000852\"\/>\n    <\/isomsg>\n  <\/receive>\n<\/log>\n<\/root>'\n\nSELECT\n    At = xc.value('..\/..\/..\/@at', 'varchar(50)'),\n    Lifespan = xc.value('..\/..\/..\/@lifespan', 'varchar(25)'),\n    Direction = xc.value('..\/@direction', 'varchar(10)'),\n    ID = XC.value('@id', 'int'),\n    Value = xc.value('@value', 'varchar(25)')\nFROM\n    @Input.nodes('\/root\/log\/receive\/isomsg\/field') AS XT(XC)\n","62":"Private Sub Form_Current\n  Laborer1.RowSource = ReferenceField.Value\n  Laborer1.Requery 'I don't believe you need this, but you might.\nEnd Sub\n","63":"#!\/bin\/bash\n\nresult=$(sqlplus64 -S <username>\/<password>@<IPADDRESS>\/<SERVICENAME> << EOF\nset serveroutput on;\nbegin\n   dbms_output.put_line('hello '||'$0');\nend;\n\/\nexit;\nEOF\n)\necho \"result=$result\"\n","64":"delete from your_table\nwhere id not in\n(\n   select * from \n   (\n      select id from your_table\n      order by id desc\n      limit 1000\n   ) x\n)\n","65":"SELECT (EXISTS (SELECT 1 FROM test WHERE id = 100))::int;\n","66":"DECLARE @CounterInitialValue INT\nDECLARE @NewCounterValue INT\nSELECT @CounterInitialValue = SELECT counter FROM MyTable WHERE MyID = 1234\n\n-- do stuff with the counter value\n\nUPDATE MyTable\n   SET counter = counter + 1\nWHERE\n   MyID = 1234\n   AND \n   counter = @CounterInitialValue -- prevents the update if counter changed.\n\n-- the value of counter must not change in this scenario.\n-- so we rollback if the update affected no rows\nIF( @@ROWCOUNT = 0 )\n    ROLLBACK\n","67":"  SELECT *\n    FROM DATA d\n    JOIN USERS u ON u.user_id = d.user_id\n   WHERE NOT EXISTS (SELECT NULL \n                       FROM DATA t\n                      WHERE t.id = d.id\n                        AND CONVERT('10:00:00', TIME) BETWEEN t.start_time AND t.end_time)\nGROUP BY u.usrID\n","68":"CREATE TABLE US_Address (\n  AddressID int,\n  Streetline varchar(80),\n  City varchar(80),\n  State char(2),\n  ZIP char(5),\n  StateName varchar(80),\n  StateTax DECIMAL(5,2)\n)\n","69":"INSERT INTO tblSurveyReport(FirstName) SELECT FirstName FROM tblSurveyData where FirstColumn = 'A0'\n\nINSERT INTO tblSurveyReport(MiddleName) SELECT MiddleName FROM tblSurveyData where FirstColumn = 'A1'\n","70":"select max(ID) from [Table]\n","71":"SELECT LENGTH(TRANSLATE(TO_CHAR(3.0123456789),'1234567890.-','1234567890')) \nFROM dual\n","72":"with cte as(select *, ceiling(1.0 * row_number() over(order by Wins, Id) \/ 2) as rn \n             from Player)\nselect c1.Id, c1.Name, c2.Id, c2.name\nfrom cte c1\njoin cte c2 on c1.rn = c2.rn and c1.Id > c2.Id;\n","73":"SELECT dept.Name, COUNT(emp.id) as timesOccurring \nFROM departments dept\nINNER JOIN employees emp\nON emp.dept_id = dept.id\nGROUP BY dept.Name\nORDER BY timesOccurring \n","74":"select red, green, blue, count(*)\nfrom t\ngroup by red, green, blue;\n","75":"SELECT COALESCE(UNIX_TIMESTAMP(Date(p.published_at)),0) as 'day', \n       COALESCE(SUM(case when p.status = 2 then p.value end),0) as 'total_accepted',\n       COALESCE(SUM(case when p.status = 1 then p.value end),0) as 'total_open',\n       COALESCE(SUM(case when p.status = 3 then p.value end),0) as 'total_declined',\n       COALESCE(SUM(case when p.status !=0  then p.value end),0) as 'total_published'\nFROM posts as p\nWHERE p.published_at IS NOT NULL\nGROUP BY DATE(p.published_at);\n","76":"select *\nfrom orders o1\nwhere o1.city = 'Austin'\n  and exists (select ordernumber\n              from orders o2\n              where o1.ordernumber = o2.ordernumber\n              group by ordernumber\n              having count(distinct city) >1)\n","77":"20130320\n2013-03-20\n2013 mar 20\nMarch 20, 2013\n2013.03.20\n","78":"SELECT GROUP_CONCAT(CONCAT('CF', CustomFieldID, ' AS `', CustomFieldName, '`')) INTO fieldNames\nFROM qcdt_jobs_CustomFields\nWHERE projectId = 181;\n\nPREPARE stmt FROM CONCAT('SELECT JobID, ', fieldNames, ' Etc. FROM qcdt_jobs_customfields_181 where JobID=1');\nEXECUTE stmt;\n","79":"  select c.customerID, c.name, a.UAN, a.balance, a.overdraft\n  From customer c join current_acc a\n  on c.customerID = a.customerID and a ='current account'\n","80":"friend_list = sqlexec \"select user2_id from relations where user1_id = \"\n                      + current_user_id\nphotolist = []\nfor friend in friend_list:\n    photolist += sqlexec \"select user_id, id, date_uploaded from photos\"\n                 + \" where user_id = \"\n                 + friend.get(\"user2_id\")\n                 + \" order by date_uploaded desc fetch first 3 rows only\"\n\n# Now do something with photolist\n","81":"IF NOT EXISTS(SELECT 1 FROM [MyDB].[dbo].[Accounts] WHERE MyID = @MyID)\n    INSERT INTO [MyDB].[dbo].[Accounts]\n        (MyID, Phone, MyDate, Agent, Charge, Vendor)\n        VALUES \n        (@MyID, @Phone, @MyDATE, @Agent, @Charge, @Vendor)\n","82":"SELECT *\nFROM Patients p\nWHERE \n    DATEDIFF(d, \n             (SELECT MIN(AppointmentDate) FROM Appointments a WHERE a.PatientID = p.PatientID),\n             (SELECT MAX(AppointmentDate) FROM Appointments a WHERE a.PatientID = p.PatientID)) >= 365\n","83":"select a.col1, a.col2, b.col1, b.col2, c.col1, c.col2\n from view a, view b, view c\n where a.col3 = 1\n  and  b.col3 = 2\n  and  c.col3 = 3\n","84":"SELECT ID, z.cnt\nFROM mytable\nCROSS APPLY (SELECT COUNT(*) AS cnt \n             FROM (VALUES (x1), (x2), (x3), (x4)) x(y)\n             WHERE x.y > 0) z\n","85":"SELECT COUNT(*)\nFROM jwemaildb.LogFileRecords\nWHERE\n    date > = DATEADD(month, DATEDIFF(month, 0, GETDATE())-1, 0) AND\n    date <  DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0) AND\n    CAST(RIGHT(eAlertSentDate, 4) + LEFT(eAlertSentDate, 4) AS date) BETWEEN       \n    DATEADD(dd , 1 - DAY(GETDATE()), DATEADD(mm, -1 ,GETDATE())) AND\n    DATEADD(dd , 1 - DAY(GETDATE()), GETDATE())\n","86":"set @isweekday=case when (DATEPART(dw, @tempdate) + @@DATEFIRST) % 7 NOT IN (0, 1) then 1 else 0 end\n","87":"SELECT      TblLoan.LoanID,\n            TblCustomer.LastName,\n            Payment.TotalPaid AS Payments, \n            Nz(TblLoan.FutureValue) - Nz(Payment.TotalPaid) AS Balance\nFROM        TblLoan \nLEFT JOIN   (\n                SELECT  LoanID,\n                        sum(TotalAmount) as TotalPaid \n                FROM    TblPayment group by LoanID\n            )  AS Payment \n        ON  Payment.LoanID = TblLoan.LoanID \nLEFT JOIN   TblCustomer ON TblLoan.CustomerID = TblCustomer.CustID\nWHERE       Nz(TblLoan.FutureValue) - Nz(Payment.TotalPaid) <= 0;\n","88":"SELECT TOP 1 ID, COUNT(*) AS CountOfRows\nFROM UnknownTable\nGROUP BY ID\nORDER BY CountOfRows DESC\n","89":"SELECT `activities`.*, `admins`.`admin_role_id`\nFROM (`activities`)\nLEFT JOIN `admins` ON `admins`.`activity_id`=`activities`.`id` AND admins.member_id=27500\n    JOIN (`transactions_items`\n    JOIN `transactions` ON `transactions`.`id` = `transactions_items`.`id`\n    JOIN `products` ON `products`.`id` = `transactions_items`.`product_id`)\nON `activities`.`id`=`products`.`activity_ID`\nWHERE `transactions`.`member_id` =  27500\nAND `activities`.`active` =  1\n","90":"SELECT FirstName, LastName, Line1, City, State, ZipCode\nFROM Customers JOIN Addresses\nON (Customers.ShippingAddressId = Addresses.AddressID);\n","91":"select * \nfrom session_actions \nwhere find_in_set(`action_type`,'login_failed,channel_recorded');\n","92":"select t1.id,t1.values,t2.values from\ntable1 t1 \nleft outer join\ntable t2 on nvl(t1.id,0)=nvl(t2.id,0)\n","93":"SELECT 'MYTABLE_A' AS MYTABLENAME, CASE WHEN EXISTS\n                   ( SELECT *\n                     FROM MYTABLE_A\n                     WHERE timestamp = to_char(sysdate-1, 'yyyymmdd') || '0000'\n                   )\n            THEN 0\n            ELSE 1\n       END AS FLAG_MYTABLE_A\nfrom DUAL\nUNION ALL\nSELECT 'MYTABLE_B' AS MYTABLENAME, CASE WHEN EXISTS\n                   ( SELECT *, timestamp\n                     FROM MYTABLE_B\n                     WHERE\n                     timestamp = to_char(sysdate-1, 'yyyymmdd') || '0000'\n                   )                       )\n            THEN 0\n            ELSE 1\n       END AS FLAG_MYTABLE_B\nfrom DUAL;\n","94":"Select Name, sum(case when DayAci = 'Sunday' then 1 else 0 END) as Sunday,\n       sum(case when DayAci = 'Monday' then 1 else 0 END) as Monday,\n       sum(case when DayAci = 'Tuesday' then 1 else 0 END) as Tuesday,\n       sum(case when DayAci = 'Wednesday' then 1 else 0 END) as Wednesday,\n       sum(case when DayAci = 'Thursday' then 1 else 0 END) as Thursday,\n       sum(case when DayAci = 'Friday' then 1 else 0 END) as Friday,\n       sum(case when DayAci = 'Saturday' then 1 else 0 END) as Saturday,\n       count(*) as Total, max(cap.prevTotal) as prevTotal\n from Caraccident ca left outer join\n      (select cap.name, count(*) as prevTotal\n       from CaraccidentPrev cap\n       where cap.Accident = 'Near-miss'\n       group by cap.name\n      ) cap\n      on cap.name = ca.name\n where Accident = 'Near-miss'\n group by Name;\n","95":"DECLARE @tempString AS varchar(max)\nSET @tempString =''\n\n;WITH firstCte AS\n(\n    SELECT\n        CAST('<M>' + REPLACE(contactpeopleids, ',','<\/M><M>') + '<\/M>' AS XML) AS Names\n    FROM\n        soTable1\n\n    -- THIS WHERE CLAUSE MUST MATCH THE FINAL WHERE CLAUSE\n    WHERE\n        name = 'John'\n        AND surname = 'Cobaing'\n)\n,secondCte AS\n(\n    SELECT\n        Split.a.value('.','VARCHAR(100)') AS NameIds\n\n    FROM\n        firstCte\n\n    CROSS APPLY Names.nodes('\/M') Split(a)\n)\n,thirdCte AS\n(\n    SELECT\n        t2.name + ' ' + t2.lastname AS theContactName\n\n    FROM\n        secondCte t1\n\n    -- NOTE: IF THE IDS YOU EXTRACT FROM TABLE 1 DO NOT HAVE A MATCH IN TABLE 2 YOU WILL GET NO RESULT FOR THAT ID HERE!\n    -- IF YOU WANT NULL RESULTS CHANGE THIS TO A 'LEFT JOIN'    \n    INNER JOIN\n        soTable2 t2 ON t1.NameIds = t2.id\n)\nSELECT\n    @tempString = @tempString + ',' + theContactName\n\nFROM\n    thirdCte\n\n;\n-- The select substring is used to remove the leading ',' \nSELECT \n    name,\n    surname,\n    age,\n    location,\n    SUBSTRING(@tempString,2,LEN(@tempString)) AS contactpeoplenames\n\nFROM\n    soTable1\n\nWHERE\n    name = 'John'\n    AND surname = 'Cobaing'\n","96":"select\n    (select name\n        from table2 where id = (\n        select top 1 arr_id\n        from table1\n        group by arr_id\n        order by count(*) desc)\n    )  as most_arrivals,\n    (select name\n        from table2 where id = (\n        select top 1 dep_id\n        from table1\n        group by dep_id\n        order by count(*) desc)\n    ) as most_departures\n","97":";with pc as (\n    select p.personid, tc.titleid, count(*) as cnt_pc\n    from person p\n    inner join personcertification pc on p.personid = pc.personid\n    inner join titlecertifications tc on pc.certificationid = tc.certificationid\n    group by p.personid, tc.titleid\n),\ntc as (\n    select t.titleid, count(*) as cnt_tc\n    from title t\n    inner join titlecertifications tc on t.titleid = tc.titleid\n    group by t.titleid\n)\nselect p.firstname, t.shortname\nfrom pc\ninner join tc on pc.titleid = tc.titleid\ninner join person p on pc.personid = p.personid\ninner join title t on pc.titleid = t.titleid\nwhere cnt_pc = cnt_tc\n","98":"SELECT userid \nFROM   (SELECT userid, \n               YEARWEEK(TIMESTAMP)                  AS year_week, \n               COUNT(DISTINCT DAYOFWEEK(TIMESTAMP)) AS check_in_days \n        FROM   checkins \n        WHERE  1 = 1 -- This would be your date range filter \n        GROUP  BY userid, \n                  YEARWEEK(TIMESTAMP) \n        HAVING check_in_days BETWEEN 3 AND 5) AS user_weeks \nGROUP  BY userid \nHAVING COUNT(year_week) = (SELECT COUNT(*) \n                           FROM   year_week \n                           WHERE  1 = 1 -- This would be your date range filter \n                          ); \n","99":"DELIMITER $$\n\nCREATE TRIGGER adresse_trigger_insert_check\n BEFORE INSERT ON adresse\n FOR EACH ROW BEGIN\n IF NEW.land IS NULL THEN\n  SET NEW.land := 'XY';\n END IF;\nEND$$\n\nDELIMITER ;\n","100":"DECLARE @date AS DATETIME\nSET @date = '2014-01-01'\nSELECT 'SELECT ''' + OBJECT_NAME(object_id) + ''' AS [Table], COUNT(*) AS [Count] FROM [' + OBJECT_NAME(object_id) + '] WHERE [created] <= ''' + CONVERT(VARCHAR, @date, 20) + '''' FROM sys.columns WHERE name = 'created'\n","101":"insert \/*+ IGNORE_ROW_ON_DUPKEY_INDEX(table_name index_name) *\/\ninto table_name\nselect * ...\n","102":"select sum(row_size) \nfrom (\n  select \n    char_length(column1)+\n    char_length(column2)+\n    char_length(column3)+\n    char_length(column4) ... <-- repeat for all columns\n  as row_size \n  from your_table\n) as tbl1;\n","103":"ALTER PROC [dbo].[SPFetchAllDisActiveUser]\n(\n    @StartRowIndex INT,\n    @MaxRows INT\n)\nAS\n\nBEGIN\n\nSELECT * FROM\n(\n    SELECT *, ROW_NUMBER() OVER(ORDER BY [User-ID] ASC) AS RowNum \n    FROM [User-Tbl]\n    WHERE [Gu-Id] IS NULL\n) AS DisActiveUser\nWHERE RowNum BETWEEN @StartRowIndex + 1 AND @MaxRows;\n\nEND\n","104":"SELECT t.* FROM comment c\nLEFT JOIN read_message rm ON c.id-rm.cid\nWHERE c.author!=2 AND rm.User=2 AND c.tid=17 AND rm.Topic=17 AND\n(c.Original_Date BETWEEN DATE_SUB(NOW(), INTERVAL 30 DAY) AND NOW())\nOR (c.last_update BETWEEN DATE_SUB(NOW(), INTERVAL 30 DAY) AND NOW())\n","105":"UPDATE status\nSET description = SUBSTRING(description,1,CHARINDEX('abc',description)-1) \n                  + 'def' + \n                  SUBSTRING(description,CHARINDEX('abc',description)+CHAR_LENGTH('abc'),CHAR_LENGTH(description)-CHARINDEX('abc',description))\nWHERE name = 'test'\n","106":"SELECT  * \nFROM   table1 t1\n  JOIN table2 t2  ON t1.sid = t2.sid\n  JOIN table3 t3 ON t2.referencedid = t3.referencedid\nWHERE  \/\/ here you can add your criteria if you have\n","107":"SELECT DISTINCT name from `Student` WHERE `name` REGEXP '[ae]'\n","108":"select col_1,\n       col_2\n  from tbl_a A\n          inner join\n       tbl_b B\n          on A.col_1 = B.col_1\n             and A.col_2 = B.col_2\n          left join\n       ( select col_1,col_2 from tbl_c where clo_c_1 <> '1' ) C\n          on\n             C.col_2 = A.col_2\n","109":"  SELECT (\n    SELECT\n      [customer]\n     ,( SELECT\n          [id] AS [@id],\n          [Item] AS [data()]\n        FROM @OrderDetail od\n        WHERE od.fk_Order = ot.id\n        FOR XML PATH('d'),TYPE\n      )\n    FROM @OrderTbl ot\n    FOR XML PATH('c'),TYPE\n  ) FOR XML PATH('b'), ROOT('a')\n","110":"...\nWHERE MONTH(MD.MD_DOB) > @StartMonth AND MONTH(MD.MD_DOB) < @EndMonth\nOR (MONTH(MD.MD_DOB) = @StartMonth AND DAY(MD.MD_DOB) >= @Startday)\nOR (MONTH(MD.MD_DOB) = @EndMonth AND DAY(MD.MD_DOB) <= @Endday)\n","111":"procedure runproc (p_procname varchar2) is\nbegin\n    execute immediate 'begin ' || p_procname || '; end;';\nend;\n","112":"  select t.candidateid ,  @curRank := @curRank + 1 AS rank, if(@prevote=-1, 0,@prevote-t.num) as sub, @prevote:=t.num as num\n    from \n    (\n    SELECT    candidateid,\n            count(*) as num\n    FROM      vote p\n    group by candidateid\n    ORDER BY  num desc\n    ) t, (SELECT @curRank := 0, @prevote:=-1) r\n","113":"SELECT\n  cmsdocument.internaldocid,\n  cmsdocument.documentid,\n  cmsdocument.versionid,\n  cmsdocversion.title,\n  string_agg(cmstag.tagname, ',')\nFROM \n  public.cmsobjecttag,\n  public.cmstag,\n  public.cmsdocument,\n  public.cmsdocversion,\n  public.cmsuser\nWHERE \n  cmsobjecttag.tagid = cmstag.tagid AND\n  cmsobjecttag.objectid = cmsdocument.internaldocid AND\n  cmsdocument.internaldocid = cmsdocversion.internaldocid AND\n  cmsdocument.userid = cmsuser.userid AND\n  cmsdocversion.state = 'published' AND\n  cmsobjecttag.objecttype = '102'\nGROUP BY \n  cmsdocument.internaldocid,\n  cmsdocument.documentid,\n  cmsdocument.versionid,\n  cmsdocversion.title\n","114":"WITH src AS (\n  SELECT level id\n    FROM dual\n CONNECT BY level <= 5)\nSELECT nvl(ent_id, 'Not Found' )\n  FROM src\n       LEFT OUTER JOIN tc_logs ON (src.id = tc_logs.ent_id)\n","115":"WITH cte AS \n(\nSELECT \n    t.TaskID\n    ,t.Title\n    ,t.ParentID \n    ,CONVERT(VARCHAR(MAX),'') AS [Path]\nFROM \n    tasks.Tasks t\nWHERE \n    t.ParentID IS NULL\n    AND t.TaskID = @TaskID\n\nUNION ALL\n\nSELECT \n    sub.TaskID \n    ,sub.Title \n    ,sub.ParentID \n    ,cte.[Path] + '->' + CONVERT(VARCHAR(MAX),sub.TaskID) AS [Path]\nFROM \n    tasks.Tasks sub\n    INNER JOIN cte ON cte.TaskID = sub.ParentID\n)\n\nSELECT \n    cte.TaskID\n    ,cte.Title\n    ,cte.ParentID\n    ,CONVERT(VARCHAR(MAX),@TaskID) + cte.[Path] AS [Path]\nFROM \n    cte\n","116":"select date_format(Release, '%d.%m.%Y')\nfrom movies\n","117":"WITH RECURSIVE list AS (\n  SELECT PK, Name\n  FROM A\n  WHERE PK = 1\n  UNION ALL\n  SELECT A.PK, A.Name\n  FROM list\n  JOIN B ON list.PK = B.FK1\n  JOIN A ON B.FK2 = A.PK\n)\nSELECT * FROM list;\n","118":"select m.*, ms.TotalValue\nfrom MyTable m\ninner join (\n    select [Order], sum(Price * Quantity) as TotalValue\n    from MyTable\n    group by [Order]\n) ms on m.[Order] = ms.[Order]\n","119":"select t1.a, min(t2.a), t1.b\nfrom table_1 t1\n    inner join table_1 t2 on t2.a > t1.a\ngroup by t1.a, t1.b\n","120":"with source as (\nSELECT adr.nad_nkt_id id1, firmenadr.nad_nkt_id id2 FROM nav_adressen adr,\n  nav_kontakte kontakt, nav_kontakte firma, nav_adressen firmenadr WHERE \n    kontakt.nkt_id = adr.nad_nkt_id AND\n    firma.nkt_id (+)= kontakt.nkt_nkt_id AND\n    firmenadr.nad_id (+)= firma.nkt_id AND\n    (firmenadr.nad_strasse like '%needle%' OR\n     adr.nad_strasse like '%needle%')\n)\nselect decode(x.l, 1, a.id1, 2, a.id2) as id\n  from source a\n cross join (select level as l from dual connect by level <=2) x\n","121":"SELECT TOP 10 usr.firstname, usr.lastname, count(doc.modifiedBy) AS modified_items, count(doc.createdDate) AS created_items, (count(doc.modifiedBy)) + (count(doc.createdDate)) AS summed_items\nFROM document doc\nWHERE doc.active = 't' \nGROUP BY usr.firstname, usr.lastname\nORDER BY doc.modified_items DESC\n","122":"FORTUNE_DB(ADMIN)=> select * from so;\n                                                     COL1\n--------------------------------------------------------------------------------------------------------------\nThis is sting one:Y,this is string Two:X,This is string Three:N,This is string four:N,This is string five:X,\n\nFORTUNE_DB(ADMIN)=> select regexp_replace(col1,',[^(:N)]+:N','') from so;\n                         REGEXP_REPLACE\n-----------------------------------------------------------------\n This is sting one:Y,this is string Two:X,This is string five:X,\n","123":"merge into\n  tester\nusing (\n  select 1 id,'0123456785' employee_phone_number from dual union all\n  select 2 id,'0123456786' employee_phone_number from dual) new_values\non (\n  tester.id = new_values.id)\nwhen matched then update \n  set employee_phone_number = new_values.employee_phone_number;\n","124":"SELECT CHR(1) FROM DUAL;\n","125":"WHERE   person.personstatusuid = @StatusUID \nAND \tperson.forename != '' \nAND \t(ISNULL(@Location,'') = '' OR person.Location = @Location)\n","126":"DECLARE @company_id char(2)\nSET @company_id = '02'\nEXEC('CREATE TABLE CUSTOMER' + @company_id + ' (id int PRIMARY KEY)')\n","127":"SELECT \n   T0.C0,\n   T1.C0,\n   T2.C0,\n   CASE\n      WHEN T1.C0 IS NULL\n      AND T2.C0 IS NULL THEN 1\n   END,\n   CASE\n      WHEN T2.C0 = 'NM' THEN 'New to PHI'\n      WHEN T1.C0 IS NOT NULL\n      OR T2.C0 IS NOT NULL THEN 'Transferred'\n      ELSE 'New to PHI'\n   END,\n   T0.C1\nFROM (\n   SELECT DISTINCT\n      \"Memberships\".\"MemberNo\" AS C0,\n      COUNT(\"Memberships\".\"MemberNo\") AS C1\n   FROM \"dbo\".\"Memberships\"\n   WHERE (\n      \"Memberships\".\"IsProspect\" = N'N'\n   )\n   AND (\n      (\n         \"Memberships\".\"PaidToDate\" > \"Memberships\".\"JoinDate\"\n         OR \"Memberships\".\"HealthTermEntryDate\" IS NULL\n      )\n      AND \"Memberships\".\"JoinDate\" BETWEEN '20150701 00:00:00.0' AND '20160630 23:59:59.997'\n   )\n   GROUP BY \n      \"Memberships\".\"MemberNo\"\n\n) T0\nLEFT OUTER JOIN (\n   SELECT DISTINCT\n      \"MembershipPlans\".\"PrevFundID\" AS C0,\n      \"Memberships\".\"MemberNo\" AS C1\n   FROM \"dbo\".\"Memberships\"\n   INNER JOIN \"dbo\".\"MembershipPlans\"\n   ON (\n      \"Memberships\".\"MemberNo\" = \"MembershipPlans\".\"MemberNo\"\n   )\n   WHERE (\n      \"Memberships\".\"IsProspect\" = N'N'\n   )\n   AND (\n      \"MembershipPlans\".\"IsPrevCover\" IN (N'Y')\n   )\n\n) T1\nON T0.C0 = T1.C1\nLEFT OUTER JOIN (\n   SELECT DISTINCT\n      \"MembershipUDPs\".\"Property\" AS C0,\n      \"MembershipUDPs\".\"MemberNo\" AS C1\n   FROM \"dbo\".\"Memberships\"\n   LEFT OUTER JOIN \"dbo\".\"MembershipUDPs\"\n   ON (\n      \"Memberships\".\"MemberNo\" = \"MembershipUDPs\".\"MemberNo\"\n   )\n   WHERE (\n      \"Memberships\".\"IsProspect\" = N'N'\n   )\n   AND (\n      \"MembershipUDPs\".\"PropertyID\" IN (N'TF   ')\n      AND \"Memberships\".\"JoinDate\" >= '20150608 00:00:00.0'\n   )\n\n) T2\nON T0.C0 = T2.C1\n","128":"SELECT TO_CHAR(CURRENT_TIMESTAMP, 'DD\/MON\/YYYY');\n","129":"Select .....\nfrom ....\nwhere (Status = @Status or @Status is null)\nand (Created=@Created or @Created is null)\nand (Release = @Release or @Release is null)\nand (Date = @Date or @Date is null)\n","130":" $q = \"SELECT * FROM football_1314_beacha_standings ORDER BY pct DESC, win DESC\";\n","131":"SELECT *\nFROM information_schema.columns c with (Nolock)\n","132":"select Location.Lat, Location.Long from GeographyTable\n","133":"select users.user_id,l.login,p.points from users\ninner join (select user_id, count(1) login from login\n       group by login) as l on users.user_id=login.user_id\ninner join (select user_id, sum(point) as point \n        from point group by user_id ) as p on users.user_id=point.user_id\n","134":"SELECT  a.pname, b.rank, b.score\nFROM    players a\n        INNER JOIN player_stats b\n            ON a.pid = b.pid\n        INNER JOIN\n        (\n            SELECT  pid, MAX(statdate) statdate\n            FROM    player_stats\n            GROUP   BY pid\n        ) c ON  b.pid = c.pid\n                AND b.statdate = c.statdate\n","135":"CREATE TEMP TABLE mapper (old_val CHAR(5) NOT NULL, new_val CHAR(5) NOT NULL);\n...multiple inserts into mapper...\nINSERT INTO mapper(old_val, new_val) VALUES('a.1', 'a1');\nINSERT INTO mapper(old_val, new_val) VALUES('a-1', 'a1');\nINSERT INTO mapper(old_val, new_val) VALUES('b.1', 'b1');\nINSERT INTO mapper(old_val, new_val) VALUES('b-1', 'b1');\n...etcetera...\n\nUPDATE tbl\n   SET title = (SELECT new_val FROM mapper WHERE old_val = tbl.title)\n   WHERE title IN (SELECT old_val FROM mapper);\n","136":"begin\n\n  statement_zero;\n\n  savepoint my_savepoint;\n\n  begin\n    -- if either of these fail, then exception section will be executed\n    statement_one;\n    statement_two;\n  exception\n     when others then\n       rollback to my_savepoint;\n  end;\n\n  statement_three;\n\n  commit;\n\nend;\n","137":"select brand from car\ngroup by brand\nhaving count(*) = (select count(*) from car where brand = 'Ferrari')\n","138":"SELECT user, MIN(sn) range_start, MAX(sn) range_end\n  FROM\n(\n  SELECT user, sn, @r := IF(@g = user, @r, @r + 1) range_num, @g := user\n    FROM table1 CROSS JOIN (SELECT @r := 0, @g := NULL) i\n   ORDER BY sn\n) q\n GROUP BY user, range_num\n","139":"import groovy.sql.Sql    \nimport oracle.jdbc.driver.OracleDriver\n\ndef dbServer = context.expand( '${#Project#dbServer}' )\ndef dbUser = context.expand( '${#Project#dbUser}' )\ndef dbPass = context.expand( '${#Project#dbPass}' )\n\n\ndef con = Sql.newinstance('dbServer, dbUser,\n                              dbPass, \"oracle.jdbc.driver.OracleDriver\"')\n\ndef res = con.rows(\"select * from table1 where message_in = 'Bang'\")\n\nlog.info(res[0])\n\ncon.close()\n\nassert res[0] != null\n","140":"SELECT property.property_id,\n       bedrooms.value AS bedrooms,\n       bathrooms.value AS bathrooms\nFROM property,\n     attribute AS bedrooms_attr,\n     attribute_value AS bedrooms,\n     property_attribute AS bedrooms_prop,\n     attribute AS bathrooms_attr,\n     attribute_value AS bathrooms,\n     property_attribute AS bathrooms_prop\nWHERE bedrooms_attr.name = 'bedrooms'\n  AND bedrooms.attribute_id = bedrooms_attr.attribute_id\n  AND bedrooms.attribute_value_id = bedrooms_prop.attribute_value_id\n  AND bedrooms_prop.property_id = property.property_id\n  AND bedrooms.value = 2\n  AND bathrooms_attr.name = 'bathrooms'\n  AND bathrooms.attribute_id = bathrooms_attr.attribute_id\n  AND bathrooms.attribute_value_id = bathrooms_prop.attribute_value_id\n  AND bathrooms_prop.property_id = property.property_id\n  AND bathrooms.value = 2\n","141":"    select pa.appointment_key, p.profile_key as Rep, p2.profile_key as Customer, \n        p.first_name as RepName,p2.first_name as CustomerName\nfrom profile_appointment pa    \njoin profile_appointment pa2 on pa.appointment_key = pa2.appointment_key\njoin profile p    on p.profile_key = pa.profile_key    and  p.profile_type_key = '4'\njoin profile p2   on p2.profile_key = pa2.profile_key   and  p2.profile_type_key = '6'  \n","142":"UPDATE Table1\nSET \n    f2 = T2.f2, \n    f3 = convert(varchar, T2.f3, 101) \nFROM \n    Table1 T1\nINNER JOIN \n    Server.DB.dbo.Table2 T2\nON \n    T1.f1 = T2.f1\nWHERE \n    T2.f3 = (SELECT MAX(f3) FROM Server.DB.dbo.Table2 WHERE f1 = T1.f1)\n","143":"SELECT fID_a FROM tbl\nGROUP BY fID_a \nHAVING MAX(fID_b)=1\nAND MIN(fID_b)=1\n","144":"COUNT(CASE WHEN Bids.Burned=0 THEN 1 END) AS 'ActiveBids', \nCOUNT(CASE WHEN Bids.Burned=1 THEN 1 END) AS 'BurnedBids'\n","145":"SELECT \n* FROM Table 1\nJOIN Table2 2 on 2.ID = Table1.ID\nUNION\nSELECT \n* FROM Table 1\nJOIN Table2 22 on 22.ParentID = Table1.ID\n","146":"UPDATE PlayerLeague AS l\n    JOIN (\n        SELECT p.player_id, @i := @i + 1 AS player_position\n        FROM (\n            SELECT ss.player_id\n            FROM PlayerStat AS ss\n                JOIN PlayerLeague AS ll\n                    ON ss.player_id=ll.player_id\n            WHERE ll.league_id=3\n            ORDER BY ss.score DESC\n        ) AS p, (SELECT @i := 0) AS tmp\n    ) AS s ON s.player_id=l.player_id\nSET l.player_position = s.player_position\n","147":"SELECT Category AS 'Category\/SubCategory', COUNT(*) AS 'Count'\nFROM  Categories\nGROUP BY Category\n\nUNION\n\nSELECT SubCategory AS 'Category\/SubCategory', COUNT(*) AS 'Count'\nFROM  Categories\nGROUP BY SubCategory\n","148":"declare @Foo as Table ( ColA Int, ColB Int );\ninsert into @Foo ( ColA, ColB ) values ( 1, 1 ), ( 1, 2 ), ( 2, 1 );\nselect * from @Foo;\n\nselect *\n  from @Foo\n  intersect\n  select *\n    from ( values ( 2, 1 ) ) as Bar( ColA, ColB );\n","149":" def escapeSQLDelimiters(dataToEscape: String) = {\n    dataToEscape flatMap { c =>\n      c match {\n        case '\\\\' => \"\\\\\\\\\"\n        case '\\u0000' => \"\\\\0\"\n        case '\\n' => \"\\\\n\"\n        case '\\t' => \"\\\\t\"\n        case '\\r' => \"\\\\r\"\n        case '\\b' => \"\\\\b\"\n        case '\\'' => \"\\\\\\'\"\n        case '\\\"' => \"\\\\\\\"\"\n        case _ => c.toString\n      }\n    }\n  }\n","150":"var result = db.tbl_feesCollection.Max(element => element.VarInvoiceNo);\n","151":"SELECT   JobCode, designation, SUM(salaryWithIncrement)\nFROM     table1\nGROUP BY JobCode, designation\n","152":"SELECT distinct on (parent_id) \n    parent_id\n  , version_id\nFROM items\nORDER BY parent_id, version_id DESC\n","153":"DECLARE @ActionNumber varchar(20)='EHPL-DES-SQ-1021'\n\ndeclare @tmp table\n(\n    id int identity(1,1),\n    item varchar(20)\n)\n\ninsert into @tmp (item)\nselect * from dbo.ANOSplit(@ActionNumber,'-')\n\nselect * from @tmp where id in (2,3)\n","154":"reportContext.getHttpServletRequest().getSession().getAttribute(\"db\");\n","155":"IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE \nid = OBJECT_ID(N'[dbo].[SomeStoredProcedure]') AND \nOBJECTPROPERTY(id,N'IsProcedure') = 1)\n\nEXEC sp_executesql N'CREATE PROCEDURE [dbo].[SomeStoredProcedure] AS\n\nSELECT ''SPROC Template'''\n\nGO\n\nSET ANSI_NULLS ON\n\nGO\n\nSET QUOTED_IDENTIFIER ON\n\nGO\n\n ALTER PROCEDURE SomeStoredProcedure\n","156":"SELECT * FROM image WHERE id NOT IN \n    (SELECT image_id FROM user_image WHERE user_id = THE_USER_ID);\n","157":"INNER JOIN T_CASE CF ON\n(\n    A.AWESOME_ID = CF.AWESOME_ID    \n    \/\/ Several more conditions\n)\nAND\n(\n        (\n            @NEWPARAM = 1 AND\n            cy.SOMEFLAG = 0 AND\n            CF.SOMEDATE IS NOT NULL\n        )\n        OR\n        (\n            @NEWPARAM = 1 AND\n            cy.SOMEFLAG = 1 AND\n            CF.CASE_TYPE = 1 AND\n            CF.SOMEDATE IS NOT NULL\n        )\n        OR\n        (\n            @NEWPARAM <> 1 AND\n            cy.SOMEFLAG = 0 AND\n            CF.SOMEDATE IS NULL\n        )\n        OR\n        (\n            @NEWPARAM <> 1 AND\n            ((cy.SOMEFLAG = 1 AND CF.CASE_TYPE = 0) OR\n             CF.SOMEDATE IS NULL\n            )\n        )\n    )\n","158":"select x from y\n    where (( UPPER(d.Gender) = UPPER(@gender) OR  UPPER(d.Gender) ='EITHER') \n               AND @gender IS NOT NULL ) \n          OR (@gender IS NULL AND 1=1)\n","159":"CREATE TRIGGER  trTriggerName  ON  tblNames   \n AFTER INSERT  AS  \nUPDATE tblNames \n   SET UpFileName = replace(UpFileName,'%20','_') \nFROM tblNames t\nJOIN INSERTED i ON t.ID = i.ID\n","160":"EXEC sp_spaceused 'TableName'\n","161":"DECLARE @x xml \nDECLARE @strXML varchar(MAX)\nSET @x=N'<Employee><Name>Luftwaffe<\/Name><\/Employee>'\nset @strXML = '<xml version=\"1.0\" encoding=\"ISO-8859-1\"\/>' + CONVERT(varchar(MAX),@x)\nSELECT @strXML  \n","162":";With Ordered as (\n    select UserId,ContactType,ContactDetail,LoadDate,\n          ROW_NUMBER() OVER (\n                PARTITION BY UserID,ContactType\n                ORDER BY LoadDate DESC) as rn\n    from ContactDetails\n)\nselect * from Ordered where rn = 1\n","163":"SELECT  DAYNAME(sip_Date) AS DAY,\n        COUNT(DISTINCT sip_callid)\nFROM    request_line\nWHERE DAYNAME(sip_Date) = 'Saturday' \nGROUP BY DAYNAME(sip_Date)\n","164":"SELECT * FROM Product ORDER BY FIELD(CategoryID, 2, 5) DESC\n","165":"CREATE TABLE \u0442\u0430\u04311 (id int, name varchar(30)) CHARSET=utf8;\n","166":"Select Distinct Top 1000000 tblAssets.AssetName,\n(Select Case When tblRegistry.Value = '2' Then 'Notify Only'\n  When tblRegistry.Value = '3' Then 'Download Notify'\n  When tblRegistry.Value = '4' Then 'Scheduled'\n  When tblRegistry.Value = '5' Then 'Download and Custom'\n  Else tblRegistry.Value End As RegistryValue\nFrom tblAssets As TA Left Join tblRegistry On tblRegistry.AssetID = TA.AssetID\nWhere tblRegistry.Valuename = 'AUoptions' And TA.AssetID = tblAssets.AssetID)\nAs AUOption\nFrom tblAssets\n","167":"WHERE datefieldsubquery = Convert(varchar(50),YEAR(GETDATE()))+'-12-31 23:59:00'\n","168":"user_id   T1   T2   T3   T4\n-------  ---  ---  ---  ---\n   1      -2   0    0    0\n   1       2   0    0    0\n   2       1   0    0    0\n   2       2   0    0    0\n","169":"select sourceIP, sum(sourceBytes) TotalBytes\nfrom flows \ngroup by sourceIP\nhaving sum(SourceBytes) > 50\norder by sum(sourceBytes) desc\n","170":"select foreign_id \nfrom your_table\nwhere string in ('house', 'window')\ngroup by foreign_id\nhaving count(distinct string) = 2;\n","171":"select Distinct Meal from NewTab NT\nwhere not exists \n   (select 1 from NewTab where NeededQty>AvailableQty \n    and NT.Meal = Meal);\n","172":"select post_id,\n       sum(case when ul_key = 'u_like' then ul_value else 0 end) as likes,\n       sum(case when ul_key = 'u_dislike' then ul_value else 0 end) as dislikes\nfrom wp_like_dislike_counters\ngroup by post_id;\n","173":"with todelete as (\n      select t.*,\n             row_number() over (partition by col1, col2, col3, . . . order by newid()) as seqnum\n      from table t\n     )\ndelete from todelete\n    where seqnum % 2 = 0;\n","174":"Dim dbs As DAO.Database\nDim rsTable As DAO.Recordset\nDim rsQuery As DAO.Recordset\n\nSet dbs = CurrentDb\n\n'Open a table-type Recordset\nSet rsTable = dbs.OpenRecordset(\"tblSupeGenNotes\", dbOpenDynaset)\n\n'Open a dynaset-type Recordset using a saved query\nSet rsQuery = dbs.OpenRecordset(\"qrySupeGenNotes\", dbOpenDynaset)\n\n'update the values vased on the contents of the form controls\nrsQuery.Edit\nrsQuery![NoteDate] = Me.tbxNoteDate\nrsQuery![SupeType] = Me.cbxSupeType\nrsQuery![SupeAlerts] = alrt\nrsQuery![Note] = Me.tbxNote\nrsQuery.Update\n\n'clean up\nrsQuery.Close\nrsTable.Close\nSet rsQuery = Nothing\nSet rsTable = Nothing\n","175":";WITH d AS \n(\n  SELECT TOP (366) d = DATEADD(DAY, ROW_NUMBER() OVER (ORDER BY object_id), '20111231')\n  FROM sys.all_objects\n)\nINSERT dbo.[a table]([Date])\n  SELECT d FROM d \n  WHERE d NOT IN (SELECT [Date] FROM dbo.[a table])\n  AND d <= DATEADD(DAY, 0-DATEPART(WEEKDAY, GETDATE()), GETDATE());\n","176":"SELECT i.ItemName, i.CreateDate,\n       (uc.LastName + ', ' + uc.FirstName) as [Created By Name], \n       i.CreatedBy, i.LastChanged,\n       (ucb.LastName + ', ' + ucb.FirstName) as [Last Changed By Name],\n       i.LastChangedBy\nFROM Items i LEFT JOIN\n     Users uc\n     ON i.CreatedBy = uc.UserID LEFT JOIN\n     Users ucb\n     ON i.LastChangedBy = ucb.UserId\nWHERE i.LastChangedBy = 0001;\n","177":"        PoolingDataSource derbyDataSource1 = new PoolingDataSource();\n        derbyDataSource1.setClassName(\"org.apache.derby.jdbc.EmbeddedXADataSource\");\n        derbyDataSource1.setUniqueName(\"derby1\");  \n        derbyDataSource1.getDriverProperties().setProperty(\"databaseName\", \"database1\");\n        derbyDataSource1.init();\n\n        PoolingDataSource derbyDataSource2= new PoolingDataSource();\n        derbyDataSource2.setClassName(\"org.apache.derby.jdbc.EmbeddedXADataSource\");\n        derbyDataSource2.setUniqueName(\"derby2\");\n        derbyDataSource2.getDriverProperties().setProperty(\"databaseName\", \"database2\");\n        derbyDataSource2.init();\n\n        BitronixTransactionManager btm = TransactionManagerServices.getTransactionManager();\n\n        btm.begin();\n        try {\n            Connection c1= derbyDataSource1.getConnection();\n            Connection c2= derbyDataSource2.getConnection();\n\n            \/***Use c1 and c2 to execute statements again their corresponding DBs as usual**\/\n\n\n            btm.commit();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            btm.rollback();\n        }\n","178":"LOAD DATA LOCAL INFILE 'CategoryData.txt'\n    REPLACE INTO TABLE db.Category(CategoryName)\n    LINES STARTING BY '('\n    LINES TERMINATED BY ')\\n'\n    FIELDS TERMINATED BY ','\n    SET ID = NULL;\n","179":"field FILLER,\ncol1 EXPRESSION \"REGEXP_REPLACE(:field,'^([^|]*)\\\\|([^|]*)\\\\|(.*)\\\\|([^|]*)\\\\|([^|]*)\\\\|([^|]*)$', '\\\\1')\",\ncol2 EXPRESSION \"REGEXP_REPLACE(:field,'^([^|]*)\\\\|([^|]*)\\\\|(.*)\\\\|([^|]*)\\\\|([^|]*)\\\\|([^|]*)$', '\\\\2')\",\ncol3 EXPRESSION \"REGEXP_REPLACE(:field,'^([^|]*)\\\\|([^|]*)\\\\|(.*)\\\\|([^|]*)\\\\|([^|]*)\\\\|([^|]*)$', '\\\\3')\",\ncol4 EXPRESSION \"REGEXP_REPLACE(:field,'^([^|]*)\\\\|([^|]*)\\\\|(.*)\\\\|([^|]*)\\\\|([^|]*)\\\\|([^|]*)$', '\\\\4')\",\ncol5 EXPRESSION \"REGEXP_REPLACE(:field,'^([^|]*)\\\\|([^|]*)\\\\|(.*)\\\\|([^|]*)\\\\|([^|]*)\\\\|([^|]*)$', '\\\\5')\",\ncol6 EXPRESSION \"REGEXP_REPLACE(:field,'^([^|]*)\\\\|([^|]*)\\\\|(.*)\\\\|([^|]*)\\\\|([^|]*)\\\\|([^|]*)$', '\\\\6')\"\n","180":"SELECT TOP 1 MAX(e1.StartDate), COUNT(e2.eventID) FROM event e1\nINNER JOIN event e2 \n  on e1.StartDate BETWEEN e2.StartDate \n                      AND DATEADD(second,e2.Duration,e2.StartDate)\nGROUP BY e1.EventID\nORDER BY COUNT(e2.eventID) DESC\n","181":"select v1.word as word1, v2.word as word2\nfrom verb v1 join\n     verb v2\n     on v1.word < v2.word\nlimit 10;\n","182":"UPDATE [dbo].[ImageDocuments]\nSET [dbo].[ImageDocuments].[OriginalFileName] = d.FileName,\n    [dbo].[ImageDocuments].[StorageFileName] = d.RealName\nOUTPUT INSERTED.ImageDocumentId\nINTO @Ids\nFROM [dbo].[ImageDocuments] as fu, \n     [dbo].[Documents] as d\nWHERE fu.DocumentID = d.DocumentID;\n\nDELETE FROM Documents\nWHERE DocumentID IN (SELECT ImageDocumentId FROM @IDs);\n","183":"SQL> with t1(Name1, LastName, tPoints, aPoints, sPoints, gPoints, type1) as(\n  2  select 'John'  ,  'Johnny',  15,  14,  13,  10,   1  from dual union all\n  3  select 'Joe'   ,  'P.'    ,  12,  11,  26,  10,   1  from dual union all\n  4  select 'Matt'  ,  'Q.'    ,  11,  26,  37,  44,   2  from dual union all\n  5  select 'Sorine',  'P.'    ,  55,  9 ,  8 ,  7,    2  from dual union all\n  6  select 'Ali'   ,  'Ahmed' ,  30,  44,  88,  65,   2   from dual\n  7  )\n  8  select type1\n  9       , tpoints\n 10       , apoints\n 11       , name1\n 12       , Lastname\n 13    from t1\n 14   order by case when type1=1 then tpoints else type1 end desc,\n 15            case when type1=2 then apoints else type1 end desc;\n\n     TYPE1    TPOINTS    APOINTS NAME1  LASTNAME\n---------- ---------- ---------- ------ --------\n         1         15         14 John   Johnny\n         1         12         11 Joe    P.\n         2         30         44 Ali    Ahmed\n         2         11         26 Matt   Q.\n         2         55          9 Sorine P.\n","184":"UPDATE mytable\nSET [date] = DATEADD(DAY, 7, [date])\nWHERE [date] >= '2014-02-20' AND [date] < '2014-02-21'\n","185":"CREATE TABLE Example (\n    _id INTEGER PRIMARY KEY,\n    name TEXT,\n    index INTEGER,\n    score INTEGER,\n    UNIQUE (name, index) ON CONFLICT REPLACE\n)\n","186":"select T2.id,\n       coalesce((T1.classement=T2.classement),0)+\n       coalesce((T1.aptitude=T2.aptitude),0)+\n       coalesce((T1.A=T2.A),0)+\n       coalesce((T1.B=T2.B),0)+\n       coalesce((T1.C=T2.C),0) match_count\nfrom Temp T1\ncross join Temp T2\nwhere T1.id = 1 and T2.id <> 1 \norder by 2 desc\n","187":"select * from Users left outer join School on Users.Schoolid = School.Schoolid\n","188":"SELECT to_char(d.day, 'YYYY\/MM\/DD\" - \"')\n    || to_char(d.day + 6, 'YYYY\/MM\/DD') AS week\n     , count(situation ILIKE '%active%' OR NULL) AS activated\n     , ...\nFROM   (\n   SELECT day::date\n   FROM   generate_series('2014-08-11'::date\n                        , '2014-09-14'::date\n                        , '1 week'::interval) day\n   ) d\nLEFT   JOIN account_details a ON a.date_opened >= d.day \n                             AND a.date_opened <  d.day + 7  -- 7, not 6!\nGROUP  BY d.day;\n","189":"$object_id = 2;\n\nDoctrine::getTable('Tagset')->createQuery('t')\n  ->select('t.tag_id, o.id, o.name, COUNT(t.tag_id) AS tag_count')\n  ->innerJoin('t.Object o WITH o.id != ?', $object_id)\n  ->where('t.tag_id IN (SELECT t.tag_id FROM Tagset t WHERE t.object_id = ?)', $object_id)\n  ->groupBy('t.object_id')\n","190":"select district,\n  sum(case when sex ='M' then 1 else 0 end) M,\n  sum(case when sex ='F' then 1 else 0 end) F,\n  sum(case when sex ='NI' then 1 else 0 end) NI\nfrom table1\ngroup by district\norder by district\n","191":"SELECT  \n i.equip_pk,\n i.request_pk, \n NVL(MY_ALIAS.EQUIP_ALIAS_ID, 'Nothing'\n FROM tableOne i\n LEFT OUTER JOIN table2 MY_ALIAS ON (i.EQUIP_PK = MY_ALIAS.EQUIP_PK)\n WHERE i.request_pk=:requestPk \n","192":"echo.If @intA ^<^> @intB> \"C:\\output_file.txt\"\n","193":"SELECT EID, SUM(PCNUM) FROM table1\nGROUP BY EID;\n","194":"DECLARE @path NVARCHAR(500) = 'F:\\Fruit Seeds-Category Oil\\Quality- Fine Seeds';\n\nDECLARE @i  INT = 1;\nDECLARE @ix INT = 0;\n\nWHILE @i > 0\nBEGIN\n    SET @ix = @i;\n    SET @i = CHARINDEX('-', @Path, @i + 1);\nEND\n\nSELECT LEFT(@path, @ix - 1)\n","195":"-- assume @dbname has the name of the database where getdetails was created\ndeclare @sql nvarchar(4000), @params nvarchar(4000), @dbname sysname\nset @dbname = 'test'\nset @sql = @dbname + '..getdetails'\nset @params = ''\nexec sp_executesql @sql, @params\n","196":"select (case when (1 < 2) then 'True' else 'False' end) as one,\n       (case when (1 > 2) then 'True' else 'False' end) as two\nfrom table\n","197":"INSERT INTO software(Name, Type)\nSELECT (CAST(Name as nvarchar), Type)\nFROM serials (ProductName, Type)\n","198":"select round(123.456, 2, 1)\n","199":"  String hqlQuery =\" SELECT message  FROM     p_message  pm WHERE pm.message_id in (SELECT a.scene FROM p_config a INNER JOIN  p_rec_type b  ON a.email_id=b.email_id AND rec_type =:rectype          WHERE a.email_type=:emailTYpe)\"; \n    query = session.createQuery(hqlQuery);\n    query.setParameter(\"rectype\", 2);\n    query.setParameter(\"emailTYpe\", 1);\n","200":"select prs.id, prs.name, count(*) from Person prs\njoin(select process_no, id\n     from  Responsible res \n     Union all\n     select process_no, id\n     from  Linked  lin ) a on a.id=prs.id\ngroup by prs.id, prs.name\n","201":"String filter = \"hachiko\"\ndef hero = Hero.createCriteria().list {\n    familiar {\n        like('name', filter)\n    }    \n}\n","202":"select cu.cust_id, cu.cust_name, ci.location\n  from cinema ci\n  join booking b\n    on ci.c_id = b.c_id\n  join customer cu\n    on b.cust_id = cu.cust_id\n where ci.location <> 'Paris'\n","203":"SELECT car.name, testresults.testname, isnull(testresults.result, 0) FROM \ncars CROSS JOIN\nsafetytests\nLEFT JOIN testresults on safetytests.testid = testresults.testid AND car.id = testresults.carid\n","204":"create or replace view state_city_view as\nselect state_name as name, '' as parent_name \nfrom state\nunion all\nselect city_name || ' ' || population name, state_name as parent_name\nfrom city;\n","205":"select\n    a.ID as \"Article-Number\", a.Name as \"Name\"\nfrom\n    Articles a\nwhere\n    (a.ID = '3264')\n","206":"declare o CURSOR FAST_FORWARD FOR\nselect comments from EVENT\n\ndeclare @comment nvarchar(max)\n\nOPEN o FETCH NEXT FROM o into @comment\n\nwhile @@FETCH_STATUS = 0\nBEGIN\nDeclare @item nvarchar(750)\n\ndeclare @tbl Table(Category nvarchar(250), Description nvarchar(250), Quantity nvarchar(250), Value DECIMAL(10,2))\n\ndeclare c CURSOR FAST_FORWARD FOR\nSELECT items FROM dbo.Split(@comment, Char(10))\n\nOPEN c FETCH NEXT FROM c into @item\n\nWHILE @@FETCH_STATUS = 0\nBEGIN\n    set @item = @item + ':'\n    insert into @tbl\n    Values (LTRIM(RTRIM(SUBSTRING(@item, 1, CHARINDEX(' - ', @item) - 1))),\n            CASE when @item like '%D:%' Then LTRIM(RTRIM(SUBSTRING(@item, CHARINDEX('D:', @item) + 2, CHARINDEX(':', @item, CHARINDEX('D:', @item)+2) - CHARINDEX('D:', @item) - 3))) else '' end,\n            CASE when @item like '%Q:%' Then LTRIM(RTRIM(SUBSTRING(@item, CHARINDEX('Q:', @item) + 2, CHARINDEX(':', @item, CHARINDEX('Q:', @item)+2) - CHARINDEX('Q:', @item) - 3))) else '1' end,\n            CASE when @item like '%V:%' Then CONVERT(DECIMAL(10,2),dbo.RemoveNonNumericCharacters(LTRIM(RTRIM(SUBSTRING(@item, CHARINDEX('V:', @item) + 2, CHARINDEX(':', @item, CHARINDEX('V:', @item)+2) - CHARINDEX('V:', @item) - 3))))) else 0 end)\n    FETCH NEXT FROM c into @item\nEND\nCLOSE c DEALLOCATE c\nEND\nCLOSE o DEALLOCATE o\nSELECT * FROM @tbl\n","207":"WITH RECURSIVE year_table(n) AS (\n    SELECT 1000\n  UNION ALL\n    SELECT n+1 FROM year_table\n)\nSELECT Id, To_Date(DAY || ' ' || MONTH || ' ' || YEAR, 'DD MM YYYY')\n  FROM Feasts\n WHERE To_Date(DAY || ' ' || MONTH || ' ' || YEAR, 'DD MM YYYY') >=\n       Date_From\n   AND To_Date(DAY || ' ' || MONTH || ' ' || YEAR, 'DD MM YYYY') <= Date_To\n   AND YEAR IS NOT NULL\nUNION\nSELECT Feasts.Id,\n       To_Date(DAY || ' ' || MONTH || ' ' || Year_Table.n, 'DD MM YYYY')\n  FROM Feasts, Year_Table\n WHERE n >= To_Char(Date_From, 'YYYY')\n   AND n <= To_Char(Date_To, 'YYYY')\n   AND Feasts.YEAR IS NULL;\n","208":" select 'text1' text,\n        SUM(CASE WHEN \"XY\" LIKE '%XP Pro%' THEN 1 ELSE 0 END) blabla,        \n        SUM(CASE WHEN \"XYZ\" = 1 THEN 1 ELSE 0 END) blablabla,\n        SUM(CASE WHEN \"ABS\" = 1 THEN 1 ELSE 0 END) blablalasba        \n    from \n    table1\n    UNION ALL\n    select 'text2' text,\n        SUM(CASE WHEN \"XY\" LIKE '%XP Pro%' THEN 1 ELSE 0 END) blabla,        \n        SUM(CASE WHEN \"XYZ\" = 1 THEN 1 ELSE 0 END) blablabla,\n        SUM(CASE WHEN \"ABS\" = 1 THEN 1 ELSE 0 END) blablalasba        \n    from \n    table2\n    UNION ALL\n    select 'text3' text,\n        SUM(CASE WHEN \"XY\" LIKE '%XP Pro%' THEN 1 ELSE 0 END) blabla,        \n        SUM(CASE WHEN \"XYZ\" = 1 THEN 1 ELSE 0 END) blablabla,\n        SUM(CASE WHEN \"ABS\" = 1 THEN 1 ELSE 0 END) blablalasba        \n    from \n    table3\n","209":"select count(*) from BadWords\nwhere @userName like '%'+theBadWord+'%'\n","210":"select * from openquery\n ( myLinkedServer\n  ,'Select * from mySQLTables where complicated joins\/filters')\n","211":"SET @parentID = parentId;\n","212":"    <WebMethod()> Public Function LookupItem(ByVal strUPC As String) As DataSet\n    Try\n        Dim connUPC As New Data.SqlClient.SqlConnection\n        Dim cmdUPC As New Data.SqlClient.SqlCommand\n        Dim daUPC As New Data.SqlClient.SqlDataAdapter\n        Dim dsUPC As DataSet = New DataSet\n        Dim ConnectionString As String = \"Data Source=localhost\\db;Initial Catalog=DB_SQL;Persist Security Info=True;User ID=myID;Password=myPass\"\n        Dim strSQL As String = \"SELECT Inv_Qty.*,PLU.*,PLU.PLU_NUM, PLU.DEPT_NUM From PLU INNER JOIN Inv_Qty ON PLU.PLU_NUM=Inv_Qty.PLU_NUM WHERE ((PLU.PLU_NUM) = '\" & strUPC & \"');\"\n\n        '\/\/ Opening the connection\n        connUPC.Open()\n        cmdUPC.Connection = connUPC\n        cmdUPC.CommandText = strSQL\n\n        daUPC.SelectCommand = cmdUPC\n        daUPC.Fill(dsUPC)\n\n        connUPC.Close()\n        connUPC = Nothing\n\n        Return dsUPC\n    Catch ex As Exception\n\n    End Try\nEnd Function\n","213":"using (\n    select 1 as ana_rb, 1 as ana_id,\n           'da' as ana_kupanje, 'da' as ana_kosa, 'da' as ana_brijanje,\n           'da' as ana_zubi, 'da' as ana_nokti, 'da' as ana_odjeca,\n           'da' as ana_koza, 'da' as ana_dek_rizik, 'da' as ana_dek_rizik_gdje,\n           'da' as ana_dek_postojeci, 'da' as ana_dek_post_gdje,\n           'da' as ana_pokretnost, 'da' as ana_kolica, 'da' as ana_pomagala,\n           'veki' as azurirao, getdate() as datumazur\n) e\n","214":"SELECT to_char(o.date_order, 'DD-MM-YYYY') AS date_order\n        , sum(o.amount_total) AS amount\nFROM public.sale_order o\nWHERE EXISTS ( SELECT *\n        -- These tables probably have an N:1 relation\n        -- to public.sale_order\n        -- We don't have to sum them; just check existence.\n        FROM public.sale_order_line l\n        JOIN public.product_product pp ON pp.id = l.product_id\n        JOIN public.product_template pt ON pt.id = pp.product_tmpl_id\n        JOIN public.product_category pc ON pc.id = pt.categ_id\n        WHERE pc.name = 'Starchi'\n        AND l.order_id = o.id\n        )\n  AND o.order_year = '2015'\n  AND o.order_month = 'April'\nGROUP BY o.date_order\nORDER BY o.date_order ASC\n        ;\n","215":"SELECT *\nFROM    Services\nWHERE   Service IN (1, 3)\nAND     pay_date > '2014-07-01'\nAND     pay_date < '2014-07-30'\nAND     NOT EXISTS \n        (   SELECT  1 \n            FROM    services AS s2 \n            WHERE   s2.Name = s.Name \n            AND     s2.Status = 1 \n            AND     s2.Service IN (1, 3)\n            AND     s2.pay_date > '2014-07-01'\n            AND     s2.pay_date < '2014-07-30'\n        );\n","216":"SELECT SUM(amount)\nFROM sales_orders \nWHERE date BETWEEN '2011-03-06' and '2011-04-06' -- not sure what your date is.\n","217":"select min(value) \nfrom table\nwhere value <> (\n select min(value) form table\n);\n","218":"with t as (\n      select '12:10:08: Dialing12:10:08: Connecting12:10:08: ABC: abc:9433769781$100.88.77.0:878712:10:08: ABCD: 000012:10:09: Agent Initializing12:10:25: On Call12:10:25: Assigned to operator12:10:25: Waiting for Supervisor12:10:30: Waiting for Manager12:11:30: Call Ended12:11:30: Call Not connected.. ' as col\n     ),\n     cte as (\n      select left(t.col, 9 + patindex('%[0-9][0-9]:[0-9][0-9]:[0-9][0-9]: %', substring(t.col, 11, 1000))) as val,\n             substring(t.col, 10 + patindex('%[0-9][0-9]:[0-9][0-9]:[0-9][0-9]: %', substring(t.col, 11, 1000)), 1000) as rest\n      from t\n      where t.col like '[0-9][0-9]:[0-9][0-9]:[0-9][0-9]: %[0-9][0-9]:[0-9][0-9]:[0-9][0-9]: %'\n      union all\n      select (case when rest like '[0-9][0-9]:[0-9][0-9]:[0-9][0-9]: %[0-9][0-9]:[0-9][0-9]:[0-9][0-9]: %'\n                   then left(rest, 9 + patindex('%[0-9][0-9]:[0-9][0-9]:[0-9][0-9]: %', substring(rest, 11, 1000)))\n                   else rest\n              end) as val,\n             substring(rest, 10 + patindex('%[0-9][0-9]:[0-9][0-9]:[0-9][0-9]: %', substring(rest, 11, 1000)), 1000) as rest\n      from cte\n      where rest like '[0-9][0-9]:[0-9][0-9]:[0-9][0-9]: %'\n     )\nselect val\nfrom cte;\n","219":"ALTER PROCEDURE [dbo].[GetSimilarIssues] \n(\n @InputSearch varchar(255)\n)\nAS\nBEGIN\n-- SET NOCOUNT ON added to prevent extra result sets from\n-- interfering with SELECT statements.\nSET NOCOUNT ON;\n\nDECLARE @SearchText varchar(500);\n\nSELECT @SearchText = '\"' + @InputSearch + '*\"'\n\nSELECT  PostId, Summary, [Description], \nCreated\nFROM Issue\n\nWHERE FREETEXT (Summary, @SearchText);\nEND\n","220":"select AC.category_id, count(*) as num_articles\nfrom categories C\njoin articles_categories AC on C.id = AC.category_id\njoin (\n  select id from articles where match(name, teaser, plaintext_contents) against ('some text' in boolean mode)\n) A_IDS ON A_IDS.id=AC.article_id\n\ngroup by AC.category_id;\n","221":"\/\/Your query\n$queryliste = \"SELECT id, nom, prenom FROM table\";\n\n\/\/Initialize pdo connection use your $name, $host, $username and $password\n$pdoLink = new PDO(\"mysql:dbname={$name};host={$host};charset=utf8\", $username, $password);\n\n\/\/Prepare statement\n$statement = $pdoLink-> prepare($queryliste);\n\/\/Execute query\n$statement -> execute();\n\n\/\/(1) Fetch rows using PDO::FETCH_ASSOC\n$rows = $statement -> fetchAll(PDO::FETCH_ASSOC);\n$statement -> closeCursor();\nforeach($rows as $row) {\n    echo $row['id'];\n    echo $row['nom'];\n    echo $row['prenom'];\n}\n\n\/\/(2) or you can use PDO::FETCH_NUM\n$rows = $statement -> fetchAll(PDO::FETCH_NUM);\n$statement -> closeCursor();\n\nforeach($rows as list($x, $y, $z)) {\n    echo $x;\n    echo $y;\n    echo $z;\n}\n\n\/\/(3) or you can rewrite the last in the same form you are using as \nwhile((list($x, $y, $z) = $statement->fetch(PDO::FETCH_NUM))) {\n    echo $x;\n    echo $y;\n    echo $z;\n}\n$statement -> closeCursor();\n","222":"DECLARE @i int = 1019\n\nSELECT c.id\nFROM\n  Users c LEFT JOIN offers o  \n  ON c.id = o.UserId  \n  AND o.ProductId IN (@i)\nWHERE\n  o.UserId IS NULL\nORDER BY\n  c.id\n","223":"SELECT * \nFROM (SELECT   SUM(pur.purchase_net_invoice_value), par.party_desc\n      FROM     purchase pur\n      JOIN     party par ON par.party_id = pur.party_id\n      GROUP BY par.party_desc\n      ORDER BY 1 DESC)\nWHERE rownum <= 5;\n","224":"select Project.MEDIA_F('tv', '06-05-13', 'n') \nfrom dual;\n","225":"select\n    passenger_no, hr\nfrom\n    ride_txn rt,\n    (\n        select  0 hr union all select  1 union all select  2 union all\n        select  3    union all select  4 union all select  5 union all\n        select  6    union all select  7 union all select  8 union all \n        select  9    union all select 10 union all select 11 union all\n        select 12    union all select 13 union all select 14 union all\n        select 15    union all select 16 union all select 17 union all\n        select 18    union all select 19 union all select 20 union all\n        select 21    union all select 22 union all select 23\n    ) hrs\nwhere\n    action = 'Board' and\n    hrs.hr between\n        hour(txn_time) \/* could add 3599 seconds to only count top of the hour *\/\n        and\n        (\n            select min(txt_time) from ride_txn rt2\n            where \n                    rt2.passenger_no = rt.passenger_no\n                and rt2.txt_time > rt.txt_time and action = 'Deboard'\n        )\n","226":"SELECT\n    [Users],\n    [Stars]\nFROM\n    [Table]\nWHERE\n    [Users] != 'Admin'\n    OR [Stars] > 3\n","227":"select Convert(date, BookedDateTime) as Date, AVG(datediff(minute, BookedDateTime, PickupDateTime)) as AverageTime\n    from tablename \n    group by Convert(date, BookedDateTime)  \n    order by Convert(date, BookedDateTime) \n","228":"SELECT *\nFROM (your_UNION_query) AS p\nWHERE NOT ( colX = 'TERMINATED'\n          AND EXISTS\n            ( SELECT *\n              FROM (your_UNION_query) AS q\n              WHERE q.id = p.id\n                AND q.colY = 'ACTIVE'\n            )\n          )\n","229":"CREATE PROCEDURE Find_Text_In_SP\n@StringToSearch varchar(100) \nAS \n   SET @StringToSearch = '%' +@StringToSearch + '%'\n   SELECT Distinct SO.Name\n   FROM sysobjects SO (NOLOCK)\n   INNER JOIN syscomments SC (NOLOCK) on SO.Id = SC.ID\n   AND SO.Type = 'P'\n   AND SC.Text LIKE @stringtosearch\n   ORDER BY SO.Name\nGO\n","230":"Create or Replace procedure Main\n\n   SAVEPOINT sp_1;\n   Call procedure_1();       \n   Call procedure_2();\n\n   IF X = true THEN\n      ROLLBACK TO sp_1;\n   END IF;\n\nEND Procedure Main;\n","231":"BEGIN\n  FOR c IN ( SELECT table_name FROM user_tables WHERE table_name LIKE 'EXT_%' )\n  LOOP\n    EXECUTE IMMEDIATE 'DROP TABLE ' || c.table_name;\n  END LOOP;\nEND;\n","232":"c.site_gb LIKE 'A%'\nc.up_dept_cd='A001'\n","233":"with x as (\n  select '\u010cernick\u00fd' name from dual union all\n  select 'Mari\u00e1n' from dual\n)\nselect convert(name, 'US7ASCII')  \n  from x;\n","234":"conn = database('databasename','username','password');\ndbpath = 'C:\\Users\\______.mdb'; %insert database path\ntableName = 'datetime'; %insert tablename here in MSAccess\ncolname = {'column1'} %column of your tables in MsAccess\ndate = datestr(now); %the string of date and time\ncoldata = {date}\ninsert(conn,tableName,colname,coldata); %will insert the data to the database.\nclose(conn);\n","235":"update your_table\nset column1 = column1 || column2\n","236":"SELECT st_category AS cat, st_gender, COUNT(studentPK)\nFROM es_preadmission\nWHERE st_category IN ('GEN','SC','ST',....,'SGC')\nGROUP BY st_category, st_gender\nUNION ALL\nSELECT st_handi AS cat, st_gender, COUNT(studentPK)\nFROM es_preadmission\nWHERE st_handi = 'PH'\nGROUP BY st_handi, st_gender\n","237":"exec sp_depends 'view name'\n","238":"select p.*,\n       (select count(*)\n        from users u \n        where u.uid not in (select o.uid from orders o where o.productid = p.productid) and \n              u.gender = 'Male'\n       ) as NumMales,\n       (select count(*)\n        from users u \n        where u.uid not in (select o.uid from orders o where o.productid = p.productid) and \n              u.gender = 'Female'\n       ) as NumFemales     \nfrom products p ;\n","239":"SELECT group.id,COUNT(users.username) FROM groups\nINNER JOIN users ON users.group_id=groups.id\nGROUP BY groups.id\n","240":" SELECT name, address FROM customer WHERE status = 'active' and zip = ?\n","241":"SELECT  *\nFROM    A\n        INNER JOIN B ON B.AID = A.AID\n        INNER JOIN C ON C.BID = B.BID\n        INNER JOIN D ON D.AID = A.AID\n        INNER JOIN E ON E.DID = D.DID\n        INNER JOIN F ON F.EID = E.EID\nWHERE   C.Field = F.Field\n","242":"SQL> create or replace type numbers_nt as table of number\n  2  \/\n\nType created.\n\nSQL>\nSQL> declare\n  2      l_array numbers_nt;\n  3  begin\n  4      l_array := numbers_nt (7521,7566,7654);\n  5      for r in ( select ename\n  6                 from emp\n  7                 where empno in ( select *\n  8                                  from table (l_array)\n  9                                 )\n 10               )\n 11      loop\n 12          dbms_output.put_line ( 'employee name = '||r.ename);\n 13      end loop;\n 14  end;\n 15  \/\nemployee name = PADFIELD\nemployee name = ROBERTSON\nemployee name = BILLINGTON\n\nPL\/SQL procedure successfully completed.\n\nSQL>\n","243":"BEGIN\n\n  IF(CONDITION)THEN\n\n    htp.init;\n\n    owa_util.redirect_url('f?p=&APP_ID.:10:&APP_SESSION.'); \/*Replace 10 with actual Page Number*\/\n\n    apex_application.stop_apex_engine;\n\n  ELSE\n\n    htp.init;\n\n    owa_util.redirect_url('f?p=&APP_ID.:20:&APP_SESSION.'); \/*Replace 20 with actual Page Number*\/\n\n    apex_application.stop_apex_engine;\n\n  END IF;\n\nEND;\n","244":"select t.id4id Id, n1.Name Name, group_concat(n2.name) Groups\nfrom (select t1.actid id4id, t1.postedby id4name, t2.postedby id4groups\n        from Activity t1 join Activity t2 on t1.actid = t2.parentid) t join \"user\" n1 on t.id4name = n1.userid join \"User\" n2 on t.id4groups = n2.userid\ngroup by id4id\n","245":"var unAssociatedPages =\n    from p in db.Pages\n    join mm in db.MainMenus on p.PageID equals mm.MainMenuPageFK into mms\n    where !mms.Any()\n    select p;\n","246":"ID  Data   Comes_after_ID\n--  -----  --------------\n27  Blahh  NULL\n54  Blahh  27\n57  Blahh  54 \n1   Blahh  57\n","247":"select * \nfrom user u\ninner join hierarchyset h on h.clientid = u.clientid\nleft outer join linktable l on \n    l.hierarchsetid = h.hierarchsetid\n and u.userId = l.userId)\nwhere l.hierarchsetid is null and l.userId isnull\n","248":"\nselect dbms_utility.port_string from dual;\n","249":"SELECT grp.GroupID, grp.GroupNumber, grp.Name, grp.Location, grp.GroupTypeID, grp.DivisionID, \ngrp.MasterGroupID, grp.EffectiveDate, grp.TerminationDate, crt.[ContractNumber], pln.[PBPNumber], div.SiteName, src.Name as SourceName \nFROM [Group] grp \n    INNER JOIN [IndividualPlanDemographic] idp ON grp.GroupID = idp.IndividualPlanDemographicID \n    INNER JOIN [Plan] pln ON idp.PlanID = pln.PlanID \n    INNER JOIN [Contract] crt ON pln.ContractID = crt.ContractID \n    --THE GROUP IS NOT REQUIRED TO BE IN A DIVISION RELATIONSHIP\n    LEFT OUTER JOIN [Division] div ON grp.DivisionID = div.DivisionID \n    LEFT OUTER JOIN [SourceSystem] src ON div.SourceSystemID = src.SourceSystemID \nWHERE 1 = 1 \nAND grp.EffectiveDate = '1\/1\/2015 12:00:00 AM' AND grp.GroupTypeID = '2' ORDER BY ContractNumber\n","250":"SELECT * FROM TABLE IF(mytime is null, [sometime],mytime) ORDER BY ...\n","251":"With Shifts As\n  (\n    Select 1 As Num\n      , Cast('2012-05-01 6:00 AM' As datetime) As ShiftStart\n      , DateAdd(hh,12,Cast('2012-05-01 6:00 AM' As datetime)) As ShiftEnd\n    Union All\n    Select Num + 1, ShiftEnd, DateAdd(hh,12,ShiftEnd)\n    From Shifts\n    Where ShiftEnd < '2012-05-30'\n    )\n  , Segments As\n    (\n    Select event_id\n      , Case \n        When Shifts.ShiftStart > event_start Then Shifts.ShiftStart \n        Else event_start\n        End As start_split_segment        \n      , Case \n        When Shifts.ShiftEnd < event_end Then Shifts.ShiftEnd\n        Else event_end\n        End As end_split_segment          \n      , Count(*) Over ( Partition By E.event_id ) As SegmentCount\n    From events As E\n      Join Shifts\n        On E.event_start <= ShiftEnd\n          And E.event_end > ShiftStart\n      )\nSelect E.event_id, E.description, E.event_start, E.event_end\n  , S.start_split_segment, S.end_split_segment\n  , Case When SegmentCount > 1 Then 1 Else 0 End As is_split\n  , NullIf(SegmentCount,1) As split_segments\nFrom Segments As S\n  Join events As E\n    On E.event_id = S.event_id\n","252":"SELECT Quote\n  FROM Quote q, Users u, Followers f\n  WHERE q.user_id = u.id\n  AND q.user_id = f.follower\nUNION\nSELECT Quote\n  FROM Quote q, Users u, Followers f\n  WHERE q.user_id = u.id\n  AND q.user_id <> f.follower\n","253":"WHERE t.something = 'something' AND\n      (t.lastname = 'smith' or t.name <> 'john')\n","254":"DELETE FROM cities\nWHERE city_id NOT IN (SELECT city_id FROM events)\n","255":"update students\n    set highestmark = 5 -- insert new value here\nwhere id = 42-- insert id\nand highestmark < 5 -- insert new value here\n","256":"select sum(case when ts_homepage is not null then 1 else 0 end) as homepage_count,\n       sum(case when ts_productpage > ts_homepage then 1 else 0 end) as productpage_count,\n       sum(case when ts_checkout > ts.productpage and ts.productpage > ts.homepage then 1 else 0 end) as checkout_count\nfrom (select userid,\n             min(case when action = 'homepage' then timestamp end) as ts_homepage,\n             min(case when action = 'product page' then timestamp end) as ts_productpage,\n             min(case when action = 'checkout' then timestamp end) as ts_checkout\n      from table t\n      group by userid\n     ) t\n","257":"SELECT listagg (''''||PARAMETER||'''', ',') WITHIN GROUP (ORDER BY RowNumber) AS PARAMETER,\nFROM (SELECT trunc((rownum - 1) \/ 8) as grp, t.*,\n             rownum as RowNumber\n      FROM SR0_CRTL_SL_OL_PSM_PARAMETER t\n     ) t\nGROUP BY grp;\n","258":"^.*\\\/.*\\.[a-zA-Z]{3}$\n","259":"SELECT SUM (AMOUNT), [Customer No_]\nFROM \n\n(\n select Amount \n          [Fluids Management$Cust_ Ledger    Entry].[Customer No_]\nFROM \n        [Fluids Management$Detailed Cust_ Ledg_ Entry]\nUNION ALL \nselect [Debit Amount] as 'Less then 30 days', \n         [Fluids Management$Cust_ Ledger Entry].[Customer No_]\n FROM [Fluids Management$Detailed Cust_ Ledg_ Entry]\n) \n\nGROUP BY  [Customer No_]\n","260":"SQL> SELECT * FROM t_data;\n\n        PK START_DATE  END_DATE\n---------- ----------- -----------\n         1 20\/01\/2010  20\/01\/2010\n         2 21\/01\/2010  23\/01\/2010\n         3 24\/01\/2010  27\/01\/2010\n\nSQL> SELECT pk, start_date, end_date FROM t_data\n  2  MODEL\n  3     PARTITION BY (pk)\n  4     DIMENSION BY (0 AS i)\n  5     MEASURES(start_date, end_date)\n  6     RULES\n  7     (  start_date[FOR i\n  8                   FROM 1 TO end_date[0]-start_date[0]\n  9                   INCREMENT 1] = start_date[0] + cv(i),\n 10        end_date[ANY] = start_date[CV()] + 1\n 11     )\n 12  ORDER BY 1,2;\n\n        PK START_DATE  END_DATE\n---------- ----------- -----------\n         1 20\/01\/2010  21\/01\/2010\n         2 21\/01\/2010  22\/01\/2010\n         2 22\/01\/2010  23\/01\/2010\n         2 23\/01\/2010  24\/01\/2010\n         3 24\/01\/2010  25\/01\/2010\n         3 25\/01\/2010  26\/01\/2010\n         3 26\/01\/2010  27\/01\/2010\n         3 27\/01\/2010  28\/01\/2010\n","261":"SELECT SUM(C1) AS C1, CASE WHEN C1 = 1 THEN 'other' ELSE device_type END as device_type\nFROM (  SELECT  COUNT(*) AS C1,\n                device_type \n        FROM stat \n        WHERE stat_date = '2012-02-08' \n        GROUP BY device_type) A\nGROUP BY CASE WHEN C1 = 1 THEN 'other' ELSE device_type END\n","262":"UPDATE TimeRequestedTable\nINNER JOIN BlockTimesTable ON BlockTimesTable.EmpID = TimeRequestedTable.EmpID\nSET AppointTime = \"inputed by user\"\nWHERE AppointTime BETWEEN startTime and EndTime\n","263":"select count(distinct UnitId) as Units, count(*) as Pieces\nfrom Piece\nwhere Category = 'A'\n","264":"set serveroutput on;\n","265":"UPDATE `table` SET `foo` = 'bar' ORDER BY `timestamp` DESC LIMIT 1;\n","266":"WHERE EntryDate BETWEEN \n  CASE WHEN Product = 'LTD' THEN @FirstDatetc \n       ELSE DateAdd(blah)\n  END \nAND GetDate()-1\n","267":"CREATE TRIGGER [dbo].[DIENSTLEISTUNG_Update]\nON [dbo].[DIENSTLEISTUNG]\nFOR UPDATE\nAS\n    IF UPDATE(PRICE) \n      ... (do what you need to do if PRICE is updated)...\n\n    IF UPDATE(DESCRIPTION)\n      ... (do what you need to do if DESCRIPTION is updated)...\n\n    IF UPDATE(PRIORITY)\n      ... (do what you need to do if PRIORITY is updated)...\n","268":"UPDATE PS_Z_TREND_NOW_TBL a \n  SET STATUS = ( CASE WHEN COUNT(SEC.IS_AW_AUTH_NAME)  > 0 then 'M'\n                 ELSE null END )\nFROM PS_IS_AW_SECURITY sec \nWHERE sec.IS_AW_AUTH_NAME LIKE '%Manager%'\n","269":"UPDATE #Table \nSET name = 'Winn-Dixie -' + RIGHT(Name, LEN(NAME) - CHARINDEX('-',Name))\nWHERE name LIKE 'Sweetbay%'\n","270":"with test_data as (\nSELECT 184 ID,     'Halifax' text,   'Bnk' tag,     1 ord from dual union all\nSELECT 184 ID,     'RBS' text,   'Bnk' tag,     2 ord from dual union all\nSELECT 184 ID,     'Natwest' text,   'Bnk' tag,     3 ord from dual union all\nSELECT 184 ID,     '32.16' text,   'Amt' tag,     1 ord from dual union all\nSELECT 184 ID,     '80.15' text,   'Amt' tag,     2 ord from dual union all\nSELECT 184 ID,     '62.54' text,   'Amt' tag,     3 ord from dual\n)\nselect bank_name, amount from test_data\npivot ( max(text) for tag in ('Bnk' as bank_name, 'Amt' as amount) )\norder by ord\n","271":"UPDATE table \n   SET column = REPLACE(column, 'Street', 'St');\n","272":"    select <...>    \n    from A, B, C, (select ID from ...) as e\n    where\n      A.FK_1 = B.PK and\n      A.FK_2 = C.PK and\n      A.ID = e.id\nunion\n    select <...>    \n    from A, B, C, (select ID from ...) as e\n    where\n      A.FK_1 = B.PK and\n      A.FK_2 = C.PK and\n      A.ID = e.ID\n","273":"count(distinct dlr.id)\n","274":"SELECT startTime, SUM(duration) as sum\nFROM myTable\nWHERE startTime = endTime\nGROUP BY startTime\n","275":"INSERT INTO PATIENT_DETAIL  \n    SELECT PATIENT_NAME, \n          'DISEASE D', \n          dbms_random.value(1,1000), \n          sysdate, \n          sysdate\n    FROM PATIENT_DETAIL\n","276":"select p.*, min(ps.price)\nfrom products p left join\n     (select ps.product_id, ps.store_id, max(created_at) as maxca\n      from product_store ps\n      group by ps.product_id, ps.store_id\n     ) pssum\n     on pssum.product_id = p.id left join\n     product_store ps\n     on ps.product_id = pssum.product_id and\n        ps.store_id = pssum.store_id and\n        ps.created_at = pssum.maxca\ngroup by p.id;\n","277":"Me.ComboBox.DataBindings.Add(New Binding(\"SelectedItem\", _\n                                      Me.TblBindingSource, \"ColumnName\", True))\n","278":"CREATE TRIGGER z_LOGIN2 AFTER UPDATE OF lastsignondttm ON SYSADM.PSOPRDEFN\nFOR EACH ROW\n\nBEGIN\n  IF (SELECT COUNT(1)\n      FROM SYSADM.psroleuser b\n      WHERE b.roleuser = NEW.oprid AND (b.rolename = 'FAS Change Admin'\n            OR b.rolename = 'PeopleSoft Administrator')) > 0 THEN\n\n  INSERT INTO z_LOGIN VALUES (NEW.oprid,NEW.oprdefndesc,NEW.lastlogondttm);\n END IF;\n\nEND;\n","279":"UPDATE t_b\n    SET a_id_fk = COALESCE(\n        (SELECT MIN(a_id) FROM t_a WHERE a_id > t_b.a_id_fk),\n        (SELECT MIN(a_id) FROM t_a))\n    WHERE b_id = :b_id\n","280":"WITH ovrdValXML AS (\n  select xov.id,\n         xmlforest(ID as \"valueID\", S_VAL as \"sValue\", U_VAL as \"uplValue\",\n                        O_VAL as \"oValue\", O_IND as \"oIndicator\", F_VAL as \"finalValue\",\n                        O_RSN as \"reason\") AS XMLChunk\n     from ovrd_val xov)\nSELECT xmlelement(\"genInf\", xmlelement(\"ID\", vt.ID),\n                       xmlelement(\"vID\", vt.V_ID),\n                       xmlelement(\"vNum\", vt.V_NUM),\n                       xmlelement(\"terrDataCode\", TERR_CODE.column_value), --data is based on reference table\n                       xmlelement(\"ABValCode\", AB_VAL_CD.column_value), --data is based on reference table\n                       ...\n  FROM V_TAB vt\n  JOIN ovrdValXML terr_code ON terr_code = vt.?\n                           AND terr_code.id = vt.terr_cd_id\n  JOIN ovrdValXML ab_val_cd ON ab_val_cd = vt.?\n                           AND ab_val_cd.id = vt.ab_val_cd\n WHERE vt.id = IN_VID;\n","281":"SELECT T1.*\nFROM TABLE1 AS T1\nINNER JOIN TABLE2 AS T2\nON T1.MATERIAL = T2.MATERIAL\n","282":";WITH data AS\n(\nSELECT 1 as [value],'2012-03-07' as date\nUNION ALL SELECT 1,'2012-03-06'\nUNION ALL SELECT 1,'2012-03-05'\nUNION ALL SELECT 3,'2012-03-04'\nUNION ALL SELECT 4,'2012-03-03'\nUNION ALL SELECT 1,'2012-03-02'\n)\n,data2 AS\n(\nSELECT \n[Value]\n,date\n,row_number() OVER (ORDER BY (SELECT NULL)) as row1\nFROM data\n)\n,data3 AS\n(\nSELECT * \n, row1 - row_number() OVER (ORDER BY [Value]) as row2\nfrom data2\n)\nSELECT \nMIN([Value]) AS [Value]\n,MIN(Date) as Date\nFROM data3\nGROUP BY [Value] - row2\nORDER BY MIN(row1)\n","283":"var query = db.Customers;\nif (selectID.HasValue)\n{\n   query = query.Where( c => c.ID > selectID.Value );\n}\nif (!string.IsNullOrEmpty( nameFilter ))\n{\n   query = query.Where( c => c.Name.Contains( nameFilter ) );\n}\n\nforeach (var customer in query) \/\/ now the query is performed\n{\n ...\n}\n","284":"SELECT Form_ID, Product_ID, Date, \n       Indicator = Count(*) Over (Partition by Product_ID)\nFROM my_database.inv_table\nORDER BY Indicator DESC\n","285":"USE AdventureWorksLT2012\n\n-- First query using UNION\nSELECT ProductID, Name FROM SalesLT.Product WHERE ProductID = 716\nUNION\nSELECT ProductID, Name FROM SalesLT.Product WHERE ProductID = 727\nUNION\nSELECT ProductID, Name FROM SalesLT.Product WHERE ProductID = 770\n\n-- Second query using UNION ALL\nSELECT ProductID, Name FROM SalesLT.Product WHERE ProductID = 716\nUNION ALL\nSELECT ProductID, Name FROM SalesLT.Product WHERE ProductID = 727\nUNION ALL\nSELECT ProductID, Name FROM SalesLT.Product WHERE ProductID = 770\n\n-- Third query using IN\nSELECT ProductID, Name FROM SalesLT.Product WHERE ProductID IN(716, 727, 770)\n","286":"SELECT  a.*\nFROM    Table1 a\n        LEFT JOIN Table2 b\n            ON a.EmployeeID = b.EmployeeID\nWHERE   b.EmployeeID IS NULL\n","287":"SELECT T2.org_id,\n       T.item_id\nFROM table AS T2\nJOIN\n    (SELECT item_id,\n           SUM(spend) AS total_spend \n    FROM table AS T\n    GROUP BY T.item_id\n    HAVING COUNT(DISTINCT org_id) < 4) AS T ON T.item_id = T2.item_id\nORDER BY T.total_spend DESC\n","288":"sql = \"SELECT CONVERT(VARCHAR(19), date, 120) as date FROM sales WHERE userid=1\"\n","289":"SELECT Count(*)\nFROM\n   (\n      SELECT ID\n      FROM dbo.YourTable\n      GROUP BY ID\n      HAVING Count(*) >= 2\n   ) X\n;\n","290":"--populate tables with sample data\nDECLARE @totalRecords int \nSET @totalRecords = 0\nDECLARE @currentKey int\n\nWHILE @totalRecords < 500\nBEGIN\n    SET @totalRecords = @totalRecords + 1\n\n    INSERT INTO dbo.submissions (submissionName, dateSubmitted)\n        VALUES ('submission record ' + cast(@totalRecords AS varchar(3)), SYSDATETIME())\n\n    Set @currentKey = Scope_Identity()\n\n    INSERT INTO dbo.submissionItems (fk_submission_id, item)\n        VALUES (@currentKey, 'a new record item for submission '+ cast(@totalRecords AS varchar(3)))\nEND\n","291":"$query = $_GET['query']; \/\/id I get from the specified item\necho 'the id is: ' . $query; \/\/test purposes\n\n$mysql_handle = mysqli_connect($dbhost, $dbuser, $dbpass) or die(\"Error connecting to database server\");\n\n$sql1 = \"SELECT item_stock FROM chat-db.Item WHERE id = '\".$query.\"'\";\n\n$results = mysqli_query($mysql_handle, $sql1);\n\nif (!empty($results) && mysqli_num_rows($results) > 0) {\n    while($rec = mysqli_fetch_array($results)) {\n        echo $rec['item_stock'];\n    }\n}\n","292":"select jobid, jobtitle, pay, name\nfrom (\n  select j.jobid, j.jobtitle, e.pay, e.name, \n         row_number() over (partition by j.jobid order by e.pay desc) as rn\n  from employees e \n    join jobs j on j.jobid = e.job_id\n) \nwhere rn <= 3\norder by jobid, jobtitle, pay desc;\n","293":"select f.friend_userid as userId from friends f where f.userid = 1 \nUNION\nselect f.userid as userId from friends f where f.friend_userid = 1;\n","294":";WITH cte AS\n(\n   SELECT *,\n         ROW_NUMBER() OVER (PARTITION BY DocumentID ORDER BY DateCreated DESC) AS rn\n   FROM DocumentStatusLogs\n)\nSELECT *\nFROM cte\nWHERE rn = 1\n","295":"CREATE TABLE t1\n    (username varchar2(4))\n;\n\nCREATE INDEX t1_idx ON t1(lower(username));\n","296":"SELECT \nll.ip_address,\nll.when,\ncbi.country\nFROM last_login ll\nLEFT JOIN `country_by_ip` cbi on ll.ip_address > cbi.ip_from \nWHERE ll.ip_address < cbi.ip_to\n","297":"SELECT  t.*\nFROM    t\n        INNER JOIN (\n          SELECT  ID = MAX(ID)\n          FROM    t\n          GROUP BY\n                  key\n        ) tm ON tm.ID = t.ID                  \n","298":"pR.projectRelationId IN ('$id[ 0 ]', '$id[ 1 ]', '$id[ 2 ]')\n","299":"SELECT @trans_id=transaction_id FROM sys.dm_tran_current_transaction\n","300":"UPDATE OrderGroupNew\nSET SavedTotal = (\n    SELECT SUM(UnitPrice * Quantity)\n    FROM OrderItemNew\n    WHERE OrderNumber = OrderGroupNew.OrderNumber\n) \n","301":"declare @maxcount1 float\ndeclare @maxcount0 float\n\nselect @maxcount1 = max(count1), @maxcount0 = max(count0)\nfrom \n(SELECT TeamName,Count(DISTINCT CASE WHEN WorkInfo = 1 THEN SlNo end) AS Count1 , \n Count(DISTINCT CASE WHEN WorkInfo = 0 THEN SlNo end) AS Count0 FROM tableA \n WHERE (SubmitDate BETWEEN @start AND @end) GROUP BY TeamName) as s\n\nselect teamname, count1, count0, \nround((cast((count1 * 100) as float)\/@maxcount1),2) as percentage1,\nround((cast((count0 * 100) as float)\/@maxcount0),2) as percentage0\nfrom \n(SELECT TeamName,Count(DISTINCT CASE WHEN WorkInfo = 1 THEN SlNo end) AS Count1 , \n Count(DISTINCT CASE WHEN WorkInfo = 0 THEN SlNo end) AS Count0 FROM tableA \n WHERE (SubmitDate BETWEEN @start AND @end) GROUP BY TeamName) as s\n","302":"SET @i:=0;\nSET @j:=0;\n\nUPDATE t1\n\nRIGHT JOIN (\n  SELECT \n     id\n     ,IF(@j = 0 ,@j:=1, @j:=@j+1)\n     ,IF((@j-1) % 12 = 0, @i:= @i+1, @i)  as i\n  FROM t1\n  WHERE hDate IS NULL\n) idx\non idx.id = t1.id\n  SET t1.hDate = CURDATE() + INTERVAL (idx.i)  DAY \n","303":"SELECT mobilenumber, COUNT(*)\nFROM   (\n         SELECT DISTINCT mobilenumber, firstname, lastname\n         FROM   YourTable\n       ) AS q\nGROUP BY\n       mobilenumber\nHAVING COUNT(*) > 1\n","304":"DECLARE @DateFrom DATETIME\nSET @DateFrom = '2011-01-01'\n\nDECLARE @DateTo DATETIME\nSET @DateTo = '2011-01-10'\n\n;WITH DateRanges AS\n(\n    SELECT @DateFrom AS 'DateValue'\n    UNION ALL\n    SELECT DATEADD(DAY, 1, DateValue)\n    FROM DateRanges\n    WHERE DateValue < @DateTo\n)\nSELECT * FROM DateRanges\n","305":"string.Replace(\";\", \"CHAR(59)\");\n","306":"select column_name, count(column_name)\nfrom table\ngroup by column_name\nhaving count (column_name) > 1;\n","307":"select t1.Name state_name, t2.Name Country_name from State_m t1,Country_m t2 where t1.CountryId=t2.CountryId; \n","308":"USE intranet\n\n;WITH A AS\n(\n    SELECT ROW_NUMBER() OVER (ORDER BY id) AS tab_ranking\n        , id\n    FROM dbo.tabs\n    WHERE cms_initials = @user\n),\nB AS\n(\n    SELECT DENSE_RANK() OVER (ORDER BY tabs_id) AS tab_sequence\n        , tabs_id, widgets_id, sort_column, sort_row\n    FROM dbo.columns\n    WHERE tabs_id IN (SELECT t.id FROM dbo.tabs t WHERE t.is_default = 1)\n)\nINSERT INTO dbo.columns (tabs_id, widgets_id, sort_column, sort_row)\nSELECT a.id, b.widgets_id, b.sort_column, b.sort_row\nFROM A\nINNER JOIN B ON B.tab_ranking = A.tab_ranking\n","309":"SELECT u.*\nFROM cpnc_User u JOIN\n(\n    SELECT firstName, lastName\n    FROM cpnc_User\n    GROUP BY firstName, lastName\n    HAVING COUNT(*) > 1\n) X on X.firstName = u.firstName AND x.lastName = u.lastName\nORDER BY u.firstName, u.lastName\n","310":"update table_name set action=replace(action,'consultation','display');   \n","311":"UPDATE tbl_profile\nSET year_level='3rd'\nWHERE users_id IN (\n  SELECT users_id\n  FROM tbl_usersinfo WHERE full_name = 'captain america');\n","312":"select replace(col, '$', '')\nfrom <whatever>;\n","313":"select * from master..spt_values\nwhere 1=1 or (select count(*) from master..sysobjects) > 0\n","314":"select concat(d.FirstName, ' ', d.LastName) as 'Donor'\n     , sum(a.amount) as 'Total Paid'\n     , sum(case when a.CompanyId is null then a.amount else 0 end) as 'Pocket' \nfrom Donor d\njoin Pledge p on d.DonorId = p.DonorId\njoin Payment a on p.pledgeId = a.pledgeId\ngroup by d.donorid\n","315":"create table your_table_name (\n  one_row integer not null unique\n    default 1 check (one_row = 1),\n  version varchar(5) not null unique\n);\n\ninsert into your_table_name values (1, '0.0.0');\n","316":"SELECT   col,\n         COUNT(dupe_col) AS dupe_cnt\nFROM     TABLE\nGROUP BY col\nHAVING   COUNT(dupe_col) > 1\nORDER BY COUNT(dupe_col) DESC\n","317":"SELECT name FROM `product` WHERE BINARY `name`  like 'product%'\n","318":"select a.* from activities a\nJOIN (select distinct type FROM activities where type='X' or flag=1) t\nON a.type=t.type;\n\n\nselect a.* from activities a\nwhere type='X'\n  or EXISTS(SELECT * FROM activities WHERE type=a.type AND flag=1);\n\n\nselect a.* from activities a\nwhere type='X'\n  or type IN (SELECT type FROM activities WHERE flag=1)\n","319":"coalesce((select 'exists'\n          from   veryyugetable vyt\n          where  vyt.somenumber = someOtherTable.someNumber\n          and    rownum = 1),\n         'doesn''t exist') somecolumn\n","320":"SELECT SUM(AMOUNT) SUM_AMOUNT FROM <table>\nWHERE VoucherDt >= DATEADD(MONTH, DATEDIFF(MONTH, 0, CURRENT_TIMESTAMP), 0)\nAND VoucherDt < DATEADD(DAY, DATEDIFF(DAY, 0, CURRENT_TIMESTAMP), 1)\n","321":"$this->getField('id')->calculated(true);\n\nfunction calculate_id(){\n    return 'id_material';\n}\n","322":"SELECT REPLACE(REPLACE(REPLACE(col, CHAR(10), ' '), CHAR(13), ' '), CHAR(9), ' ') AS Col \nFROM Table\n","323":"select  *\nfrom    (\n        select  row_number() over (\n                  partition by p_id\n                  order by year desc, month desc) as rn\n        ,       *\n        from    YourTable\n        ) as SubQueryAlias\nwhere   rn = 1\n","324":" CREATE TABLE ResultSet (Directory varchar(200))\n\n INSERT INTO ResultSet\n EXEC master.dbo.xp_subdirs 'c:\\'\n\n Select * FROM ResultSet where Directory = 'testing'\n","325":"DECLARE @LastName NVARCHAR(50) = 'John'\nDECLARE @FirstName NVARCHAR(50) = NULL;\nDECLARE @ID INT = 1;\n\nUPDATE dbo.UpdateExample\nSET LastName = COALESCE(@LastName, LastName), FirstName = COALESCE(@FirstName, FirstName), \nWHERE ID = @ID\n","326":"UPDATE STOCKA a\nJOIN STOCKB b\n    ON a.P = b.P\nSET a.U =  a.U - ABS(b.U)\n","327":"select REGEXP_SUBSTR(' EG SUZ SG SIN blabla ', '([A-Z]{2} [A-Z]{3}(\\s|$))', 1, 2) from dual;\n","328":"DECLARE @Location \u2026\nDECLARE @SQL varchar(max)\nIf (@InputVariable = 1)\nBEGIN \n        @Location  =  '[DatabaseA].dbo.MyTable'\n    END\nELSE\n    BEGIN\n        @Location  =  '[DatabaseB].dbo.MyTable'\n    END\n\nBEGIN\n    SET @SQL = \n    'UPDATE '+@Location+\n    ' WHERE\n    \u2026 '\nEND\nEXECUTE (@SQL)\n","329":"insert into dbo.calculationtable (ID, Server, Datetime, UptimeStatus)\nSelect ID, SERVER, CheckTime, ResultType\nFrom dbo.sample \nWhere CheckTime > (Select max(DateTime) From dbo.calculationtable)\nGO\n","330":"SELECT * \nFROM child \nWHERE id NOT IN (SELECT child_id FROM par1) AND \n      id NOT IN (SELECT child_id FROM par2)\n","331":"select key,\n    max(decode(id_col,1,id_col)) as id_1,max(decode(id_col,1,val)) as val_1,\n    max(decode(id_col,2,id_col)) as id_2,max(decode(id_col,2,val)) as val_2,\n    max(decode(id_col,3,id_col)) as id_3,max(decode(id_col,3,val)) as val_3\nfrom (\n        select key, row_number() over (partition by key order by id) as id_col,id,val\n        from your_table\n    )\ngroup by key\n","332":" SELECT\n     start, \n     start + game_duration * INTERVAL '1 SECONDS' AS finish_time \n FROM \"GAME_PLAYED\" WHERE id = 123;\n","333":"select\n    i.[INV ITEM Ext ID],\n    i.[INV ITEM Description],\n    sum(d.[ar orderd qty]) as 'Total Units Sold',\n    sum(case when\n            d.[ar orderd date] >= '2013-09-16' and\n            d.[ar orderd date] < '2013-09-23'\n        then d.[ar orderd qty]\n        else 0 end) as 'total Units sold 9\/16-9\/22',\n    sum(case when\n            d.[ar orderd date] >= '2013-09-23' and\n            d.[ar orderd date] < '2013-09-30'\n        then d.[ar orderd qty]\n        else 0 end) as 'total Units sold 9\/23-9\/29'\nfrom\n    [inv items] i\n        inner join\n    [ar order detail] d\n        on d.[ar orderd item id] = i.[INV ITEM Ext ID]\n        inner join\n    [ar order] o\n        on o.[AR ORDER Document #] = d.[AR ORDERD Document #]\nwhere\n    o.[AR ORDER Document #] not like '%Ret%' and\n    d.[ar orderd date] > '9\/16\/2013' and\n    d.[AR ORDERD Qty] >= '0'\ngroup by\n    i.[INV ITEM Ext ID],\n    i.[INV ITEM Description]\norder by\n    i.[INV ITEM Ext ID];\n","334":"select city_name\nfrom city\norder by (case when city_name=upper(city_name) then 2 else 1 end),\n         city_name;\n","335":"Update table_name\nset col1='some_value'\noutput inserted.* \n","336":"SELECT Age,COUNT(user_id) AS \"Number of Users\"\n\nFROM\n(\n    SELECT userid,\n           YEAR(CURDATE()) - \n           YEAR(STR_TO_DATE(birth_date, '%m\/%d\/%Y')) - \n           (RIGHT(CURDATE(), 5) < RIGHT(STR_TO_DATE(birth_date, '%m\/%d\/%Y'), 5)) \n             AS Age\n    FROM user\n) as Z \nGROUP BY Age\n","337":"INSERT INTO Movies (Title, Director, Cost, Profits)\nSELECT 'Star Wars', name, 50000, 1000000\nFROM Directors WHERE name = 'Lucas'\n","338":"SELECT acc.* \nFROM accounts acc \nJOIN addresses addr ON acc.id = addr.account_id\nJOIN alternate_ids ids ON acc.id = ids.account_id\nWHERE LOWER(acc.firstname) = LOWER('Sam') \nAND LOWER(addr.name) = LOWER('Street1') \nAND ids.alternate_id_glbl = '5';\n","339":"Cursor c = ourDbase.query(MyTABLE, columns , null, null, null, null, KEY_SCORE + \" DESC\");\n","340":"select distinct on (transponder, country, system) * from some_table\norder by transponder, country, system, time desc\n","341":"SELECT show_table.program, show_table.timebegin\nFROM show_table\nINNER JOIN (\n    SELECT program, MIN(timebegin) AS firsttime\n    FROM show_table\n    GROUP BY program\n) AS groups\nON (show_table.program = groups.program)\nORDER BY groups.firsttime, show_table.program, show_table.timebegin;\n","342":"SELECT Doc, code, Sum(Qty), ConcatRelated(\"[Next]\",\"TableName\",,,\"-\") as [Next]\nFROM TableName\nGROUP BY Doc, code\n","343":"select COUNT(EmailID) as Count_Mails, CAST(Createddate as DATE)\nGROUP BY  cast(createdDate as date)\n","344":"create view v_table as\n    select t.*,\n           (startdate <= curdate() then 1 else 0 end) as has_started\n    from table t;\n","345":"SQL> VARIABLE return_code NUMBER\nSQL> BEGIN\n  2    :return_code := 5;\n  3  END;\n  4  \/\n\nPL\/SQL procedure successfully completed.\n\nSQL> EXIT :return_code\nDisconnected from Oracle Database 10g Release 10.2.0.4.0 - Production\n> echo $?\n5\n","346":"with Permissions as\n   (select Id \n    from Surge.Permission  \n    where Name in ('Web.Orders:Enable',\n                   'App.Orders:Enable',\n                   'Web.Orders:View',\n                   'App.Orders:View',\n                   'Web.Orders:Modify',\n                   'App.Orders:Modify',\n                   'Web.Orders:View.All',\n                  'App.Orders:View.All'\n                  )\n     )\nINSERT INTO Surge.[RolePermission] (DataPartitionId, PermissionId, RoleId)\nSELECT DP.Id, p.Id, 2 \nFROM Surge.DataPartition as DP\nCROSS JOIN Permissions p\n","347":"select max(case when `rn` = 2 then `value` end) as `Id`,\n       max(case when `rn` = 1 then `value` end) as `Name`,\n       max(case when `rn` = 3 then `value` end) as `Price`\nfrom (\n  select *, \n      @rn:=if(@rn>2,1,@rn+1) rn,\n      @row:=if(@rn=1,@row+1,@row) `row`\n  from `yourmesseduptable` cross join (select @rn:=0, @row:=0) t\n  ) t\ngroup by `row`\n","348":"DELETE tableA\nFROM tableA LEFT JOIN tableB B ON A.id = B.a_id\nWHERE B.a_id IS NULL;\n","349":"<dataSource\n    driver=\"net.sourceforge.jtds.jdbc.Driver\"\n        url=\"jdbc:jtds:sqlserver:\/\/server\/database;useLOBs=false\" \n    user=\"user\" \n    password=\"password\" \/>\n","350":"SELECT (YEAR(CURDATE())-YEAR(birth)) AS age FROM TABLE_NAME;\n","351":"UPDATE t\nJOIN (\n  SELECT MAX(t.id) AS maxid, lat, lon\n  FROM t\n  JOIN t AS duplicates\n  USING (lat, lon)\n  GROUP BY lat, lon\n  HAVING COUNT(*) > 1\n) AS maxima USING (lat, lon)\nSET flag = IF(id = maxid, 1, 2);\n","352":"SELECT * FROM MyTable ORDER BY inet(IP_Address)\n","353":"SELECT label, MAX(eventdate) AS maxeventdate FROM (\n  SELECT parentid, eventdate FROM TABLE1\n  UNION ALL \n  SELECT parentid, eventdate FROM TABLE2)\nJOIN PARENT ON (id = parentid)\nGROUP BY label\n","354":"SELECT to_char(trunc(request_date),'YYYY-MM-DD HH24:MI:SS') date_time\n","355":"foreach (var myrow in (from x in that_table select x))\n{\n    var myChartObject = new ChartObject();\n    \/\/ populate myChartObject fields from myrow\n    \/\/ add myChartObject to the actual chart\n}\n","356":"select parent_id\nfrom your_table\ngroup by parent_id\nhaving count(distinct child_gender) = 2\n","357":"SELECT TO_CHAR(dt,'Mon') \nFROM tb \nORDER BY dt\n","358":"declare @fromDate date = null\ndeclare @toDate date = null\n\nselect * from Mytable \nwhere date between coalesce(@fromDate,date) and coalesce(@toDate,date)\n","359":"with cte as (\n   select customer_name, min( id ) as id\n   from #table1\n   group by customer_name\n   having count(*) > 1\n)\nupdate #table1 \n set oldID = cte.id\n from cte \n where #table1.customer_name = cte.customer_name\n and #table1.id != cte.id \n","360":"SELECT user_id, max(timestamp)\nFROM `log`\nGROUP BY user_id\nORDER BY max(timestamp) desc;\n","361":"DELETE FT, ST\nFROM first_table AS FT\nJOIN second_table AS ST\nON FT.status = ST.status \nAND ST.final_result = '3'\n","362":"where phone = replicate(left(phone,1), len(phone))\n    and phone is not null\n","363":"select op.Productid\n       , sum(  case when Convert(datetime,Convert(Varchar(50),od.DeliveryDate,101)) between @StartDate and @EndDate then \n          1 else 0 end) FirstQty\n       , sum(  case when Convert(datetime,Convert(Varchar(50),od.DeliveryDate,101)) between @StartDate1 and @EndDate1 then \n          1 else 0 end)  SecondQty,\n       , Round(Sum( case when Convert(datetime,Convert(Varchar(50),od.DeliveryDate,101)) between @StartDate and @EndDate \n                        then op.Price*op.Quantity \n                         else 0 end),0) as FirstProductRevenue \n       , Round(Sum( case when Convert(datetime,Convert(Varchar(50),od.DeliveryDate,101)) between @StartDate1 and @EndDate1 \n                        then op.Price*op.Quantity \n                         else 0 end),0) as SecondProductRevenue \n from Orderdetails od \n inner join (select Distinct Orderid,productid,Price,Quantity from Orderproducts)  op on op.Orderid=od.Orderid \n inner JOIN City ct  ON od.RecipientCityName = ct.CityName \n INNER JOIN Associates ass ON Ct.AssociateId = ass.AssociateId\n Inner join HomepageRowWiseProducts hr on op.ProductId=hr.Productid \n where  ( Convert(datetime,Convert(Varchar(50),od.DeliveryDate,101)) between @StartDate and @EndDate \n       Or Convert(datetime,Convert(Varchar(50),od.DeliveryDate,101)) between @StartDate1 and @EndDate1 )\n   and (od.TransactionId IS NOT NULL or ltrim(od.TransactionId) !=  '') \n   and @Rowname=hr.HomepageRow_name and hr.status=1\n   Group by op.Productid\n","364":";WITH cte(name, Startdate,Enddate)\nAS\n(  \n    SELECT name, Startdate,Enddate FROM your_table\n    UNION ALL\n    SELECT name, DATEADD(dd, 1,Startdate),Enddate FROM CTE \n    WHERE Startdate < Enddate\n)\nSELECT * FROM cte ORDER BY name\n","365":"mysql> create table t (a int not null unique) engine=innodb;\nQuery OK, 0 rows affected (0.05 sec)\n\nmysql> insert into t (a) values (0) on duplicate key update a=1;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> select row_count();\n+-------------+\n| row_count() |\n+-------------+\n|           1 |\n+-------------+\n1 row in set (0.00 sec)\n\nmysql> insert into t (a) values (0) on duplicate key update a=1;\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> select row_count();\n+-------------+\n| row_count() |\n+-------------+\n|           2 |\n+-------------+\n1 row in set (0.00 sec)\n","366":"SELECT\n    Table1.*,\n    something1Table.setting AS something1,\n    something2Table.setting AS something2,\n    something3Table.setting AS something3\nFROM Table1\nJOIN Table2 AS something1Table ON something1Table.table_1_id = Table1.id AND something1Table.value = 'something'\nJOIN Table2 AS something2Table ON something2Table.table_1_id = Table1.id AND something2Table.value = 'something2'\nJOIN Table2 AS something3Table ON something3Table.table_1_id = Table1.id AND something3Table.value = 'something3'\n","367":"public IQueryable<Timeline> GetHighlights() {\n\n    var self = from x in Database.Timelines\n               where User.Id == x.UserId || User.Id == x.SenderId\n               select x;\n\n    var friends = from x in Database.FriendItems.Include(\"Friend.Timeline\")\n                  where (User.Id == x.UserId)\n                  select x.Friend.Timeline;\n\n    List<Timeline> highlights = new List<Timeline>();\n    highlights.AddRange(self);\n\n    friends.ForEach(x => x.ForEach(y => highlights.Add(y)));\n    return highlights.AsQueryable().OrderByDescending(s => s.Id);\n}\n","368":"select * \n  from Table\n where ReportNumber in (select max(ReportNumber) \n                          from Table)\n","369":"Declare @t table(Groups int,Color varchar(50),ColorDesc varchar(50))\ninsert into @t\nselect 1 ,'Red',    'The cool name of Red Color' union all\nselect 1,'Green',  'The cool name of Green Color'  union all\nselect 2,'Blue',   'The cool name of Blue Color'  union all\nselect 2,'Yellow', 'The cool name of Yellow Color'  union all\nselect 2,'Purple', 'The cool name of Purple Color'  union all\nselect 3,'Pink',   'The cool name of Pink Color'\n\n;with cte as\n(\nselect groups,count(*) cnt from @t group by groups\n)\n\nselect  distinct b.groups,case when cnt=1 then a.ColorDesc\nelse stuff((select ',' + color from @t c where c.groups=b.Groups for xml path('') ),1,1,'') end\nfrom  cte b inner join @t a on a.Groups=b.Groups\n\nWithout distinct(Test both with lot of data)\n\nSelect * from \n(select  ROW_NUMBER() over(partition by b.groups order by b.groups) rn, b.groups,case when cnt=1 then a.ColorDesc\nelse stuff((select ',' + color from @t c where c.groups=b.Groups for xml path('') ),1,1,'') end colorDesc\nfrom  cte b inner join @t a on a.Groups=b.Groups )t4 where rn=1\n","370":"select @rownum:=@rownum+1 'rank',  r1.* FROM\n    (SELECT  pgid, picfile from pages,\n             (SELECT @rownum:=0) AS r2\n     where pos= 23 \n     order by Rand()  limit 5\n   ) AS r1\nORDER BY rank\n","371":"UPDATE A \nSET A.sequene = B.sequence \nFROM tableA A \nINNER JOIN (SELECT text, ROW_NUMBER() OVER (ORDER BY text) sequence \n            FROM tableA \n           ) AS B ON A.text = B.text\n","372":"    DECLARE \n\n    @searchParam Datatype\n\n    BEGIN\n\n    SET @searchParam ='Value to be searched'\n\n    IF EXISTS (SELECT * FROM [TABLENAME] WHERE [SEARCHPARAM]=@searchParam)\n\n    SELECT * FROM [TABLENAME] WHERE [SEARCHPARAM]=@searchParam\n\n    ELSE\n\n    SELECT * FROM [TABLENAME]\n\n    END\n\n    GO\n","373":"UPDATE tbl2 t\nINNER JOIN tbl1 s\n ON(t.transaction_id = s.id)\nset t.transaction_id = s.id_trans\n","374":"select cast(collect(b.column_value) as vector) \nfrom  table(table_of_vector(\n             vector(23, 4, 2222, 22222222), \n             vector(2, 1, 766, 2), \n             vector(2, 1, 5))) a, \n      table(a.column_value) b;\n","375":"create table SOxx1\n(\n    col1  char(4),\n    col2  char(20) not null\n)\n\ncreate table SOxx2\n(\n    col1  char(4),\n    col2  char(20) not null\n)\nGo\n\ninsert into SOxx1 (col1, col2) VALUES ('ARR ', 'abc')\ninsert into SOxx2 (col1, col2) VALUES ('ARR ', 'abc')\ngo\n\nSELECT (ISNULL(a.col1,'') + ISNULL(b.col1,'')) AS WhatEver \nFROM SOxx1 a  \nleft join SOxx2 b on a.Col2 = b.Col2\n\n-- OUTPUT is 'ARR ARR '\n","376":"select count(*) as counts\nfrom myTable\nwhere datediff(yyyy,dob,admitdate) between 5 and 10\n","377":"SELECT *\nFROM sampletable s1\nINNER JOIN (SELECT count(type) AS iCount,type\n        FROM sampletable\n        GROUP BY type) s2 ON s2.type = s1.type\nORDER BY s2.iCount DESC, s1.type ASC\n","378":"select Lastname,count(CASE item WHEN '' THEN NULL ELSE item END) item from info  group by Lastname;\n","379":"SELECT a.title, a.lat, a.lon, a.alert_content_id, a.date_added, count(r.alert_id) as countRep ,count(i.alert_id) AS countInt \nFROM `alerts` a \n      LEFT JOIN `reply` r ON \n         r.alert_id = a.alerts \n      LEFT JOIN `interactions` i ON \n         i.alert_id = a.alerts \nGROUP BY a.title, a.lat, a.lon, a.alert_content_id, a.date_added\n","380":"UPDATE reports_attributes \n Set \n ConID='78',\n CheckServices='Execute Summary',\n Attribute1='criminality',\n Attribute2='color1',\n Attribute3='education',\n Attribute4='color5',\n Attribute5='employment_check_2',\n Attribute6='color7',\n Attribute7='report_status',\n Attribute8='color9'\nWHERE ConID=78 AND ReportType='interim_report'  \n","381":"DECLARE @MyTableVar table( NewScrapReasonID smallint,\n                           Name varchar(50),\n                           ModifiedDate datetime);\nINSERT Production.ScrapReason (Name, ModifiedDate)  \n    OUTPUT INSERTED.ScrapReasonID, INSERTED.Name, INSERTED.ModifiedDate\n        INTO @MyTableVar\nVALUES (N'Operator error', GETDATE());\n","382":"UPDATE  tableA a\n        INNER JOIN\n        (\n            SELECT  ID, MAX(Value) max_val\n            FROM    tableB\n            WHERE   SUB_GROUP IN ('Category 2','Category 3')\n            GROUP   BY ID\n        ) b ON a.ID = b.ID\nSET a.VALUE = b.Max_Val\n","383":"select string_agg(nm,'+') from(\n    select st.name as nm\n    from building-step bs\n    inner join \n    step st\n    on bs.step_id=st.id\n    where bs.construction_id=1\n    order by bs ASC\n); --done by hand, may have small errors\n","384":"START TRANSACTION;\nINSERT INTO player\n(facebook_id, first_name, last_name, gold_balance) \nVALUES \n('$userid', '$userfirst_name', '$userlast_name', \u201c100\u201d)\n\nINSERT INTO BALANCE\n(facebook_id, first_name, last_name, gold_balance) \nVALUES \n('$userid', '$userfirst_name', '$userlast_name', \u201c100\u201d)\"\n\ncommit;       \n","385":"ALTER TABLE PerformanceData ADD CreatedBy VARCHAR(50) NULL \n\nUPDATE PerformanceData SET CreatedBy = 'NA'\n\nALTER TABLE PerformanceData ALTER COLUMN CreatedBy VARCHAR(50) NOT NULL\n","386":"# Read in the data\nmy @data;\nwhile (<>) {\n   chomp;\n   push @data, [ split(\/\\t\/, $_, -1) ];\n}\n\n# Sort it\n@data = sort {\n   $a->[0] cmp $b->[0]   # By name\n      ||\n   $a->[1] <=> $b->[1]   # By quantity\n} @data;\n\n# Generate the ids and output the data.\nmy %counts;\nfor my $row (@data) {\n   my $id = join('.', $row->[0], ++$counts{ $row->[0] });\n   push @$row, $id;\n   print(join(\"\\t\", @$row), \"\\n\");\n}\n","387":"select t21.name, t22.name\nfrom Table1 t1 \ninner join Table2 t21 on t1.id_1 = t21.id\ninner join Table2 t22 on t1.id_2 = t22.id\n","388":"INSERT INTO clients_products (client_id, product_id)\nSELECT c.ID, p.ID\nFROM Clients c\nCROSS JOIN Products p\nLEFT JOIN clients_products cp\n    on c.client_id and p.product_id\nWHERE cp.client_id is null and p.product_id is null\n","389":"SELECT Location, Size, Quantity\nFROM (\n  SELECT Location, 'Small' as Size, Small as Quantity FROM [table]\n), (\n  SELECT Location, 'Medium' as Size, Medium as Quantity FROM [table]\n), (\n  SELECT Location, 'Large' as Size, Large as Quantity FROM [table]\n)\n","390":"  **\n  ** REPLACE VALUES IN CPANEL.PW_STAT WITHOUT REBUILDING THE ENTIRE TABLE.\n  *;\n  data cpanel.pw_stat;\n\n    set redirect_updates;\n    modify cpanel.pw_stat key=primary;\n\n    select(_iorc_);  \n      when(%sysrc(_sok)) do;\n        * MATCHED TRANSACTION DATASET TO MASTER DATASET. REPLACE THE VALUE;\n        if date_redirected ne tmp_date_redirected then do;\n          date_redirected = tmp_date_redirected;\n          replace;\n        end;\n      end;\n      when(%sysrc(_dsenom)) do;\n        * NO MATCH. DO NOT ADD OBS OR REPLACE OBS OR DELETE OBS.  RESET ERR AND DO NOTHING.;\n        _error_ = 0;\n      end;\n      otherwise do;\n        put 'ERROR: Unexpected value for _IORC_= ' _iorc_;\n        put 'Program terminating. DATA step iteration # ' _n_;\n        put _all_;\n        stop;\n      end;\n    end;\n  run;\n","391":"select sdo_geom.sdo_distance (a.spatial_data, b.spatial_data, 0.05, 'unit=km')\nfrom st_country_postal_code a, st_country_postal_code b\nwhere a.country_id = '124'\nand a.postal_code = UPPER ('V3G1M2')\nand b.country_id = '124'\nand b.postal_code = UPPER ('V2R0N3');\n","392":"cri.Add(Restrictions.Like(\n            Projections.SqlFunction(\"concat\",\n                                    NHibernateUtil.String,\n                                    Projections.Constant(\",\"), \n                                    Projections.Property(\"ServiceCodes\"),\n                                    Projections.Constant(\",\")),\n        \"%,33,%\"));\n","393":"CASE WHEN status = 'N' THEN 'Export to WMS' ELSE ' ' END  AS \"Export to WMS\"\n","394":"SELECT  \n     case when UserName=lag(UserName) OVER (ORDER BY UserName) \n     then null \n     else UserName end UserName,\n     UserEmail, \n     BoardName\nFROM \n     YourTable;\n","395":"WITH TransactionCounts as (\n   SELECT\n       CustID,\n       COUNT(*) AS TransactionCount\n   FROM [dbo].[TRANSACTION]\n   GROUP BY CustID\n)\nSELECT TOP 1 CUSTOMER.*, TransactionCount\nFROM TransactionCounts\n    INNER JOIN CUSTOMER ON CUSTOMER.CustID = TransactionCounts.CustId\nORDER BY TransactionCount DESC\n\n-- alternate to select all if multiple customers are tied for highest count\n--WHERE TransactionCount = (SELECT MAX(TransactionCount) FROM TransactionCounts)\n","396":"SELECT *, GROUP_CONCAT( grade_id ) AS gradeid\n  FROM employee_details_table t1\n  LEFT JOIN department_table t2\n    USING ( dept_no )\n  LEFT JOIN relation_table t3\n    USING ( emp_no )\n  LEFT JOIN grade_table t4\n    USING ( grade_id )\n  WHERE grade_id IN ('1','2','3')\n  GROUP BY t1.emp_no\n  HAVING COUNT(DISTINCT grade_id) = 3;\n","397":"<?php $first_loop = 0; ?>\n@foreach($links as $link)\n    @if($first_loop == 0)\n        <?php \n        $first_loop = 1;\n        $current_year = $link->year;\n        ?>\n        <h3 class=\"text-uppercase\"><a href=\"{{ url('blog\/'.$link->year) }}\">{{ $link->year }}<\/a><\/h3>\n        <p><small class=\"blog_date\"><a href=\"{{ url('blog\/'.$link->year.'\/'.$link->month) }}\">{{ $link->month_name }} ({{ $link->id }}) <\/a><\/small><\/p>\n    @else\n        @if($current_year == $link->year)\n            <p><small class=\"blog_date\"><a href=\"{{ url('blog\/'.$link->year.'\/'.$link->month) }}\">{{ $link->month_name }} ({{ $link->id }}) <\/a><\/small><\/p>\n            <?php\n            $current_year = $link->year;\n            ?>\n        @else\n            <h3 class=\"text-uppercase\"><a href=\"{{ url('blog\/'.$link->year) }}\">{{ $link->year }}<\/a><\/h3>\n            <p><small class=\"blog_date\"><a href=\"{{ url('blog\/'.$link->year.'\/'.$link->month) }}\">{{ $link->month_name }} ({{ $link->id }}) <\/a><\/small><\/p>\n            <?php\n            $current_year = $link->year;\n            ?>\n        @endif\n    @endif\n@endforeach\n","398":"SELECT @SearchFilter.value('(\/KeywordSearch\/SelfEmployed\/text())[1]', 'varchar(100)')\n","399":"SELECT SUBSTRING([description],CHARINDEX('BuildNumber:',[description])+12,\n    CHARINDEX(']',[description], CHARINDEX('BuildNumber:',[description]))\n    -(CHARINDEX('BuildNumber:',[description])+12))\nFROM YOURTABLE\n","400":"SQL> alter session set nls_timestamp_format = 'YYYY-MM-DD HH24:MI:SSXFF';\n\nSession altered.\n\nSQL> with t as (\n  2     select 'Podlaski Oddzia\u0142 Stra\u017cy Granicznej\n  3  Informacja dobowa o zdarzeniach na terenie wojew\u00f3dztwa podlaskiego\n  4  w dniu 15.04.2013 r.'\n  5         as original_string\n  6       from dual)\n  7  select to_timestamp(regexp_substr(original_string, '\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d'), 'DD.MM.YYYY') as the_timestamp\n  8    from t;\n\nTHE_TIMESTAMP\n---------------------------------------------------------------------------\n2013-04-15 00:00:00,000000000\n\n1 row selected.\n","401":"UPDATE MyTable\nSET [Result]= ISNULL([Result],'') + '<Cat>'\nWHERE ID IN (3,4);\n\n\nUPDATE MyTable\nSET [Result]= ISNULL([Result],'') + '<Dog>'\nWHERE ID IN (4,5);\n","402":"DELETE FROM WRITTEN_BY WHERE Pub_ID IN (\nSELECT Pub_ID FROM PUBLICATION\n                   WHERE Pub_Title = 'Introduciton to Database system' )\n\nINSERT INTO WRITTEN_BY \nSELECT Re_Id,Pub_Id\nFROM RESEARCHER CROSS JOIN PUBLICATION \nWHERE Re_Name = 'Henry Gordon' OR Re_Name = 'Sarah Paker' \nAND Pub_Title like 'Introduciton to Database system'\n\nSELECT * FROM WRITTEN_BY\n","403":"SELECT userId,\n       SUM(case when TYPE='fine' then amount else 0 end) as totalFine, \n       SUM(amount) AS totalDeposite\nFROM trx \nGROUP BY userId\n","404":"SELECT  c.value\n  FROM  tblhosting a INNER JOIN tblcustomfields b\n            ON b.relid = a.packageid\n        INNER JOIN tblcustomfieldsvalues c\n            ON c.fieldid = b.id\n WHERE  a.id = '$id'  AND   \n        a.userid = '$userid' AND \n        b.fieldname = 'foo'\n","405":"SELECT * \nFROM Table1 \nORDER BY Id \nLIMIT 4,1 -- here you provide which row you want to retrieve\n          -- 4 indicates from which row start selecting (offset)\n          -- 1 - how many rows you want to retrieve\n          -- you can change It as you like\n","406":" SELECT * \nFROM\n(\nselect *, ROW_NUMBER() over ( partition by projectId order by classType) as seq FROM\n(\n    Select projectID, classType, sum(Amount) as Total, \n           sum(case when Classyear = 2014 then Amount else 0 end) as CurrentYear, \n           sum(case when ClassYear <2014 then Amount else 0 end) as PriorYear, \n           sum( case when ClassYear > 2014 then Amount else 0 end) as PostYear\n\n    from \n    myTable\n    group by ProjectID, classType\n) T\nWhere (T.Total >0 and classType <> 'C') or classType ='C' \n) C\nwhere seq =1\n","407":"SELECT sum(case when Frequency = 'Monthly' then Amount else 0 end) + \n       sum(case when Frequency = '4 Weekly' then Amount \/ 2 else 0 end) +\n       sum(case when Frequency = 'Fortnightly' then Amount \/ 3 else 0 end) +\n       sum(case when Frequency = 'Weekly' then Amount,0.0) \/ 5 else 0 end) \nFROM Table\nWHERE Id = 1;\n","408":"SELECT ft.FileNo, pt.Amount, 'True' IsPayment\nFROM FileTable ft\nJOIN PaymentTable pt ON pt.FK_FileID = ft.FileId\nUNION ALL\nSELECT ft.FileNo, et.Amount, 'False' IsPayment\nFROM FileTable ft\nJOIN ExpenseTable et ON et.FK_FileID = ft.FileId\n","409":"select AH_NAME1 COLLATE DATABASE_DEFAULT from GGIMAIN.SYSADM.BW_AUFTR_KOPF\nunion\nselect AH_NAME1 COLLATE DATABASE_DEFAULT from GGI2014.SYSADM.BW_AUFTR_KOPF\n","410":"Update Backup\nset ImageURL =replace(ImageURL,'\/s\/','\/I\/')\n","411":"select attname, format_type(atttypid, atttypmod)\nfrom pg_type\n     join pg_class on pg_class.oid = pg_type.typrelid\n     join pg_attribute on pg_attribute.attrelid = pg_class.oid\nwhere typname = 'mytype'\norder by attnum\n","412":"\"SELECT id FROM MUSIC WHERE id IN ($files)\"\n","413":"SELECT MONTH(DateColumn) AS MonthNumber, COUNT(1) AS Occurances\nFROM schema.TableName\nGROUP BY MONTH(DateColumn)\n","414":"CREATE PROCEDURE OntoNewVersion\n    @new_title NVARCHAR(100) \nAS \nBEGIN \n BEGIN TRY\n  BEGIN TRANSACTION T1\n    DECLARE @versid INT\n    INSERT INTO Versions (title) VALUES (@new_title)\n    SET @versid = SCOPE_IDENTITY()\n\n\n    INSERT INTO Questions \n        (qtext,subsection_id,version_id,viewtype)  \n    SELECT qtext, subsection_id,@versid,viewtype \n    FROM Questions  \n  COMMIT TRANSACTION T1\n END TRY\n\n BEGIN CATCH\n  IF(@@TRANCOUNT>0)\n    BEGIN \n        ROLLBACK TRANSACTION T1\n    END\n  ;THROW    \n END CATCH\nEND\n","415":"select \n      a.id,\n      a.name,\n      ga.earned_epoch,\n      ga.offline\n   from   \n      achievement a \n         LEFT OUTER JOIN gamer_achievement ga \n             ON a.id = ga.achievement_id\n            AND a.game_id = ga.game_id\n            AND ga.gamer_id = 'fba8fcaa-f57b-44c6-9431-4ab78605b024'\n   where\n      a.game_id = '1480656849'\n   order by \n      convert (a.id, unsigned)\n","416":"select top 1 userid, count(certificatename) total\nfrom certificates\ngroup by userid -- but not certificatename\norder by 2 desc --you can use total or count(certificatname) here\n","417":"$ db2 connect to sample\n\n   Database Connection Information\n\n Database server        = DB2\/LINUX 9.1.9\n SQL authorization ID   = IDBJORH\n Local database alias   = SAMPLE\n\n$ db2 values current server\n\n1                 \n------------------\nSAMPLE            \n\n  1 record(s) selected.\n","418":"select m, pid, s\nfrom (select r.m, r.pid, sum(s) as s,\n             row_number() over (partition by m order by sum(s) desc) as seqnum\n      from report r\n      group by r.m, r.pid\n     ) r\nwhere seqnum <= 3\norder by m, s desc;\n","419":"SELECT b.[CUSIP NUMBER],\n       b.[ORIGINAL BALANCE],\n       b.[ORIGINAL WA MATURITY],\n       b. [PASS THRU RATE],\n       Monthlypayment,\n       Monthlypayment2\nFROM   DBO.mbs012013 a\n       JOIN dbo.mbs022013 b\n         ON a.[CUSIP NUMBER] = b.[CUSIP NUMBER]\n       CROSS APPLY (SELECT b.[ORIGINAL BALANCE] * ( ( b.[PASS THRU RATE] \/ 12 ) * ( 1 + power (( b.[PASS THRU RATE] \/ 12 ), b.[ORIGINAL WA MATURITY]) ) \/ ( 1 + ( power (( b.[PASS THRU RATE] \/ 12 ), b.[ORIGINAL WA MATURITY]) ) ) )) CA(Monthlypayment)\n       CROSS APPLY(SELECT 1 + Monthlypayment) CA2(Monthlypayment2) \n","420":"SELECT *\nFROM SetA\nLEFT INNER JOIN SetB\n    ON 1 = 1  -- Voila, instant cross join\n","421":"update test_table set column1=123 where column2 IN(100,200,300)\n","422":"SELECT * FROM\n    (SELECT ParentID, Caption, Name\n        FROM #table) AS t\n    PIVOT\n    (\n        MAX(t.Name)\n        FOR Caption IN ([Plan], [Content], [Accuracy])\n    ) AS pvt\n","423":"CREATE TABLE dbo.foo (ID int IDENTITY(1,1) PRIMARY KEY, Other1 int, Other2 char(10) DEFAULT 'abcdefghij', Other3 varchar(52) DEFAULT 'abcdefghijklmnopqrstuvwxyz');\nGO\nINSERT dbo.foo (Other1) VALUES (1);\nGO\nINSERT dbo.foo (Other1) SELECT Other1 FROM dbo.foo;\nGO 20\nSELECT COUNT(*) FROM dbo.foo;\nGO\n\n-- now enable viewing of execution plans\n\nSELECT * FROM dbo.foo WHERE id = 456789\n-- Table 'foo'. Scan count 0, logical reads 3, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.\nGO\n-- double up rows\nINSERT dbo.foo (Other1) SELECT Other1 FROM dbo.foo;\nGO\n\nSELECT * FROM dbo.foo WHERE id = 456789\n-- Table 'foo'. Scan count 0, logical reads 3, physical reads 0, read-ahead reads 0, lob logical reads 0, lob physical reads 0, lob read-ahead reads 0.\nGO\n","424":"SELECT a.Column1 AS 'Col1',\n       a.Column2 AS 'Col2',\n       null AS 'Col3',\n       a.Column4 AS 'Col4'\nFROM TableA AS a\nUNION ALL\nSELECT b.Column1 AS 'Col1',\n       b.Column2 AS 'Col2',\n       b.Column3 AS 'Col3',\n       null  AS 'Col4'\nFROM TableB AS b\n","425":"UPDATE\n  MyTable\nSET\n  Col1 = CASE WHEN b.Foo = \"Bar\" THEN LOWER(b.Baz) ELSE \"\" END,\n  Col2 = ISNULL(c.Bling, 0) * 100 \/ Col3\nFROM\n  MyTable \n  INNER JOIN MySecondTable AS b ON b.Id = MyTable.SecondId\n  LEFT  JOIN ##MyTempTable AS c ON c.Id = b.ThirdId\nWHERE\n  MyTabe.Col3 > 0\n  AND b.Foo NOT IS NULL\n  AND MyTable.TheDate > GETDATE() - 10\n","426":"select \n   uc.id as creator,\n   uu.id as updater,\n   uo.id as owner,\n   a.[name]\nfrom\n    asset a\n    JOIN\n    user uc ON uc.user_pk = a.created_by\n    JOIN\n    user uu ON uu.user_pk = a.updated_by\n    JOIN\n    user uo ON uo.user_pk = a.owned_by\n","427":"CREATE VIEW friends AS\nSELECT\n    actor, director, film, num_together\nFROM(\n    SELECT\n        a.aid AS actor,\n        b.aid AS director,\n        a.fid AS film,\n        COUNT(*) OVER (PARTITION BY a.aid, b.aid) AS num_together\n    FROM\n        involved_in a\n        INNER JOIN involved_in b ON\n            a.fid = b.fid\n    WHERE\n        a.job IN ('actor', 'actress')\n        AND b.job = 'director'\n    ) foo\nWHERE\n    num_together < 'x' -- placeholder for your \"limit the rows that appear with count less than x\"\n","428":"WITH AdjustedAdjustments AS (\n\nselect\n  PersonID,\n  Date,\n  SubtractAmount\/\n  EXP(\n    SUM(LOG(COALESCE(DivideAmount,1)))\n      OVER (\n        PARTITION BY PersonID\n        ORDER BY Date\n        ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING\n      )\n  ) AS AdjustedSubtract,\n  DivideAmount\n  FROM TblAdj\n)\n\n  SELECT\n    p.PersonID,\n    p.Value\/COALESCE(EXP(SUM(LOG(COALESCE(DivideAmount,1)))),1)\n      -COALESCE(SUM(a.AdjustedSubtract),0) AS AmountAdjusted\n  FROM TblVal AS p\n  LEFT OUTER JOIN AdjustedAdjustments AS a\n  ON a.PersonID = p.PersonID\n  AND a.Date >= p.Date\n  GROUP BY p.PersonID, p.Value, p.Date;\n","429":"SELECT id, title FROM ts_Gallary WHERE (title LIKE '%%%@%%' OR location LIKE '%%%@%%' OR tags LIKE '%%%@%%') AND imageExistStatus = 1;\n","430":"SELECT \n    bc.id, bc.title, bc.estimateCurrent,\n    SUM(TIME_TO_SEC(TIMEDIFF(dateEnding, dateBeginning)))\nFROM cases bc\nJOIN timesheet ts on ts.`#case` = bc.id\nGROUP BY bc.id, bc.title, bc.estimateCurrent\n","431":"Sub FilterByParameter()\n    Dim wb As Workbook\n    Dim dataSheet As Worksheet\n    Dim parameterSheet As Worksheet\n    Dim rng As Range\n    Dim filterColumn As Long\n    Dim filterValue As String\n\n    Set wb = ThisWorkbook\n    ' sheet that contains your table\n    Set dataSheet = wb.Sheets(\"Sheet1\")\n    ' sheet that contains your parameters\n    Set parameterSheet = wb.Sheets(\"Sheet2\")\n    ' range that contains your table, hard-coded here\n    ' but can easily be set dynamically\n    Set rng = dataSheet.Range(\"A1:F78\")\n\n    ' get the column you are searching\n    filterColumn = parameterSheet.Range(\"G1\").Value\n\n    ' get the value you want to filter on\n    filterValue = parameterSheet.Range(\"G2\").Value\n\n    ' turn off autofilters if set\n    dataSheet.AutoFilterMode = False\n\n    ' autofilter using your column and filter\n    rng.AutoFilter field:=filterColumn, Criteria1:=filterValue\n\n    ' now you can do whatever you want to with the rows\n    ' that remain after the autofilter was applied\nEnd Sub\n","432":"SELECT film.film_id, film.title, rental.return_date\nFROM film\n    INNER JOIN inventory ON inventory.film_id = film.film_id\n    INNER JOIN rental ON rental.inventory_id = inventory.inventory_id\nWHERE rental.return_date BETWEEN '2005-05-29' AND '2005-05-30'\nORDER BY rental.return_date\n","433":" UPDATE assoc SET cachedData = NULL\n    WHERE EXISTS (SELECT * FROM otherTable \n        WHERE otherTable.Col1 = assoc.Col1 AND otherTable.Col2 = assoc.Col1)\n","434":"with t as\n  (select Emp_num, substr(date_key,1,4) as year, \n    avg(salary) over (partition by Emp_num order by Date_key rows unbounded preceding) as avg_sal,\n    avg(bonus) over (partition by Emp_num order by Date_key rows unbounded preceding) as avg_bon,\n    row_number() over (partition by Emp_num, substr(date_key,1,4) order by Date_key desc) as R\n  from Table1)\nselect EMP_NUM, YEAR, AVG_SAL, AVG_BON\nfrom t\nwhere R = 1;\n\n\nEMP_NUM     YEAR    AVG_SAL     AVG_BON\n-------------------------------------------\n54343       2010    498         50\n54343       2011    553.5       62.5\n54343       2012    598.2       70\n","435":"WHERE coalesce(MainTable.RowVersion,'00000000-0000-0000-0000-000000000000') <> coalesce(CloneOfMainTable.RowVersion,'00000000-0000-0000-0000-000000000000')\n","436":"UPDATE Table_a a\nSET qty = qty + b.rn\nFROM (\n    SELECT id,ROW_NUMBER() OVER (ORDER BY id) rn\n    FROM Table_a\n    ) b\nWHERE a.id = b.id\n","437":"SELECT itemcode, count(itemcode) 'times purchased', sum(quantity) 'amount purchased'  \nFROM `temp_trans` \nWHERE `trans_date` >= '2012-01-08' AND `trans_date` <= '2012-03-23' \nGROUP BY itemcode\n","438":"var subquery = QueryOver.Of<WorkItem>().Where(w => w.State == state)\n                .AndRestrictionOn(w => w.Type).IsLike(type, MatchMode.Exact)\n                .SelectList(list => list.SelectGroup(w => w.UserId))\n                    .OrderBy(Projections.Count<WorkItem>(x => x.UserId))\n                .Desc().Take(1);\n\nvar query = CurrentSession.QueryOver<WorkItem>()\n              .WithSubquery\n              .WhereProperty(p => p.UserId)\n              .Eq(subquery);\n","439":"DECLARE @test DATETIME\nSET @test = GETDATE()  -- or any other date\n\nSELECT DATEADD(month, ((YEAR(@test) - 1900) * 12) + MONTH(@test), -1)\n","440":"Declare @Week Int = 1\n\nWhile @Week <= 52\nBegin\n    select count(distinct user_id) as count\n    from tracking\n    where datepart(wk,login_dt_tm) >= 0 and datepart(wk,login_dt_tm) <= @Week\n    Set @Week += 1\nEnd\n","441":"SELECT InWarehouse.expiry_date, \nt1.active_substance, \ndrugs.strength, \ndrugs.strength_type, \ndrugs.dosage_form, \ndrugs.minimum_quantity,\nInWarehouse.quantity + InPharmacy.quantity,\nInPharmacy.expiry_date\nFROM (SELECT InWarehouse.expiry_date, \n      drugs.active_substance, \n      drugs.strength, \n      drugs.strength_type, \n      drugs.dosage_form, \n      drugs.minimum_quantity, \n      NZ(SUM(InWarehouse.quantity),0) AS quant\n FROM drugs \n      LEFT JOIN (SELECT drug_id, \n                        expiry_date, \n                        SUM(in_quant - out_quant) AS quantity \n                FROM warehouse GROUP BY drug_id, expiry_date)  \n AS InWarehouse ON \n      InWarehouse.drug_id = drugs.id\n      GROUP BY InWarehouse.expiry_date, \n      drugs.active_substance, \n      drugs.strength, \n      drugs.strength_type, \n      drugs.dosage_form, \n      drugs.minimum_quantity  \n) t1\nJOIN (  SELECT InPharmacy.expiry_date, \n      drugs.active_substance, \n      drugs.strength, \n      drugs.strength_type, \n      drugs.dosage_form, \n      drugs.minimum_quantity,\n      NZ(SUM(InPharmacy.quantity), 0) as quant\n FROM (drugs\n LEFT JOIN (SELECT drug_id, expiry_date, SUM(in_quant - out_quant) as quantity\n            FROM pharmacy\n            GROUP BY drug_id, expiry_date) as InPharmacy\n ON InPharmacy.drug_id = drugs.id)\n\n GROUP BY  InPharmacy.expiry_date, \n      drugs.active_substance, \n      drugs.strength, \n      drugs.strength_type, \n      drugs.dosage_form, \n      drugs.minimum_quantity ) t2\n ON t1.active_substance = t2.active_substance\n","442":"CREATE TABLE Anonymous\n(\n    ID_Column     SERIAL NOT NULL PRIMARY KEY,\n    field1        BOOLEAN NOT NULL,\n    field2        BOOLEAN NOT NULL,\n    field3        BOOLEAN NOT NULL,\n    field4        BOOLEAN NOT NULL,\n    field5        CHAR(50),\n    CHECK((field4 = 't' AND field5 IS NOT NULL) OR (field4 = 'f' AND field5 IS NULL))\n);\n","443":"SELECT start_dsgn, COUNT(CASE WHEN min_cost_1 <= @cost_1 OR min_cost_2 <= @cost_2 THEN end_dsng END) as Cnt\nFROM table\nGROUP BY start_dsgn\n","444":"DECLARE @id INT\nDECLARE id_cursor CURSOR FOR \nSELECT id from mytable where color = 'red'\n\nOPEN id_cursor\n\nFETCH NEXT FROM id_cursor \nINTO @id\n\nWHILE @@FETCH_STATUS = 0\nBEGIN\n    PRINT @id\n\n    FETCH NEXT FROM id_cursor \n    INTO @id\nEND \nCLOSE id_cursor;\nDEALLOCATE id_cursor;\n","445":"--Generic example:\nSELECT *\nFROM MY_TABLE\nWHERE SOME_FIELD IS NULL;\n\n--Instead of    \n\nSELECT *\nFROM MY_TABLE\nWHERE SOME_FIELD = NULL;\n","446":"update tblToUpdate\nset columnToUpdate = '0000-0000-0000-' + right(columnToUpdate , 4)\n","447":"SELECT \n    NAME,\n    LISTAGG(STRUCTURE_CODE||'.'||AGE_LIMIT , ',') WITHIN GROUP (ORDER BY STRUCTURE_CODE) AS AGE_LIMIT ,\n    LISTAGG(STRUCTURE_CODE||'.'||BIRTHPLACE_LIMIT , ',') WITHIN GROUP (ORDER BY STRUCTURE_CODE) AS BIRTHPLACE_LIMIT                        \nFROM \"TABLE\" GROUP BY NAME\n","448":"SELECT message_type,\n       COUNT(message_type) AS message_type_count,\n       SUM(Unread = 1) AS unread_count\nFROM Messages \nGROUP BY message_type\n","449":"EXECUTE IMMEDIATE 'DELETE FROM dept WHERE deptno = :num'\n  USING dept_id; \n","450":"SELECT o.NAME,\n       o.STATE, \n       o.ITEM, \n       case when i.RATE is NULL \n            then ( select rate from item_desc \n                   where item = o.item\n                   and coalesce(state,'') =''\n                  )\n            else i.RATE\n            end as RATE\nFROM ORDERS o\nLEFT JOIN ITEM_DESC i\nON o.ITEM = i.ITEM\nAND o.STATE = i.STATE\n","451":"declare @d1 varchar(10) = CAST(DATEADD(dd,-1,CAST(GETDATE() as Date)) as varchar(10))\ndeclare @d2 varchar(10) = CAST(DATEADD(dd,-2,CAST(GETDATE() as Date)) as varchar(10))\ndeclare @d3 varchar(10) = CAST(DATEADD(dd,-3,CAST(GETDATE() as Date)) as varchar(10))\ndeclare @d4 varchar(10) = CAST(DATEADD(dd,-4,CAST(GETDATE() as Date)) as varchar(10))\ndeclare @d5 varchar(10) = CAST(DATEADD(dd,-5,CAST(GETDATE() as Date)) as varchar(10))\ndeclare @d6 varchar(10) = CAST(DATEADD(dd,-6,CAST(GETDATE() as Date)) as varchar(10))\ndeclare @d7 varchar(10) = CAST(DATEADD(dd,-7,CAST(GETDATE() as Date)) as varchar(10))\ndeclare @SQL varchar(8000)\n\nSET @SQL =\n'Select\n    *\nFrom\n    (\n    Select\n        unpvt.[Table]\n        ,unpvt.value\n        ,unpvt.Date\n    From\n        ORIGINAL_TABLE\n        unpivot (\n            value\n            for [Table] in (Table_1\n                ,Table_2\n                ,Table_3\n                ,...\n                ,Table_35\n            )\n        ) unpvt\n    Where\n        Date > cast(dateadd(dd,-8,getdate()) as date)\n    ) ref\n    pivot (sum(ref.value)\n        for ref.Date in (\n            [' + @d1 + ']\n            ,[' + @d2 + ']\n            ,[' + @d3 + ']\n            ,[' + @d4 + ']\n            ,[' + @d5 + ']\n            ,[' + @d6 + ']\n            ,[' + @d7 + ']\n        )\n    ) as pvt'\n\nEXEC(@SQL)\n","452":"namespace MyApplication \n{ \n    public class myWebService : System.Web.Services.WebService \n    { \n        private classEmployee _emp = new classEmployee(); \n\n        [HttpGet]\n        public string GetEmployees() \n        { \n            string EmployeeData = string.Empty; \n            EmployeeData = _emp.GetEmployees(); \n            return EmployeeData; \n        } \n    } \n}\n","453":"UPDATE Table1 t1 JOIN\n(\n  SELECT id, @n := @n + 1 rnum\n    FROM Table1 CROSS JOIN (SELECT @n := 0) i\n   WHERE date IS NULL\n   ORDER BY id\n) t2 ON t1.id = t2.id CROSS JOIN\n(\n  SELECT MAX(date) date FROM Table1\n) q\n   SET t1.date = q.date + INTERVAL t2.rnum DAY\n","454":"SELECT id,name,LENGTH(TRIM(name)) AS namelength\nFROM table1 \nGROUP BY id,name\nHAVING LENGTH(TRIM(name)) > 3\n","455":">sqlcmd -i C:\\panels_QA28July11.sql -o C:\\PanelsImportResult.txt\n","456":"select t.*\nfrom (select t.*,\n             row_number() over (partition by name, course order by lastupdate desc) as seqnum\n      from t\n     ) t\nwhere seqnum = 1;\n","457":"CREATE OR REPLACE FUNCTION to_char(timestamptz) RETURNS text AS\n$$\n    SELECT to_char($1,'YYYY\/MM\/DD~HH24:Mi:SS'); -- here your default setting\n$$\nLANGUAGE SQL;\n","458":"declare @tab table(\n       code int, \n       amount int)\n\ninsert into @tab values\n    (1,100),\n    (1,100),\n    (1,100),\n    (2,500),\n    (2,500),\n    (3,1000);\n\n    select code, \n       case when rn=1 then \n           amount \n       else 0 end amount \n    from \n (select *, \n          row_number()Over(partition by code Order by amount) RN \n      from @tab)t\n","459":"INSERT INTO final_table (a,b)\nSELECT a, b\nFROM scratch_table\n\nEXCEPT\n\nSELECT a, b\nFROM final_table\n","460":"DATEADD(DD, DATEDIFF(DD, 0, STARTTIME), 0)  BETWEEN DATEADD(DD, DATEDIFF(DD, 0, <DATE_TIME_PARAMETER>), 0) AND DATEADD(DD, DATEDIFF(DD, 0, <DATE_TIME_PARAMETER>), 0)\n","461":"select grp,\n       ind,\n       val\nfrom (\n   select grp, \n          ind, \n          val,\n          lag(val,1,0::numeric) over (partition by grp order by ind) - val as diff\n   from test_table\n) t\nwhere diff <> 0;\n","462":"    SELECT  SUBSTRING_INDEX(SUBSTRING_INDEX(t.keywords, ',', n.n), ',', -1) value , count(*) as counts\n    FROM table1 t CROSS JOIN \n   (\n   SELECT a.N + b.N * 10 + 1 n\n   FROM \n    (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL  SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) a\n   ,(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION  ALL SELECT 9) b\n\n   ORDER BY n\n ) n\n WHERE n.n <= 1 + (LENGTH(t.keywords) - LENGTH(REPLACE(t.keywords, ',', '')))\n group by value\n","463":"DECLARE @start DATETIME\nDECLARE @end DATETIME\n\nSET @start = DATEADD(dd, 0, DATEDIFF(dd, 0, GETUTCDATE()))\nSET @end = DATEADD(dd, 1, DATEADD(ms, -3, @start))\n","464":"SELECT   [ID], Country, MIN(Address), SUM(Price) As TotalPrice\nFROM     tblYourTableName\nGROUP BY [ID], Country\nORDER BY [ID]\n","465":"insert into Customers(\n  Cust_id, \n  Date,\n  Rate,\n  Type)\n\n  select Cust_id, \n         Date, -- TODO:Generate required Date from given one\n         Rate, -- TODO:Generate required Rate from given one\n         Type  -- TODO:Generate required Type from given one\n    from Customers \n   where Type = 'm' \n","466":"select t1.*, t2.*,\n       ((case when t1.id = t2.id then 1 else 0 end) +\n        (case when t1.foo = t2.foo then 1 else 0 end) +\n        (case when t1.bar = t2.bar then 1 else 0 end) +\n        . . .\n       ) as NumMatches        \nfrom table t1 join\n     table t2\n     on t1.id = t2.id or\n        t1.foo = t2.foo or\n        t1.bar = t2.bar or\n        . . .\norder by NumMatches desc;\n","467":"INSERT INTO mytable (id, name) VALUES \n(NULL, :name1),\n(NULL, :name2)\n","468":"insert into tbl_users\nselect\nx.y.value('(account_id)[1]', 'nvarchar(150)') as account_id\n,x.y.value('(account_name)[1]', 'nvarchar(350)') as account_name\n,x.y.value('(account_name_abbr)[1]', 'nvarchar(150)') as account_name_abbr\n,x.y.value('(location\/id)[1]', 'int') as location_id\n,x.y.value('(cpu)[1]', 'int') as cpu_amount\n,x.y.value('(ram)[1]', 'int') as ram_amount\n,x.y.value('(disk)[1]', 'int') as disk_amount\nfrom @xml.nodes('\/\/install\/client\/vlans') as x(y)\ndeclare @tbl_users_id int = scope_identity()\n\ninsert tbl_users_vlans([user_id],[vlan])\nselect @tbl_users_id, x.y.value('data(.)', 'nvarchar(150)')\nfrom @xml.nodes('\/\/install\/client\/vlans\/item') as x(y)\n","469":"SELECT country_code\n     , COUNT(emission_class) AS total\n     , SUM(CASE WHEN emission_class = 'E0' THEN 1 ELSE 0 END) AS EURO0\n     , SUM(CASE WHEN emission_class = 'E?' THEN 1 ELSE 0 END) AS EURO?\n     , ...\nFROM DB.CUSTOMER_VEHICLE\nGROUP BY country_code;\n","470":"select MyColumn\nfrom MyTable\norder by \n    case IsNumeric(MyColumn) \n        when 1 then Replicate('0', 100 - Len(MyColumn)) + MyColumn\n        else MyColumn\n    end\n","471":"SELECT T.ID, T.SEQ, MAX(T.AMOUNT) AMOUNT, D.DS\nFROM tbl T\nCROSS APPLY\n(\n    SELECT [DESCRIPTION] + ' '\n    FROM tbl B\n        WHERE T.ID = B.ID\n            AND T.SEQ = B.SEQ\n            AND [DESCRIPTION] IS NOT NULL\n    FOR XML PATH('')\n) D(DS)\nGROUP BY ID, SEQ, DS\n","472":"SELECT LEFT(`delivery_postcode`, 2) as `postcode`\n,     count(`delivery_postcode`) as `count`\n,     pc.placeCount\nFROM `customer_cards` cc\nLEFT JOIN  (\n               SELECT LEFT(`placePostcode`, 2) as `postcode`, \n               count(`placePostcode`) as `placeCount`\n               FROM `RestaurantsForGoogleMaps`\n               WHERE `placePostcode` IS NOT NULL\n                   AND `placePostcode` <> ''\n              GROUP BY `postcode`\n           ) pc\n       on  pc.postcode = LEFT(cc.delivery_postcode, 2)\nWHERE `delivery_postcode` IS NOT NULL\nAND `delivery_postcode` <> ''\nGROUP BY `postcode`\nORDER BY `count` DESC\n","473":"UPDATE yourTable \nSET yourTextColumn = CONCAT(yourTextColumn, '<br\/>signature blabla<br\/>') \nWHERE catid IN (778, 779, 780);\n","474":"select @max := max( RandomId ) from Products;\nupdate Products set RandomId = @max := @max + Rand() + 1;\n","475":"SELECT t1.name AS name, t1.car AS car, t1.price AS max_price\n    FROM table1 t1\n    ORDER BY max_price DESC\n    LIMIT 1;\n","476":"select max(total.id) as id,\n                     sum(total.product_qty) as product_qty,\n                     total.location_id as location_id,\n                     total.date as \"date\",\n                     total.year as year,\n                     total.month as month,\n                     total.day as day,\n                     total.product_id as product_id\n                     from (\n                       -- From Consumer back to location\n                        select -max(id) as id,\n                        -sum(product_qty) as product_qty, \n                        location_dest_id as location_id, \n                        \"date\", year, month, day, product_id\n                        from report_stock_move\n                        where location_id in (\n                            select id\n                            from stock_location\n                            where \"name\" = 'Consumers'\n                        )\n                        and \"state\" = 'done'\n                        group by location_dest_id, \"date\", year, month, day, product_id\n\n                        union all\n\n                        -- From Location to Consumer\n                        select max(id) as id,\n                        sum(product_qty) as product_qty, \n                        location_id, \"date\", year, month, day, product_id\n                        from report_stock_move\n                        where location_id not in (\n                            select id\n                            from stock_location\n                            where \"name\" = 'Consumers'\n                        )\n                        and \"state\" = 'done'\n                        and location_dest_id in (\n                            select id\n                            from stock_location\n                            where \"name\" = 'Consumers'\n                        )\n                        group by location_id, \"date\", year, month, day, product_id\n                     ) as total\n                     group by location_id, \"date\", year, month, day, product_id\n","477":"using System.Data.Objects;\n\nEntityFunctions.AsNonUnicode( myUnicodeParam)\n","478":"WITH RECURSIVE tree(product_id, name, parentlist) AS (\n  SELECT product_id, name, ARRAY[ row_number() OVER (ORDER BY product_id) ]\n  FROM tree_products\n  WHERE parent_id IS NULL\n  UNION\n  SELECT tp.product_id, tp.name, array_append(parentlist, row_number() OVER (ORDER BY tp.product_id))\n  FROM tree_products tp\n  INNER JOIN tree t\n  ON (tp.parent_id = t.product_id)\n)\nSELECT *\nFROM tree\nORDER BY parentlist;\n","479":"DECLARE @str VARCHAR(MAX)='team_name:Brighton|stadium:American Express Community Stadium|max_attendance:30750';\nSELECT LEN(@str)-LEN(REPLACE(@str,'|','')) + 1;\n","480":"SELECT t.line, MIN(t.START), MAX(t.END), t.typ, t.color\nFROM dbo.tablename t\nGROUP BY t.line, t.typ,  t.color\n","481":"delete from tbl_test t \n  where t.sta in ('F', 'R') and exists ( \n      select 1 from tbl_test b \n        where b.ser_no = t.ser_no \n          and (sta='L' or (sta<>'L' and b.id<t.id)) )\n","482":"C+ = C\nC+ = CD (by using the third dependency)\nC+ = CDB (by using the fourth dependency)\n","483":"select * \nfrom [My_Table] t\nwhere [Order] > 0\n  and ([Date] between '20150201' and '20150228')\n  and not exists ( select *\n                   from [My_Table]\n                   where [Order] > 0\n                     and [User] = t.[User]\n                     and [Date] between '20150301' and '20150331')\n","484":"update item\n    set quantity = (select sum(value) from quantities where item.id = quantities.item_id);\n","485":"select sid\nfrom your_table\ngroup by sid\nwhere (cid=2 and data='john_email')\nor (cid=4 and data='ok')\nhaving sum(cid=2)=1 and sum(data='john_email')=1\nand sum(cid=4)=1 and sum(data='ok')=1\n","486":"declare @UNIX_TIME int\nselect @UNIX_TIME = 1111111111\n-- Using dateadd to add seconds to 1970-01-01\nselect [Datetime from UNIX Time] = dateadd(ss,@UNIX_TIME,'1970-01-01')\n","487":"SELECT x.*\n  FROM things x\n  JOIN \n     ( SELECT brand\n            , model\n            , MAX(effective_from) max_effective_from \n         FROM things \n        WHERE effective_from <= UNIX_TIMESTAMP() \n        GROUP \n           BY brand\n            , model\n     ) y \n    ON y.brand = x.brand \n   AND y.model = x.model \n   AND y.max_effective_from = x.effective_from;\n+------+-------+-------+----------------+-------+\n| id   | brand | model | effective_from | price |\n+------+-------+-------+----------------+-------+\n|    1 | a     | red   |     1402351200 |   100 |\n|    2 | b     | red   |     1402351200 |   110 |\n|    3 | a     | green |     1402391200 |   120 |\n|    7 | b     | green |     1402358200 |   135 |\n+------+-------+-------+----------------+-------+\n\nSELECT UNIX_TIMESTAMP();\n+------------------+\n| UNIX_TIMESTAMP() |\n+------------------+\n|       1402404432 |\n+------------------+\n","488":"declare @tmp table(driverid nvarchar(10),createddate datetime)\n\n--insert a sample record first\ninsert into @tmp\nselect '7x123','2015-6-20'\n\n\ndeclare @incomingvalue nvarchar(10) = '7x123';\n\ndeclare @now datetime = getdate();\ndeclare @threshold datetime = @now - 90;\n\nif exists(select * from @tmp where driverid = @incomingvalue and createddate >= @threshold)\nbegin\n  print 'Already a record on file within 90 days, no action taken';\nend\nelse\nbegin\n  insert into @tmp\n  select @incomingvalue, @now\n  print 'Nothing on file in last 90 days, record inserted';\nend\n\nselect * from @tmp\n","489":"select * from MDSYS.SDO_COORD_REF_SYS sample(1);\n","490":"SELECT t.id, t.title \n  FROM task AS t\n    LEFT JOIN activity AS a ON t.id=a.task_id\n  GROUP BY t.id\n  ORDER BY COALESCE(MAX(a.createdat), t.createdat) DESC\n","491":"SELECT Row_Number() Over (order by (select null)) ID, \n    COALESCE(t1.Name,t2.Name) Name, \n    COALESCE(t1.Value,0) T1Value, \n    COALESCE(t2.Value,0) T2Value\nFROM databasename.schemaname.table1 t1\n    FULL OUTER JOIN databasename.schemaname.table2 t2 ON t1.Name = t2.Name\n","492":"$dbh = new PDO('mysql:host=localhost;dbname=mydatabase', $user, $pass,\n               array( PDO::ATTR_PERSISTENT => true\n       ));\n","493":"SELECT a.id, a.sku \nFROM product AS a \n    INNER JOIN product_stock AS b  ON a.id = b.product_id\nWHERE b.in_stock = 1 AND a.type = 'X'\nand exists (\n    SELECT 'EXISTS'\n    FROM product d\n        INNER JOIN product_relation AS c ON c.child_id = d.product_id\n    WHERE \n        c.product_id = a.product_id\n        AND (d.quantity > 0 or d.in_stock = true)\n\n)\n","494":"UPDATE tableName\nSET ImagePath = REPLACE(ImagePath, '\/project\/images\/', '\/projects\/project-a\/images')\n","495":"SELECT a.US, a.decade, b.total FROM\n\n  (SELECT COUNT(A.Award) AS US, SUBSTRING(CAST(M.Year as char(4)), 0 , 4)  AS Decade\n  FROM Movies M, Awards A\n  WHERE {SOME WHERE CLAUSE}\n  GROUP BY Decade ) AS a\n\nINNER JOIN\n\n  (SELECT COUNT(*) AS Total, SUBSTRING(CAST(A2.Year as char(4)), 0 , 4) AS Decade\n  FROM Awards A2\n  WHERE {SOME WHERE CLAUSE}\n  GROUP BY Decade) AS b\n\nON a.decade = b.decade\n","496":"UPDATE test2 t2 \n SET t2.name = (SELECT t1.name \n                 FROM test1 t1 \n                WHERE t1.id = t2.mob)\n","497":"select *\nfrom orders o left join orderdata od on o.orderId=od.orderid\n","498":"select distinct cr1.movie\nfrom credits as cr1\njoin credits as cr2\nusing (movie)\nwhere cr1.person = {person 1 goes here}\nand cr2.person = {person 2 goes here}\n","499":"SELECT t1.*\nFROM PlanActual AS t1\nINNER JOIN (\n   SELECT MIN(Seq) AS minSeq, Phase\n   FROM PlanActual\n   GROUP BY Phase    \n) AS t2 ON t1.Phase = t2.Phase\nORDER BY t2.minSeq     \n","500":"create table YOUR_TABLE(ID integer, DT datetime);\ninsert into YOUR_TABLE\n    select 2, '02\/02\/2016 12:00:00' union all\n    select 3, '02\/05\/2016 12:00:00' union all\n    select 4, '02\/06\/2016 12:00:00' union all\n    select 5, '02\/07\/2016 12:00:00' \n;\n\nselect \n    ID,\n    DT,\n    datediff(day, DT, lead(DT) over (order by ID)) as DIFF\nfrom your_table;\n","501":"select * from myTable\nwhere CHARINDEX(cast(mycol as varchar), @myVar) > 0\n","502":"UPDATE goals_scored SET goalRank = (\n  SELECT count(*) FROM goals_scored AS i WHERE \n    i.numGoalsScored > goals_scored.numGoalsScored AND\n    i.gender = goals_scored.gender\n) + 1;\n","503":"update detail_box\nset\n   name = decode(sn, 2, 'Gita', 3, 'Krish', name),\n   date1 = (case when sn = 2 and date2 is null then to_date('2015-10-16', 'YYYY-MM-DD') else date1 end),\n   date2 = (case when sn = 3 and date2 is null then to_date('2015-10-16', 'YYYY-MM-DD') else date2 end)\n","504":"Private Sub cboProject_Change()\n\n    cboPlans.RowSource = \"SELECT * FROM tblPlans WHERE ProjectID = \" & cboProject.Value\n    cboPlans.Requery\n\nEnd Sub\n","505":"WITH tokenkeys \nas\n(\n    select regexp_substr('A set of words from other side','[^ ]+', 1, level) WORDSPLIT from dual\n    connect by regexp_substr('A set of words from other side', '[^ ]+', 1, level) is not null\n)\nselect distinct p.* from people p\njoin tokenkeys on p.name in (tokenkeys.wordsplit)\nor UTL_MATCH.EDIT_DISTANCE_SIMILARITY(p.lastname, tokenkeys.wordsplit) > 60\n","506":"select s.id as id, s.msts as msts, s.action as action from (\n  select min(named_struct('msts', msts, 'id', id, 'action', action)) as s\n  from A group by id\n) t;\n","507":"SELECT S.*, Su.*\nFROM Student AS S\nINNER JOIN Student_Subject AS SS\n    ON S.StudentID = SS.StudentID\nINNER JOIN Subject AS Su\n    ON SS.OfferCode = Su.OfferCode\n","508":"declare @directorId int\n\nselect @directorId = DirectorID \nfrom dbo.tblDirector \nwhere DirectorName='Steven Spielberg'\n","509":"select t1.date, case when t3.IDCLIENT is not NULL then t3.value else t2.value end as Value\nfrom Table1 t1 inner join Table2 t2 on t1.IDCLIENT = t2.IDCLIENT inner join\nTable3 t3 on t1.IDCLIENT = t3.IDCLIENT\n","510":"CREATE OR REPLACE PROCEDURE ReverseOf(input IN varchar2) IS\n        reverse varchar2(50);\nBEGIN\n        FOR i in reverse 1..length(input) LOOP\n                reverse := reverse||''||substr(input, i, 1);\n        END LOOP;\n        dbms_output.put_line(reverse);\nEND;\n","511":"Select\n    user.id,\n    all_time.total AS theCount, \n    last_month.total AS theCount2\nFrom users AS user\nLeft Outer Join \n    (Select Count(id) as total, invited_by_id\n     From users\n     Group By invited_by_id) as all_time\n       On all_time.invited_by_id = user.id\nLeft Outer Join\n    (Select Count(id) as total, invited_by_id\n     From users \n     Where signup_date >= NOW() - INTERVAL 30 DAY\n     Group By invited_by_id) AS last_month \n       On last_month.invited_by_id = user.id\n","512":"select * from demo a\nwhere not exists(\nselect 1 from demo b \nwhere a.demo_id!=b.demo_id\nAND A.S < B.E\nAND B.S < A.E)\n","513":"select a.FORM_JOURNAL_ID, \n       a.COMPANY_ID, \n       a.RETAIL_PRICE as RETAIL, \n       a.WHOLE_SALE_PRICE as WHOLESALE, \n       nvl(b.INDIVIDUALS,0) as INDIVIDUALS, \n       nvl(b.ENTITIES,0) as ENTITIES, \n       nvl(b.COMPLEX,0) as COMPLEX\n  from TableA a, TableB b\n where a.FORM_JOURNAL_ID = b.FORM_JOURNAL_ID (+)\n   and a.COMPANY_ID = b.COMPANY_ID (+)\nunion\nselect b.FORM_JOURNAL_ID, \n       b.COMPANY_ID, \n       nvl(a.RETAIL_PRICE,0) as RETAIL, \n       nvl(a.WHOLE_SALE_PRICE,0) as WHOLESALE, \n       b.INDIVIDUALS, \n       b.ENTITIES, \n       b.COMPLEX\n  from TableA a, TableB b\n where b.FORM_JOURNAL_ID = a.FORM_JOURNAL_ID (+)\n   and b.COMPANY_ID = a.COMPANY_ID (+);\n","514":"select post_id, min(topic_id)\n    from YourTable\n    group by post_id\n","515":"AND textfield1 LIKE '* value3 *'\n","516":"order by (case when t1.ordering > t2.number then 1 else 2 end),\n         t1.ordering\n","517":"#define kDatabaseName (@\"levelProgress.db\")\n- (void)checkAndCopyDatabaseIfNeeded\n{\n    if (!self.databasePath)\n    {\n        \/\/ Database should be present in user sandbox at root.\n        self.databasePath = [NSString pathWithComponents:[NSArray arrayWithObjects:[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject], kDatabaseName, nil]];\n    }\n\n    \/\/ Check if the file already copied\/exists.\n    NSFileManager *fileManager = [NSFileManager defaultManager];\n    BOOL success = [fileManager fileExistsAtPath:self.databasePath];\n\n    if(!success)\n    {\n        \/\/ Copy the file from app bundle to user sandbox (Files in app bundle can not be edited).\n\n        NSString *databasePathFromApp = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:kDatabaseName];\n\n#if DEBUG\n        BOOL isCopied =\n#endif\n        [fileManager copyItemAtPath:databasePathFromApp toPath:self.databasePath error:nil];\n\n        NSAssert(isCopied, @\"Problem copying database file to user document folder\");\n    }\n}\n","518":"SELECT COUNT(DISTINCT PoliticianId) AS result\nFROM Votes\nWHERE UserId = 1010 ;\n","519":"    select \n        st.name [Table],\n        sc.name [Column],\n        sep.value [Description]\n    from sys.tables st\n    inner join sys.columns sc on st.object_id = sc.object_id\n    left join sys.extended_properties sep on st.object_id = sep.major_id\n                                         and sc.column_id = sep.minor_id\n                                         and sep.name = 'MS_Description'\n    where st.name = @TableName\n    and sc.name = @ColumnName\n","520":"select\n  start_date,\n  stop_date_original\nfrom\n  dates\nwhere \n  start_date is not null\n  and stop_date_original is not null \n  and start_date > str_to_date('10\/10\/2009','%d\/%m\/%Y')\n  and stop_date_original < str_to_date('24\/01\/2013','%d\/%m\/%Y')\n","521":"SELECT widget,\n       max(CASE WHEN rn = 1 THEN a_name ELSE NULL END) a_name1,\n       max(CASE WHEN rn = 1 THEN a_value ELSE NULL END) a_value1,\n       max(CASE WHEN rn = 2 THEN a_name ELSE NULL END) a_name2,\n       max(CASE WHEN rn = 2 THEN a_value ELSE NULL END) a_value2,\n       max(CASE WHEN rn = 3 THEN a_name ELSE NULL END) a_name3,\n       max(CASE WHEN rn = 3 THEN a_value ELSE NULL END) a_value3,\n       max(CASE WHEN rn = 4 THEN a_name ELSE NULL END) a_name4,\n       max(CASE WHEN rn = 4 THEN a_value ELSE NULL END) a_value4\n  FROM( SELECT widget,\n               a_name,\n               a_value,\n               row_number() over (partition by widget \n                                      order by a_name, a_value) rn\n          FROM attrs )\n GROUP BY widget\n","522":"Select Case Cells(1, 1).Text ' cell A1 contains Y or N\n\n    Case \"Y\": sWhereClause = \" where Med_D = 'Y'\"\n\n    Case \"N\": sWhereClause = \" where Med_D in ('Y','N')\"\n\n    Case Else: MsgBox \"error\": Exit Sub\n\nEnd Select\n\nDebug.Print SQL & sWhereClause ' send this to Access\n","523":"UPDATE  c\nSET     c.Price = c.Quantity * a.Rate\nFROM    TableC c\n        INNER JOIN TableB b\n            ON c.ProductID = b.ProductID\n        INNER JOIN TableA a\n            ON b.StoreID = a.StoreID\nWHERE   c.Price = 0\n","524":"var query = from table1 in data.Table1s\n                join table2 in data.Table2s\n                on table1.ID equals table2.ID\n    into x            \n    select new {\n        table1.Shirt,\n        Pants = x.Sum(c=>c.Pants) + table1.Pants,\n        table1.Shoes\n};\n","525":"SELECT s.SR_Service_RecID\n     , sc.Config_RecID\nFROM SR_Service s\nLEFT JOIN SR_Config sc\n     ON sc.SR_Service_RecID = s.SR_Service_RecID\n     AND sc.Config_RecID = (\n           SELECT TOP 1 Config_RecID\n           FROM SR_Config sc2 \n           WHERE sc2.SR_Service_RecID = s.SR_Service_RecID\n     )\n","526":"select s = sum(len(firstname) + len(lastname) + len(emailaddress) +\n       len(coalesce(LEFT(CategoryNames,LEN(CategoryNames) - 1),'')))\n     , r.ClientID \nfrom Customer r\n  cross apply\n   (Select cc.description + '|'\n    FROM Category cc\n    join CustomerCategory c on c.categoryid = cc.categoryid\n    WHERE r.customerid = c.customerid\n    For XML PATH('')) x (CategoryNames)\ngroup by r.ClientID\norder by 1 desc\n","527":"WHERE YEAR(A.[reimbursementDate]) = YEAR(GETDATE())\n","528":"SELECT *\nFROM\n(\n  select ACCESSION_PAYMENTS_DAILY_KEY, \n    accession_id, \n    check_num,\n    procedure_code,\n    paid_amt,\n    row_number() over (partition by   accession_id, check_num,procedure_code,paid_amt order by ACCESSION_PAYMENTS_DAILY_KEY) as occurrence\n  from      [MILLENNIUM_DW_DEV].[dbo].[F_PAYOR_PAYMENTS_DAILY]         \n  where PROCEDURE_CODE is not null\n     and PAID_AMT>0\n) x\nWHERE x.occurrence>1\n","529":"SELECT [orderId], MAX([datetime])\nFROM [table]\nGROUP BY [orderId]\nORDER BY MAX([datetime]) DESC\n","530":"select key, max(ts) from yourTable group by key\n","531":"$sql = \"SELECT DATE_FORMAT(NOW(), '%%Y') - DATE_FORMAT(DOB, '%%Y') - (DATE_FORMAT(NOW(), '00-%%m-%%d') < DATE_FORMAT(DOB, '00-%%m-%%d')) AS age from test where user_name = '%s'\";\n","532":"SELECT a.*\n  FROM (\n                select s.*, sum(volume) OVER previous_rows as total\n                         from stuff s\n                         WINDOW previous_rows as\n                            (ORDER BY priority desc ROWS between UNBOUNDED PRECEDING and CURRENT ROW)\n                         order by priority desc\n             ) AS a\nwhere a.total < 1000\n","533":"UPDATE visits\nSET logout_datetime = NOW()\nWHERE member_id = 1 AND visit_message = \"accept\"\n","534":"select ID,\n       Word\nfrom\n  (\n  select ID,\n         Word,\n         row_number() over(partition by left(Word, 1) order by Word) as rn\n  from YourTable\n  ) as T\nwhere rn = 1\n","535":"WITH inventory_time_in_freezer AS (\nSELECT i1.inv_id, SUM(i1.out_time - i1.in_time) as time_in_freezer\nFROM inventory_tack i1\nWHERE out_time IS NOT NULL\nGROUP BY i1.inv_id\n)\nSELECT i2.inv_id, MAX(i2.in_time) - MIN(i2.in_time) - iif.time_in_freezer\nFROM inventory_tack i2\nJOIN inventory_time_in_freezer iif ON iif.inv_id = i2.inv_id\nGROUP BY i2.inv_id, iif.time_in_freezer\n","536":"SELECT users.id, roles.id, \n    CASE WHEN usersroles.roles_id IS NULL THEN 0 ELSE 1 END AS has_the_role\nFROM users\nINNER JOIN roles\nLEFT JOIN usersroles ON users.id = usersroles.users_id AND roles.id = usersroles.roles_id\n","537":"select col2name, sum(col3 + col5)\nfrom (select COL1, COL2 as COL2NAME, sum(COL3A+COL3B) as COL3,\n             COL4 as COL4NAME, count(COL5NO) as COL5,\n             DENSE_RANK() OVER (ORDER BY COL1) as GROUPID\n      from TAB\n      group by COL1, COL2, COL4\n     ) t\nwhere GROUPID IN (1, 2)\ngroup by col2name;\n","538":"SELECT username from user_logins WHERE \n  username=? AND password_md5 = md5(?)\n","539":"SELECT w.adharno,\n       w.phone w_phone,\n       descrip_w,\n       amount_w,\n       a.phone a_phone,\n       decrip_a,\n       amount_a\nFROM table_w w\nJOIN table_a a ON a.adharno = w.adharno\n              AND w.descrip_w = a.decrip_a\n              AND (w.phone <> a.phone\n                OR w.amount_w <> a.amount_a)\n","540":"CREATE TABLE userColors (\n    userID INT,\n    color VARCHAR(16),\n    FOREIGN KEY (userID) REFERENCES users(user_id)\n);\n","541":"select survey.worker_id,\n   (Select Value from Code where ID = survey.code_number_of_days_id) as No_of_Days,\n   (Select Value from Code where ID = survey.code_gender) as Gender,\n   Info.Name, \n   (Select Value from Code where ID = Info.code_category_id) as Category,\n   (Select Value from Code where ID = Info.code_confirmed_status_id) as Confirmed,\nfrom Survey \nfull outer join Info \non Survey.worker_id = Info.id \n","542":"SELECT DISTINCT name FROM items\nWHERE something = 'foo'\nAND name < (SELECT name FROM items WHERE name = ...)\nORDER BY name DESC\nLIMIT 1\n","543":"select t.id, t.player_name, t.team\nfrom tablename t\njoin (select team, min(id) as minid from tablename group by team) x\non x.team = t.team and x.minid = t.id\n","544":"select regexp_matches(page,'[^[[]+(?=\\]])','g') from book\n","545":"UPDATE repName\nSET repName.Entered = x\nFROM\n    GenItems\n    INNER JOIN repName\n        ON GenItems.Job_Code = repName.Job_Code\nWHERE\n    repName.repID = x AND GenItems.Item_Name = 'y'\n","546":"SELECT * FROM information_schema.columns Where TABLE_SCHEMA='test';\n","547":"CREATE OR REPLACE FUNCTION dblink(text, text)\nRETURNS SETOF record AS\n  '$libdir\/dblink', 'dblink_record'\n  LANGUAGE 'c' VOLATILE STRICT\n  COST 1\nROWS 1000;\nALTER FUNCTION dblink(text, text) OWNER TO postgres;\nGRANT EXECUTE ON FUNCTION dblink(text, text) TO public; -- or whatever\n\nINSERT INTO tbl_B select * from \n (SELECT * from dblink('hostaddr=localhost port=5432 dbname=db_A user=postgres password=postgres',\n'select id, a, b from tbl_A limit 20 '\n)\nt(\n  id integer,\n  a integer,\n  b integer\n)) as q;\n","548":"DROP TABLE IF EXISTS meetings;\nCREATE TABLE IF NOT EXISTS meetings \n( meeting_id int(10) unsigned NOT NULL AUTO_INCREMENT\n, meeting_time datetime NOT NULL\n, PRIMARY KEY (meeting_id)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8;\n\nDROP TABLE IF EXISTS meetings_users;\nCREATE TABLE IF NOT EXISTS meetings_users \n( user_id int(10) unsigned NOT NULL\n, meeting_id int(10) unsigned NOT NULL\n, PRIMARY KEY (meeting_id,user_id)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8;\n\nDROP TABLE IF EXISTS users;\nCREATE TABLE IF NOT EXISTS users \n( user_id int(10) unsigned NOT NULL AUTO_INCREMENT\n, PRIMARY KEY (user_id)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8;\n\nINSERT INTO  users ( user_id ) VALUES (1),(2),(3),(4);\n\nINSERT INTO meetings ( meeting_id, meeting_time ) VALUES \n(1, '2013-01-14 10:00:00'), \n(2, '2013-01-15 10:00:00'), \n(3, '2013-01-16 10:00:00'),\n(4, '2013-01-17 10:00:00'),\n(5, '2013-01-18 10:00:00'),\n(6, '2013-01-19 10:00:00'),\n(7, '2013-01-20 10:00:00'),\n(8, '2013-01-14 12:00:00');\n\n\nINSERT INTO meetings_users (meeting_id, user_id ) VALUES \n(1, 1), \n(2, 1),\n(2, 3),\n(3, 1),\n(3, 3),\n(4, 2),\n(4, 3), \n(5, 2), \n(6, 1),\n(1, 8);\n\nSET @dt = '2013-01-15';\n\nSELECT user_id\n     , start\n     , DATEDIFF(@dt,start)+1 cons\n  FROM\n     (\n       SELECT a.user_id\n            , a.meeting_date Start\n            , MIN(c.meeting_date) End\n        , DATEDIFF(MIN(c.meeting_date),a.meeting_date)  + 1 diff\n         FROM (SELECT DISTINCT mu.user_id,DATE(m.meeting_time) meeting_date FROM meetings_users mu JOIN meetings m ON m.meeting_id = mu.meeting_id) a\n         LEFT\n         JOIN (SELECT DISTINCT mu.user_id,DATE(m.meeting_time) meeting_date FROM meetings_users mu JOIN meetings m ON m.meeting_id = mu.meeting_id) b\n       ON b.user_id = a.user_id\n          AND a.meeting_date = b.meeting_date + INTERVAL 1 DAY\n         LEFT\n         JOIN (SELECT DISTINCT mu.user_id,DATE(m.meeting_time) meeting_date FROM meetings_users mu JOIN meetings m ON m.meeting_id = mu.meeting_id) c\n       ON c.user_id = a.user_id\n          AND a.meeting_date <= c.meeting_date\n         LEFT\n         JOIN (SELECT DISTINCT mu.user_id,DATE(m.meeting_time) meeting_date FROM meetings_users mu JOIN meetings m ON m.meeting_id = mu.meeting_id) d\n           ON d.user_id = a.user_id\n          AND c.meeting_date = d.meeting_date - INTERVAL 1 DAY\n        WHERE b.meeting_date IS NULL\n      AND c.meeting_date IS NOT NULL\n          AND d.meeting_date IS NULL\n        GROUP\n       BY a.user_id\n        , a.meeting_date\n     ) x\n WHERE @dt BETWEEN start AND end;\n +---------+------------+------+\n | user_id | start      | cons |\n +---------+------------+------+\n |       1 | 2013-01-14 |    2 |\n |       3 | 2013-01-15 |    1 |\n +---------+------------+------+ \n","549":"select version\nfrom versions_table\nwhere to_date('<myInputDate>', 'dd.mm.yy') between to_date('from', 'mm.dd.yy') and to_date('to', 'mm.dd.yy');\n","550":"select musicianID\nfrom musicians m\nleft join gigs g on g.musicianId = m.musicianID\nwhere g.musicianId is null\n","551":"SELECT [ID]\n     , CASE WHEN MAX(CASE WHEN [Date] IS NULL THEN 1 ELSE 0 END) = 0 THEN MAX([Date]) END\nFROM YourTable\nGROUP BY [ID]\n","552":"select purchases.customer_name, purchases.product_name, COUNT(purchases.product_name) from purchases where customer_name \"Brian\" and product_name like 'Al% GROUP BY purchases.product_name, purchases.customer_name;\n","553":"UPDATE FROM EmployeeAS e\n LEFT JOIN Department as dept\n ON e.? = dept.?\n   AND e.Name = 'Good Employee' \n SET e.Department = dept.AID\n","554":"select NVL(MAX(A_COUNT),0) from MYTABLE where VEH_YEAR = '2003';\n","555":"`foo bar` - is a valid MySQL identifier\n\nfoo bar - is not, since foo is the identifier, and bar is ambiguous\n","556":"update table1\nset\n    value1 = (select value3 from table2 where id=7)\n,   value2 = (select value4 from table2 where id=7)\nwhere id=1\n","557":"SELECT \n      k.`id`,\n      m.`MACHINE`,\n      kd.`key` \nFROM \n      KPIs as k,\n      MACHINE as m,\n      KPIDATA as kd\nWHERE \n      k.`id` = SUBSTR(kd.`key`,LOCATE('.',kd.`key`)+1,3)\nAND\n      m.`MACHINE` = SUBSTR(kd.`key`,LOCATE('.i.',kd.`key`)+3,3)\n","558":"declare @month varchar(2) = '10',\n   @year varchar(4) = '2015',\n   @fullWeekCount int;\n\ndeclare @firstOfTheMonth datetime = @year + '-' + @month + '-1';\ndeclare @daysInMonth int = datediff(day, @firstOfTheMonth, dateadd(month, 1, @firstOfTheMonth))\nselect @fullWeekCount = (@daysInMonth \/ 6)\n\ndeclare @i int = 1,\n    @startDate datetime = @firstOfTheMonth,\n    @endDate datetime;\n\ndeclare @dates table (StartDay datetime, EndDay datetime);\n\nwhile (@i <= @fullWeekCount)\nbegin\n\n    if (@i = @fullWeekCount)\n        set @endDate = @year + '-' + @month + '-' + cast(@daysInMonth as varchar(2));\n    else\n        set @endDate = dateadd(day, 6, @startDate)\n\n    insert into @dates (StartDay, EndDay)\n    values (@startDate, @endDate)\n\n    set @startDate = dateadd(day, 1, @endDate)\n    set @i = @i + 1;\n\nend\n\nselect * from @dates d\n","559":"new_val := REPLACE( REPLACE( string_val, ':F:', CHR(10)||'F:' )\n                  , ':L:', CHR(10)||'L:' );\n","560":"UPDATE your_table\n   SET comment_author_url = ''\n WHERE comment_author_url = 'http:\/\/google.com'\n","561":"list_replace.setOnItemClickListener(new OnItemClickListener() {\n@Override\npublic void onItemClick(AdapterView<?> Parent,View v, int Position, long id) {\n\n        ContentValues cvs = new ContentValues();\n\n       cvs.put(COLUMN_NAME_READING_MODE, ReadingMode);\n       cvs.put(COLUMN_NAME_PASTDATETIME, StartDate);\n       cvs.put(\"EndDateTime\", CurrentDateTime);\n       cvs.put(COLUMN_NAME_READINGVALUE,Reading);\n       SQLiteDatabase db = context.openOrCreateDatabase(DATABASE_NAME,\n            Context.MODE_PRIVATE, null);   \/\/ add this line\n       db.update(TABLE_NAME, cvs, \"_Id =\" + id, null);\n\n       db.close();\n\n    }\n});\n","562":"UPDATE Lending.ApplicationFee\nSET FeeTypeId = \n(\n    CASE WHEN t.NewValue  IS NOT NULL THEN \n        (SELECT LookupID FROM tblLookup WHERE LookupType = 'FEE_CODE' AND LookupDesc = t.NewValue)\n    ELSE \n        (SELECT LookupID FROM tblLookup WHERE LookupType = 'FEE_CODE' AND LookupCode = 'OTHER')\n    END\n)\nFROM TmpFeesToRules t \nINNER JOIN tblLookup l ON t.NewValue = l.LookupDesc\n","563":"WITH prep AS (\n  SELECT Product + ' Unit' TYPE, Unit Value\n  FROM   utilities\n  UNION ALL\n  SELECT Product + ' BaseUnit' TYPE, BaseUnit Value\n  FROM   utilities\n)\nSELECT [Gas Unit], [Gas BaseUnit]\n     , [Oil Unit], [Oil BaseUnit]\n     , [Water Unit], [Water BaseUnit]\nFROM   (SELECT TYPE, Value\n        FROM   prep\n       ) a\n       PIVOT\n       (MAX(Value)\n        FOR TYPE IN ([Gas Unit], [Gas BaseUnit]\n                   , [Oil Unit], [Oil BaseUnit]\n                   , [Water Unit], [Water BaseUnit])\n       ) pvt\n","564":"WHERE (trunc(sysdate) - trunc(\\\"DATE\\\"))<=365;\n","565":"SQL> ed\nWrote file afiedt.buf\n\n  1  declare\n  2    cursor cursor_table is\n  3     select t.* from kid k, table(k.toys) t where k.name = 'Bob';\n  4  begin\n  5     for i in cursor_table loop\n  6        dbms_output.put_line(i.column_value);\n  7     end loop;\n  8* end;\nSQL> \/\ntruck\nball\ndoll\n\nPL\/SQL procedure successfully completed.\n","566":"SELECT KB.*, VN.VDescription\nFROM Knowledge_Base KB\n\nINNER JOIN \n   (\n   select V.[Name] as VDescription, K.Description as KDescription\n   FROM vendor, knowledge_base \n   where knowledge_base.description like '%' + vendor.name + '%'\n   ) VN\nON KB.Description = VN.KDescription\n","567":"select t.movieID, sum(t.qty) as totalQuantity from transaction t\ngroup by t.movieId\norder by sum(t.qty) desc\nlimit 10\n","568":"consumer = get_object_or_404(Consumer, pk=pk)\noption = get_object_or_404(Option, pk=option_pk)\nconsumer.options.add(option)\n","569":"EXECUTE('SELECT * \n         FROM   Region R \n         WHERE  R.RegionID IN (' + @regions + ')')\n","570":";WITH x AS \n(\n    SELECT id,bank_code,bank_name,interest_rate,\n      rn = ROW_NUMBER() OVER (PARTITION BY bank_code ORDER BY interest_rate DESC)\n    FROM dbo.[SAMPLE]\n)\nSELECT id,bank_code,bank_name,interest_rate\nFROM x WHERE rn = 1\nORDER BY interest_rate DESC;\n","571":"SELECT \n    p.person_id,\n    p.first_nm,\n    p.last_nm, \n    pu.purchase_dt,\n    pr.sku, \n    pr.description,\n    COALESCE(ha.address_type_id, sa.address_type_id) AS address_type_id\n    CASE WHEN ha.address_type_id IS NOT NULL THEN ha.city_cd ELSE sa.city_cd END AS city_cd, \n    CASE WHEN ha.address_type_id IS NOT NULL THEN ha.state_cd ELSE sa.state_cd END AS state_cd, \n    CASE WHEN ha.address_type_id IS NOT NULL THEN ha.postal_cd ELSE sa.postal_cd END AS postal_cd\nFROM \n    person p \n    LEFT JOIN address ha ON p.person_id = ha.person_id AND ha.address_type_id = 1\n    LEFT JOIN address sa ON p.person_id = sa.person_id AND sa.address_type_id = 2\n    INNER JOIN purchase pu ON pu.person_id = p.person_id\n    INNER JOIN product pr ON pr.product_id = pu.product_id\n","572":"SELECT p.case_number\n     , p.full_address\n     , s.case_owner_name 'case owner'\n     , c.client_name client\n     , r.compiled_date\n     , r.recommendation\n  FROM case_process p\n  JOIN staff s\n    ON s.case_owner_number = p.case_owner_number\n  JOIN client c\n    ON c.client_number = p.client_number\n  JOIN reporting r\n    ON r.case_number = p.case_number\n  JOIN (SELECT case_number,MAX(compiled_date) max_compiled_date FROM reporting GROUP BY case_number) x\n    ON x.case_number = r.case_number\n   AND x.max_compiled_date = r.compiled_date;\n\n +-------------+---------------+------------+---------+---------------+----------------+\n | case_number | full_address  | case owner | client  | compiled_date | recommendation |\n +-------------+---------------+------------+---------+---------------+----------------+\n |        1000 | 1 high street | Bob        | London  | 2012-12-14    | let            |\n |        1001 | 2 high street | Ken        | Compton | 2013-12-13    | sell           |\n |        1002 | 3 high street | Ken        | Leeds   | 2012-12-14    | sell           |\n +-------------+---------------+------------+---------+---------------+----------------+\n 3 rows in set (0.00 sec)\n\n fiddle of same... http:\/\/sqlfiddle.com\/#!2\/fff224\/7\n","573":"db.stack.aggregate([ {$project:{\"treatments._id\":1, \"treatments.price\":1}}, \n{$unwind:\"$treatments\"},{$match:{\"treatments._id\":2}},\n{$sort:{\"treatments.price\":-1}}, {$limit:1} ]); \n","574":"SELECT id, sumcnt, cnt2\n    FROM(\n        SELECT id, count(*) as cnt2, sum(cnt) as sumcnt\n        FROM (\n            SELECT id, kmstand, vacationame, count(*) as cnt\n            FROM `db_1`.`table_new` \n            WHERE (vacationame='vacation1'\n                OR vacationame='vacation2'\n                OR vacationame='vacation3'\n                OR vacationame='vacation4')\n            GROUP BY id, kmstand, vacationame)T\n        GROUP BY id)T\n    WHERE (sumcnt\/cnt2 = 1)\n","575":"DELETE FROM MyTable \n    WHERE A NOT IN \n        (SELECT MIN(A) \n         FROM MyTable GROUP BY B, C, D\n        );\n","576":"SELECT\n    i.item_id, i.item_name, i.idem_desc,\n    p.quantity, p.price\nFROM items i\nLEFT JOIN item_properties p ON i.item_id = p.fk_item_id\nWHERE i.item_id = 191\n","577":"select count(distinct lot_id,data_file_id) \n  from data_cst \n where target_name_id=208082 \n   and wafer_id=425845;\n","578":"SELECT data.sPort\nFROM \n  ((SELECT (s.server_port + 1) sPort\n  FROM pro_servers s\n  LEFT JOIN pro_servers sp1 ON sp1.server_port = s.server_port + 1\n  WHERE (sp1.server_port IS NULL)\n  ORDER BY sPort)\n\n  UNION ALL\n\n  (SELECT s.server_port sPost\n  FROM pro_servers s\n   GROUP BY s.server_port\n   HAVING COUNT(s.server_port) = SUM(s.server_deleted)\n  ORDER BY sPort)) AS data\nORDER BY data.sPort\nLIMIT 1\n","579":"EXEC sp_updatestats\n","580":"SELECT T2C1, T2C2,\nCASE WHEN T2C2 = (SELECT T1C2 FROM T1 WHERE (T1C1 = 'A') THEN '1' ELSE '0' END AS SELECTED\nFROM T2\n","581":"select id\nfrom person p \nwhere exists (\n    select 1\n    from revenue r \n    where p.id = r.personid\n        and case when r.year1 > 0 then 1 else 0 end +\n            case when r.year2 > 0 then 1 else 0 end +\n            case when r.year3 > 0 then 1 else 0 end +\n            case when r.year4 > 0 then 1 else 0 end +\n            case when r.year5 > 0 then 1 else 0 end >= 2\n)\n","582":"SELECT  team, SUM(DECODE(IsNew, 'N', 1, 0)), SUM(DECODE(IsNew, 'Y', 1, 0))\nFROM    mytable\nGROUP BY\n        team\n","583":"INSERT INTO categories (coname)\n    SELECT DISTINCT coName\n    FROM counties \n","584":"SELECT * FROM Your_Table\nWHERE app_receipt_date > SYSDATE - (6 * 7);\n","585":"Select I.Fee\nFrom Item I\nWHERE  DATEDIFF(day, GETDATE(), I.DateCreated) < 365\n","586":"column1 IN (status1, status2, status3, status4, status5) AND \ncolumn2 IN (status1, status2, status3, status4, status5) AND \ncolumn3 IN (status1, status2, status3, status4, status5) AND\ncolumn4 IN (status1, status2, status3, status4, status5) AND\ncolumn5 IN (status1, status2, status3, status4, status5) AND\ncolumn6 IN (status1, status2, status3, status4, status5) \n","587":"WITH Tree\nAS (\nSELECT\n    id,\n    parent,\n    0 AS Level,\n    id AS Root,\n    hasRights AS HasRights,\n    CAST(id AS VARCHAR(MAX)) AS Sort,\n    user_id\nFROM SourceTable\nWHERE parent IS NULL\n\nUNION ALL\n\nSELECT \n    st.id,\n    st.parent,\n    Level + st.hasRights AS Level,\n    st.parent AS Root,\n    st.hasRights AS HasRights,\n    uh.sort + CASE st.hasRights WHEN 0 THEN '' ELSE '\/' + CAST(st.id AS VARCHAR(20)) END AS Sort,\n    st.user_id\nFROM SourceTable AS st\n    JOIN Tree uh ON uh.id = st.parent    \n)\n\nSELECT * FROM Tree AS t\n    JOIN UserTable AS ut ON  ut.id = t.user_id AND ut.user_id = '141F-4BC6-8934'\nORDER BY Sort\n","588":"select START_TIME, STOP_TIME,\n       max(stop_time) over (order by start_time) as MaxCumStopTime\nfrom t\n","589":"SELECT\n      SUM(columnA1)\n    , SUM(columnA2)\n    , (\n            SELECT\n                  SUM(columnB1)\n            FROM tableB\n            WHERE columnB3 = X\n                  AND columnB4 = Y\n                  AND columnB5 = Z\n      ) as sum_columnB1\nFROM tableA\nWHERE columnA3 = X\n      AND columnA4 = Y\n      AND columnA5 = Z\n;\n","590":" WITH CTE AS (\n      SELECT u.ContactName\n          ,cu.[User ID]\n          ,c.Name\n          ,c.ID\n          ,cu.[Foreign Table]\n          ,count(*) OVER (PARTITION BY c.ID) AS user_in_this_country\n      FROM   dbo.Country AS c\n      INNER JOIN   dbo.CountryUser AS cu ON c.ID = cu.[Foreign ID]\n      INNER JOIN   dbo.UserColder  AS  u ON cu.[User ID] = u.ID\n      WHERE EXISTS (\n          SELECT *\n          FROM   CountryUser AS cu2\n          WHERE  cu2.[Foreign ID] = cu.[Foreign ID]\n          AND    cu2.[User ID] <> cu.[User ID]\n          AND    cu.[Foreign Table] = 'Country')\n )\n SELECT *\n FROM CTE\n WHERE user_in_this_country > 1\n","591":"UPDATE table1 \n   SET table1.Price = table2.price \n   FROM table1  INNER JOIN  table2 ON table1.id = table2.id\n","592":"SELECT\n  a.eID,\n  a.eValue,\n  t.pID,\n  t.pName,\n  t.rID,\n  t.rValue\nFROM tblAlert a\n  LEFT JOIN (\n    SELECT\n      p.pID,\n      p.pName,\n      p.eID,\n      r.rID,\n      r.rValue\n    FROM tblPatient p\n      INNER JOIN (\n        SELECT pID, MAX(rID) AS rID\n        FROM tblPatientRecords\n        GROUP BY pID\n      ) pr ON p.pID = pr.pID\n      INNER JOIN tblRecords r ON pr.rID = r.rID\n  ) t ON a.eID = t.eID\n","593":"SELECT table_name view_name,\n       column_name,\n       data_type\n  FROM user_tab_columns\n WHERE table_name = <<name of view>>\n ORDER BY column_id\n","594":"UPDATE attempts\nRIGHT JOIN\n(\n    SELECT id FROM attempts a1\n    WHERE NOT EXISTS\n    (\n        SELECT 0 FROM attempts a2\n        WHERE a2.mapID = a1.mapID AND \n            (a2.score > a1.score OR (a2.score = a1.score AND a2.date < a1.date))\n    )\n) tmp ON tmp.id = attempts.id\nSET attempts.isHighestScore = 1;\n","595":"\nDatabase mydb = new EnterpriseLibrary.Data.Sql.SqlDatabase(\"connection string here\");\n","596":";with cte (rn, id, inst_id, person_name, email) as (\n    select row_number() over (partition by inst_id order by id) rn, * \n    from person\n    )\n\nupdate f\nset \n  person1 = cte1.person_name, \n  email1  = cte1.email, \n  person2 = cte2.person_name, \n  email2  = cte2.email\nfrom firm f\nleft join cte cte1 on f.inst_id = cte1.inst_id and cte1.rn = 1\nleft join cte cte2 on f.inst_id = cte2.inst_id and cte2.rn = 2\n","597":"  Create Trigger trig_StopRecipFriendships\n  for Insert, Update On Friendships\n  As\n    If Exists (Select * From Friendships F1\n                 Join Friendships F2  \n                   On F1.UserA = F2.UserB\n                      And F1.UserB = F2.UserA)\n     Begin\n         Rollback Transaction\n         Raiserror ('These Users are already friends', 16,1)\n     End\n","598":"DELETE P1\nFROM @Prices P1 join (\n  SELECT DISTINCT ProductId\n  FROM @Prices \n  WHERE IsSpecialPrice = 1\n) P2 on P1.ProductId = P2.ProductId\nWHERE P1.IsSpecialPrice = 0\n","599":" select dept, min(id) keep (dense_rank last order by days)\nfrom (  SELECT  id ,\n            (sum((TO_DATE-FROM_DATE)+1) ) days ,\n            dept \n    FROM emp_leave \n    WHERE to_date between ADD_MONTHS(sysdate,-3) \n    AND sysdate group by id,dept) \ngroup by dept\n;\n","600":"-- do insert\n\nSELECT SCOPE_IDENTITY();\n","601":"SELECT 'Amount' AS MaxAmount, [Group1], [Group2], [Group3]\n  FROM\n(SELECT descrip, Amount \n    FROM Table) AS SourceTable\nPIVOT\n(\nMax(Amount)\nFOR descrip IN ([Group1], [Group2], [Group3])\n) AS PivotTable;\n","602":"DECLARE @SQL varchar(max)\nSET @SQL = 'select * from tableA INNER JOIN tableB on tableA.'+@Input1+' = table B.'\n@input2\n\nEXEC (@SQL)\n","603":"SELECT * FROM\n (\n  SELECT (trunc(SYSDATE)-2)                      start_dt -- May 11 --\n       , (trunc(SYSDATE)-2)-LEVEL                bus_days -- All bus days before May 11 --\n       , to_char((trunc(SYSDATE)-2)-LEVEL, 'DY') wk_day\n   FROM DUAL\n  CONNECT BY LEVEL <= (trunc(SYSDATE)-2)-((trunc(SYSDATE)-2) - 7) -- May 11-7 days ago=May 4\n )\nWHERE wk_day NOT IN ('SAT', 'SUN')\nORDER BY bus_days\n\/\n\nSTART_DT    BUS_DAYS    WK_DAY\n--------------------------------\n5\/11\/2013    5\/6\/2013    MON\n5\/11\/2013    5\/7\/2013    TUE\n5\/11\/2013    5\/8\/2013    WED\n5\/11\/2013    5\/9\/2013    THU\n5\/11\/2013    5\/10\/2013   FRI\n","604":"update table1\nset flag =1\nwhere rowid in ( select t1.rowid\n                 FROM table1 t1 \n                      INNER JOIN table2 t2 ON t1.emp_id = t2.emp_id \n                 INNER JOIN table3 t3 ON t2.company = t3.company\n                 WHERE t1.emp_id = '5632'\n                       AND l2.company = '83CP'\n                       AND t1.code = 'LIEU'              \n               )\n","605":"CREATE TEMP TABLE tmp AS SELECT * FROM tbl LIMIT 0 -- copy layout, but no data\n\nCOPY tmp FROM '\/absolute\/path\/to\/file' FORMAT csv;\n\nINSERT INTO tbl\nSELECT tmp.*\nFROM   tmp\nLEFT   JOIN tbl USING (tbl_id)\nWHERE  tbl.tbl_id IS NULL;\n\nDROP TABLE tmp; -- else dropped at end of session automatically\n","606":"db.execSQL(\"DROP TABLE IF EXISTS TABLENAME\");\n","607":"select docid,\n       (case when sum(case when rn_ds <> rn_sd then 1 else 0 end) = 0 then 'Increasing'\n             else 'Decreasing'\n        end) as SequenceType\nfrom (select d.*,\n             row_number() over (partition by docId order by date, state) as rn_ds,\n             row_number() over (partition by docId order by state, date) as rn_sd\n      from d\n     ) d\ngroup by docid;\n","608":"SELECT\n  s.*\nFROM STUDENTS s\nINNER JOIN StudentMarks m ON s.STUDENTID = m.STUDENTID ;\n\nSELECT\n  m.*\nFROM STUDENTS s\nINNER JOIN StudentMarks m ON s.STUDENTID = m.STUDENTID ;\n","609":"select top 1 first.*, second.username, third.*\nfrom first \ninner join second on first.id = second.master_id\ninner join third on first.id = third.master_id\norder by\nthird.date desc\n","610":"select eventTime\/5,count(*)\nfrom   evalHubSupply\ngroup by eventTime\/5\n","611":"CREATE OR REPLACE TRIGGER XXX\n    BEFORE INSERT --<< You need a BEFORE trigger for this to work.\n    ON A\n    FOR EACH ROW\nBEGIN\n    :new.val := 'LOL';\nEND;\n","612":"declare @tab table(branch varchar(3), day int,  amount float) ;\ninsert into @tab values\n('001',4,300.00),\n('001',10,200.12),\n('001',30,343.22),\n('002',12,423.00),\n('005',2,453.21),\n('005',12,111.21),\n('005',27,321.99);\n\nwith month_days as\n(select t.number,t1.branch from (select number from master..spt_values where type='P' and number between 1 and 30) t cross join (select distinct branch from @tab)t1) \nselect md.branch,number as day,isnull(amount,0) amount from @tab t right join month_days md on  t.day=md.number and t.branch=md.branch;\n","613":"Select s.Branch, s.Date, s.containers,\n       lag(s.Date) over (partition by branch order by date) as prev_Date,\n       lag(s.containers) over (partition by branch order by date) as prev_Containers\nfrom shipping s;\n","614":"SELECT CAST('the quick brown fox jumped over the lazy dog' AS VARCHAR(45))\n","615":"echo \"update contact set email_address='foo@bar.com';\" | \/path\/to\/isql --your-favorite-switches\n","616":"where UserChiamante.UserId not in (select UtenteId from ChiamanteInterno)\n","617":"select ID, First, Last, Date, Time\nfrom (select t.*,\n             row_number() over (partition by id order by date, time) as seqnum\n      from test t\n     ) t\nwhere seqnum = 1;\n","618":"CREATE PROC SearchAllTables\n(\n    @SearchStr nvarchar(100)\n)\nAS\nBEGIN\n\n    CREATE TABLE #Results (ColumnName nvarchar(370), ColumnValue nvarchar(3630))\n\n    SET NOCOUNT ON\n\n    DECLARE @TableName nvarchar(256), @ColumnName nvarchar(128), @SearchStr2 nvarchar(110)\n    SET  @TableName = ''\n    SET @SearchStr2 = QUOTENAME('%' + @SearchStr + '%','''')\n\n    WHILE @TableName IS NOT NULL\n\n    BEGIN\n        SET @ColumnName = ''\n        SET @TableName = \n        (\n            SELECT MIN(QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME))\n            FROM     INFORMATION_SCHEMA.TABLES\n            WHERE         TABLE_TYPE = 'BASE TABLE'\n                AND    QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) > @TableName\n                AND    OBJECTPROPERTY(\n                        OBJECT_ID(\n                            QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME)\n                             ), 'IsMSShipped'\n                               ) = 0\n        )\n\n        WHILE (@TableName IS NOT NULL) AND (@ColumnName IS NOT NULL)\n\n        BEGIN\n            SET @ColumnName =\n            (\n                SELECT MIN(QUOTENAME(COLUMN_NAME))\n                FROM     INFORMATION_SCHEMA.COLUMNS\n                WHERE         TABLE_SCHEMA    = PARSENAME(@TableName, 2)\n                    AND    TABLE_NAME    = PARSENAME(@TableName, 1)\n                    AND    DATA_TYPE IN ('char', 'varchar', 'nchar', 'nvarchar', 'int', 'decimal')\n                    AND    QUOTENAME(COLUMN_NAME) > @ColumnName\n            )\n\n            IF @ColumnName IS NOT NULL\n\n            BEGIN\n                INSERT INTO #Results\n                EXEC\n                (\n                    'SELECT ''' + @TableName + '.' + @ColumnName + ''', LEFT(' + @ColumnName + ', 3630) \n                    FROM ' + @TableName + ' (NOLOCK) ' +\n                    ' WHERE ' + @ColumnName + ' LIKE ' + @SearchStr2\n                )\n            END\n        END    \n    END\n\n    SELECT ColumnName, ColumnValue FROM #Results\nEND\n","619":"SELECT   REPLACE(SUBSTRING(CreateDate,3,8),'\/','') as registerdate, \nFROM TatEstelam.dbo.tblInquiryRealForeigners RL \nLEFT JOIN TatEstelam.dbo.CustomerInfo  CINFO\n      ON RL.IdentificationDocumentNumber = CINFO.NationalID\nWHERE-- NationalID <> '0001'\nIdentificationDocumentNumber <> ''\nAND REPLACE(SUBSTRING(CreateDate,3,8),'\/','')  BETWEEN '910404' AND '950505'\n","620":"SELECT   side1, side2, AVG(weight) \nFROM     (SELECT LEAST(to, from) AS side1, GREATEST(to, from) AS side2, weight\n          FROM   my_table)\nGROUP BY side1, side2\n","621":"SELECT TOP 1 ID_AdvancedRatePlan\nFROM ARDebitDetails\nWHERE ID_Hearing = 135878\nAND ID_AdvancedRatePlan > 0\nORDER BY ID_ARDebitDetail DESC\n","622":"CREATE NONCLUSTERED INDEX ix_name ON Members(RelatedMemberId) INCLUDE (MemberId)\n","623":"SELECT w.resource, watermark value \nFROM \n(\n  SELECT \n    PARSENAME(ResourceKey, 1) AS resource, \n    Value as watermark\n  FROM \n    MyTable\n  WHERE\n    Value like '%.watermark'\n ) w \n JOIN\n (\n  SELECT \n    PARSENAME(ResourceKey, 1) AS resource, \n    Value as txt\n  FROM \n    MyTable\n  WHERE\n    Value like '%.text'\n ) t\n on t.resource = w.resource \n WHERE \n   watermark = txt\n","624":"select l.*\nfrom logs l\nwhere l.result = 'success-changed' and\n      l.timestamp = (select max(l2.timestamp)\n                     from logs l2\n                     where l2.result = 'success-changed' and\n                           date(l2.timestamp) = date(l.timestamp)\n                    );\n","625":"vw                \/\/View\nudf              \/\/UserDefineFunction\n","626":" 1.1) start the **hiveserver** before running the query\n 1.2) you have to run two queries\n      1.2.1) USE <database_name>\n      1.2.2) SHOW TABLES LIKE 'table_name'\n      1.2.3) Then you check your result using Result set.\n","627":"string[] myNewColumns = inputColumn.split(\";\");\n","628":"WITH toupdate as (\n      SELECT pr.*,\n             ROW_NUMBER() OVER (PARTITION BY orderpartyrole \n                                ORDER BY CASE WHEN Remark > '' \n                                              THEN 0\n                                              ELSE 1 \n                                         END, \n                                         Bold_id DESC) as seqnum\n      FROM pricerequest pr\n     )\nUPDATE toupdate\n    SET orderpartyrole = -1\n    WHERE seqnum > 1;\n","629":"SELECT user_password.UserName, user_password.Password, COUNT(*)\nFROM user_password\nJOIN (SELECT UserName\n      FROM user_password\n      GROUP BY UserName\n      HAVING COUNT(DISTINCT Password) > 1) multiple_passwords\n  ON multiple_passwords.UserName = user_password.UserName\nGROUP BY user_password.UserName, user_password.Password\nORDER BY user_password.UserName\n","630":"SELECT\n    dept_id,\n    dept_name\nFROM\n(\n    SELECT\n        d.dept_id,\n        d.dept_name,\n        0   AS entity_type_ordinal\n    FROM\n        department   d\n\n    UNION ALL\n\n    SELECT\n        d.dept_id,\n        e.employee_name,\n        1    AS entity_type_ordinal\n    FROM\n        department   d\n    INNER JOIN\n        employee     e\n            ON  e.dept_id = d.dept_id\n)\n   dept_and_emp\nORDER BY\n   dept_id,\n   entity_type_ordinal,\n   dept_name\n","631":"SELECT x.value from form_data x, form_data y\nWHERE x.form_id=1 and x.field_id=1 and y.form_id=and y.field_id=1\nGROUP BY x.value\nHAVING SUM(SIGN(1-SIGN(y.value-x.value))) = (COUNT(*)+1)\/2;\n","632":"WITH Temp AS (\n  SELECT\n      emp.EMpID   \n     ,emp.DepID\n     ,COUNT(OrderId) nb_order\n     ,ROW_NUMBER() OVER(PARTITION BY emp.DepID ORDER BY COUNT(OrderId) DESC) Ordre\n  FROM\n     Order ord\n  INNER JOIN\n     Employee emp\n        ON emp.EmpID = ord.EmpID\nGROUP BY  \n   emp.EMpID\n  ,emp.DepID)\n\n\nSELECT *\nFROM Temp\nWHERE Ordre = 1\n","633":"WITH some_data AS(\n    select a.*,\n           trunc( trunc( add_months( \"DATE\", 1 ), 'MM' ) - \"DATE\" ) \n                        As days_to_end_of_month,\n           trunc( add_months( \"DATE\", 1 ), 'MM' ) \n                        As start_of_next_month\n    from amounts a\n), some_other_data AS (\n      SELECT some_data.*,\n             CASE WHEN days_to_end_of_month >= 6 THEN Amount\n                  ELSE ( SELECT some_data.amount * \"Cumulative Weight\" FROM Weights w\n                         WHERE some_data.days_to_end_of_month = DayNum )\n             END as new_Amount\n      FROM some_data\n)\nSELECT Item, \"DATE\", New_Amount as amount\nFROM some_other_data\nUNION ALL\nSELECT Item, start_of_next_month, amount-new_amount\nFROM some_other_data\nWHERE days_to_end_of_month < 6\nORDER BY \"DATE\"\n;\n","634":"DECLARE @Id int\nDECLARE @ForeignKey int\n\nDECLARE C CURSOR FOR SELECT Id FROM TableA\n\nOPEN C\n\nFETCH NEXT FROM C INTO @Id\n\nWHILE @@FETCH_STATUS = 0\nBEGIN\n    INSERT INTO TableB VALUES (value1)\n    SET @ForeignKey = SCOPE_IDENTITY()\n\n    UPDATE TableA\n    SET ForeignKey = @ForeignKey\n    WHERE Id = @Id\n\n    FETCH NEXT FROM C INTO @Id\nEND\n\nCLOSE C\nDEALLOCATE C\n","635":"SELECT \nconnections.id,\nconnections.Source_Name,\nconnections.Source_port,\nsrc.systype SourceType,\nconnections.Destination_Name,\nconnections.Destination_Port,\ntgt.systype DestinationType\nFROM connections \nLEFT JOIN equipment src on connections.system_name_source=src.system_name \nLEFT JOIN equipment tgt on connections.system_name_dest=tgt.system_name \n","636":"SELECT  @a:=@a+1 serial_number, \n        marks \nFROM    student_marks,\n        (SELECT @a:= 0) AS a;\n","637":"CREATE TABLE employee (\n    id NUMBER PRIMARY KEY,\n    -- other details...\n);\n\nCREATE TABLE attendance (\n    employee_id NOT NULL REFERENCES employee(id),\n    attendance_date DATE NOT NULL,\n    PRIMARY_KEY(employee_id, attendance_date)\n);\n","638":"string schemaFilePath = filePath + \"\\\\\" + \"Schema.ini\";\nStreamWriter writer = new StreamWriter(schemaFilePath, false);\nwriter.WriteLine(\"[\" + fileName + \"]\");\nwriter.WriteLine(\"Format=TabDelimited\");\nwriter.Close();\n","639":"UPDATE person SET dollars = GREATEST(0, dollars-20) WHERE id=1\n","640":"select\n    xmlelement(name \"Customer\",\n        xmlelement(name \"Name\", name),\n        orders, payments\n    ) as the_xml\nfrom\n    customers\n    left join (\n        select c_id as id,\n        xmlelement(name \"Orders\",\n            xmlagg(xmlelement(name \"Order\",\n                xmlelement(name \"id\", id),                    \n                xmlelement(name \"date\", date),\n                xmlelement(name \"content\", content)\n                )\n            )\n        ) as orders\n        from orders\n        group by c_id\n    ) o using (id)\n    left join (\n        select c_id as id,\n        xmlelement(name \"Payments\",                          \n            xmlagg(xmlelement(name \"Payment\",\n                xmlelement(name \"id\", id),                        \n                xmlelement(name \"date\", date),\n                xmlelement(name \"amount\", amount)\n                )\n            )\n        ) as payments\n        from payments\n        group by c_id\n    ) p using (id)\n","641":"INSERT INTO table_name (col1, col2, col3)\nSELECT col1, col2, col3\nFROM table_x\nWHERE col1='A'\nAND col2 in ('1G','2F','3Q')\nAND col3 ='B'\n","642":"SELECT book_customer.firstname, book_customer.lastname, \nTO_CHAR(book_order.orderdate,'MM\/DD\/YYYY') AS \"Order Date\" -- Comma removed here\n  FROM book_customer, book_order, order_items, books, publisher\n    WHERE (book_customer.customerid = book_order.customerid) \n      AND (book_order.orderid = order_items.orderid)\n      AND (order_items.bookid = books.bookid)\n      AND (books.pubid = publisher.pubid)\n      AND (publisher.publishername = 'printing with us');\n","643":"SELECT City, COUNT(CustomerID) as CustomersPerCity\nFROM Customers\nGROUP BY City\n","644":"-- The user can make as many comments as they like\nTable_review { \n    User ID \n    Game ID\n    Feedback ID\n}    \n\nTable_feedback {\n    Feedback ID\n    Comments\n    TimeStamp\n}\n\n-- Now users can comment on what other users think \n-- but only to one level of nesting\nTable_feedback_comments {\n    Feedback ID\n    User ID\n    Comment\n    TimeStamp\n}\n\n-- a user can only rate a game once, but they can change their rating over time\n-- For example more content was added and the user likes this \n-- and wants to reflect that in their rating\nTable_rating {\n    Game ID\n    User ID\n    Rating\n}\n\nTable_user { \n    User ID \n    User name\n    User email\n    Comment -- something that describes the user\n}\n\n-- Even if you have only one game you can still store it in the database\nTable_game {\n    Game ID\n    Game Name\n    -- other columns used to represent a game\n}\n","645":"SELECT  o.CustomerID, null emptyColumn, o.ShipFirstName, \n        case when o.ShipCountry = 'United States' then 'US'\n        when o.ShipCountry = 'Canada' then 'CA'\n        end,\n        c.EmailAddress\nFROM Orders o, Customers c\nWHERE o.CustomerID = c.CustomerID\n","646":"SELECT pc.product_code,\n       COUNT(*) as count,\n       sum(o.monthly_base_charge) as \"Monthly Fee\"\nFROM orders o join\n     product_catalog pc\n     on pc.product_catalog_id = o.product_catalog_id\nGROUP BY pc.product_code\nORDER BY count DESC;\n","647":"SELECT Name, Color\nFROM TableA\nWHERE NOT EXISTS (\nSELECT 1 FROM TableB\nWHERE TableA.Name = TableB.Name \nAND TableA.Color = TableB.Color)\n","648":"select count(*) as count from users WHERE ( 3959 * acos( cos( radians( 37.774929 ) ) * cos( radians( lat ) ) * cos( radians( lng ) - radians( -122.419418 ) ) + sin( radians( 37.774929 ) ) * sin( radians( lat ) ) ) ) < 150\n","649":"least(case when price > 0 then price else 999999 end,\n      case when price_double > 0 then price_double else 999999 end,\n      case when price_triple > 0 then price_triple else 999999  end,\n      case when price_quad > 0 then price_quad else 999999 end\n     )\n","650":"var edmxNS = XNamespace.Get(@\"http:\/\/schemas.microsoft.com\/ado\/2007\/06\/edmx\");\nvar schemaNS = XNamespace.Get(@\"http:\/\/schemas.microsoft.com\/ado\/2006\/04\/edm\");\n\nvar xd = XDocument.Load(@\"{path}\\Model.edmx\");\n\nvar fields =\n    from e in xd\n        .Elements(edmxNS + \"Edmx\")\n        .Elements(edmxNS + \"Runtime\")\n        .Elements(edmxNS + \"ConceptualModels\")\n        .Elements(schemaNS + \"Schema\")\n        .Elements(schemaNS + \"EntityType\")\n    from p in e\n        .Elements(schemaNS + \"Property\")\n    select new\n    {\n        Entity = e.Attribute(\"Name\").Value,\n        Member = p.Attribute(\"Name\").Value,\n        Type = p.Attribute(\"Type\").Value,\n        Nullable = bool.Parse(p.Attribute(\"Nullable\").Value),\n    };\n","651":"SELECT DATEDIFF(MILLISECOND, DateFrom, DateTo)\n","652":"SELECT SUM(cred), status, censusDate, ssn \nFROM\n    (SELECT sac.cred, s.status, \n          (SELECT NVL (csl.census_dates, tl.census_dates) \n             FROM  schema.sections cs,  schema.sections_ls csl,  schema.terms tl \n            WHERE cs.course_sections_id = csl.course_sections_id(+)AND csl.pos(+) = 1 AND cs.term = tl.terms_id \n              AND tl.pos = 1 AND cs.course_sections_id = cs2.course_sections_id AND ROWNUM = 1)AS censusDate, \n          (SELECT NVL (p.ssn, 'xxx-xx-xxxx') FROM   schema.person p \n            WHERE p.id = sac.person_id) AS ssn, \n           \/\/schema.person_name(sac.person_id, 'FML') as fml, \n           \/\/schema.person_name(sac.person_id, 'LF') as lf \n     FROM  schema.student_acad_cred sac JOIN  schema.statuses s \n       ON s.student_acad_cred_id = sac.student_acad_cred_id \n     JOIN  schema.terms tl ON sac.term = tl.terms_id \n     JOIN  schema.student_course_sec scs ON sac.student_course_sec = scs.student_course_sec_id \n     JOIN  schema.course_sections cs2 ON scs.course_section = cs2.course_sections_id \n     JOIN  schema.terms t ON tl.terms_id = t.terms_id \n    WHERE sac.person_id = '1111111111' \n      AND (s.status IN ('A', 'N') OR (s.status = 'D' AND final_grade IS NOT NULL)) \n      AND s.pos = '1'AND tl.pos = '1' AND tl.terms_id = 'spring')\nGROUP BY status, censusDate, ssn;\n","653":"from u in context.aspnet_Users \njoin m in context.aspnet_Membership on u.UserId equals m.UserId select new { u.UserName, m.IsApproved};\n","654":"select LocationName, count(*) num_reservations\n  from reservation\n where month(PickUpDateTime) = 2 --This can be parameterized if needed\n group by LocationName\n order by num_reservations desc\n","655":"SELECT  a.proID,\n        GROUP_CONCAT(b.domainID) domainId,\n        GROUP_CONCAT(b.domainName) domainName\nFROM    projects a\n        LEFT JOIN domain b\n            ON a.domainID = b.domainID\nGROUP BY a.proID\n","656":"Select *\nfrom mydb\nWhere IsNumeric(sku) = 0x1\n","657":"Data$bins <- sapply(Data$Name, function(n)\n    paste(as.integer(agrepl(n, Data$Name, max.distance = 2)), collapse=\"\"))\nData$Group <- as.integer(as.factor(Data$bins))\n\n#    State Zipcode             Name        bins Group\n# 1     IL   60693   THISISTHEFIRST 11100000000     4\n# 2     IL   60693     TISISTHEFIRS 11100000000     4\n# 3     OH   45271   THISISTHEFIRST 11100000000     4\n# 4     CA   94085  THISISTHESECOND 00011100000     3\n# 5     CA   94085  THISISTHESECOND 00011100000     3\n# 6     CA   94085 THISISTHESECCOND 00011100000     3\n# 7     SC   29645   THISISTHETHIRD 00000011100     2\n# 8     SC   29645   THISISTHETHIRD 00000011100     2\n# 9     SC   29645   THISISTHETHIRD 00000011100     2\n# 10    SC   29645  THISISTHEFOURTH 00000000011     1\n# 11    SC   29645    ISISTHEFOURTH 00000000011     1\n","658":"UPDATE your_table\nSET Update_Flag = 1            \/\/ this assumes the flag is an integer value\nWHERE (column1 = \"xxx\")        \/\/ if it's a string do SET Update_Flag = \"True\"\nOR (column2 = \"xxx\")\nOR (column3 = \"xxx\")\n","659":"TRANSFORM Sum(tbl_timesheet_hours.[work_order_hours]) AS SumOfwork_order_hours\nSELECT tbl_timesheet_hours.[work_order_no], Sum(tbl_timesheet_hours.[work_order_hours]) AS     [Total Of work_order_hours]\nFROM tbl_timesheet_hours\nGROUP BY tbl_timesheet_hours.[work_order_no]\nORDER BY Format([work_order_date],'ddd')\nPIVOT Format([work_order_date],'ddd') In (\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\");\n","660":"SELECT \n * \nFROM \n  CLASSES \nJOIN \n  SUBJECTS_PER_CLASS \nON \n  CLASSES.ID = SUBJECTS_PER_CLASS.class_id\nJOIN \n  Subjects \nON \n  Subjects.id = SUBJECTS_PER_CLASS.mat_id\n","661":"select field1, field2, value, \n       100.0 * value \/ SUM(value) OVER(PARTITION BY 1) \n                      \/* the SUM gets the total for the whole dataset. If actually \n                         have groups, yous should do PARTITION BY GroupField \n                       *\/\nfrom yourtable\n","662":"AND location_ns = 'Marriott\\\\256 Hotel & Convention Centre'\n","663":"Cursor c = db.query(TABLE_NAME,columns,COLUMN_order + \"=? OR \" + COLUMN_order + \"=?\", new String[]{\"0\", \"1\"}, null, null, COLUMN_ID);\n\n\n\nSimpleCursorAdapter adapter = new SimpleCursorAdapter(this, R.layout.list_item, c, \n               new String[] {COLUMN_ID,COLUMN_NAME,COLUMN_order}, new int[] {R.id.list_item_text_id,R.id.list_item_text_main,R.id.list_item_text_sub}, 0);\n\n    ListView list = (ListView) findViewById(R.id.list_poet_name);\n    list.setAdapter(adapter);\n","664":"SELECT a.PLANT_NO \"PlantNumber\", \n       SUM(CASE WHEN a.REC_STATUS_CD = 'RR' THEN -a.KW_CTR_REDELIVERED_HV \n                ELSE a.KW_CTR_REDELIVERED_HV END) \"KeepWholeResidueMMBtu\", \n       SUM(a.ETH_APPLIED_POP_PCT + a.ISO_APPLIED_POP_PCT  + \n           (CASE WHEN a.PLANT_NO = '002' THEN a.ALTLIQ_APPLIED_POP_PCT ELSE 0 END)\n          )\/100 \"NGLPOPPaymentPercent\"\nFROM GAS_STMT a \nINNER JOIN SETTLE_SUMMARY c\n   ON CASE WHEN SUBSTR(a.TRNX_ID,1,1) = '-' \n           THEN SUBSTR(a.TRNX_ID, 2, LENGTH(a.TRNX_ID)) \n           ELSE CAST(a.TRNX_ID AS VARCHAR2(100)) \n      END = c.TRNX_ID\n  AND a.MTR_NO||a.MTR_SFX = c.MTR_NO||c.MTR_SFX\nLEFT JOIN (SELECT MTR_NO,MTR_SFX,TRNX_ID,REC_STATUS_CD,MAX(ACCT_DT) ACCT_DT\n           FROM GAS_STMT\n           WHERE REC_STATUS_CD = 'RR'\n           GROUP BY MTR_NO, MTR_SFX, TRNX_ID, REC_STATUS_CD\n           HAVING COUNT(TRNX_ID) > 1) b\n   ON a.MTR_NO = b.MTR_NO \n  AND a.TRNX_ID = b.TRNX_ID \n  AND a.REC_STATUS_CD = b.REC_STATUS_CD \n  AND a.ACCT_DT = b.ACCT_DT\nWHERE TO_CHAR(a.PROD_DT, 'YYYY')  >= TO_CHAR(ADD_MONTHS(SYSDATE, -36), 'YYYY') \n  AND a.STATUS_UNIT_TM_CD = 'M' \n  AND b.MTR_NO IS NULL\nGROUP BY a.PLANT_NO\nORDER BY a.PLANT_NO\n","665":"scope :by_type, ->(type){ where(type: type).limit(5) }\n\ndef self.foo\n  Ticket.by_type('a') + Ticket.by_type('b') + Ticket.by_type('c')\nend\n","666":"select top 1 with ties MySubId, Count(MySubId) as MySubIdCount\nfrom MyTable\ngroup by MuSubId\norder by 2 desc\n","667":"SELECT \n    *, count_t1 + count_t2 as count_all\nFROM\n    (SELECT d_id, COUNT(content) as count_t1 FROM TableA GROUP BY d_id) t1\n    LEFT JOIN\n    (SELECT d_id, COUNT(dif_content) as count_t2 FROM TableB GROUP BY d_id) t2\n    ON t1.d_id = t2.d_id;\n","668":"select ..., sum(manhours) - coalesce(Leavetaken, 0) as calc\n","669":"CREATE TABLE [Comment](\n   CommentId int PRIMARY KEY IDENTITY(1,1),\n   UserId int Not NULL,\n   ArticleId int NOT NULL ,\n   FOREIGN KEY(UserId) references [User](UserId),\n   FOREIGN KEY(ArticleId) references [Article](ArticleId) ON DELETE CASCADE\n)\n","670":"select b.Title\nfrom Book b join\n     Author a\n     on b.BookID = a.BookID join\n     Writer w\n     on w.AuthId = a.AuthId join\n     Publisher p\n     on w.PubId = p.PubId\nwhere p.Country like 'Australia'\ngroup by b.Title, b.BookID\nhaving count(*) >= 2;\n","671":"select * from #test\norder by\ncase when test like 'The %' then substring(test, 5, 8000) else test end\n","672":"SELECT * FROM Table1 CROSS JOIN Table2\n","673":"100XX\n1000XX\n101XX \n","674":"SELECT A.PRODUCTCODE, A.STOCKLEVEL, SUM(A.QUANTITY)\nFROM PRODUCT A \nINNER JOIN PRODLINE B ON A.PRODUCTCODE=B.PRODCODE\nGROUP BY A.PRODUCTCODE\n","675":"select \"i.  Category       \" + \"Number\" + char(13)+char(10) +\n\"ii.  -----------------------------------\" + char(13)+char(10) +\n\"iii. High:            \" + cast((select count(1)\n                                 from tabData\n                                 where  advance > 10000) as varchar) + char(13)+char(10) +\n\"iv. Low:            \" + cast((select count(1)\n                               from tabData\n                               where  advance >= 5000  \n                               and advance <= 10000) as varchar) + char(13)+char(10) +\n\"v.  Moderate:    \" + cast((select count(1)\n                            from tabData\n                            where advance < 5000) as varchar) + char(13)+char(10) +\n\"vi. N\/A              \" + cast((select count(1)\n                                from tabData\n                                where  advance is null) as varchar)\n","676":"CREATE PROCEDURE name\n(\n@arg1 as type1,\n@arg2 as type2\n)\n\nAS\nDECLARE @value1 as type1\n\n     SELECT @value1=x from tabley WHERE <something>\n\n    INSERT INTO Table(x,y,z) VALUES(@arg1,@arg2,@value1)\n","677":"select\n(SELECT \"count\"(*) as val1 from tab1) - (SELECT \"count\"(*) as val2 from tab2)\n","678":"Option Compare Database\nOption Explicit\n\nPublic Function Func32(HardwareType As String) As Variant\n    Dim cdb As DAO.Database, qdf As DAO.QueryDef, rst As DAO.Recordset\n    Dim sql As String\n\n    Set cdb = CurrentDb\n    sql = \"\"\n    sql = sql & \"PARAMETERS prmHardwareType TEXT(255);\"\n    sql = sql & \"SELECT * FROM Table1 WHERE Hardware_Type=[prmHardwareType]\"\n    Set qdf = cdb.CreateQueryDef(\"\", sql)\n\n    ' assign the PK argument as the query parameter and open it as a Recordset\n    qdf!prmHardwareType = HardwareType\n    Set rst = qdf.OpenRecordset(dbOpenSnapshot)\n\n    ' do your calculations and assign the return value to the function name\n    Func32 = rst!Field1 + rst!Field2 + rst!Field3\n\n    rst.Close\n    Set rst = Nothing\n    Set qdf = Nothing\n    Set cdb = Nothing\nEnd Function\n","679":"Private Function qdefSQL() As Boolean\n    Dim db As Database\n    Dim qdef As QueryDef\n    Dim sSQL As String\n    Dim iqdef As Integer\n\n    Set db = CurrentDb\n    For iqdef = 0 To db.QueryDefs.count - 1\n        Set qdef = db.QueryDefs(iqdef)\n        sSQL = qdef.SQL\n        If InStr(sSQL, \"target\") > 0 Then\n            Debug.Print qdef.Name\n        End If\n    Next\n\n    qdefSQL = True\nEnd Function\n","680":"SELECT ((col1+col2+col3)\/col4) as value\nFROM ((SELECT col1, col2, col3, col4\n       FROM table1\n      ) UNION ALL\n      (SELECT col1, col2, col3, col4\n       FROM table2\n      )\n     ) t\nHAVING value > 4 and value < 5\n","681":"select * from your_table\nwhere year(Start_Date) = year(curdate())\nand month(Start_Date) = month(curdate())\nand end_date <= curdate() + interval 30 day\n","682":"WITH Cte AS(\n    SELECT name,\n        rn = ROW_NUMBER() OVER(ORDER BY name) + ((ROW_NUMBER() OVER(ORDER BY name) - 1) \/ 5)\n    FROM table1\n    UNION ALL\n    SELECT name,\n        rn = ROW_NUMBER() OVER(ORDER BY name) * 6\n    FROM table2\n)\nSELECT name FROM Cte ORDER BY rn\n","683":"SELECT p1.ID,\n       ( SELECT NAME + ' and ' \n           FROM YourTable  p2\n          WHERE p2.ID = p1.ID\n          ORDER BY NAME\n            FOR XML PATH('') ) AS Name,\n        sum(Amount)\n      FROM YourTable p1\n      GROUP BY ID ;\n","684":"select\n    wpg.ID as id1,\n    min(wr.ID) as id2\nfrom\n    Table1 wpg\n    inner join Table2 wp on wp.WpgId = wpg.ID\n    inner join Table3 wr on wr.WpId = wp.ID\ngroup by\n    wpg.ID\n","685":"select * from all_constraints where table_name = 'REGISTRATION';\n","686":"select  n\nfrom    YourTable\ngroup by\n        n\nhaving  count(*) = 1\n","687":"DECLARE @KeywordList varchar(max) \/\/This can be a SP param\n\nCREATE TABLE #Keywords(varchar(10) keyword NOT NULL); \n\nDECLARE @Keyword varchar(10), @Pos int\n\nSET @KeywordList= LTRIM(RTRIM(@KeywordList))+ ','\nSET @Pos = CHARINDEX(',', @KeywordList, 1)\n\n--Parse varchar and split IDs by comma into temp table\nIF REPLACE(@KeywordList, ',', '') <> ''\nBEGIN\n    WHILE @Pos > 0\n    BEGIN\n        SET @Keyword= LTRIM(RTRIM(LEFT(@KeywordList, @Pos - 1)))\n        IF @Keyword <> ''\n        BEGIN\n            INSERT INTO #Keywords(ID) VALUES (@Keyword) \n        END\n        SET @KeywordList = RIGHT(@KeywordList, LEN(@KeywordList) - @Pos)\n        SET @Pos = CHARINDEX(',', @KeywordList, 1)\n\n    END\nEND \n\n--Return a count of all rows\nSELECT @TotalRows = COUNT(Keyword) FROM #Keywords; \n\n    --Now process data from #Keywords as required\n","688":"select distinct M.mtitel as Attribute\nfrom merkmale as M\nwhere M.MID in (\n    select A.MID \n    from aREl_Adr_Merk as A \n    where A.AdrID in (252674,247354)\n)\n","689":"select person, abs(DATE_PART('epoch', p1 - p2) \nfrom (select person,\n             MAX(case when product = 'football' then purchase_time end) as p1,\n             MAX(case when product = 'basketball' then purchase_time end) as p2\n      from mytable\n      group by person\n     ) p\nwhere p1 is not null and p2 is not null\n","690":"SELECT DISTINCT\n    a.id,\n    b.value AS SIGN_UP,\n    c.value AS FIRST_NAME,\n    d.value AS STREET\nFROM tbl a\nLEFT JOIN tbl b ON a.id = b.id AND b.field_name = 'sign_up'\nLEFT JOIN tbl c ON a.id = c.id AND c.field_name = 'first_name'\nLEFT JOIN tbl d ON a.id = d.id AND d.field_name = 'street'\n","691":"# not tested...\nlibrary(ggplot2)\n# all on one plot\nggplot(df) + geom_point(aes(x=AVG_TEMP,y=TOTAL_LOAD,color=CONGESTION_ZONE))\n#four plots\nggplot(df) + geom_point(aes(x=AVG_TEMP,y=TOTAL_LOAD)) +\n   facet_wrap(~CONGESTION_ZONE)\n\n# coloring beased on day_type\nggplot(df) + geom_point(aes(x=AVG_TEMP,y=TOTAL_LOAD, color=DAY_TYPE_CD))+\n  facet_wrap(~CONGESTION_ZONE)\n","692":"SELECT *\nFROM TABLE\nWHERE ID NOT IN\n(SELECT ID FROM TABLE WHERE KEY = 'LATLNG')\n","693":"DECLARE @Start date = '2013-06-03'\nDECLARE @End date = '2013-06-10'\n\n;WITH Dates AS \n(\n    SELECT @Start AS [Date]\n    UNION ALL\n    SELECT DATEADD(DAY, 1, [Date])\n    FROM Dates\n    WHERE [Date] < @End\n)\n\nSELECT [Date] \nFROM Dates\nOPTION (MAXRECURSION 0)\n","694":"CREATE NONCLUSTERED INDEX ix_p\n    ON tblProductRegistration (RegistrationDate, ProductID)\nGO\nCREATE NONCLUSTERED INDEX ix_d\n    ON tblDealerDistributionDetails (model, DealerCode) INCLUDE (BarCode, BarCode2)\nGO\n\nSELECT DealerCode, COUNT_BIG(*) AS [Activated]\nFROM tblDealerDistributionDetails d\nWHERE model = 'Olvio L12'\n    AND EXISTS(\n        SELECT *\n        FROM tblProductRegistration r\n        WHERE r.RegistrationDate BETWEEN '20160301' AND '20160302'\n            AND r.ProductID IN (d.BarCode, d.BarCode2)\n    )\nGROUP BY DealerCode\n--OPTION(RECOMPILE)\n","695":"COLUMN_NAME  position(1:14)  CHAR \"STRIP_NONNUMERIC(:LAST_NAME)\",\n","696":"var results = from rs in db.ratesSchedule\n              join ud in db.userdetails on \n                  new { rs.sid, rs.tabletype } equals \n                  new { ud.sid, tabletype = \"d\" }\n","697":"SELECT\n  *\nFROM\n  table1\nINNER JOIN\n  table2\n    ON  table1.id    = table2.id\n    AND table1.name <> table2.name\n","698":"SELECT stocks.*\nFROM stocks\nWHERE part_id IN (\n    SELECT part_id\n    FROM\n        parts ON parts.id = stocks.part_id\n        INNER JOIN features ON features.part_id = parts.id\n        INNER JOIN feature_titles ON feature_titles.id = features.feature_title_id \n    WHERE\n            parts.category_id = 20 AND stocks.manufacturer_id = 4\n        AND (\n                feature_titles.title = 'Title One' AND features.value = '0.1'\n            OR  feature_titles.title = 'Title Two' AND features.value = '7 MAX'\n        )\n    GROUP BY parts.id\n    HAVING COUNT(features.id) = 2\n)\n","699":"select Table1.id, Table1.Name, Table1.idObject, Table2.City, Table3.State\nfrom Table1 \njoin Table2 ON Table1.idObject = case \n                 when Table1.Name='abc' then Table2.idLineItem\n                 when Table1.Name='def' then Table2.idOrder\n                 else Table2.idSupplier\n               end\njoin Table3 on Table2.idAdv=Table3.idAdv\ngroup by Table1.id, Table1.idObject;\n","700":"SELECT\ntd = [Status],'',\ntd = [Number],'',\ntd = CONVERT(varchar(25), [Date], 21),'',\ntd = [Error Message]\nFROM [Views].dbo.Errors   \nORDER BY Date\n","701":"substring(articletext, \n          patindex('\/images\/imgs\/', articletext) + length('\/images\/imgs\/'), \n          patindex('\" alt') - (patindex('\/images\/imgs\/', articletext) + length('\/images\/imgs\/')))\n","702":"ALTER TABLE `invoices`.`invoices`\n    CHANGE `DateTime` `DateTime` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n","703":"select  Location\n        ,sum(case when [Month]  = 'January'  then value else 0 end)  as January\n        ,sum(case when [Month]  = 'February' then value else 0 end)  as February\n        ,sum(case when [Month]  = 'March'    then value else 0 end)  as March\n        ,sum(case when [Month] in ( 'January', 'February', 'March')\n                                             then value else 0 end) as Q1\n        ...\n        -- Repeat months...\n        ...\n        ,sum(value) as AllMonthTotal\nfrom    myTempTable\ngroup by Location\n\n-- UNION to get rowwise total\nunion\nselect  'TOTAL'\n        ,sum(case when [Month]  = 'January'  then value else 0 end)  as January\n        ,sum(case when [Month]  = 'February' then value else 0 end)  as February\n        ,sum(case when [Month]  = 'March'    then value else 0 end)  as March\n        ,sum(case when [Month] in ( 'January', 'February', 'March')\n                                             then value else 0 end) as Q1\n        ...\n        -- Repeat months...\n        ...\n        ,sum(value) as AllMonthTotal\nfrom    myTempTable\n","704":"Select ...\nFrom WorkOrder As W\nWhere Exists    (\n                Select 1\n                From WorkOrder As W1\n                    And W1.CustomerId = W.CustomerId    \n                    And DatePart( dw, W1.TimeWindowStart ) <> DatePart( dw, W.TimeWindowStart )\n                )\n","705":"db2 \"create table test ( x int, y clob(1M) )\"\ndb2 \"insert into test (x,y) values (1,cast('The string to find is CEMENTO, how do we do that?')\"\ndb2 \"insert into test (x,y) values (2,cast('The string to find is CEMENT, how do we do that?' as clob))\"\n\ndb2 \"select x, DBMS_LOB.INSTR(y, 'CEMENTO', 1) from test where DBMS_LOB.INSTR(y, 'CEMENTO', 1) > 0\"\n\nX           2          \n----------- -----------\n          1          23\n\n  1 record(s) selected.\n","706":"select array_agg(console_id) as consoles from archive_sessions where tournament_id = 14817\n","707":"WHERE Month(DateOfSession) = \" & me.cboSelectMonth\n","708":"select * from \n(\n  select * from your_table\n  where some_conditions\n  limit 1000\n) \nas some_aliases\norder by rand()\nlimit 4;\n","709":"DECLARE @AssessmentID INT;\n\nCREATE TABLE #AssessmentIDs (AssessmentID INT);\n\nINSERT #AssessmentIDs (AssessmentID)\n\nSELECT AssessmentID FROM Assessments WHERE EpisodeID = @EpisodeID;\n\nWHILE (SELECT COUNT(*) FROM #AssessmentIDs WHERE AssesmnentID = @AssessmentID) > 0\nBEGIN\n    SELECT @AssessmentID = TOP 1 AssessmentID FROM #AssessmentIDs\n\n    EXEC DeleteAssessment @AssessmentID\n\n    DELETE #AssessmentIDs WHERE AssessmentID = @AssessmentID\nEND;\n","710":"update tablename t\n    set gender = (case when gender = 'm' then 'f'\n                       when gender = 'f' then 'm'\n                       else gender\n                  end);\n","711":"DECLARE @tbl VARCHAR(60), @sql VARCHAR(8000)\n\nSET @tbl = 'tblData' -- change for the table                     \n\nSELECT @sql = 'SELECT '\n              + STUFF(\n                         (\n                           SELECT      ', ' + ColumnName + ' as ' + ColumnLabel\n                           FROM       columnOrder\n                           ORDER BY Position\n                           FOR XML PATH('')\n                         )\n                      , 1, 1, ''\n                     )\n              + ' FROM '\n              + @tbl\n\n\n--SELECT @sql\nEXEC (@sql)\n","712":"SELECT title, COUNT(art) AS art_count\nFROM table1\nGROUP BY art \nHAVING art_count >= (select count(*) * X \/ 100 from table1)\n","713":"SELECT id, username\n\nFROM user\n\nLEFT JOIN (\n    SELECT DISTINCT user2_id AS blockee_id\n    FROM blocked_user\n    WHERE user1_id = :current_user_id\n) this_user_blocked\nON user.id = this_user_blocked.blockee_id\n\nLEFT JOIN (\n    SELECT DISTINCT user1_id AS blocker_id\n    FROM blocked_user\n    WHERE user2_id = :current_user_id\n) blocked_this_user\nON user.id = blocked_this_user.blocker_id\n\nWHERE this_user_blocked.blockee_id IS NULL\nAND blocked_this_user.blocker_id IS NULL\n","714":"WITH CategoryTree AS\n        (\n        SELECT  *, 0 AS Generation    \n        FROM    dbo.Category\n        WHERE   CategoryName = 'Animation'\n        UNION ALL\n        SELECT  Cat.*, Generation + 1    \n        FROM    CategoryTree\n        JOIN    dbo.Category AS Cat\n        ON      Cat.Id = CategoryTree.CategoryMaster\n        )\nSELECT  *\nFROM    CategoryTree\n","715":"select e.id,per.id,t.status \nfrom employee e \njoin person per on e.personId=per.id \nleft join training t on e.id=t.employeeId\n    and t.courseId = ?\n","716":"SELECT 'Person.Contact' as \"@name\",\n(SELECT \n    (SELECT * from (SELECT 'FirstName' as [@name], [FirstName] as [*]\n    union all\n    SELECT 'LastName' as [@name], [LastName] as [*]) y\n    for xml path('field'), TYPE)\nfrom Person.Contact for XML path, TYPE)\nfor XML path('entity'), root('querydata')\n","717":"SELECT   m.id muppet_id,\n         m.name,\n         p.id phone_id,\n         p.phone,\n         p.valid\nFROM      muppet m\n         FULL OUTER JOIN\n            phone p\n         ON (M.ID = P.MUPPET_ID)\nWHERE\n         P.VALID = 'Y' or P.MUPPET_ID is null;\n","718":"CREATE PROCEDURE spData4 (@Year smallint)\nAS\nBEGIN\n\n CREATE TABLE #temp1 (RegionName NVARCHAR(50), TotalSitesVisited INT, TotalViolations INT)\n CREATE TABLE #temp2 (RegionName NVARCHAR(50), TotalSiteVisits INT)\n CREATE TABLE #temp3 (RegionName NVARCHAR(50), TotalBadSites INT)\n\n INSERT INTO #temp1 EXEC spData1 @Year\n INSERT INTO #temp2 EXEC spData2 @Year\n INSERT INTO #temp3 EXEC spData3 @Year\n\n SELECT \n  COALESCE(t1.RegionName, t2.RegionName, t3.RegionName) RegionName\n  ,TotalSitesVisited,TotalViolations,TotalSiteVisits,TotalBadSites \n FROM #temp1 t1\n FULL JOIN #temp2 t2 ON t1.RegionName = t2.RegionName \n FULL JOIN #temp3 t3 ON t1.RegionName = t3.RegionName OR t2.RegionName = t3.RegionName\n\nEND \n","719":"1: Remove properties from the model.\n2: Run 'Enable-Migrations' in package manage console.\n3: Next Run 'Add-Migration \"MigrationsName\"'. if any case it is showing 'The project  tesproject failed to build then build project again.\n4: Now run 'Update-Database' \n","720":"select concat('alter table ',  table_name, ' modify column ', column_name, ' VARCHAR(40)') from information_schema.columns  \nwhere table_schema='yourdb' and table_name='table1' \nand column_name NOT IN('col1','col2','col3')\n","721":"List<A> aList = dataTable.AsEnumerable()\n    .GroupBy(row => row.Field<int>(\"A_Id\"))\n    .Select(grp => new A {\n        Id = grp.Key,\n        Name = grp.First().Field<DateTime>(\"A_Date\"),\n        Bs = grp.Select(m => new B { Id = m.Field<int>(\"B_Id\"), Name = m.Field<string>(\"B_Name\") }).ToList(),\n    })\n    .ToList()\n","722":"db.execSQL(\"DELETE FROM SQLITE_SEQUENCE WHERE NAME = '\" + name_of_the_table + \"'\");\n","723":"select \"t\".\"trip_id\",\n       \"c\".\"service_id\",\n       \"start_s\".\"stop_name\" as \"departure_stop\",\n       \"start_st\".\"departure_time\",\n       \"end_s\".\"stop_name\" as \"arrival_stop\",\n       \"end_st\".\"arrival_time\",\n       \"end_st\".\"departure_time\" as \"end_departure\",\n       \"last_st\".\"arrival_time\" as \"last_arrival\",\n       \"last_s\".\"stop_name\" as \"last_stop\"\nfrom \"trips\" as \"t\"\n    inner join \"calendar\" as \"c\" on \"t\".\"service_id\" = \"c\".\"service_id\"\n    inner join \"routes\" as \"r\" on \"t\".\"route_id\" = \"r\".\"route_id\" \n    inner join \"stop_times\" as \"start_st\" on \"t\".\"trip_id\" = \"start_st\".\"trip_id\" \n    inner join \"stops\" as \"start_s\" on \"start_st\".\"stop_id\" = \"start_s\".\"stop_id\" \n    inner join \"stop_times\" as \"end_st\" on \"t\".\"trip_id\" = \"end_st\".\"trip_id\" \n    inner join \"stops\" as \"end_s\" on \"end_st\".\"stop_id\" = \"end_s\".\"stop_id\" \n    inner join \"stop_times\" as \"last_st\" on \"t\".\"trip_id\" = \"last_st\".\"trip_id\" \n    inner join \"stops\" as \"last_s\" on \"last_st\".\"stop_id\" = \"last_s\".\"stop_id\" \nwhere \"start_s\".\"stop_id\" = '245' -- my data's stop id\n    and \"end_s\".\"stop_id\" = '762' -- my data's stop id\n    and \"last_st\".\"stop_sequence\" = (select max(\"stop_sequence\") from \"stop_times\" where \"t\".\"trip_id\" = \"trip_id\")\n    and start_st.departure_time < end_st.arrival_time\norder by arrival_time asc\n","724":"DECLARE @TempTable TABLE\n(\n    id int NOT NULL,\n    PRIMARY KEY\n    (\n        id\n    )\n)\n","725":"SELECT  *\nFROM    pledger\nWHERE   dcno <> 1 OR pledger.etype <> 'sale'\n","726":"SELECT a.*\nFROM tableName a \n     INNER JOIN\n     (\n        SELECT ITEMID , MAX(DATEPHYSICAL) max_date\n        FROM tableName \n        GROUP BY ITEMID \n     ) b ON a.ITEMID  = b.ITEMID AND a.DATEPHYSICAL = b.max_date\n","727":"val results: List[(Int, Int, String)] = \n  SQL(\"SELECT t.id, t.field1, t.field2 from table1 t WHERE t.field1 = {param1}\")\n    .on(\"param1\" -> param1)()\n    .as(int(\"t.id\") ~ int(\"t.field1\") ~ get[Option[String]](\"t.field2\") map(flatten) *)\n    .toList \n","728":"DECLARE @myString NVARCHAR(MAX) = '{local.txt_concept_id} != \"\" & {local.txt_ICD_code} != \"\" & \n{local.txt_diagnosis_uniq_id} != \"\" & {local.txt_ICD_desc} != \"\"&\n{FIND( {local.txt_ICD_code} , \"asp\", 0 )}!=-1&\n{LEN( {local.txt_diagnosis_uniq_id})}';\n\nSELECT T2.X.value('.', 'varchar(50)')\nFROM \n(SELECT CAST(REPLACE(REPLACE((SELECT @myString FOR XML PATH('')), '{', '<X>'), '}', '<\/X>') AS XML).query('.')) AS T1(X)\nCROSS APPLY T1.X.nodes('\/X\/text()') AS T2(X);\n","729":"SELECT *\nFROM table\nORDER BY LENGTH(column) - LENGTH(REPLACE(column, ' ', ''))\n","730":"SELECT name, code \nFROM new n\nWHERE NOT EXISTS(SELECT * FROM current c \n                 WHERE c.name = n.name OR c.code = n.code)\n","731":"IsLocate as (case when locates is not null then 'Y' else 'N' end),\nIsAdjustment as (case when shares is not null then 'Y' else 'N' end),\n","732":"SELECT c.* \n     , COALESCE(t1.Value, t2.Value,t3.Value) AS Value\n     , COALESCE(t1.Date, t2.Date,t3.Date) AS Date\n  FROM Common c\n  LEFT JOIN Table1 t1 ON c.tableid = t1.[id]\n   AND [Table] = 'table1'\n  LEFT JOIN Table2 t2 ON c.tableid = t2.[id]\n   AND [Table] = 'table2'\n  LEFT JOIN Table2 t3 ON c.tableid = t3.[id]\n   AND [Table] = 'table3'\nORDER BY ID;\n","733":"select *\n  from test\nwhere\n  model_number in (\n    select model_number\n      from test\n  group by model_number\n    having count(distinct description) > 1)\n","734":"SELECT\n    thing_type,\n    thing_id,\n    parent_id\nFROM\n    Sample_Table T1\nWHERE\n    thing_type = 'Desired Type' AND\n    thing_id NOT IN (\n            SELECT parent_id\n            FROM Sample_Table T2\n            WHERE T2.thing_type = 'Desired Type'\n    )\n","735":"SQL> with test (DATE_, USERID, DOMAIN, VALUE)\n  2  as (\n  3   select '03\/16\/2016',     1001     ,'ASIA'      ,10 from dual union all\n  4   select '03\/16\/2016',     1001     ,'EUROPE'    ,20 from dual union all\n  5   select '03\/16\/2016',     1002     ,'ASIA'      ,20 from dual union all\n  6   select '03\/17\/2016',     1001     ,'ASIA'      ,20 from dual union all\n  7   select '03\/17\/2016',     1002     ,'EUROPE'    ,10 from dual\n  8  )\n  9  SELECT *\n 10  FROM   (select *\n 11          from test)\n 12  PIVOT ( sum(value) FOR (domain) IN ('ASIA', 'EUROPE'))\n 13  ORDER BY 1, 2;\n\nDATE_          USERID     'ASIA'   'EUROPE'\n---------- ---------- ---------- ----------\n03\/16\/2016       1001         10         20\n03\/16\/2016       1002         20\n03\/17\/2016       1001         20\n03\/17\/2016       1002                    10\n","736":"SELECT q.ColA as \"Next Repricing\", q.ColA as \"Balloon Date\" FROM\n(select acct, name, address,\ncase when pterm||' '||ptermc = '0' then date(digits(matdt7)) \nwhen pterm||' '||ptermc = '1 D' then curdate() \nwhen pterm||' '||ptermc = '1 M' then date(digits(prevd7))+30 day\nwhen pterm||' '||ptermc = '3 M' then date(digits(prevd7))+90 day\nwhen pterm||' '||ptermc = '6 M' then date(digits(prevd7))+180 day\nwhen pterm||' '||ptermc = '12 M' then date(digits(prevd7))+365 day\nelse null end as ColA, ...) As q\n","737":"Select Count(*)\nFrom Product\nwhere active = 'true'\n","738":" SELECT a.artist, a.title, a.imgurl, a.id, MAX(i.price), MIN(i.price)\n   FROM albums    AS a\n   JOIN inventory AS i ON a.id = i.albumId\n--WHERE ...conditions on artist or album...\n  GROUP BY a.artist, a.title, a.imgurl, a.id\n","739":"With \n    Numbers As \n    (\n    Select Row_Number() Over ( Order By C1.object_id ) As Value\n    From sys.columns As C1\n        Cross Join sys.columns As C2\n    )\n    , ProposedSequences As\n    (\n    Select  NTRIId\n        , Row_Number() Over ( Order By NTRIId ) As Sequence\n    From Table\n    Where NTRITCode = 'PROPOSED'\n    Group By NTRIId\n    )\n    , CurrentSequences As\n    (\n    Select RID, NTRITCode, NTRIId, Parameter, Usage, Rate\n        , Numbers.Value As Sequence\n    From Table\n        Cross Join Numbers\n    Where NTRITCode = 'Current'\n        And Numbers.Value <= (Select Max(Sequence) From ProposedSequence)\n    )\nSelect Sequence, RID, NTRITCode, NTRIId, Parameter, Usage, Rate\nFrom CurrentSequences\nUnion All\nSelect PS.Sequence, T.RID, T.NTRITCode, T.NTRIId, T.Parameter, T.Usage, T.Rate\nFrom ProposedSequences As PS\n    Join Table As T\n        On T.NTRIId = PS.NTRIId\nOrder By PS.Sequence, T.NTRITCode\n","740":"SELECT \"username\" FROM user\n","741":"SELECT column_name + ' ' + DATA_TYPE + COALESCE('(' + CASE\n                                                        WHEN DATA_TYPE = 'XML' THEN NULL\n                                                        WHEN CHARACTER_MAXIMUM_LENGTH = -1 THEN 'max'\n                                                        ELSE Cast(CHARACTER_MAXIMUM_LENGTH AS VARCHAR(5))\n                                                      END + ')', '(' + Cast(NUMERIC_PRECISION AS NVARCHAR(5)) + ',' + Cast(NUMERIC_SCALE AS NVARCHAR(5)) + ')', '') + ' ' + CASE IS_NULLABLE\n                                                                                                                                                                              WHEN 'YES' THEN 'NULL'\n                                                                                                                                                                              ELSE 'NOT NULL'\n                                                                                                                                                                            END + COALESCE(' DEFAULT' + COLUMN_DEFAULT, '')\nFROM   INFORMATION_SCHEMA.Columns\nWHERE  table_name = 'mytable'\n","742":"select x.a, c.b\nfrom (\n  select 'v1' as a union all\n  select 'v2' as a union all\n  select 'v3' as a\n) x\nleft outer join c on c.a = x.a\n","743":"WITH cte \n     AS (SELECT RN=Row_number() over(PARTITION BY a.Car_Name ORDER BY (SELECT NULL)), \n                a.car_name, \n                a.color, \n                a.size, \n                b.part_number \n         FROM   table1 \n                INNER JOIN table2 \n                        ON a.car_name = b.car_name) \nSELECT car_name=CASE WHEN rn = 1 THEN car_name ELSE NULL END, \n       color=CASE WHEN rn = 1 THEN color ELSE NULL END, \n       size=CASE WHEN rn = 1 THEN size ELSE NULL END, \n       part_number \nFROM   cte \n","744":"select e.*,\n       max(photoname) as photoname, max(docname) as docname)\nfrom estates e join\n     ((select p.estateid, p.photoname, NULL as docname, (@rnp := @rnp + 1) as seqnum\n       from photos p cross join\n            (select @rnp := 0) params\n       where p.estateid = 1\n      ) union all\n      (select d.estateid, NULL, d.docname, (@rnd := @rnd + 1) as seqnum\n       from documents d cross join\n            (select @rnd := 0) params\n       where d.estateid = 1\n      )\n     ) dp\n     on dp.estateid = e.estateid\ngroup by e.stateid, dp.seqnum\norder by e.stateid, dp.seqnum;\n","745":"SELECT id, consumption, IF(@s=@s:=id, @s2:=@s2+consumption, @s2:=consumption) AS total\nFROM temp_reading, (SELECT @s:=0, @s2:=0);\n","746":" select * from emp_history where emp_no in (select * from table(your pipelined function))\n","747":"UPDATE t\nSET ID = (SELECT MIN(ID) FROM t AS t2 WHERE t.Num = t2.Num)\n","748":"select  \nCONVERT(DATE,FormUpdated) FormUpdated,\nDATENAME(dw, CONVERT(DATE,FormUpdated)),\nSUM(CASE WHEN TrackingStatus = 'ViewRates' THEN 1 ELSE 0 END) c_ViewRates,\nSUM(CASE WHEN TrackingStatus = 'Complete' THEN 1 ELSE 0 END) c_Complete,\nSUM(CASE WHEN TrackingStatus = 'SaveforLater' THEN 1 ELSE 0 END) c_SaveforLater \nfrom Sales\nwhere FormUpdated <= GETDATE()\nAND FormUpdated >= DATEADD(D,-8,GetDate())\ngroup by  CONVERT(DATE,FormUpdated)\norder by  CONVERT(DATE,FormUpdated) desc\n","749":"select  max(dateofstat)\nfrom dhg.statistics\nwhere assetid in\n(\n  select \/*+ parallel(relatedasset,4) *\/ assetid\n  from dhg.relatedasset \n  group by assetid\n  having \n    max( case when assetid in (191759.0, 3.0, 5.0, 98.0, 99.0) \n                or linkid in (3232.0, 1049.0, 1057.0, 1067.0, 102.0, 1032.0, 104.0, 105.0, 1051.0) \n         then 1 else 0 end ) = 1\n  and\n    max( case when assetid in (192106.0, 1014.0, 10302.0)\n                or linkid in (210.0, 737.0, 126.0, 1053.0, 1054.0, 119.0, 3133.0) \n         then 1 else 0 end ) = 0\n);\n","750":"ALTER PROCEDURE dbo.BCP_Text_File\n    @table    NVARCHAR(255),  \n    @filename VARCHAR(100)  \nAS\nBEGIN\n  SET NOCOUNT ON;\n\n  IF OBJECT_ID(@table) IS NOT NULL\n  BEGIN\n    DECLARE \n        @sql NVARCHAR(MAX), \n        @cols NVARCHAR(MAX) = N'';\n\n    SELECT @cols += ',' + name\n      FROM sys.columns\n      WHERE [object_id] = OBJECT_ID(@table)\n      ORDER BY column_id;\n\n    SELECT @cols = STUFF(@cols, 1, 1, '');\n\n    SET @sql = N'EXEC master..xp_cmdshell ''bcp \"SELECT ''''' \n        + REPLACE(@cols, ',', ''''',''''') + ''''' UNION ALL SELECT ' \n        + 'RTRIM(' + REPLACE(@cols, ',', '),RTRIM(') + ') FROM ' \n        + DB_NAME() + '..' + @table + '\" queryout \"' + @filename + '\" -c''';  \n\n    EXEC sp_executesql @sql;\n  END\n  ELSE\n  BEGIN\n    SELECT 'The table '+@table+' does not exist in the database';\n  END\nEND\nGO\n","751":"SELECT  *\nFROM    mytable\nWHERE   DATE(registration_date) BETWEEN @startDate AND @endDate\n        AND EXISTS\n        (\n        SELECT  NULL\n        FROM    dbo.split(',', COALESCE(@affiliateId, @channel))\n        WHERE   value = CASE WHEN @affiliateId IS NULL THEN channel ELSE affiliateId END\n        )\n        AND EXISTS\n        (\n        SELECT  NULL\n        FROM    dbo.split(',', @channel)\n        WHERE   value = registration_channel\n        )\n","752":"SELECT COALESCE(csv.functionCC,t.functionCC) AS functionCC \nfrom #b as t\nLEFT outer JOIN WR_16h_vs_MVA_16h_csv as csv\non t.PROBE_ID = csv.PROBE_ID;\n","753":" select p.user_id as user_id, p.pictures_count, p.likes_count, l.likers_count\n from (select p.user_id, count(*) as pictures_count, sum(likes) as likes_count\n       from pictures p\n       group by p.user_id\n      ) p left join\n      (select p.user_id, count(distinct l.user_id) as likers_count\n       from pictures p left join\n            likers l\n            on p.wall_id = l.wall_id and p.picture_id = l.picture_id\n       group by p.user_id\n      ) l\n      on p.user_id = l.user_id;\n","754":"SELECT col FROM tbl WHERE INSTR(REVERSE('123456'), REVERSE(col))=1;\n","755":"SELECT d.adst , min(d.total) mttl\nFROM   (SELECT a.date              adate, \n               b.date              bdate, \n               a.price + b.price   total, \n               ( b.date - a.date ) days, \n               a.dst               adst \n    FROM   flights a \n           JOIN flights b \n             ON a.dst = b.dst \n    ORDER  BY total) d \ngroup by adst order by mttl;\n","756":"SELECT u.Userid, u.Name, MAX(S.Salary)\nFROM Usertable u\nLEFT JOIN Salarytable s ON u.Userid = s.userid\nGROUP BY u.userid, u.name\n","757":"SELECT party_code, 1 + ROW_NUMBER() OVER (ORDER BY party_code) AS [serial number]\nFROM myTable\nORDER BY party_code\n","758":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<languages>\n  <language name=\"SCLEX_MYSQL\">\n    <!-- This is the base language setting. It's usually not directly used, but provides values shared by\n         more specialized MySQL versions. -->\n\n    <!-- Lexer properties -->\n    <property name=\"fold\" value=\"1\" \/>\n    <property name=\"fold.compact\" value=\"0\" \/>\n    <property name=\"fold.comment\" value=\"1\" \/>\n    ...\n    <style id=\"1\" fore-color=\"#A0A0A0\" \/> <!-- SCE_MYSQL_COMMENT -->\n    <style id=\"2\" fore-color=\"#A0A0A0\" \/> <!-- SCE_MYSQL_COMMENTLINE -->\n    ...\n  <\/language>\n  ...\n<\/languages>\n","759":"SELECT DISTINCT\n  p.*,\n  m.MemberID,\n  m.FirstName + ' ' + m.LastName AS ProjectManager\nFROM\n  Project p\nINNER JOIN\n  Iterations i\nON\n  p.ProjectID = i.ProjectID\nINNER JOIN\n  ProjectIterationMember pim1\nON\n  i.ProjectIterationId = pim1.ProjectIterationID\nINNER JOIN\n  Member m\nON\n  pim1.ProjectIterationMemberID = m.MemberID\nAND\n  m.CompanyRole = 'Project Manager'\nINNER JOIN\n  ProjectIterationMember pim2\nON\n  i.ProjectIterationId = pim2.ProjectIterationID\nAND\n  pim2.ProjectIterationMemberID = ?\nWHERE\n  p.CompanyID = ?\nORDER BY\n  p.StartDate DESC\n","760":"CREATE TABLE Loan\n(\n      LoanID       INTEGER NOT NULL PRIMARY KEY\n    , BranchID     INTEGER NOT NULL               CONSTRAINT tl_fk_branchid  REFERENCES Branch(BranchID) ON DELETE CASCADE\n    , LoanNumber   CHAR(20) NOT NULL              CONSTRAINT tl_u_loannumber UNIQUE \n                       -- right padded to length of 20 with blanks \n    , LoanType     VARCHAR2(30) NOT NULL\n    , Amount       Number(*,4) NOT NULL     \n                       -- cf. http:\/\/stackoverflow.com\/a\/29014422, changed per @BobJarvis' comment\n    , ModifiedDate DATE DEFAULT SYSDATE\n);\n","761":"1997-12-31 23:59:59.999,kishore\n2014-12-31 23:59:59.999999,manish\n\ncreate table mytable_tmp(mytime string,myname string)\nrow format delimited\nfields terminated by ',';\n\nload data local inpath 'input.txt'\noverwrite into table mytable_tmp;\n\n\n\ncreate table mytable(myname string,mytimestamp string)\nPARTITIONED BY (mydate string)\nrow format delimited\nfields terminated by ',';\n\n\nSET hive.exec.dynamic.partition = true;\nSET hive.exec.dynamic.partition.mode = nonstrict;\n\nINSERT OVERWRITE TABLE mytable PARTITION(mydate) \nSELECT myname,mytime,to_date(mytime) from  mytable_tmp;\n\n\nselect * from mytable where mydate='2014-12-31';\n\n\n\nmanish  2014-12-31 23:59:59.999999  2014-12-31\n","762":"select pt.*,\n       row_number() over (partition by code order by code) as Position\nfrom PositionTest pt\n","763":"select  t.name As TriggerName, \n        ss.name As SchemaName, \n        so2.name As TableName\nfrom    sys.triggers t\nJoin    sysobjects so\n        On  t.object_id = so.id\nJoin    sysobjects so2\n        On  so.parent_obj = so2.id\nJoin    sys.schemas ss\n        On  so2.uid = ss.schema_id\nWhere   t.name = 'NAME'\n","764":"select classes, id, value,\n       sum(value) over (partition by classes order by id) as cumesum\nfrom t;\n","765":"SELECT ...\nFROM MyTable\nWHERE Id < (SELECT MAX(Id) FROM MyTable)\n","766":"SELECT calendar_date\nFROM (SELECT calendar_date, ROW_NUMBER() OVER(ORDER BY calendar_date DESC) as rownum\n      FROM Calendar\n      WHERE calendar_date < CURRENT_DATE\n            AND business_day = 'Y') c\nWHERE ROW_NUM = 3\n","767":"SELECT a.Employee_ID, a.Accept_International_Assignment, a.Plan_Year\nFROM  dbo.v_sc08_CD_Employee_Availabilities a\nINNER JOIN (SELECT Employee_ID, MAX(Plan_Year) maxPlanYear\n            from dbo.v_sc08_CD_Employee_Availabilities\n            GROUP BY Employee_ID) m\n   ON a.Plan_Year = m.maxPlanYear AND a.Employee_ID = m.Employee_ID\n","768":"SELECT Avg(Value), Max(Value), Min(Value) FROM tableName\n","769":"{\n\"stuffA\": 415125,\n\"OnSwitch\" : {\"A\" , \"C\"},\n\"OffSwitch\" : {\"C\"}\n}\n","770":"INSERT INTO Table2 (CUSTOMER_ID, MERCHANT_ID, col1, col2, etc...)\nSELECT t3.ID, t4.ID, t1.col1, t2.col2, etc..\nFROM Table1 t1 \nINNER JOIN Table3 t3 ON t1.CUSTOMER = t3.CUSTOMER_DESC\nINNER JOIN Table4 t4 ON t1.MERCHANT = t4.MERCHANT_DESC\n","771":"DECLARE @date DATETIME = GETDATE()\nWHILE @date > DATEADD(year,-1,GETDATE())\nBEGIN\n    --do marvelous things\n    SET @date = DATEADD(MONTH,-1,@date)\nEND\n","772":"procedure TCustForm.yourQueryCalcField(DataSet : TDataset);\nbegin\n  DataSet.FieldByName('Cost').AsCurrency :=  \n        DataSet.FieldByName('Price').AsCurrency* \n        DataSet.FieldByName('Quantity').AsInteger;\nend;\n","773":"SELECT t1.*\nFROM table_name t1\nWHERE NOT EXISTS (select 1 from tablename t2\n                  where t2.project = t1.project\n                    and t2.report_date < t1.report_date\n                    and t2.percentage_complete = 100)\n","774":"UPDATE SPORTS\n   SET matchup = REPLACE(matchup, 'Manchester United', 'Man Utd')\n","775":"SELECT * \nFROM table2 \nWHERE obj2.param1 IN (\n    SELECT obj1.param1 \n    FROM table1 \n    WHERE... \n    GROUP BY obj1.param1\n    HAVING COUNT(*) = 1\n)\n","776":"INSERT INTO [Vendor List] ([Vendor Number], [Vendor Name])\nSELECT nv.[Vendor Number], nv.[Vendor Name]\nFROM 2_Onbase_NewVendors nv LEFT JOIN [Vendor List] vl ON nv.[Vendor Number] = vl.[Vendor Number]\nWHERE vl.[Vendor Number] IS NULL\n","777":"SET @player_ID = 0;                  -- <<== the playerID\nSELECT  a.*, b.*, 'player' Status         -- this is the first part of the union\nFROM    game a                            -- which gets all the game of\n        INNER JOIN game_player b          -- the selected player and its info\n            ON a.id_game = b.id_game\nWHERE   id_player = @player_ID \nUNION ALL\nSELECT  d.*, c.*, 'opponent' status\nFROM    game_player c\n        INNER JOIN\n        (\n            SELECT  a.*\n            FROM    game aa\n                    INNER JOIN game_player bb\n                        ON aa.id_game = bb.id_game\n            WHERE   bb.id_player = @player_ID\n        ) d ON c.id_game = d.id_game AND c.id_player <> @player_ID\nORDER   BY id_game, status\n","778":"select item \nfrom data,generate_series(0,1000) \nwhere generate_series<qty order by item; \n","779":"SELECT * FROM `articles` WHERE `body` REGEXP '[[:<:]][acgj]'\n","780":"SELECT  * FROM (select user_id, prod_and_ts.product_id as product_id,\nregex_replace(prod_and_ts.timestamps, \"#\\\\d*\", \"\")  as timestamps FROM table2 LATERAL VIEW\nexplode(purchased_item) exploded_table as prod_and_ts) prod_and_ts;\n","781":"SELECT\n  BookID, Price, ISBN, Pages\nFROM\n(\n  SELECT BookID, Key, Value FROM yourTable\n)\n  AS SourceTable\nPIVOT\n(\n  SUM(Value) FOR Key IN (Price, ISBN, Pages)\n)\n  AS PivotTable\nORDER BY\n  BookID\n","782":"select \/* index_ffs (a [name of index]) *\/\n       id, rowid \n  from a\n where id is not null\n order by id, rowid;\n","783":"@newnumber = number.find(:all, :conditions => [\"id = ?\", @dictionary.id], :select => \"number * 2 as newnumber\")\n\n@newnumber = number.all(:conditions=>\"id='#{@dictionary.id}'\",:select=>\"number * 2 as newnumber\")\n","784":"select USERNAME from ACCESSACTIVITY where UPPER(LOCATION)=UPPER('remote-PC')and DATE(TIMESTAMP) = STR_TO_DATE('28-05-2016 ','%d-%m-%Y')\n","785":"SELECT inv_nr, \n       inv_date, \n       inv_customer \nFROM   invoice i \nWHERE  NOT EXISTS(SELECT 1 \n                  FROM   cancel_invoice c \n                  WHERE  c.inv_nr = i.inv_nr) \n","786":"SELECT AR.* \nFROM stats3_last_join AR\nINNER JOIN (SELECt max(value) mv, uuid \n            FROM stats3_last_Join\n            GROUP BY uuid) MaxOnly\n on MaxOnly.mv= AR.Value\nand MaxOnly.uuid = AR.Uuid\n","787":"SELECT tblMyFriends.FriendID,\n       tblMyFriends.GroupID,\n       tblMessages.MyMessage,\n       MAX(tblMessages.MyTime)\nFROM tblMyFriends\nLEFT JOIN tblMessages\n       ON COALESCE(tblMyFriends.FriendID, tblMyFriends.GroupID) =\n          COALESCE(tblMessages.FriendID,  tblMessages.GroupID)\nGROUP BY tblMyFriends.FriendID,\n         tblMyFriends.GroupID\n","788":"public void TreeView_Droped (object sender, RoutedEventArgs e)\n{\n    \/\/Do some work\n    UpdateMyDataSource(sender, e, [another_fields_you_need]);\n}\n","789":"SELECT\na.ORDER_NO,\na.RELEASE_NO,\na.SEQUENCE_NO,\nb.C_OPERATION_SEQUENCE as OP_SEQ,\nb.OPERATION_NO,\nb.OP_ID,\nNVL(c.GUIDELINE_TEXT,'Nothing to see, move along') AS GUIDELINE_TEXT\n","790":"SELECT\n  employee.pin,\n  CASE WHEN gender='M' THEN CONCAT_WS(' ', 'Mister', employee.titel, person.fname)\n       WHEN gender='W' THEN CONCAT_WS(' ', 'Mrs', employee.titel, person.fname)\n  END AS salutation\nFROM\n  person INNER JOIN employee\n  ON person.pin=employee.pin\nORDER BY pin\n","791":"db.execute(\"UPDATE ...\")\nif db.affected_rows == 0:\n    db.execute(\"INSERT ...\")\n","792":"select T1.* from table t1 LEFT JOIN table t2 \nON t1.type = t2.type and t1.created < t2.created\nwhere t2.id is null\n","793":"select 'Table' AS object_type, table_name\nfrom all_tables\nwhere owner = '<owner>'\nUNION ALL\nselect 'View' AS object_type, view_name\nfrom all_views\nwhere owner = '<owner>'\norder by table_name;\n","794":"this.ReportViewer1.ShowToolBar = false;\n","795":"CREATE PROCEDURE ProcName\n    @chklname bit,\n    @chkfname bit,\n    @chkcity bit,\n    @chkmobile bit\nAS\nBEGIN\nSET NOCOUNT ON;\n\n    --Only execute the statement if at least one of the checkboxes are set\n    if @chklname = 1 or @chkfname = 1 or @chkcity =1 or @chkmobile =1 \n        begin\n        declare @sqlcommand nvarchar(max) \n\n\n        set @sqlcommand = N'Select '\n\n        if @chklname = 1\n            set @sqlcommand += N'FirstName '\n\n        if @chkfname = 1\n        begin\n            if len(@sqlcommand) > 1\n                set @sqlcommand += N','\n            set @sqlcommand += N'LastName '\n        end\n        if @chkcity = 1\n        begin\n            if len(@sqlcommand) > 1\n                set @sqlcommand += N','\n            set @sqlcommand += N'City '\n        end\n        if @chkmobile = 1\n        begin\n            if len(@sqlcommand) > 1\n                set @sqlcommand += N','\n            set @sqlcommand += N'Mobile '\n        end\n\n        set @sqlcommand += N' FROM table1'\n\n        exec sp_executesql @statement = @sqlcommand\n\n    end\nEND\nGO\n","796":"UPDATE U SET U.Units = U.Units + CI.ItemUnits\n    FROM @CurrentItems CI INNER JOIN U ON U.UId=CI.ItemId;\n","797":"SELECT ID, WeeklyAvg, MonthlyAvg\nFROM\n(\nSELECT ID, WeeklyAvg, MonthlyAvg,\n     ROW_NUMBER() OVER (PARTITION BY ID ORDER BY ID) RowNum\n     FROM {table}\n) A\nWHERE RowNum = 1\n","798":"Declare @s varchar(100) = '\/ABCDEF\/ABCDEF\/ABC\/8921\/154535'\nselect REVERSE(SUBSTRING(REVERSE(@s),0,CHARINDEX('\/',REVERSE(@s))))\n","799":"SELECT Room_Type, COUNT(*) AS NumarRezervari\nFROM   dbo.Reservation re\nJOIN   dbo.Room ro ON ro.RoomID = re.RoomID\nJOIN   dbo.Room_Type rt ON rt.Room_Type_ID = ro.Room_Type_ID\nWHERE  MONTH(re.Data_Check_in) = 5\nGROUP  BY Room_Type\n","800":"source ~\/.bashrc\n","801":"INSERT INTO MyTable (col1, col2)\nSELECT 'foo' AS col1, *\nFROM OPENROWSET(BULK N'c:\\foo.bin', SINGLE_BLOB) AS col2\n","802":"SELECT *\nFROM   x\nWHERE  name IN ('Jon', 'Peter', 'Paul')\n","803":"create table #table (name varchar(30),[order] varchar(10),id varchar(3))\n\nDECLARE @name varchar(30), @id int\nDECLARE curs_Fp CURSOR FOR\n\nSELECT  c.name, c.id FROM customer c \n\nOPEN curs_Fp\nFETCH NEXT FROM curs_Fp INTO  @name, @id\n\n    WHILE @@FETCH_STATUS = 0 \nBEGIN\n\n        insert into #table \n        SELECT @name, @id ,''\n\n        insert into #table \n        SELECT  '',o.[order],o.id FROM ORDER o where  o.id = @id\n\nFETCH NEXT FROM curs_Fp INTO  @name, @id\nEND\n\nCLOSE curs_Fp\nDEALLOCATE curs_Fp\n\nselect * from #table\ndrop table #table\n","804":"public class PricingTablePackages\n{\n    public int ID { get; set; }\n\n    public int PricingTableID { get; set; }\n\n    public virtual PricingTable PricingTable { get; set; }\n\n    public string Title { get; set; }\n\n    public decimal Price { get; set; }\n\n    public decimal PricePerTime { get; set; }\n\n    public string Info { get; set; }\n\n    public bool Flag { get; set; }\n\n    public string Link { get; set; }\n}\n\npublic class PricingTablePackagesFeatures\n{\n    public int ID { get; set; }\n\n    public int PricingTableID { get; set; }\n\n    public virtual PricingTable PricingTable { get; set; }\n\n    public string Feature { get; set; }\n\n    public string Value { get; set; }\n\n    public string MoreInfo { get; set; }\n}\n\npublic class PricingTable\n{\n    public int ID { get; set; }\n\n    public string Name { get; set; }\n\n    public int ServiceID { get; set; }\n\n    public virtual Service Service { get; set; } \/\/ if there is a Service class\n\n    public string Style { get; set; }\n}\n","805":"WITH daily_count AS  -- temp table to store daily counts \n(\n         SELECT   parking_meter_id,\n                  COUNT(*)                  AS cnt,\n                  to_char(start,'YYYYMMDD') AS day\n         FROM     parking_transactions\n         WHERE    start >= now() - interval '3 month' -- last three months\n         AND      to_char(start,'D') = to_char(now(),'D') -- same weekday\n         AND      to_char(now(),'HH24MISS') BETWEEN to_char(start,'HH24MISS') AND to_char(stop,'HH24MISS') -- same time\n         GROUP BY parking_meter_id,\n                  to_char(start,'YYYYMMDD') -- group by parking meter id and day\n), avg_count_minus_today AS -- temp table to store avg count minus today \n(\n         SELECT   parking_meter_id,\n                  AVG(cnt) AS avg_count\n         FROM     daily_count\n         WHERE    day < to_char(now(),'YYYYMMDD') -- but not today\n         GROUP BY parking_meter_id \n)\nSELECT     a.parking_meter_id,\n           a.avg_count, --avg count minus today\n           d.cnt AS today_count\nFROM       avg_count_minus_today a\nINNER JOIN daily_count d\nON         a.parking_meter_id= d.parking_meter_id AND d.day=to_char(now(),'YYYYMMDD'); --today in daily count\n","806":"create table #t (col1 real, col2 real, col3 real)\nselect checksum(*) from #t\nif @@rowcount = 0\n    print 'All values are NULL'\nelse\n    print 'Non-NULL value(s) found'\ndrop table #t\n","807":"DECLARE @Columns NVARCHAR(MAX)='', @Query NVARCHAR(MAX)=''\nDECLARE @CastColumns NVARCHAR(MAX)=''\n\nSELECT  @Columns = @Columns + QUOTENAME(COLUMN_NAME) + ',',\n        @CastColumns = @CastColumns+CASE WHEN data_type <> 'float' THEN\n        'CAST('+QUOTENAME(COLUMN_NAME)+' AS FLOAT) AS '+QUOTENAME(COLUMN_NAME) ELSE\n        QUOTENAME(COLUMN_NAME) END+','\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME = 'YourTable' \nORDER BY ORDINAL_POSITION\n\nSET @Columns = LEFT(@Columns,LEN(@Columns)-1)\nSET @CastColumns = LEFT(@CastColumns,LEN(@CastColumns)-1)\n\nSET @Query = '\nSELECT ROW_NUMBER() OVER(ORDER BY CO.Ordinal_Position) Id, ColumnName, Value\nFROM (SELECT '+@CastColumns+' FROM YourTable) AS P\nUNPIVOT(value FOR ColumnName IN ('+@Columns+')) AS UC\nJOIN (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ''YourTable'') CO\nON ColumnName = CO.COLUMN_NAME\n'\n\nINSERT INTO @TTABLE\nEXEC sp_executesql @Query\n","808":"SELECT price_est.sau_price_avg\nINTO _est_price\nFROM price_est\nWHERE\n  (price_est.neighbourhood_id = _neighbourhood_id OR price_est.neighbourhood_id IS NULL) AND\n  price_est.district_id = _district_id AND\n  price_est.municipality_id = _municipality_id AND\n  price_est.county_id = _county_id\nORDER BY price_est.neighbourhood_id NULLS LAST\nLIMIT 1;\n","809":"\nwith\n subquery1 as (select \/*big query*\/ ),\n subquery2 as (select \/*big query*\/ )\nselect *\nfrom ...\n     join subquery1\nwhere foo in (select foo from subquery2)\n","810":"select sku, catalogname, getdate()\nfrom\n(\nselect sku, catalogname, categoryname, parentOID\nfrom uswebdb.commerce.catalogproducts\nunion all\nselect sku, catalogname, categoryname, parentOID\nfrom ukwebdb.commerce.catalogproducts\n) F\nwhere (F.CategoryName is not null or F.ParentOID = 113)\nand (F.sku not like '%[a-z]%')\n","811":"SELECT  \n        AssetID_1, AssetID_2,\n        ((psum - (sum1 * sum2 \/ n)) \/ sqrt((sum1sq - sum1*sum1 \/ n) * (sum2sq - sum2*sum2 \/ n))) AS [Correlation Coefficient],\n        n\nFROM\n        (SELECT \n                n1.AssetClass_ID AS AssetID_1,\n                n2.AssetClass_ID AS AssetID_2,\n                SUM(n1.RunResults_Value) AS sum1,\n                SUM(n2.RunResults_Value) AS sum2,\n                SUM(n1.RunResults_Value * n1.RunResults_Value) AS sum1sq,\n                SUM(n2.RunResults_Value * n2.RunResults_Value) AS sum2sq,\n                SUM(n1.RunResults_Value * n2.RunResults_Value) AS psum,\n                COUNT(*) AS n\n        FROM\n                dbo.tbl_RunResults AS n1\n                LEFT JOIN dbo.tbl_RunResults AS n2 ON n1.Simulation_ID = n2.Simulation_ID\n        WHERE   \n\n                n1.AssetClass_ID  < n2.AssetClass_ID AND\n                n1.series_ID = 2332 AND\n                n2.series_ID = 2332\n\n    GROUP BY\n        n1.AssetClass_ID, n2.AssetClass_ID) AS step1\nORDER BY\n        AssetID_1\n","812":"DECLARE @id int;\nSET @id = (select top(1) id from [table] where [x] = 0 order by id desc);\n\nselect * from [table] where id = @id;\nupdate [table] set [x] = 20 where id = @id;\n","813":"my $rs = My::Schema->resultset('Students') #\n    ->search({\n        status => 6,\n        grad_date => { 'between' => [ $start_dt, $end_dt ] },\n    });\n\nmy $num_grads    = $rs->count();\nmy $num_employed = $rs->search({ employment_status => 1 })->count();\n","814":"select somevalue1,somevalue2,somevalue3,value1_t1,value2_t1,cast(null as int) as value2_t2,cast(null as int) as value3_t2\nfrom table1\nunion all\nselect somevalue1,somevalue2,somevalue3,null,null,value2_t2,value3_t2\nfrom table2\n","815":"select *\nfrom (select row_number() over (ORDER BY cars.CarId) as Row, *\n    from cars\n    ) temp\nwhere Row between 20 and 29\n","816":"select item_id , title , description , sum(votes) as totalVotes from items \n    left join votes on\n    items.item_id = votes.item_id\n    group by votes.item_id\n    order by item_id desc\n","817":"Select count(*) as rows,\n    month(create_datetime) as month, \n    year(create_datetime) as year\nFROM      [table_name]\nWHERE     year(create_datetime) BETWEEN 1999 AND 2014\nGROUP BY  month(create_datetime), year(create_datetime)\n","818":"SELECT Product\nFROM ProductWeek\nGROUP BY Product\nHAVING COUNT(*) = (SELECT COUNT(*) from (SELECT distinct weekending from ProductWeek ) as t);\n","819":"Select type1,type2,code,Max(Amt) Over(PARTITION BY Code) AS MaxAmt\nfrom Table1\n","820":"tblMember\nmemberID\nmemberName\n\ntblEvent\neventID\neventType\neventDate\n\ntblAttendance\nmemberID\neventID\n","821":"select t1.*\nfrom your_table t1\njoin\n(\n  select entity, department, max(Code_count) as Code_count \n  from your_table\n  group by entity, department\n) t2 on t1.entity = t2.entity \n    and t1.department = t2.department \n    and t1.Code_count = t2.Code_count \n","822":"jdbc:macromedia:oracle:TNSNamesFile=C:\\\\Oracle\\\\product\\\\11.2.0\\\\client_1\\\\network\\\\admin\\\\tnsnames.ora; TNSServerName=tnsentry\n","823":"Select  e.*\nFrom    employee    e\nWhere Not Exists\n(\n    Select  1\n    From    employee_roles  r\n    Where   r.employee_id = e.employee_id\n    And     r.role_id = 5330\n)\n","824":"SELECT 'abc' AS C1, \n        1 AS NO \n   FROM DUAL\nUNION \nSELECT c1 AS C1, \n       2 AS NO \n   FROM t2 \nORDER BY NO;\n","825":"Mid([X], InStr([X], \"\\\") + 1)\n","826":"INSERT INTO tForeignLanguage ([Name]) VALUES (N'\u0410\u0440\u0430\u0431')\n","827":"select tablename, count(*)\nfrom (select 'table1' as tablename, someid\n      from table1\n      union all\n      select 'table2' as tablename, someid\n      from table2\n     ) t\nwhere someid in ('1815972751', '1815751159', '1815752967', '1815756079')\ngroup by tablename;\n","828":"Select *\nfrom tbl_Events\nwhere startDate <= @end AND @start <= EndDate\n","829":"DECLARE @TEMP_TBL TABLE (COL1 INT, COL2 VARCHAR(100))\n\nINSERT INTO @TEMP_TBL\nselect ID, NAME FROM TB1\n","830":"with virtualTable as(\n   SELECT\n    ...\n   FROM [...]\n\n   UNION\n\n   SELECT\n    ...\n   FROM [...]\n) \nselect vt1.field,\n       vt2.field\nfrom   virtualTable vt1 join virtualTable vt2 on vt1.someField = vt2.otherField\n","831":"CREATE TABLE TableName\n(\n    UID INT AUTO_INCREMENT PRIMARY KEY,\n    -- other columns...\n)\n","832":"SELECT o.Id, o.attrib1, o.attrib2 FROM table1 o\nJOIN (\n  SELECT DISTINCT Id FROM table1, table2, table3 WHERE ...\n) T1\nON o.id = T1.Id\n","833":"SELECT DISTINCT releases.* \nFROM releases\nINNER JOIN artist_love ON  releases.all_artists LIKE CONCAT('%',artist_love.artist,'%')\nAND artist_love.user =  'Quickinho'\nINNER JOIN label_love ON label_love.label = releases.label_no_country\nAND label_love.user =  'Quickinho'\nleft join charts_extended on charts_extended.release_id=label_love=releases.id and charts_extended.artist =  'Quickinho'\nwhere charts_extended.release_id is null\nORDER BY releases.date DESC \nLIMIT 0 , 102\n","834":"SELECT  workingDate as [date], openTime as [Start], COALESCE(breakStart, closeTime) as [End]\nFROM    workingSchedule\n        LEFT JOIN (\n            SELECT  breakDate,  breakStart, breakEnd, ROW_NUMBER() OVER (PARTITION BY breakDate ORDER BY breakStart) AS ROWNUM\n            FROM    breakTable\n        ) as firstBreak ON workingSchedule.workingDate = firstBreak.breakDate AND firstBreak.ROWNUM = 1\nUNION\nSELECT  breakStart.breakDate, breakStart.breakEnd, coalesce(breakEnd.breakStart, endTime.closeTime)\nFROM    (\n            SELECT  breakDate,  breakStart, breakEnd, ROW_NUMBER() OVER (PARTITION BY breakDate ORDER BY breakStart) AS ROWNUM\n            FROM    breakTable\n        ) as breakStart\n        LEFT JOIN (\n            SELECT  breakDate,  breakStart, breakEnd, ROW_NUMBER() OVER (PARTITION BY breakDate ORDER BY breakStart) AS ROWNUM\n            FROM    breakTable\n        ) as breakEnd ON breakStart.breakDate = breakEnd.breakDate AND breakStart.ROWNUM = breakEnd.ROWNUM - 1\n        LEFT JOIN (\n            SELECT  workingDate, closeTime\n            FROM    workingSchedule\n        ) AS endTime ON breakStart.breakDate = endTime.workingDate\n","835":"DECLARE @t TABLE (AMID INT, Entry VARCHAR(100))\nINSERT @t \nVALUES\n(       1000                   ,'MARS'),\n(       1001                   ,'JUPITER'),\n(       1002                   ,'SATURN'),\n(       1003                   ,'VENUS'),\n(       1003                   ,'SATURN'),\n(       1004                   ,'NEPTUNE'),\n(       1004                   ,'SATURN'),\n(       1005                   ,'JUPITER'),\n(       1005                   ,'MARS')\n\n;WITH a AS(\n    SELECT  *,\n            ROW_NUMBER() OVER (PARTITION BY AMID ORDER BY \n                CASE Entry \n                    WHEN 'VENUS' THEN 0\n                    WHEN 'MARS' THEN 1\n                    WHEN 'JUPITER' THEN 2\n                    WHEN 'SATURN' THEN 3\n                    WHEN 'NEPTUNE' THEN 4\n                END) num\n    FROM    @t\n)\n\nSELECT  AMID, Entry\nFROM    a\nWHERE   num = 1\n","836":";WITH CTE\nAS\n(\n    SELECT\n        ROW_NUMBER() OVER(PARTITION BY tblB.[No] ORDER BY tblB.[Date]) AS RowNbr,\n        tblB.*\n    FROM\n        B AS tblB\n)\nSELECT\n    *\nFROM\n    A AS tblA\n    LEFT JOIN CTE\n        ON tblA.No=CTE.No\n        AND CTE.RowNbr=1\n","837":"SELECT \n    my_Group,\n    my_sum, \n    my_sum\/my_total as my_Percent \nFROM(\n    SELECT \n        categories.cat AS my_Group, \n        SUM(atual) AS my_sum\n    FROM `table1` \n    INNER JOIN categories ON table1.category_id=categories.id\n    GROUP BY categoria\n) as t\nLEFT JOIN \n    (\n        SELECT \n            SUM(atual) as my_total\n        FROM `table1`\n    ) as t1\n","838":"select t.visitty, t.specialty, t.doctors\nfrom table t join\n     (select specialty, sum(doctors) as numdoctors\n      from table t\n      group by specialty\n     ) tsum\n     on t.specialty = tsum.specialty\norder by tsum.doctors desc, tsum.specialty, t.doctors desc;\n","839":"CREATE VIEW T4 AS \nSELECT T1.a, T3.d\nFROM T1 \nJOIN T2 ON T1.b = T2.b\nJOIN T3 ON T2.c = T3.c\n","840":"regexp_replace(yourValue,'(XX)0([0-4])(*)', '\\1\\2\\3')\n","841":"select book_num, t.booktype, x.avgcost, bookcost, x.avgcost-bookcost\nfrom tablename t join \n(select booktype, avg(bookcost) as avgcost from tablename group by booktype) x\non t.booktype = x.booktype \n","842":"select (case when count(*) = count(a.DateTimeChangedUtc) and\n                  count(*) = count(b.DateTimeChangedUTC)\n             then SUM(DATEDIFF(SECOND, a.DateTimeChangedUtc, b.DateTimeChangedUTC)) \n        end) AS TimeSpentSeconds\n","843":"create table tmp (a int primary key, b int)\nGO\n\ncreate trigger tr_insupd_tmp on tmp\ninstead of insert, update\nas\n    if not exists(select * from deleted)\n        -- Process Insert\n        insert into tmp\n            select a, 1\n            from inserted\n    else\n        -- Process Update\n        update tmp\n            set b = 2\n        from tmp t\n        inner join inserted i on t.a = i.a\nGO\n","844":"select t1.[Fiscal Year],t1.Value,(t1.[Fiscal Year]-1) [previous_year],t2.Value [previous_value]\nfrom  \n(  select [Fiscal Year], sum([value]) value\n  from [table1] \n  group by [Fiscal Year] \n)t1\nLEFT JOIN\n(  \nselect [Fiscal Year], sum([value]) value\n  from [table1] \n  group by [Fiscal Year] \n)t2\nON t1.[Fiscal Year]=t2.[Fiscal Year]+1\n","845":"select t.*,\n       count(*) over (partition by EmpId) as Count\nfrom table t;\n","846":"SELECT username, email FROM users WHERE (username LIKE '%bla%' or username like '%bla2%' or username like '%bla3%') AND last_visit > '2013-05-15 00:00:00'\";\n","847":"SELECT null as Status,\nsum(IIF(layer='key info',1,0)) AS [Key Info],\nsum(IIF(layer='approaches',1,0)) AS [Approaches],\nsum(IIF(layer='research',1,0)) AS [Research]\nFROM resources\nWHERE (literacy OR numeracy OR poverty)\n\nUNION\n\nSELECT [copyright status],\nsum(IIF(layer='key info',1,0)) AS [Key Info],\nsum(IIF(layer='approaches',1,0)) AS [Approaches],\nsum(IIF(layer='research',1,0)) AS [Research]\nFROM resources\nWHERE (literacy OR numeracy OR poverty)\nGROUP BY [copyright status]\n\nUNION\n\nSELECT [lw status],\nsum(IIF(layer='key info',1,0)) AS [Key Info],\nsum(IIF(layer='approaches',1,0)) AS [Approaches],\nsum(IIF(layer='research',1,0)) AS [Research]\nFROM resources\nWHERE (literacy OR numeracy OR poverty) AND [lw status] = 'In Reserve'\nGROUP BY [lw status]\n\nUNION\n\nSELECT [lw status],\nsum(IIF(layer='key info',1,0)) AS [Key Info],\nsum(IIF(layer='approaches',1,0)) AS [Approaches],\nsum(IIF(layer='research',1,0)) AS [Research]\nFROM resources\nWHERE (literacy OR numeracy OR poverty) AND [lw status] = 'Published'\nGROUP BY [lw status];\n","848":"CREATE PROC #bar\nAS\nSELECT * FROM sys.objects\nEXEC ('SELECT * FROM sys.objects')\nGO\n\nCREATE PROC #foo\nAS\nSET ROWCOUNT 1\n\nEXEC #bar\nGO\n\nSET ROWCOUNT 4\nEXEC #foo \/*Returns 2 resultsets with 1 row*\/\nEXEC #bar \/*Returns 2 resultsets with 4 rows*\/\n\nDROP PROC #foo\nDROP PROC #bar\n","849":"SELECT  \n    M.*, Data.* \nFROM [Measure] M \nCROSS APPLY\n     (SELECT TOP 1 EV.* FROM [Event] E JOIN EventValues EV ON E.EventID = EV.EventID  \n     WHERE M.Time >= E.Time ORDER BY E.Time DESC) AS Data\nORDER BY M.Distance \n","850":"SET DATEFIRST 7;\n\nDECLARE @Date DATETIME = '20120101';\nDECLARE @Dates TABLE \n(   Date DATE, MonthNum INT, \n    MonthName VARCHAR(15), \n    DayNum INT, \n    MonthStart DATE, \n    Day VARCHAR(2)\n);\n\nWITH Dates AS\n(   SELECT  [Date] = DATEADD(DAY, ROW_NUMBER() OVER(ORDER BY Object_ID) - 8, @Date)\n    FROM    sys.All_Objects\n)\nINSERT @Dates (Date, MonthNum, MonthName, DayNum, MonthStart, Day)\nSELECT  Date,\n        [MonthNum] = DATEPART(MONTH, Date),\n        [MonthName] = LEFT(DATENAME(MONTH, Date), 3), \n        [DayNum] = DATEPART(WEEKDAY, Date),\n        [MonthStart] = DATEADD(MONTH, DATEDIFF(MONTH, 0, d1.Date), 0),\n        [Day] = CONVERT(VARCHAR(2), DATEPART(DAY, Date))\nFROM    Dates d1\nWHERE   Date < DATEADD(YEAR, 1, @Date);\n\nWITH Calendar AS\n(   SELECT  MonthName, \n            MonthNum, \n            [Identifier] = CONVERT(VARCHAR(1),  DayNum) + \n                            CONVERT(VARCHAR(1),  Occurance), \n            [Day]\n    FROM    @Dates d1\n            CROSS APPLY\n            (   SELECT  [Occurance] = COUNT(*) \n                FROM    @Dates d2\n                WHERE   d2.Date >= DATEADD(DAY, 1 - DATEPART(WEEKDAY, d1.MonthStart), d1.MonthStart) \n                AND     d2.Date <= d1.Date\n                AND     d1.DayNum = d2.DayNum\n            ) o\n    WHERE   d1.Date >= @Date\n    UNION ALL\n    SELECT  [MonthName] = LEFT(DATENAME(MONTH, '2012' + \n                                                RIGHT('0' + CONVERT(VARCHAR(2), MonthNumber), 2) + \n                                                '01'), 3), \n            MonthNumber, \n            [ID] = DayNumber + Occurance, \n            [Day] = ''\n    FROM    (VALUES ('1'), ('2'), ('3'), ('4'), ('5'), ('6'), ('7')) AS d (DayNumber)\n            CROSS JOIN (VALUES ('1'), ('2'), ('3'), ('4'), ('5'), ('6')) AS o (Occurance)\n            CROSS JOIN (VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10), (11), (12)) AS m (MonthNumber)\n)\nSELECT  [MonthName],\n        [Sun] = [11], [Mon] = [21], [Tues] = [31], [Wed] = [41], [Thu] = [51], [Friday] = [61], [Sat] = [71],\n        [Sun] = [12], [Mon] = [22], [Tues] = [32], [Wed] = [42], [Thu] = [52], [Friday] = [62], [Sat] = [72],\n        [Sun] = [13], [Mon] = [23], [Tues] = [33], [Wed] = [43], [Thu] = [53], [Friday] = [63], [Sat] = [73],\n        [Sun] = [14], [Mon] = [24], [Tues] = [34], [Wed] = [44], [Thu] = [54], [Friday] = [64], [Sat] = [74],\n        [Sun] = [15], [Mon] = [25], [Tues] = [35], [Wed] = [45], [Thu] = [55], [Friday] = [65], [Sat] = [75],\n        [Sun] = [16], [Mon] = [26], [Tues] = [36], [Wed] = [46], [Thu] = [56], [Friday] = [66], [Sat] = [76]\nFROM    Calendar\n        PIVOT\n        (   MAX([Day])\n            FOR [Identifier] IN\n            (   [11], [21], [31], [41], [51], [61], [71],\n                [12], [22], [32], [42], [52], [62], [72],\n                [13], [23], [33], [43], [53], [63], [73],\n                [14], [24], [34], [44], [54], [64], [74],\n                [15], [25], [35], [45], [55], [65], [75],\n                [16], [26], [36], [46], [56], [66], [76]\n            )\n        ) AS pvt\nORDER BY MonthNum;\n","851":"CREATE FUNCTION dbo.CostAtDate ( @costdate AS datetime , @product AS int )\nRETURNS table\nAS\nReturn (\n  Select Top 1\n    BASE_InventoryCostLogDetail.AverageCostAfter\n  From\n    BASE_InventoryCostLogDetail\n  Where\n    CreatedDttm < @costdate And CreatedDttm > DATEADD(month,-1,@costDate) And\n    ProdId = @product\n  Order By\n    CreatedDttm Desc)\n","852":"SELECT \n   REPLACE(REPLACE(REPLACE(`phone`, '-', ''), ' ', ''),'\"','') AS `phone_number`\n  FROM `table`;\n","853":"INSERT INTO table_name( id , name )\nSELECT  id, name FROM temp_table;\n\nTRUNCATE TABLE temp_table;\n","854":"SELECT a.*, b.column1, b.column2, ...\nFROM Table_1 a JOIN Table_2 b on a.ID=b.ID\n\nUNION\n\nSELECT a.*, '' AS column1, '' AS column2, ...\nFROM Table_1 a \nWHERE a.ID NOT IN \n     (SELECT a.ID FROM Table_1 a JOIN Table_2 b on a.ID=b.ID);\n","855":"select MONTH(DATE) As \"Month\"\nfrom DW******.SL****\nGroup By MONTH(DATE)\nOrder by MONTH(DATE)\n","856":"SELECT id , GREATEST(field1, field2) max_val ,\nCASE WHEN field1 >= field2  THEN 2 ELSE 3 END col_idx\nFROM my_table\n","857":"tbl_name (name_id, name)\ntbl_location (locaiton_id, location)\ntbl_name_location (name_id, location_id)\n","858":"SELECT s.userid,\n    'Sell' as type,\n    s.ProductId, \n    s.ProductName, \n    s.ProductPrice \nFROM Sell s\nWHERE UserId = 1\nUNION ALL\nSELECT p.userid,\n    'Purchase' as type,\n    p.ProductId, \n    p.ProductName, \n    p.ProductPrice\nFROM Purchase P\nWHERE UserId = 1\n","859":"SELECT Document.* \nFROM Document \nINNER JOIN DocumentField ON Document.DocumentKey = DocumentField.DocumentKey \nWHERE  (DocTypeKey IS NOT NULL) \nAND Document.DocumentKey IN (\n    SELECT DocumentKey FROM DocumentField WHERE FieldId = '1' AND FieldValue  LIKE 'PO1%' \n    INTERSECT \n    SELECT DocumentKey FROM DocumentField WHERE FieldId = '2' AND FieldValue  LIKE 'INV1%'\n) \n","860":"    SELECT CASE WHEN COALESCE(A1,0)<>1 AND COALESCE(A2,0)<>1 AND COALESCE(A3,0)<>1 \n            AND COALESCE(A4,0)<>1 AND COALESCE(A5,0)<>1 THEN 1 ELSE '' END A\n        , CASE WHEN COALESCE(A1,0)<>2 AND COALESCE(A2,0)<>2 AND COALESCE(A3,0)<>2 \n            AND COALESCE(A4,0)<>2 AND COALESCE(A5,0)<>2 THEN 2 ELSE '' END B\n        , CASE WHEN COALESCE(A1,0)<>3 AND COALESCE(A2,0)<>3 AND COALESCE(A3,0)<>3 \n            AND COALESCE(A4,0)<>3 AND COALESCE(A5,0)<>3 THEN 3 ELSE '' END C\n        , CASE WHEN COALESCE(A1,0)<>4 AND COALESCE(A2,0)<>4 AND COALESCE(A3,0)<>4 \n            AND COALESCE(A4,0)<>4 AND COALESCE(A5,0)<>4 THEN 4 ELSE '' END D\n        , CASE WHEN COALESCE(A1,0)<>5 AND COALESCE(A2,0)<>5 AND COALESCE(A3,0)<>5 \n            AND COALESCE(A4,0)<>5 AND COALESCE(A5,0)<>5 THEN 5 ELSE '' END E\n    FROM NumTest \n    WHERE COALESCE(A1,0)+COALESCE(A2,0)+COALESCE(A3,0)+COALESCE(A4,0)+COALESCE(A5,0)<>15\n","861":"SELECT a.id, a.shipmentNo, a.status, a.date \nFROM (SELECT a.id, a.shipmentNo, a.status, a.date \n      FROM shipment a ORDER BY a.shipmentNo, FIELD(a.status, 'S', 'I')\n      WHERE a.date = '2013-12-12'\n      ) A\nGROUP BY a.shipmentNo\n","862":"SELECT l.*\nFROM listings l\nLEFT JOIN addresses a_l ON a_l.addressable_id = l.id\n  AND a_l.addressable_type = \"App\\\\Listing\"\n  AND a_l.suburb = \"Melbourne\"\nLEFT JOIN addresses a_u ON a_u.addressable_id = l.user_id\n  AND a_u.addressable_type = \"App\\\\User\"\n  AND a_u.suburb = \"Melbourne\"\nWHERE a_l.id IS NOT NULL OR a_u.id IS NOT NULL\n","863":" (case when left(str1, 10) = left(str2, 10) then 10\n       when left(str1, 9) = left(str2, 9) then 9\n       ...\n       when left(str1, 1) = left(str2, 1) then 1\n       else 0\n   end)\n","864":"create table #T (s varchar(128)) \ndeclare @T table (s varchar(128)) \ninsert into #T select 'old value #' \ninsert into @T select 'old value @' \nbegin transaction \n     update #T set s='new value #' \n     update @T set s='new value @' \nrollback transaction \nselect * from #T \nselect * from @T \n","865":"SELECT *\nFROM ( .... ) YourQuery\nWHERE Disponible='Si';\n","866":"select brand_name, count(*) AS num \nfrom (select SUBSTRING_INDEX(new_name, ':', 1) as brand_name \nfrom table \nWHERE date<='\".$american_today.\"' AND date>= '\".$two_weeks_ago.\"' \nGROUP BY day(date), products_id) \nas brands  group by brand_name ORDER BY num DESC LIMIT 5\n","867":"SELECT ids.id \nFROM (SELECT 2 AS id\n      UNION\n      SELECT 3\n      UNION\n      SELECT 4) AS ids\nLEFT OUTER JOIN products \n ON ids.id = products.id \nWHERE products.id IS NULL\n","868":"SELECT \n    [TableName] = so.name, \n    [RowCount] = MAX(si.rows) \nFROM \n    sysobjects so, \n    sysindexes si \nWHERE \n    so.xtype = 'U' \n    AND \n    si.id = OBJECT_ID(so.name) \nGROUP BY \n    so.name \nORDER BY \n    2 DESC\n","869":"SELECT  a.*, c.*    -- <<== select the columns you want to display\nFROM    Users a\n        INNER JOIN UserTagLink b\n            ON a.UserID = b.UserID\n        INNER JOIN Tags c\n            ON b.TagID = c.TagID\n","870":"select *\nfrom (\n    SELECT\n        pictures.id,\n        ts_rank_cd(to_tsvector('english', pictures.title), \n        to_tsquery('small dog')) AS score\n    FROM pictures\n) s\nWHERE score > 0\nORDER BY score DESC\n","871":"insert into table1(col1, col2, col3)\n    select 1, col2, 0\n    from <your other query here>;\n","872":"Delete From StudentTb \nWhere StudentType in (1, 2) \nand StudentI in\n(\nselect StudentI\nfrom StudentTb\nexcept \nSelect StudentI From StudentLog    \n)\n","873":"SELECT Tot = ISNULL(Val1, 0) + ISNULL(Val2, 0)\nFROM Table\n","874":"SELECT * \nFROM Table_1 AS t1\nLEFT OUTER JOIN Table_2 AS t2\nON t1.firstname = t2.firstname\nAND t1.lastname = t2.lastname\nWHERE t2.firstname IS NULL AND t2.lastname IS NULL\n","875":".Parameters.Add(New OracleParameter(\"vinspectiondatetime\", OracleClient.OracleType.DateTime)).Value = new DateTime(2010, 2, 5, 11, 46, 0)\n","876":"SELECT CASE WHEN rn=1 THEN cnt END cnt, order_name, status\nFROM\n(\nSELECT count(*) OVER (PARTITION BY status) cnt,\n  ROW_NUMBER() OVER (PARTITION BY status ORDER BY order_name) rn,\n  order_name,status\nFROM input_table\n)\n","877":"SELECT p.id,\n       p.name,\n       group_concat(DISTINCT cat.name separator ',') as categories\nFROM places p\n   LEFT JOIN places_categories_rel rel ON p.id=rel.place_id\n   LEFT JOIN categories cat ON cat.id=rel.category_id\nWHERE EXISTS (\n   SELECT 1\n   FROM places_categories_rel pcr \n       JOIN categories c ON c.id=pcr.category_id\n   WHERE name = 'Lounge'  AND p.id=pcr.place_id\n)\nGROUP BY p.id\n","878":"SELECT SELECT MAX(t1.ID)\n  ,STUFF( (SELECT ','+Info3 FROM temp t\n           WHERE t.Rank=A.RankFOR XML PATH(''))  ,  1 , 1 , '' )\nFROM temp A\nGROUP BY A.Rank\n","879":"SELECT id, p_id, offer FROM offers \nWHERE p_id = 1 order by offer desc limit 1\n","880":"SELECT * FROM my_table ORDER BY id DESC LIMIT 10;\n","881":"ORDER BY rand()*pow(<probability-field-name>,<n>)\n","882":";WITH x AS \n(\n  SELECT ID,NAME,[LAST NAME],PHONE,STATE,\n    ROW_NUMBER() OVER (PARTITION BY NAME,[LAST NAME],PHONE ORDER BY ID DESC) \n  FROM dbo.YourTable\n)\nUPDATE x SET STATE = CASE rn WHEN 1 THEN NULL ELSE 'DUPE' END;\n","883":"Convert MMM dd yyyy HH:MM[AM|PM] to dd\/MM\/yyyy hh:mm:ss\nDeclare @Date VARCHAR(20) = 'Jan 27 2015 12:05AM'\n\nSELECT CONVERT(VARCHAR(10), CONVERT(DATETIME, @Date),103)\n          + ' ' + CONVERT(VARCHAR(8), CONVERT(DATETIME, @Date),108)\n\n\n    Result:    27\/01\/2015 00:05:00\n","884":" set serveroutput on;\n declare\n   XML CLOB;\n   XML_DOCUMENT DBMS_XMLDOM.DOMDOCUMENT;\n   XML_NODE DBMS_XMLDOM.DOMNODE;\n begin\n   XML := '\n   <ROOT>\n     <A>\n       <B>2<\/B>\n       <C>3<\/C>\n       <D>\n         <E>12<\/E>\n       <\/D>\n       <F\/>\n       <G\/>\n     <\/A> \n   <\/ROOT>\n   ';\n\n   XML_DOCUMENT := DBMS_XMLDOM.NEWDOMDOCUMENT(XML);\n   XML_NODE := DBMS_XMLDOM.MAKENODE(XML_DOCUMENT);\n   XML_NODE := DBMS_XSLPROCESSOR.SELECTSINGLENODE(XML_NODE,'ROOT\/A\/B\/text()');\n   IF(DBMS_XMLDOM.ISNULL(XML_NODE) = FALSE)\n   THEN\n     dbms_output.put_line(DBMS_XMLDOM.GETNODEVALUE(XML_NODE));\n   END IF;\n end;\n","885":"SELECT k.name AS hicompany, count( * ) AS howmany\nFROM people p\nJOIN hicompany k ON p.id= k.id\nGROUP BY name\nORDER BY COUNT(*) DESC\n","886":"select\n  t1.*,\n  t2.dispatcher_id,\n  t2.dispatcher_score,\n  t2.dispatcher_score - t1.score as delta_score\nfrom\n(\n  select \n    dispatcher_id,\n    dispatcher_score,\n    final_indx,\n    rank() over (partition by final_indx order by dispatcher_score desc) as rnk\n  from table2\n) t2\njoin table1 t1 on t1.res_score_id = t2.final_indx\nwhere t2.rnk = 1;\n","887":"CREATE TABLE STUDENT\n(ID NUMBER(9),\nSTUDENT_NAME VARCHAR2(500), \nCONSTRAINT PK_STUDENT PRIMARY KEY(ID));\n--------\nCREATE TABLE ATTENDANCE_TYPE\n(ID NUMBER(9),\nAT_DESCRIPTION VARCHAR2(250),\nCONSTRAINT PK_ATTENDANCE_TYPE PRIMARY KEY(ID))\n------------------------\nCREATE TABLE ATTENDANCE(\nID NUMBER(9),\nSTUDENT_ID NUMBER(9),\nATTENDANCE_DAY DATE,\nATTENDANCE_TYPE_ID NUMBER(9),\nCONSTRAINT PK_ATTENDANCE PRIMARY KEY(ID),\nCONSTRAINT FK_ATTENDANCE_TYPE\nFOREIGN KEY (ATTENDANCE_TYPE_ID) REFERENCES ATTENDANCE_TYPE(ID),\nCONSTRAINT FK_STUDENT\nFOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID));\n\n--this gets the number of students late in Jan, Feb and March 1st this year\nSELECT COUNT(*)\nFROM student s JOIN attendance att\nON s.ID = att.student_id\nWHERE att.attendance_type_id = 2\nAND att.attendance_day BETWEEN TO_DATE('01-JAN-2016', 'DD-MON-YYYY') AND TO_DATE('01-MAR-2016', 'DD-MON-YYYY');\n","888":"SELECT A.item_ID, A.item_name\nFROM A\nLEFT JOIN B ON A.item_ID = B.item_ID\nWHERE (B.option_ID=34 AND B.option_value BETWEEN 1000 AND 2000)\n      OR (B.option_ID=12 AND B.option_value BETWEEN 0 AND 4000)\nGROUP BY A.item_ID\nHAVING COUNT(A.item_ID) >= 2\n","889":"select t.*,\n       (case when min(NumEmployees) over (partition by grp) =\n                  max(NumEmployees) over (partition by grp)\n             then 1\n             else 0\n        end) as DerivedField\nfrom table t;\n","890":"SELECT a,b,c, min(d)\nFROM myTable\nGROUP BY a,b,c\nORDER BY a,b,c\n","891":"select comp_id, app_id, cnt\nfrom (select t.*, row_number() over (partition by app_id order by cnt desc) as seqnum\n      from (SELECT COMP_ID, APP_ID, count(*) as cnt\n            FROM APP_ACCT_VIEW\n            GROUP BY COMP_ID, APP_ID\n           ) t\n     ) t\nwhere seqnum = 1\n","892":"SELECT (case when count(*) = count(oran*deger)\n             then SUM(oran*deger\/100)\n        end)\nFROM @tablo;\n","893":"select sector_id, count(distinct resort_id) as NumResorts,\n       count(distinct country_id) as NumCountries\nfrom resorts\ngroup by sector_id;\n","894":"SELECT name,\n       (SELECT SUM(WarengruppeVK.netto)\n        FROM Kunde\n        JOIN PbsRow ON Kunde.PK = PbsRow.kunde\n        JOIN WarengruppeVK ON PbsRow.PK = WarengruppeVK.pbsrow\n        WHERE Kunde.admitarbeiter = Adm.PK\n          AND PbsRow.jahr = 2012\n       ) AS vj_netto,\n       (SELECT SUM(PbsRow.sollfracht)\n        FROM Kunde\n        JOIN PbsRow ON Kunde.PK = PbsRow.kunde\n        WHERE Kunde.admitarbeiter = Adm.PK\n          AND PbsRow.jahr = 2012\n       ) AS vj_sollfracht\n       (SELECT SUM(WarengruppeVK.netto)\n        FROM Kunde\n        JOIN PbsRow ON Kunde.PK = PbsRow.kunde\n        JOIN WarengruppeVK ON PbsRow.PK = WarengruppeVK.pbsrow\n        WHERE Kunde.admitarbeiter = Adm.PK\n          AND PbsRow.jahr = 2013\n       ) AS j_netto,\n       (SELECT SUM(PbsRow.sollfracht)\n        FROM Kunde\n        JOIN PbsRow ON Kunde.PK = PbsRow.kunde\n        WHERE Kunde.admitarbeiter = Adm.PK\n          AND PbsRow.jahr = 2013\n       ) AS j_sollfracht\nFROM Adm\n","895":"tblPhone(Phone_Type_ID, Phone_Type_Name, Phone_Type_Min_Price, Phone_Type_Max_Price)\n","896":";WITH T AS \n(\nSELECT *, \n       MAX(NULLIF(Column2,'')) OVER (PARTITION BY Column1) AS C2\nFROM YourTable\n)\nUPDATE T\nSET Column2 = C2\nWHERE Column2 IS NULL OR Column2 = '';\n","897":"DECLARE @docIds VARCHAR(MAX)\n\nSELECT @docIds = STUFF((\n    SELECT ',' + CONVERT(VARCHAR(50), docUid)\n    FROM dbo.Document\n    FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')\n\nSELECT @docIds, LEN(@docIds)\n","898":"select 'apples' as productName, count(*) from fruit where apples  = '1'\nunion\nselect 'oranges', count(*) from fruit where oranges = '1'\nunion\nselect 'kiwis', count(*) from fruit where kiwis   = '1'\n","899":"CREATE TEMPORARY table IF NOT EXISTS tbl  \n(   \n    REF_REQ_ID int AUTO_INCREMENT PRIMARY KEY,\n    FunctionalArea varchar(200),\n    Industry varchar(200)\n);\n\nTRUNCATE TABLE tbl;\n\nINSERT INTO tbl\nSELECT 1, 'IT Jobs', 'IT related Jobs' UNION ALL\nSELECT 2, 'HR Jobs', NULL UNION ALL\nSELECT 3, NULL, 'HR related Jobs' UNION ALL\nSELECT 4, NULL, 'IT related Jobs' UNION ALL\nSELECT 5, NULL, NULL UNION ALL\nSELECT 6, 'IT Jobs', 'IT related Jobs' UNION ALL\nSELECT 7, 'HR Jobs', NULL UNION ALL\nSELECT 8, NULL, 'HR related Jobs' UNION ALL\nSELECT 9, 'HR Jobs', NULL;\n\nCREATE TEMPORARY table IF NOT EXISTS tbl_industry\n(   \n    REF_REQ_ID int,\n    Industry varchar(200)\n);\n\nTRUNCATE TABLE tbl_industry;\n\nINSERT INTO tbl_industry\nSELECT \n    REF_REQ_ID,\n    Industry \nFROM tbl\nWHERE Industry IS NOT NULL;\n\n\nSELECT \n    JobTitle As JobTitle,\n    COUNT(REF_REQ_ID) As NoOfJobs\nFROM    \n    (SELECT \n        FunctionalArea As JobTitle,\n        REF_REQ_ID\n    FROM tbl\n    UNION \n    SELECT \n        Industry As JobTitle,\n        REF_REQ_ID\n    FROM tbl_industry)t\nWHERE JobTitle IS NOT NULL\nGROUP BY JobTitle\nORDER BY NoOfJobs desc\n","900":"select * from oc_user , oc_groups ORDER BY gid, uidS\n","901":"SELECT B.* \nFROM SO_total_days2 A\nINNER JOIN SO_total_days2 B ON B.monthnumber = A.monthnumber + 360\nWHERE A.from_date =  '2010-01-01'\n\nfrom_date   to_date     days_in_month monthnumber\n1980-01-01  1980-01-31  31    1\n1980-02-01  1980-02-29  29    2\n1980-03-03  1980-03-31  31    3\n...\n1981-01-01  1981-01-31  31    13\n1981-12-01  1981-12-31  31    24\n...\n1985-01-01  1985-01-31  31    49\n1985-12-01  1985-12-31  31    60\n","902":"SELECT Col1, Col2, EventType, DateTime \nFROM theTable A\nWHERE DateTime > \n\n(SELECT  MAX(DateTime)\nFROM    theTable SUB\nWHERE   EventType = 3\nAND SUB.COL1 = A.COL1\nAND SUB.COL2 = A.COL2)\n","903":"SELECT TOP 1 * \nFROM tblHistory a\nINNER JOIN \n   (SELECT Unit Number, Max([Date]) as MaxDate \n    FROM tblHistory\n    GROUP BY Unit Number) b\non a.[Unit Number] = b.[Unit Number]\nand a.[Date] = b.MaxDate\n","904":"SELECT period, 'Truck' AS NameOfVehicle, Truck AS Value FROM vehicle\nUNION ALL\nSELECT period, 'Car', Car FROM vehicle\nUNION ALL\nSELECT period, 'Boat', Boat FROM vehicle\n","905":"   $where = '';\n    $sql= \"SELECT  * FROM   maklumatakaun \n            LEFT JOIN detailakaun ON maklumatakaun.id = detailakaun.id \n            LEFT JOIN maklumatbilakaun ON maklumatakaun.NoAkaun = maklumatbilakaun.NoAkaun \n            LEFT JOIN kodjenisakaun ON detailakaun.KodJenisAkaun = kodjenisakaun.KodJenisAkaun\n            LEFT JOIN kodlokasi ON detailakaun.KodLokasi = kodlokasi.KodLokasi\n            LEFT JOIN kodkategori ON maklumatakaun.KodKategori = kodkategori.KodKategori        \n            LEFT JOIN koddaerah ON maklumatakaun.KodDaerah = koddaerah.KodDaerah\n            WHERE maklumatakaun.KodKategori = '$KodKategori' \n            AND detailakaun.KodJenisAkaun = '$KodJenisAkaun'\n            AND maklumatbilakaun.BulanBil = '$BulanBil' \n            AND maklumatbilakaun.TahunBil ='$TahunBil' \n            \".mysql_real_escape_string($where).\"\n            GROUP BY maklumatakaun. NoAkaun \";\n\n\n\nif($KodDaerah != 'all'){\n  $where .= \"AND maklumatakaun.KodDaerah = '$KodDaerah' \"; \/\/Add your where statement here\n  \/\/Whatever you want to do\n}\n","906":"WHERE LEVENSHTEIN(Field_A, Field_B) < 4;\n","907":"AverageMarks: (CourseworkMarks+ExaminationMarks)\/2\n","908":"  SELECT t.category_id,\n         MIN(t.date) AS first_date,\n         CASE \n           WHEN MAX(t.date) = MIN(t.date) THEN NULL \n           ELSE MAX(t.date)\n         END AS last_date\n    FROM TABLE t\nGROUP BY t.category_id, t.client_id\n","909":"select rp.NameEN, rd.NameDefault,\n       (select COUNT(NameEN)\n        from [OTOP].[Custom].[tblRefProvince]\n       ) as district\nfrom [OTOP].[Custom].[tblRefProvince] rp inner join\n     [OTOP].[Custom].[tblRefDistrict] rd\n     on rp.ID = rd.ProvinceID;\n","910":"obj = MyModel.objects.get(pk=1)\nobj.pk = None\nobj.save()\n","911":"  SELECT * FROM booking \n  WHERE rid = '5' \n   AND active = '1'\n   AND ('2010-10-01' BETWEEN datefrom AND dateto - INTERVAL 1 DAY \n    OR '2010-10-09' BETWEEN datefrom + INTERVAL 1 DAY AND dateto \n    OR datefrom BETWEEN '2010-10-01' AND '2010-10-09' - INTERVAL 1 DAY) \n   LIMIT 0 , 30\n","912":"select t.*, cumepaid \/ cumeqty as avg_cost\nfrom (select t.*,\n             (select SUM(qty) from t t2 where t2.item_id = t.item_id and t2.purch_id <= t.purch_id\n             ) as cumeqty,\n             (select SUM(qty*unit_price) from t t2 where t2.item_id = t.item_id and t2.purch_id <= t.purch_id\n             ) as cumepaid\n      from t\n     ) t\n","913":"osql -Sdb -Uautosys -Pdata_load -ddms -Q\"EXEC dbo.sp @start_time = '%mydate%' \"\n","914":"    Select a.Col1, a.Col2, b.Col1, b.Col2, c.Col1\n    from [Table A] a\n    inner join [Table C] c\n        on c.key1= a.key1\n    inner join [Table B] b\n        on b.key1 = a.key1\n    inner join [Table D] d\n        ON  b.key3 = d.key1\n    where c.key2 = 'static value' \n        and b.key2 = 'static value'\n        and right(b.key4,1) in ('static value 1', 'static value 2')\n        and substring(b.key4, 1, len(b.key4)-1) = c.key1\n   group by a.Col1, a.Col2, b.Col1, b.Col2, c.Col1\n","915":"INSERT INTO tags\n('name', 'slug')\nVALUES('Category X','category_x')\nON DUPLICATE KEY UPDATE\n'slug' = 'category_x'\n","916":"SELECT invited_by_id, COUNT(*) AS invited_count FROM table GROUP BY invited_by_id\n","917":"select top 1 \n  a, b, c, d \nfrom \n  Products \nwhere\n  CodDep IN (10,12,12,13,26,27,32,34,248442,259741)\norder by \n  LastUpdate\n","918":"WITH    q AS\n        (\n        SELECT  startId, endId\n        FROM    ranges\n        UNION ALL\n        SELECT  startId + 1, endId\n        FROM    q\n        WHERE   startId < endId\n        )\nSELECT  startId\nFROM    q\nOPTION  (MAXRECURSION 0)\n","919":"<?php\n    \/\/ copy your string of ids into this variable\n    $input = \"'123', '234r', '345', '456xyz'\";\n    \/\/ modify next line to get your desired filename\n    $filename = 'insert.sql'\n    \/\/ modify next line to your table name\n    $insert_statement = \"INSERT INTO your_table_name (id, status) VALUES \\n\" .\n         '(' . implode(\", 'discard')\\n(\", explode(', ', $input)) . \", 'discard');\\n\"; \n    file_put_contents($filename, $insert_statement);\n?>  \n","920":"UPDATE tblDocs\nSET \n  Active = CASE WHEN DocLocation = 'something' THEN 1 ELSE 0 END,\n  DocID = CASE WHEN DocLocation = 'something' THEN NULL ELSE DocID END\n","921":"<cfoutput query=\"getEmpsByDept\" group=\"Department\">\n  <cfset empCount = 0>\n  <cfoutput>\n    <cfset empCount++>\n  <\/cfoutput>\n  <tr>\n    <td><b>#Ucase(getEmpsByDept.Department)# #empCount# Employees<\/b><\/td>\n  <\/tr>\n  <cfoutput>\n    <tr>\n      <td>&nbsp;&nbsp; #TRIM(getEmpsByDept.First)#&nbsp;#TRIM(getEmpsByDept.Last)#<\/td>\n    <\/tr>\n  <\/cfoutput> \n  <tr>\n    <td height=\"0\">&nbsp;<\/td>\n  <\/tr>\n<\/cfoutput>\n","922":"select t1.*, t2.* from t1 \n left outer join t2 on t2.id=t1.id \nWHERE flag = 1 OR t2.id IS NOT NULL\n","923":"create table business (\n  id int not null auto_increment primary key,\n  name varchar(255)\n);\n\ncreate table open_hour_range (\n  id int not null auto_increment primary key,\n  business_id int,\n  day_of_week tinyint, \/* 0-6 *\/\n  open_time time,\n  close_time time,\n  foreign key(business_id) references business(id)\n);\n","924":"CREATE OR REPLACE PROCEDURE PROC_CREATE_ROLES IS\nBEGIN\n  EXECUTE IMMEDIATE 'CREATE ROLE ADMIN_STAFF';\n\n  EXECUTE IMMEDIATE 'GRANT SELECT ON BLAH TO ADMIN_STAFF';\n  EXECUTE IMMEDIATE 'GRANT SELECT, UPDATE ON BLORT TO ADMIN_STAFF';\n  EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE ON YADA TO ADMIN_STAFF';\n\n  EXECUTE IMMEDIATE 'GRANT ADMIN_STAFF TO USER1, USER2, USER3';\nEND PROC_CREATE_ROLES;\n","925":"SELECT SUM(SALES_AMOUNT)SALES,\nYEAR,\nMONTH,\nCATAGORY_ID,\nTO_CHAR(SALES_PERSON_ID) SALES_PERSON_ID,\nITEM_TYPE_ID\nFROM APEX_FINAL\n    where sales_amount is not null\n     and catagory_id is not null\nGROUP BY (YEAR,MONTH,CATAGORY_ID,SALES_PERSON_ID,ITEM_TYPE_ID)\n\nunion all\n\nSELECT SUM(SALES_AMOUNT)SALES,\nYEAR,\nMONTH,\nCATAGORY_ID,\n'all others' SALES_PERSON_ID,\nITEM_TYPE_ID\nFROM APEX_FINAL\n    where sales_amount is not null\n    and sales_person_id is null \nGROUP BY (YEAR,MONTH,CATAGORY_ID,SALES_PERSON_ID,ITEM_TYPE_ID)\n","926":"SELECT      [group], [code] , COUNT(1) as CNT\nFROM        YourTableName\nGROUP BY    [group], [code] \nHAVING      COUNT(1) > 1\nORDER BY CNT;\n","927":"SET [File] = cast(b.Header as text) + CHAR(13) + CHAR(10) + d.Detail + c.Trailer + CHAR(13) + CHAR(10) + CHAR(26)\n","928":"Select *\nFrom table\nWhere (@Column = 'name' and name is null) or\n      (@Column = 'surname' and surname is null) or\n      (@Column = 'name and surname' and surname is null and name is null)\n","929":"CREATE TABLE my_table (\n    col1 VARCHAR(10),\n    col2 VARCHAR(20),\n    expiration_date DATE,\n    is_expired AS CASE WHEN expiration_date > GETDATE() THEN 1 ELSE 0 END\n);\n","930":">>ssh user@your_website.com\n>>Enter password: your_password\n>>mysqldump -u [uname] -p[pass] [dbname] > [backupfile.sql]    \n","931":"select group_concat(lev0) from \n(select concat_ws(',',lev2,group_concat(lev3)) as lev0 from \n(SELECT  t2.id as lev2, \nt3.id as lev3, \nt4.id as lev4\nFROM menus AS t1\nLEFT JOIN menus AS t2 ON t2.parent_id = t1.id\nLEFT JOIN menus AS t3 ON t3.parent_id = t2.id\nLEFT JOIN menus AS t4 ON t4.parent_id = t3.id\nWHERE t1.id = '2') t0 group by lev2) t;\n","932":"string createSql = \"CREATE VIRTUAL TABLE TweetFts USING FTS3(TweetId, Title, Description)\";\n\nstring insertSql = \"INSERT INTO TweetFts (TweetId, Title, Description) \n     SELECT TweetId, Title, Description FROM Tweet\";\n\nstring sql = @\"select TweetId from TweetFts where Title match '\" + allWords + \"'\";\nsql += \" union \";\nsql += @\"select TweetId from TweetFts where Description match '\" + allWords + \"'\";\nsql += \" union \";\nsql += @\"select TweetId from TweetFts where Title match '\"\"\" + exactMatch + @\"\"\"'\";\nsql += \" union \";\nsql += @\"select TweetId from TweetFts where Description match '\"\"\" + exactMatch + @\"\"\"'\";\n","933":"SET HEADING OFF\nSET PAGESIZE 0\nSET LONG 90000\nSET FEEDBACK OFF\nSET ECHO OFF\nSPOOL P:\\other\\file_name.sql\n\nSELECT DBMS_METADATA.get_ddl ('TABLE', table_name) || ';' FROM user_tables;\n\nSPOOL OFF\n","934":"SELECT InitCap( your_column )\n  FROM your_table\n","935":"CREATE QUEUE ExpenseQueue\n    WITH STATUS=ON,\n    ACTIVATION (\n        PROCEDURE_NAME = expense_procedure,\n        MAX_QUEUE_READERS = 5,\n        EXECUTE AS 'ExpenseUser' ) ;\n","936":"SELECT * FROM TABLE WHERE FIELD LIKE '%&%'\n","937":"EXECUTE msdb.dbo.sysmail_delete_account_sp\nEXECUTE msdb.dbo.sysmail_delete_profile_sp\n\nEXECUTE msdb.dbo.sysmail_add_account_sp\nEXECUTE msdb.dbo.sysmail_add_profile_sp\nEXECUTE msdb.dbo.sysmail_add_profileaccount_sp\n","938":"using (SqlConnection conn = new SqlConnection(@\"Persist Security Info=False;Integrated Security=true;Initial Catalog=myTestDb;server=(local)\"))\n{\n    SqlCommand addvalues = new SqlCommand(@\"INSERT INTO customer (id,name,age,occupation) VALUES (@id,@name,@age,@occupation)\", conn);\n    addvalues.Parameters.AddWithValue(\"@bla\", \"bla\");\n    addvalues.Connection.Open();\n    addvalues.ExecuteNonQuery();\n    addvalues.Connection.Close();\n}\n","939":"SELECT t.PhoneNumber1, t.PhoneNumber2, \n   t1.SomeOtherFieldForPhone1, t2.someOtherFieldForPhone2\nFROM Table1 t\nJOIN Table2 t1 ON t1.PhoneNumber = t.PhoneNumber1\nJOIN Table2 t2 ON t2.PhoneNumber = t.PhoneNumber2\n","940":"     ALTER TRIGGER [dbo].[tid2]\n     ON [dbo].[tblPrac2]\n     AFTER INSERT\n     AS\n     declare @nid int;\n\n     set @nid = ( select MAX(TicketID) from [tblPrac2] );\n\n     if(@nid is null)\n     begin\n         set @nid = 1;\n     end\n     else\n         set @nid = @nid + 1;\n\nupdate tblPrac2 set TicketID = @nid where ID in (select ID from inserted)\n","941":"select  cake\nfrom    caketable c\nwhere   not exists\n        (\n        select  *\n        from    icingtable i\n        where   i.cake = c.cake\n                and i.consumed = '1'\n        )\n        and not exists\n        (\n        select  *\n        from    sprinkletable s\n        where   s.cake = c.cake\n                and s.consumed = '1'\n        )\n","942":"DELETE From test WHERE Col1 IN(\nSELECT Col1 FROM test \nGROUP BY Col1\nHAVING COUNT(1) > 1)\nAND Col2 = '1'\n","943":"CREATE TABLE `swap_test` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `x` varchar(255) DEFAULT NULL,\n  `y` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB;\n\nINSERT INTO `swap_test` VALUES ('1', 'a', '10');\nINSERT INTO `swap_test` VALUES ('2', NULL, '20');\nINSERT INTO `swap_test` VALUES ('3', 'c', NULL);\n","944":"SELECT PersonID,    \n       DateKey,\n       [C\/L],\n       [C\/L_New] = ISNULL([C\/L], (SELECT TOP 1 t2.[C\/L]\n                                  FROM dbo.TableName t2\n                                  WHERE t2.PersonID = t.PersonID\n                                  AND   t2.DateKey <= t.DateKey\n                                  AND   t2.[C\/L] IS NOT NULL\n                                  ORDER BY DateKey DESC))\nFROM dbo.TableName t\nOrder By PersonID, DateKey\n","945":"SELECT\n   i1.id AS id1,\n   NULL AS id2,\n   NULL AS id3,\n   i1.amount\nFROM\n   items i1\nUNION ALL\nSELECT\n   i1.id AS id1,\n   i2.id AS id2,\n   i3.id AS id3,\n   i1.amount + i2.amount AS total\nFROM\n   items i1,\n   items i2\nWHERE\n   i1.amount + i2.amount = 30 AND\n   i1.id <> i2.id AND\n   i1.id <> i3.id\nUNION ALL\nSELECT\n   i1.id AS id1,\n   i2.id AS id2,\n   i3.id AS id3,\n   i1.amount + i2.amount + i3.amount AS total\nFROM\n   items i1,\n   items i2,\n   items i3\nWHERE\n   i1.amount + i2.amount + i3.amount = 30 AND\n   i1.id <> i2.id AND\n   i1.id <> i3.id AND\n   i2.id <> i3.id\n","946":"SELECT D.ID \nFROM Data D\nWHERE  NOT EXISTS(SELECT 1 \n                  FROM Data WHERE D.ID = CXL)\n","947":"insert into master.schema.employee (id, name)\nselect case when id = 1 then 201 else id end, name\nfrom northwind.schema.employee\n","948":"SELECT  [author]\n        ,[pubDate]\n        ,MAX([dateadded])\n FROM   [Feeds].[dbo].[socialPosts]\n WHERE  CAST(FLOOR(CAST(dateadded AS float)) AS datetime) >  dateadd(day,datediff(day, 0, getdate()-2), 0)  \n        AND CAST(FLOOR(CAST(dateadded AS float)) AS datetime) < dateadd(day,datediff(day, 0, getDate()), 0)\n GROUP BY \n        [author]\n        , [pubdate]\n","949":"SELECT Table1.Numbers, Table1.Name\nFROM Table1 \nWHERE NOT EXISTS(\n    SELECT 1 FROM Table2 \n    WHERE Table1.Numbers=Table2.Numbers\n)\n","950":"SELECT CourseCode FROM Course WHERE CourseName='?'\n\nUNION ALL\n\nSELECT 'Not Applicable'\nWHERE NOT EXISTS (\n    SELECT CourseCode FROM Course WHERE CourseName='?'\n)\n","951":"SELECT employees.eno, employees.ename, SUM(parts.price * odetails.qty) as TotalSales\nFROM test.employees\nINNER JOIN test.orders\nON empoyee.eno = orders.eno\nINNER JOIN test.odetails\nON orders.ono = odetails.ono\nINNER JOIN test.parts\nON odetails.pno = parts.pno\nGROUP BY employees.eno, employees.ename\n","952":"SELECT TB_USER.ID, TB_QUESTION.ID AS \"Q_ID\" FROM TB_USER, TB_QUESTION\nminus\nSELECT ID_USER, ID_QUESTION FROM tb_answer\n","953":"SELECT *\nFROM mytable\nWHERE left(Telephone,3) = '765'\n","954":"SELECT ID, CASE WHEN nvl(doc_after,'') <> '' THEN doc_after ELSE doc_before END AS doc\n, CASE WHEN nvl(doc_after) <> '' THEN 'doc_after' ELSE 'doc_before' END AS camefrom\nFROM yourtable\n","955":"insert into my_table\nselect\n   --<number of columns you want\n   -- use dbms_random if you would like> \nfrom\n   dba_objects a,\n   dba_objects b\nwhere\n   rownum<=20000;\n","956":"sql_query = \"<prefix>\"\nsql_query += \"?, \" * 69\nsql_query += \"?)<suffix>\"\n","957":"CREATE OR REPLACE FUNCTION f_x (p_id IN NUMBER) RETURN BOOLEAN IS\nBEGIN\n   RETURN TRUE;\nEND f_x;\n\nCREATE OR REPLACE PROCEDURE p_x (i_id IN NUMBER, o_val OUT BOOLEAN) IS\nBEGIN\n  o_val := f_x(i_id);\nEND p_x;\n","958":"select coalesce(t1.day, t2.day) \"day\",\n  coalesce(t1.acount, 0) acount,\n  coalesce(t2.bcount, 0) bcount\nfrom table1 t1\nfull outer join table2 t2\n  on t1.day = t2.day;\n","959":"SELECT [SIGNAL NAME], CAST(SAMPLETIME AS DATE) AS SAMPLEDATE, MAX(VALUE)-MIN(VALUE) As Diff_Value\nFROM Table1\nGROUP BY CAST(SAMPLETIME AS DATE),[SIGNAL NAME]\n","960":"  SELECT 42 AS [@tag],\n         (SELECT content AS [*]  FROM #test T FOR XML PATH(''), TYPE) AS [*]\n FOR XML PATH('root')\n","961":"select a.*,b.MedianWeight,c.MedianLength from (\n    SELECT speciesID, min(catchLength) MinLength, max(catchLength) MaxLength, avg(catchLength) AvegrageLength, isnull(STDEV(catchLength),0) StDevLength\n    , min(catchWeight) MinWeight, max(catchWeight) MaxWeight, avg(catchWeight) AvegrageWeight, isnull(STDEV(catchWeight),0) StDevWeight\n    from  #Catchestemp c\n    group by speciesID\n) a\njoin (\n    select speciesID, avg(catchWeight) MedianWeight from (\n        select speciesID,\n            catchWeight,\n            ROW_NUMBER() OVER (PARTITION BY speciesID ORDER BY catchWeight ASC, id ASC) AS RowAsc,\n            ROW_NUMBER() OVER (PARTITION BY speciesID ORDER BY catchWeight DESC, id DESC) AS RowDesc\n        from #Catchestemp\n    ) x\n    WHERE RowAsc IN (RowDesc, RowDesc - 1, RowDesc + 1)\n    group by speciesID\n) b on a.speciesID = b.speciesID\njoin (\n    select speciesID, avg(catchLength) MedianLength from (\n        select speciesID,\n            catchLength,\n            ROW_NUMBER() OVER (PARTITION BY speciesID ORDER BY catchLength ASC, id ASC) AS RowAsc,\n            ROW_NUMBER() OVER (PARTITION BY speciesID ORDER BY catchLength DESC, id DESC) AS RowDesc\n        from #Catchestemp\n    ) x\n    WHERE RowAsc IN (RowDesc, RowDesc - 1, RowDesc + 1)\n    group by speciesID\n) c on a.speciesID = c.speciesID\n","962":"SELECT column0, column2, table.column1, columncount\nFROM table \n    INNER JOIN (SELECT column1, COUNT(column1) columncount\n                FROM table\n                WHERE column1> 0\n                GROUP BY column1 HAVING COUNT(column1) > 1) t2 ON table.column1 = t2.column1\n","963":"SELECT  CustomerID\nFROM    Customers AS C\nWHERE   EXISTS ( SELECT 1 -- no need for a columns list since you only check for existance\n    FROM (SELECT TOP 12 DueDate, PaymentDate -- no need for all the columns, only the ones you use\n          FROM      Payments as P\n          WHERE     P.CustomerID = C.CustomerID\n          ORDER BY PaymentDate\n         ) AS First12Payments\n        WHERE  DATEDIFF(MONTH, First12Payments.DueDate, First12Payments.PaymentDate) > 3 \n","964":"--Declare UserId and CpyId\ndeclare @UserId int = 100001\ndeclare @CpyID int = 1;\n\n--Select all possible results and rank\nWITH subryUnion \nAS (\n\n--Select hits by CpyId, Rank 1\nSELECT *, \n    1 AS Ranking,\n    'Hit by CpyId' Descr\nFROM tbl_Entity_Column_Details\nWHERE CpyId = @CpyId\n\nUNION ALL\n\n--Select hits by User_Id, Rank 2\nSELECT *, \n    2 AS Ranking,\n    'Hit by User_Id' Descr\nFROM tbl_Entity_Column_Details\nWHERE User_Id = @UserId\n\nUNION ALL\n\n--Select no hits by CpyID or User_Id, Rank 3\nSELECT *,\n    3 AS Ranking,\n    'Not hit by CpyId or User_Id' Descr\nFROM tbl_Entity_Column_Details\nWHERE COALESCE(CpyId,User_Id) IS NULL\n\n)\n\nSELECT *\nFROM subryUnion\n--Show only the minimum ranked results\nWHERE Ranking = (SELECT MIN(Ranking) FROM subryUnion)\n","965":"select LTRIM(RTRIM(FIELD_ONE)) + LTRIM(RTRIM(FIELD_TWO)) + LTRIM(RTRIM(FIELD_THREE))\nFROM copyfrom\n","966":"convert(datetime,'24\/05\/2012 09:56:06',103)\n","967":"ORDER BY `products`.`product_category_id` DESC ,`naam` ASC\n","968":"GROUP BY GROUPING SETS ((o.VendorNo, LEFT(HVI.EncodeData, 3), pto.PrintBatch, pto.PickBit),\n                        (o.VendorNo, LEFT(HVI.EncodeData, 3)),\n                        (o.VendorNo)\n                       )\n","969":"SELECT *, GROUP_CONCAT(item_category) AS item_categories\nFROM (`dev_pages`)\nLEFT JOIN `dev_items_to_categories` ON `dev_items_to_categories`.`item_id` = `dev_pages`.`page_id` AND `item_category` =  '16'\nWHERE deleted_time IS NULL\nAND `page_type` =  'blog'\nGROUP BY dev_pages.page_id\nORDER BY `page_title` ASC\n","970":"select t1.vm_name, \n       t2.object_id as vm_id,\n       t1.host_name,\n       t3.object_id as host_id\nfrom table1 t1\n       join table2 t2 on t1.vm_name = t2.object_name\n       join table2 t3 on t1.host_name = t3.object_name\norder by t1.vm_name\n","971":"select departmentname,\n  [1] status1,\n  [2] status2,\n  [3] status3\nfrom\n(\n  select d.departmentname, e.empid, e.workstatus\n  from dbo.department d\n  left join dbo.employee e\n    on d.deptid = e.deptid\n) d\npivot\n(\n  count(empid)\n  for workstatus in ([1],[2],[3])\n) piv;\n","972":"select client_ID, status_id, from_date, to_date, \n       sum(start_of_group) over (order by client_ID, from_date) + 1 rank\n  from (SELECT c.client_ID, c.status_id, c.from_date, c.to_date,\n               case when lag(c.client_ID, 1, c.client_ID) over (order by c.client_ID, c.from_date) = c.client_ID \n                     and lag(c.status_id, 1, c.status_id) over (order by c.client_ID, c.from_date) = c.status_id\n                    then 0 else 1 end start_of_group\n          FROM client c)\n order by client_ID, from_date\n","973":"SQL> SET SERVEROUTPUT ON\nSQL> DECLARE\n  2    TYPE t_tab IS TABLE OF NUMBER;\n  3    l_tab1 t_tab := t_tab(1,1,3,3,5,5);\n  4  BEGIN\n  5    l_tab1 := l_tab1 MULTISET INTERSECT DISTINCT l_tab1;\n  6    FOR i IN l_tab1.first .. l_tab1.last\n  7    LOOP\n  8      DBMS_OUTPUT.put_line('Distinct values are '||l_tab1(i));\n  9    END LOOP;\n 10  END;\n 11  \/\nDistinct values are 1\nDistinct values are 3\nDistinct values are 5\n\nPL\/SQL procedure successfully completed.\n","974":"ALTER TRIGGER [ATrigger] ON [dbo].[A]\nFOR INSERT, UPDATE, DELETE\nAS\n   -- those are true INSERTs - the (ID) as primary key is *not* present in the \"Deleted\" table\n   INSERT INTO [dbo].[aAudit]([BusinessDate], [DataTypeId], [BookId], [Version], [DelFlag], [AuditDate], [ExtStatus])\n      SELECT [BusinessDate], [DataTypeId], [BookId], [Version], 'N', getDate(), 0\n      FROM inserted \n      WHERE (id) NOT IN (SELECT DISTINCT (id) FROM DELETED)\n\n   -- those are true DELETEs - the (ID) as primary key is *not* present in the \"Inserted\" table\n   INSERT INTO [dbo].[aAudit]([BusinessDate], [DataTypeId], [BookId], [Version], [DelFlag], [AuditDate], [ExtStatus])\n      SELECT [BusinessDate], [DataTypeId], [BookId], [Version], 'Y', getDate(), 0\n      FROM deleted\n      WHERE (id) NOT IN (SELECT DISTINCT (id) FROM INSERTED)\n\n   -- those are the UPDATEs - the (ID) as primary key is present in both the \"Inserted\" and \"Deleted\" table\n   INSERT INTO [dbo].[aAudit]([BusinessDate], [DataTypeId], [BookId], [Version], [DelFlag], [AuditDate], [ExtStatus])\n      SELECT [BusinessDate], [DataTypeId], [BookId], [Version], 'N', getDate(), 0\n      FROM Inserted i\n      INNER JOIN Deleted d on i.ID = d.ID\n","975":"SELECT username, loginstart, loginend, SUM(data1) as TotData1, SUM(data2) as TotData2, SUM(data3) as TotData3\nFROM YourTable\nGROUP BY username, loginstart, loginend\n","976":"SELECT o1.object_name, r1.object_name, o2.object_name\nFROM   edge e\nJOIN   object o1 ON o1.id = e.arg1\nJOIN   object  r ON  r.id = e.relation\nJOIN   object o2 ON o2.id = e.arg2;\n","977":"SQL> select regexp_replace('\u00e9a\u00e9ABcdEF', '([a-zA-Z])', '' ) problems from dual;\n\nPROBLEMS\n--------\n\u00e9\u00e9\n","978":"$mresult = mysql_query(\"\n  SELECT * FROM books \n  WHERE GoodName LIKE '%$title%' AND GroupCode IN (\" . implode(\",\", $array_of_cat) . \")\");\n","979":"Update  lm_Artikel A \n        INNER JOIN  lm_Schwellwert S \n            ON A.Typ = S.Typ  \nSET     A.Status = 'NOK'\nWHERE   A.Bestand < S.Schwellwert \n","980":"WITH CTE AS\n( \n   SELECT\n       ROW_NUMBER() OVER (PARTITION BY ID  ORDER BY Seq DESC) AS RN\n       , ID, Age\n   FROM \n       Persons\n)\nSELECT ID, Age \nFROM CTE\nWHERE RN = 1\n","981":"select id,b,c from tablename \ninner join\n(\nselect id, count(A) as CountDuplicates\nfrom TableName as base group by A,id having (count(A) > 1) \n)d on tablename.id= d.id\n","982":"SELECT [Origin], [Destination], \n       (ABS(SUM(CASE WHEN [DeliveryWeek] = 2 THEN 1 ELSE 0 END)-SUM(CASE WHEN [DeliveryWeek] = 1 THEN 1 ELSE 0 END)) +\n        ABS(SUM(CASE WHEN [DeliveryWeek] = 3 THEN 1 ELSE 0 END)-SUM(CASE WHEN [DeliveryWeek] = 2 THEN 1 ELSE 0 END)) +\n        ABS(SUM(CASE WHEN [DeliveryWeek] = 4 THEN 1 ELSE 0 END)-SUM(CASE WHEN [DeliveryWeek] = 3 THEN 1 ELSE 0 END))\n       ) \/ 3\n","983":"CREATE INDEX email_index ON emaildata(emailaddress) USING BTREE;\n","984":"SELECT *\nFROM\n(\n    SELECT  RIC.CarrierName,\n            L.LoadGuid,\n            RIC.RateIQCarrierid,\n            RIRD.Cost,\n            --Partition says look at each carrier as a group, then number them in order of cost lowest to highest.\n            ROW_NUMBER() OVER (PARTITION BY RIC.CarrierName ORDER BY Cost) rank_num\n    FROM tblLoads L \n    INNER JOIN  RateIQRecord RIR \n                ON L.LoadGuid = RIR.LoadGuId \n    INNER JOIN  RateIQCarrier RIC \n                ON RIR.RateIQRecordID = RIC.RateIQRecordID\n    INNER JOIN  RateIQRateDetail RIRD \n                ON RIC.RateIQRecordID = RIRD.RateIQRecordID\n\n                --Don't do it this way\n                --AND CAST(L.CreatedDate AS Datetime)  Between '03\/3\/2014' and '03\/3\/2014 23:59:59.997'\n\n                --Try this instead\n                AND CAST(L.CreatedDate AS DATE) = '03\/03\/2014'\n) A\n--Only grab the lowest number aka first of row number\nWHERE A.rank_num = 1\n","985":"create procedure dbo.test\n\nas\n\nbegin \n\ncreate table #temp (\nname varchar(100) ,\nid int\n)\n\ninsert #temp\nselect name ,\n       id \nfrom master..sysobjects\n\nupdate #temp\n\nset name='ALL Same'\n\nfrom #temp\n\nselect * from #temp\n\ndrop table #temp\n\nend\ngo\n","986":"Select Y.S - X.S As Sum from\n(select sum(qteMv) S from mouventDeStock where typemv=1 and codemv = 'ART_18') Y,\n(select sum(qteMv) S from mouventDeStock where typemv=0 and codemv = 'ART_18') X;\n","987":"select *\nfrom gpaTable\nwhere gpa in (\n  select distinct gpa\n  from gpaTable\n  order by gpa desc\n  limit 2\n)\n","988":"UPDATE contents c \nJOIN (\n  SELECT what, AVG(rating) rating, COUNT(rating) ratingsCount\n  FROM ratings WHERE what = ? GROUP BY what\n) r\n  ON c.id = r.what\nSET c.rating = r.rating, c.ratingsCount = r.ratingsCount\n","989":"SELECT p.p1, p.p2\nFROM Likes p\n    INNER JOIN Likes p2 ON \n        p.p1=p2.p2 AND \n        p.p2=p2.p1 AND \n        p.p1<p2.p1\n","990":"create table yourtable(RowID int, Layout varchar(200))\nINSERT yourtable VALUES (1,'hello,world,welcome,to,tsql')\nINSERT yourtable VALUES (2,'welcome,to,stackoverflow')\n\n\n;WITH SplitSting AS\n(\n    SELECT\n        RowID,LEFT(Layout,CHARINDEX(',',Layout)-1) AS Part\n            ,RIGHT(Layout,LEN(Layout)-CHARINDEX(',',Layout)) AS Remainder\n        FROM YourTable\n        WHERE Layout IS NOT NULL AND CHARINDEX(',',Layout)>0\n    UNION ALL\n    SELECT\n        RowID,LEFT(Remainder,CHARINDEX(',',Remainder)-1)\n            ,RIGHT(Remainder,LEN(Remainder)-CHARINDEX(',',Remainder))\n        FROM SplitSting\n        WHERE Remainder IS NOT NULL AND CHARINDEX(',',Remainder)>0\n    UNION ALL\n    SELECT\n        RowID,Remainder,null\n        FROM SplitSting\n        WHERE Remainder IS NOT NULL AND CHARINDEX(',',Remainder)=0\n)\nSELECT part FROM SplitSting ORDER BY RowID\n","991":"select date, \n       price,\n       @total := @total + price as total\nfrom (select date, price\n      from your_table\n      order by date) x\nCROSS JOIN (select @total := 0) r\n","992":"SELECT * FROM table WHERE 10 = ANY (values);\n","993":"INSERT INTO gender\n(sex, date) VALUES (\n'male are allowed \\\\ female are not allowed',\n\"2012-10-06\")\n","994":"select SrNo,Name, Amount , \ncase when ApplyTax = 'Yes' then Amount*0.20\nelse 0\nend as Tax\nfrom tablename  \n","995":"CREATE VIEW myOrderedTable\nAS\nSELECT ID, ClientID, Designation, Contact, Tag, Email\nFROM tableName;\n","996":"update table t join\n       (select s.*, @rn := @rn + 1 as FakeServerNumber, NumServers\n        from servers s cross join\n             (select count(*) as NumServers, @rn := -1\n              from servers\n              where isup = 'isup'\n             ) const\n        where s.isup = 'isup'\n       ) s \n       on t.primary_key % s.NumServer = s.rn\n    set t.server_id = s.server_id\n    where t.server_id is null;\n","997":"CREATE NONCLUSTERED INDEX <index name> ON _T_VENTAS_DIARIAS (A\u00f1o, Semana, Dia_Calendario);\n","998":"SELECT\n    XMLELEMENT (\"MAIN_TAG\", XMLAGG (XMLCONCAT (l_head_xml, l_pos_xml)))\n    INTO l_complete_xml\nFROM\n    (SELECT DUMMY FROM DUAL CONNECT BY LEVEL <= 2);\n","999":"data data;\ninput name1 $ c1 c2 c3;\ndatalines4;\na 1 2 3\na 1 2 3\nb 1 2 3\nb 1 2 3\n;;;;\nrun;\n\n%macro test(k=);\n  PROC SQL;\n   CREATE TABLE WORK.data1 AS \n   SELECT t1.name1 \n\n%do i=1 %to &k.;\n   , SUM(C&i.) AS C&i.\n%END;\n\n  FROM WORK.data t1\n  GROUP BY t1.name1;\nQUIT;\n\n%mend test;\n%test(k=3);\n","1000":"SELECT \n  c.month,\n  coalesce(a.mycount,0),\n  coalesce(b.totalPhones,0),\n  coalesce(b.newphones,0)\nFROM\n  (SELECT monthStart as month FROM TestGB\n   UNION\n   SELECT monthEnd as month FROM TestGB) c \nLEFT OUTER JOIN \n  (SELECT\n   monthStart as month,\n   count(distinct obild) as mycount,\n   from TestGB\n   group by monthStart) a on a.month = c.month\nLEFT OUTER JOIN \n  (SELECT\n   monthStart as month,\n   sum(newPhones) as newPhones,\n   sum(totalPhones) as totalPhones\n   from TestGB\n   group by monthEnd) b ON b.month = c.month\n","1001":"SELECT row1,\n       row2, \n       string_agg(row3, ',') as row3\nFROM your_table\nGROUP BY row1,\n         row2\n","1002":"UPDATE <table>\nSET PRICE = IIF([TYPE] IN (\"A1\",\"A3\", \"A4\"); [Price]*1,05; [Price]*1,065)\n","1003":"SELECT t1.number\nFROM t1\nINNER JOIN t2\nON t1.number = t2.number\n","1004":"SELECT ... FROM tickets t\nINNER JOIN ticket_text_fields f ON t.id=f.ticket_id\nWHERE f.textfield_id IN (7, 8, 9, ...)\nUNION ALL\nSELECT ... FROM tickets t\nINNER JOIN ticket_date_fields d ON t.id=d.ticket_id\nWHERE d.datafield_id IN (434, 435, 436, ...)\n","1005":"SELECT *\nFROM table1\nINNER JOIN table2 ...\nINNER JOIN table3 ...\nINNER JOIN table4 ...\nWHERE NOT ( ( table1.Value IS NULL) AND \n            ( table2.Value IS NULL) AND\n            ( table3.Value IS NULL) AND\n            ( table4.Value IS NULL)\n          )\n","1006":"with recursive tree (userid, siblingid) as\n(\n   select userid, \n          siblingid\n   from users\n   where userId = 1\n   union all \n   select c.userid,\n          c.siblingid\n   from users c\n     join tree p on p.userid c.siblingId\n)\nselect *\nfrom tree;\n","1007":"declare\n    v_columns varchar2(255);\n    v_select varchar2(2000);\n    v_result sys_refcursor;\nbegin\n\n    v_columns := 'rownum';\n\n    IF p_plant_cd = 1 THEN\n       v_columns := v_columns || ',p_plant_cd';\n    END IF;\n\n    IF p_global_duns_nbr = 1 THEN\n       v_columns := v_columns || ',p_global_duns_nbr';\n    END IF;\n\n    IF p_global_duns_nbr = 1 THEN\n       v_columns := v_columns || ',p_global_duns_nbr';\n    END IF;\n\n        IF p_matrl_grp = 1 THEN\n       v_columns := v_columns || ',p_matrl_grp';\n    END IF;\n\n    IF p_mrp = 1 THEN\n       v_columns := v_columns || ',p_mrp';\n    END IF; \n\n\n\n    v_select := 'SELECT ' || v_columns || ' FROM table';\n\n    open v_result for v_select;\n\n\n\n\nend;\n","1008":";WITH top_cte AS\n(\n  SELECT *, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Revenue DESC) AS [Rank]\n  FROM table\n)\nSELECT *\nFROM top_cte\nWHERE [Rank] <= 6\n","1009":"select \n   count(eo.equal_opps_id) as 'Age 40 - 49' \n  ,DateAdd(yy,-49,getDate()) as LesserDate\n  ,DateAdd(yy,-39,getDate()) as GreaterDate\nfrom \n  dbo.app_equal_opps eo, dbo.app_status s \nwhere \n  eo.date_of_birth > DateAdd(yy,-49,getDate()) \n  and eo.date_of_birth < DateAdd(yy,-39,getDate()) \n  and eo.application_id = s.status_id \n  and s.job_reference_number = '33211016' \n  and s.submitted = 1 \n","1010":"SELECT name \n  FROM sqlite_master\n WHERE type = 'table'\n   AND name LIKE '%your_table_name%'\n","1011":"SELECT [PostingID]\n      ,[EmployerID]\n      ,[JobTitle]                  \n      ,MIN(pin.[IndustryID])         \nFROM [Posting] p\nINNER JOIN [City] c\n  ON p.CityID = c.CityID\nLEFT OUTER JOIN PostingIndustry pin\n  ON p.PostingID = pin.PostingID\nWHERE (c.CityID = @CityId OR @CityId IS NULL) \n  AND (p.StateProvinceID = @StateProvinceId OR @StateProvinceId IS NULL) \n  AND (pin.IndustryID = @IndustryId OR @IndustryId IS NULL) \n  AND \n  (\n     (p.[Description] LIKE '%' + @Keyword + '%' OR @Keyword IS NULL) \n     OR (p.[JobTitle] LIKE '%' + @Keyword + '%'  OR @Keyword IS NULL)\n  ) \n  AND p.StreetAddress IS NOT NULL \n  AND p.ShowOnMap = 1\nGROUP BY [PostingID],[EmployerID],[JobTitle] \n","1012":"select p.firstname, p.lastname, \n   p.location, p.uid, \n   case when f.A is null then 1\n   else 2\n       end as type\nfrom profile as p\nleft join favorites as f\n on p.uid = f.B and f.A = 'myid'\nwhere p.firstname like 'mich%' or p.lastname like 'mich%'\n","1013":"select customers.ssn, certs.cert_num, certs.cert_start, certs.cert_finish\nfrom customers INNER JOIN\n     certs\n     ON certs.ssn = customers.ssn\ngroup by customers.ssn\nhaving sum(case when certs.cert_finish < Date_ADD(now(), INTERVAL 14 DAY) and \n                     certs.cert_finish > now()\n                then 1 else 0\n           end) > 0 and  -- has soon to expire certicate\n       sum(case when certs.cert_finish > Date_ADD(now(), INTERVAL 14 DAY)\n                then 1 else 0\n           end) = 0      -- has no certificate that will expire later\n","1014":" SELECT \n    di.DocName as DocumentName, \n    di.Uploadfile as FileUploaded, \n    d.DepType as Department, \n    di.UploadedBy as UploadedBy, \n    at.ApproveType as Status,\n    u.Email as UserEmail\nFROM dbo.DocumentInfo di \n       INNER JOIN dbo.Approval a \n       ON di.DocID = a.DocID \n       INNER JOIN dbo.ApproveType at\n       ON a.ApproveID =  at.ApproveID \n       INNER JOIN dbo.Userss u\n       ON u.UserId = di.UserId \n       INNER JOIN dbo.Department d \n       ON di.DepID = d.DepID\n       INNER JOIN dbo.DocType  dct\n       ON di.DocTypeID = dct.DocTypeID\nwhere di.DepID= @DepID\n","1015":"Use [MyDatabase]\nGO\n","1016":"UPDATE PEOPLE\n  SET ID_STATE = 5\nWHERE ID_STATE IN (SELECT ID_STATE FROM STATE_PEOPLE\n                   WHERE labelStatePeople = 'strange'\n                    and ID_STATE IS NOT NULL)\n","1017":"SELECT STUDENT_ID, BOOK_TITLE, TERM\n  FROM ASSIGNMENTS\n  WHERE STUDENT_ID IN\n   (SELECT DISTINCT STUDENT_ID FROM ASSIGNMENTS WHERE TERM = 2012)\n  ORDER BY STUDENT_ID, TERM DESC\n","1018":"DECLARE @ParentID INT = 1\n\nDECLARE @Widgets AS XML = \nN'<Widgets>\n    <Widget>\n        <WidgetID \/>\n        <StartDate \/>\n        <EndDate \/>\n        <Details>\n            <WidgetDetailItem>\n                <WidgetDetailItemID><\/WidgetDetailItemID>\n                <WidgetID\/>\n                <SomeID>4<\/SomeID>             \n                <SomeData\/>\n            <\/WidgetDetailItem>\n            <WidgetDetailItem>\n                <WidgetDetailItemID><\/WidgetDetailItemID>\n                <WidgetID\/>\n                <SomeID>323<\/SomeID>             \n                <SomeData\/>\n            <\/WidgetDetailItem>\n            <WidgetDetailItem>\n                <WidgetDetailItemID><\/WidgetDetailItemID>\n                <WidgetID\/>\n                <SomeID>1<\/SomeID>            \n                <SomeData\/>\n            <\/WidgetDetailItem>\n        <\/Details>\n    <\/Widget>\n    <Widget>\n        <WidgetID>10<\/WidgetID>\n        <StartDate>January 1, 2015<\/StartDate>\n        <EndDate \/>\n        <Details>\n            <WidgetDetailItem>\n                <WidgetDetailItemID><\/WidgetDetailItemID>\n                <WidgetID\/>\n                <SomeID>4<\/SomeID>         \n                <SomeData\/>\n            <\/WidgetDetailItem>\n            <WidgetDetailItem>\n                <WidgetDetailItemID><\/WidgetDetailItemID>\n                <WidgetID\/>\n                <SomeID>99<\/SomeID>         \n                <SomeData\/>\n            <\/WidgetDetailItem>\n            <WidgetDetailItem>\n                <WidgetDetailItemID><\/WidgetDetailItemID>\n                <WidgetID\/>\n                <SomeID>6<\/SomeID>            \n                <SomeData\/>\n            <\/WidgetDetailItem>\n        <\/Details>\n    <\/Widget>\n<\/Widgets>';\n\n--Used to hold the pseudoID -> WidgetID relationship for inserting the details\nDECLARE @WidgetIds AS TABLE ([Action] varchar(10), PseudoID INT, WidgetID INT);\n\n; \n--Use a CTE of the subset of data to be more performant. If we just went straight to the \n--merge we'd be operating on the entire table and that can have some major performance hits\nWITH T AS (\n              SELECT \n                     w.* \n              FROM\n                     [dbo].[Widget] as w \n              WHERE\n                     w.[ParentID] = @ParentID\n)\nMERGE INTO T \nUSING (\n        SELECT\n            --Generate a pseudoid based on the order of the Widget elements so that we have some way of \n            --linking the detail records to the master\n            row_number() OVER(ORDER BY PROPERTYFEED.P) PseudoID,\n            'WidgetID' = P.value('WidgetID[1]', 'INT'),\n            'ParentID' = @ParentID,\n            'StartDate' = P.value('StartDate[1]', 'DATETIME'),\n            'EndDate' = P.value('EndDate[1]', 'DATETIME')\n        FROM\n            @Widgets.nodes('\/Widgets\/Widget') PROPERTYFEED(P)\n    ) \n    AS xmlIn\n    (\n           [PseudoID],\n        [WidgetID],\n        [ParentID],\n        [StartDate],\n        [EndDate]\n    )\n    ON\n        T.[WidgetID] = xmlIn.[WidgetID]\n    WHEN\n        NOT MATCHED\n    THEN\n        INSERT \n        (\n            [ParentID],\n            [StartDate],\n            [EndDate]\n        ) \n        VALUES\n        (\n            xmlIn.[ParentID],\n            xmlIn.[StartDate],\n            xmlIn.[EndDate]\n        )\n    WHEN\n        MATCHED AND (\n            (T.[StartDate] <> xmlIn.[StartDate]) OR \n            (T.[EndDate] <> xmlIn.[EndDate]))\n    THEN\n        UPDATE SET\n            T.[StartDate] = xmlIn.[StartDate],\n            T.[EndDate] = xmlIn.[EndDate]\n    WHEN\n        NOT MATCHED BY SOURCE AND T.[DeletedDate] IS NULL \n    THEN\n        UPDATE SET\n            T.[DeletedDate] = GETDATE()         \nOUTPUT  $action, xmlIn.PseudoID, INSERTED.WidgetID INTO @WidgetIds\n\n;\n\n--This is some magic to generate a temp table of numbers from 1 to COUNT(Widget)\n--This is so we can reference the parent Widget row in the same order as the pseudoid generated above\n--http:\/\/stackoverflow.com\/a\/1134379\/4375845\n;WITH Total(TotalWidgets) AS (SELECT COUNT(1) TotalWidgets FROM @Widgets.nodes('\/Widgets\/Widget') PROPERTYFEED(P))\n       , Numbers(Num) as (\n              SELECT 1 AS Num\n              UNION ALL \n              SELECT Num+1 \n              FROM Numbers\n              JOIN Total t ON 1 = 1\n              WHERE Num < t.TotalWidgets )\nINSERT INTO WidgetDetailItem (WidgetID,SomeID,SomeData)\nSELECT \n       w.WidgetID\n       ,Details.SomeID\n       ,Details.SomeData\nFROM \n    (SELECT \n        P.value('WidgetDetailItemID[1]','int')  WidgetDetailItemID           \n        , P.value('SomeID[1]','int') SomeID\n        , P.value('SomeData[1]','varchar(5)') SomeData\n        , n.Num AS PsuedoID\n    FROM Numbers n\n    --This is what gives us our pseudo ID to link to the row_number() function from the first merge statement\n    CROSS APPLY @Widgets.nodes('\/Widgets\/Widget[sql:column(\"n.Num\")]\/Details\/WidgetDetailItem') AS M(P)\n    ) Details\nJOIN @WidgetIds w on Details.PsuedoID = w.PseudoID\nWHERE w.Action = 'INSERT' --We only want inserts by your spec\n\nSELECT * FROM Widget;\nSELECT * FROM WidgetDetailItem;\n","1019":"    SELECT i.investment_type as investmentType,COUNT(*) as investmentCount FROM investment i,vertical v \n    WHERE v.vertical_name  =i.investment_type AND v.type='STR' AND i.status_funding ='o' \n    group by i.investment_type order by investmentCount desc\n    limit 6\nUNION\n    SELECT \"others\" as investmentType, SUM(othersInvestmentCount) as investmentCount FROM (\n        SELECT COUNT(*) as othersInvestmentCount FROM investment i,vertical v \n        WHERE v.vertical_name  =i.investment_type AND v.type='STR' AND i.status_funding ='o' \n        group by i.investment_type order by investmentCount desc\n        limit 6, 4294967296\n    )\n","1020":"SELECT name,\nCase WHEN Table1.tag = 'Y'\n then CODES.Desc\n ELSE 'Other String'\n END as description\nFROM TABLE1\njoin CODES on TABLE1.code = CODES.code\n","1021":"UPDATE library\nSET key = key + 1\nWHERE value = 'e_book';\n","1022":"SELECT m.MapName, SEC_TO_TIME(TRUNCATE(t.Time,3)) AS Time, t.PlayerID, u.name\nFROM times t INNER JOIN\n     maps m\n     ON t.MapID = m.MapID INNER JOIN\n     (SELECT t.MapId, MIN(t.time) as time\n      FROM times t\n      GROUP BY t.MapId\n     ) tmin\n     ON tmin.MapId = t.MapId and tmin.time = t.time INNER JOIN\n     Users u\n     ON t.PlayerId = u.PlayerId\n","1023":"Article\n-------\nArticleID int PK\n\nArticle_Tags\n------------\nArticleTagID int PK\nArticleID int FK\nTagId int FK\n\nTag\n---\nTagId int identity(1,1) PK\nTagText varchar(50)\n","1024":"SELECT RPAD(numcol::text, 3, '0'), -- Zero-pads to the right up to the length of 3\n       LPAD(numcol::text, 3, '0'), -- Zero-pads to the left up to the length of 3\nFROM   my_table\n","1025":"<img src=\"\/content\/u\/10234\/abcde.img\" width=\"300\" height=\"200\">\n","1026":"SELECT *\nFROM ticket\nWHERE hour(time) >= 18;\n","1027":"UPDATE tableB SET\n   PRIMARYKEYCOLUMN = tableA.PRIMARYKEYCOLUMN\nFROM tableA\nWHERE\n   tableA.OLDPRIMARYKEYCOLUMN = tableB.PRIMARYKEYCOLUMN\n","1028":"Create TRIGGER [dbo].[DeleteUser]\n\nON dbo.ParentTable\n\nINSTEAD OF DELETE\n\nAS \n\nBEGIN\n\n    SET NOCOUNT ON;\n\n declare @Search varchar(200)\n\n select @Search=d.Id from deleted as d   \n\nDeclare @tablevar table(Id  nvarchar(200),ColName  nvarchar(200))\n\n--FindStringAndReturnCols return the name of columns And Id's of rows that have value\n\ninsert into @tablevar(Id,ColName) exec FindStringAndReturnCols @Search\n\ndeclare @Id nvarchar(200), @ColName nvarchar(200),@SqlQuery as nvarchar(max)\n\nDeclare c Cursor For Select Id,ColName From @tablevar\n\nOpen c\n\nFetch  c into @Id,@ColName\n\n\nWhile @@Fetch_Status=0\n\n Begin\n\n set  @SqlQuery=''\n\n set @SqlQuery= 'update ChildTable set '+ @ColName +' = null where Id like N''%'+@Id+'%'''\n\n   exec (@SqlQuery)\n\n   Fetch  c into @Id,@ColName\nEnd\n\ndelete from Parent where Id=@Search\n\nClose c\n\nDeallocate c\n\nEND\n","1029":"SELECT section, question, answer, COUNT(*) AS count\nFROM table \nWHERE academicYear = ??? AND testNo = ???\nGROUP BY section, question, answer\n","1030":"SELECT \n      USERNAME\n    , DATE_CREATED \nFROM \n(\n  SELECT \n       USERNAME\n    ,  DATE_CREATED\n    ,  COUNT( *) over ( PARTITION by USERNAME, TRUNC( DATE_CREATED, 'DD') ) cnt\n  FROM THE_TABLE\n)\nWHERE cnt > 1\n;\n","1031":"SELECT SUM(bytes) AS total_bytes, stamp_updated \nFROM acct \nWHERE stamp_updated BETWEEN datetime('now', 'localtime','-7 hours') AND datetime('now', 'localtime') \nGROUP BY ip_src \nORDER BY total_bytes DESC limit 10;\n","1032":"Property\n-------------------\nProperty ID\nOwner ID\nLocation (unknown? Beach?)\nAddress\nWeekly Rate\nProperty Type\nNo of Rooms\nKitchen (Yay, Nay)\n\n\n\nOwner\n-------------------\nOwner ID\nAddress\n","1033":"SELECT\n    Worker.Name,\n    BoxSize.Name,\n    SUM(CASE WHEN BoxColor.id=0 THEN 1 ELSE 0 END) AS BoxColor_0,\n    SUM(CASE WHEN BoxColor.id=1 THEN 1 ELSE 0 END) AS BoxColor_1,\n    SUM(CASE WHEN BoxColor.id=2 THEN 1 ELSE 0 END) AS BoxColor_2    \nFROM\n    Worker\n    JOIN Box\n        ON Worker.ID=Box.ID_Worker\n    JOIN Item\n        ON Item.ID_box=Box.ID\n    JOIN BoxColor\n        ON BoxColor.ID=Item.ID_BoxColor\n    JOIN BoxSize\n        ON BoxSize.ID=Item.ID_BoxSize\nGROUP BY\n    Worker.Name,\n    BoxSize.Name\n","1034":"with linkT (parent_code, child_code) as \n(select 'A1','B1' from dual union all\n select 'A1','B2' from dual union all\n select 'B1','C1' from dual union all\n select 'B1','C2' from dual union all\n select 'B2','C3' from dual union all\n select 'B3','C3' from dual union all\n select 'C3','D1' from dual union all\n select 'E1','F1' from dual ),\nT1 as (\nselect parent_code, child_code, 0 Dir from linkT\nunion all \nselect child_code, parent_code, 1 Dir from linkT )\nselect distinct \n       decode(dir, 0, parent_code, child_code) as Parent_code,\n       decode(dir, 0, child_code, parent_code) as Child_Code\nfrom (\nselect parent_code, child_code, dir\nfrom T1 x\nstart with x.child_code='A1'\nconnect by nocycle prior x.parent_code=x.child_code ) \norder by 1,2  \n","1035":"SELECT regions.region, projectTypes.projectType,\n       (SELECT count(*) FROM projects\n        WHERE projects.typeID = projectTypes.id\n          AND projects.regionID = regions.id) as totalCount\nFROM regions, projectTypes\n","1036":"UPDATE p\n    SET column1 = t.column1\nfrom <dbname>.<schema>.mytable p\njoin <TestLinkedServerName>.<dbname>.<schema>.mytable t\n    on p.<id> = t.<id>\n","1037":";with cte as\n(select \n ColA,\n ColB, \n case when ColA < ColB then ColA else ColB end as ColC, \n case when ColA > ColB then ColA else ColB end as ColD\nfrom yourtable)\nselect \nColC as ColA,\nColD as ColB,\ncount(1) as Count\nfrom cte\ngroup by ColC, ColD\norder by ColC, ColD\n","1038":"BEGIN TRANSACTION;\nINSERT INTO Persons(Name) VALUES(...);\n\nINSERT INTO PhoneNumbers(PersonForeignKey, Number) \nVALUES(last_insert_rowid(), 'number 1');\n\nINSERT INTO PhoneNumbers(PersonForeignKey, Number) \nSELECT PersonForeignKey, 'number 2' \nFROM PhoneNumbers where PhonePrimaryKey = last_insert_rowid();\n\nINSERT INTO PhoneNumbers(PersonForeignKey, Number) \nSELECT PersonForeignKey, 'number 3' \nFROM PhoneNumbers where PhonePrimaryKey = last_insert_rowid();\n\nEND TRANSACTION;\n","1039":"where find_in_set(id, ?)\n","1040":"Update Products \nSet ProductName = 'Shoes' \nWHERE ProductID IN (1,2,3,4,5,6,7,8) \n","1041":"INSERT INTO SERVICEPAYANT \n            (TYPE_FLUX, \n             DELAI) \nSELECT 161, \n       '9999' \nFROM   dual  \nWHERE  NOT EXISTS (SELECT 1 \n                   FROM   SERVICEPAYANT \n                   WHERE  TYPE_FLUX = 161 \n                          AND DELAI = '9999') \n","1042":"select user_name, status, sum(calls) as calls\nfrom table\nwhere status in ('cars', 'bikes', 'skates')\ngroup by user_name, status\n","1043":"SELECT  a.*,b.*,z.*\nFROM    tbl_event a\n        left JOIN (SELECT type_person FROM tbl_event WHERE id_animal = 1) as b\n            ON a.type_person = b.type_person\n        left JOIN tbl_animal z\n            ON   z.id_animal = a.id_animal \n        WHERE z.id_animal = 1;\n","1044":"select count(*)\nfrom\n(\n    select CustomerId\n    from Retail\n    where Itemset in (30,31)\n    group by CustomerId\n    having count(distinct Itemset) = 2   -- this guarantees that CustomerId have at least one 30 and at least one 31 in column Itemset \n) T\n","1045":"CREATE TABLE Customer\n (\n   CustomerId     int  not null identity(1,1)\n    constraint PK_Customer\n     primary key clustered\n   ,(...)\n )\n\nCREATE TABLE UserAccount\n (\n   UserAccountId  int  not null\n    constraint PK_UserAccount\n     primary key clustered\n    constraint FK_UserAccount__Customer\n     foreign key references Customer (CustomerId)\n   ,(...)\n )\n","1046":"SELECT DATE_FORMAT(myDateColumn, '%Y-%m'), COUNT(*)\nFROM myTable\nGROUP BY DATE_FORMAT(myDateColumn, '%Y-%m')\nORDER BY 1\n","1047":"SELECT  distinct *\nFROM    jobs\nSTART   WITH ( city, title ) IN \n     ( SELECT city, title\n       FROM   people\n       WHERE  name IN ( 'Bill', 'Jim', 'Jane' )\n     )\nCONNECT BY PRIOR parent_title = title;\n","1048":"select location, sum(qty) as total\nfrom (select case when Location in ('Location A','Location B') then Location\n             else 'Container' end as location,\n             qty from tablename)\ngroup by location\n","1049":"select t.*\nfrom table t\nwhere (t.id - t.seq) = (select t2.id - t2.seq\n                        from table t2\n                        where t2.type = 'C' and\n                              t2.acct = '2345' and\n                              t2.date = '6\/5\/2014'\n                       ) and\n      t.type is null;\n","1050":"SELECT\n    d.id,\n    d.district_name,\n    (SELECT COUNT(b.id) FROM blocks b WHERE b.district_id = d.id) total_block,\n    (SELECT COUNT(p.id) FROM panchayats p WHERE p.district_id = d.id) gp_total,\n    (SELECT COUNT(v.id) FROM villages v WHERE v.district_id = d.id) vi_total,\n    (SELECT COUNT(h.id) FROM habitations h WHERE h.district_id = d.id) h_total\nFROM districts d\n","1051":"select p.propertynum, p.branchnum, p.area, p.city, p.postcode, p.prop_type, p.rooms,\n       b.area, b.city, coalesce(i.NumInspected, 0)\nfrom yr_property p join\n     yr_branch b\n     on p.branchnum = b.branchnum left outer join\n     (select propertynum, count(*) as NumInspected\n      from yr_inspection i\n      group by propertynum\n     ) i\n     on i.propertynum = p.propertynum;\n","1052":"select count(1) from teams where UserId = 100\n","1053":"DECLARE @theDate varchar(60)\nSET @theDate = '''2010-01-01'' AND ''2010-08-31 23:59:59'''\n\nDECLARE @SQL VARCHAR(MAX)  \nSET @SQL = 'SELECT AdministratorCode, \n                   SUM(Total) as theTotal, \n                   SUM(WOD.Quantity) as theQty, \n                   AVG(Total) as avgTotal, \n                  (SELECT SUM(tblWOD.Amount)\n                     FROM tblWOD\n                     JOIN tblWO on tblWOD.OrderID = tblWO.ID\n                    WHERE tblWO.Approved = ''1''\n                      AND tblWO.AdministratorCode = tblWO.AdministratorCode\n                      AND tblWO.OrderDate BETWEEN '+ @theDate +')'\n\nEXEC(@SQL)\n","1054":"SQLiteDatabase db;\n\/\/ initialize the db\nSQLiteStatement statement = null;\ntry {\n    db.compileStatement(\"select max(_id) from table\");\n    int max = statement.simpleQueryForLong();\n} catch (SQLException e) {\n    \/\/ handle\n} finally {\n    if (statement != null) {\n        statement.close();\n    }\n}\n","1055":"SELECT ID_PROJECT FROM PROJECTS p1 WHERE (select balance from ...) > 0;\n","1056":"SELECT m.memo, \n    (SELECT TOP 1 x.id\n     FROM checking x\n     WHERE x.memo = m.memo\n     ORDER BY x.id) as ID\nFROM checking m\nGROUP BY m.memo\n","1057":"schedule    day\n 1           1\n 1           3\n 1           7\n","1058":"SELECT MAX(field) FROM table WHERE field < (SELECT MAX(field) FROM table)\n","1059":"SELECT mc.CampaignId, c.CampaignTitle\nFROM MallCampaign mc \nwhere mallid in (SELECT FavoriteItemId AS FavoriteMalls\n                 FROM Favorite\n                 WHERE UserId = @UserId AND FavoriteItemType=1\n                ) and\n      brandId in (SELECT FavoriteItemId AS FavoriteBrands\n                  FROM Favorite\n                  WHERE UserId = @UserId AND FavoriteItemType=3\n                 ) and\n      sectorid in (SELECT FavoriteItemId AS FavoriteSectors\n                   FROM Favorite\n                   WHERE UserId = @UserId AND FavoriteItemType=2 \n                  )\n","1060":"SELECT Col, COUNT(*) AS TOT\nFROM (\n    SELECT ColumnA AS Col FROM table\n    UNION ALL\n    SELECT ColumnB FROM table\n    UNION ALL\n    SELECT ColumnC FROM table\n) AS A\nGROUP BY Col\n","1061":"SELECT ... From ... WHERE date > add_months(sysdate, -6)\n","1062":"INSERT INTO new_tbl\nSELECT * FROM old_tbl;\n","1063":"SELECT p.id as productid, p.some_column1, p.some_column2,\n       pp.id  as ProductPropertiesId, pp.name\nFROM `Products` p JOIN `ProductProperties` pp\n    ON p.id = pp.product_id\n","1064":"IF OBJECT_ID('tmpEmployees_Test', 'U') IS NOT NULL DROP TABLE tmpEmployees_Test;\nCREATE TABLE tmpEmployees_Test (EmployeeID INT, EmployeeName VARCHAR(255));\nINSERT tmpEmployees_Test (EmployeeID, EmployeeName)\nVALUES (1, 'Doe, Jane'), (2, 'Doe, John'), (3, 'Guy, Some');\n\n\nIF OBJECT_ID('tmpOrders_Test', 'U') IS NOT NULL DROP TABLE tmpOrders_Test;\nCREATE TABLE tmpOrders_Test (EmployeeID INT, Customer VARCHAR(255), Date DATE, OrderType VARCHAR(255));\nINSERT tmpOrders_Test (EmployeeID, Customer, Date, OrderType)\nVALUES (1, 'Fake Customer', '2016-05-14', 'New')\n        , (2, 'Some Company', '2016-05-13', 'Change')\n        , (3, 'Stuff Inc.', '2016-05-14', 'New')\n        , (3, 'Cool Things', '2016-05-12', 'Change')\n        , (3, 'Amazing Things', '2016-05-12', 'Change');\n\n\nDECLARE @columns NVARCHAR(MAX), @sql NVARCHAR(MAX);\nSET @columns = N'';\nSELECT @columns += N', p.' + QUOTENAME(Name) \n  FROM (SELECT distinct CONVERT(nvarchar(30) , p.Date , 101) as Name FROM dbo.tmpOrders_Test AS p where [Date] > GETDATE()-7\n  ) AS x;\n-- Kept it for formatting Purpose\nDECLARE @columns1 NVARCHAR(MAX)\nSET @columns1 = N'';\nSELECT @columns1 += N', ISNULL(p.' + QUOTENAME(Name) + ',''\/'') AS ' + QUOTENAME(Name) \n  FROM (SELECT distinct CONVERT(nvarchar(30) , p.Date , 101) as Name FROM dbo.tmpOrders_Test AS p where [Date] > GETDATE()-7\n  ) AS x;\n\n\nSET @sql = N'\nSELECT EmployeeName, Count(*) as Total  ' +  @columns1  + '\nFROM\n(\n    SELECT  EmployeeID, EmployeeName' + ''+ @columns1 + '' + '\n    FROM\n    (\n      SELECT    o.employeeID,EmployeeName, CAST(COUNT(case WHEN OrderType = ''New'' then 1  end) as varchar(5)) + ''\/'' + \n                CAST(COUNT(case WHEN OrderType = ''Change'' then 1  end) as varchar(5)) as OrderType, CONVERT(nvarchar(30) , p.Date , 101) as Date\n       FROM     dbo.tmpOrders_Test AS p\n                    INNER JOIN dbo.tmpEmployees_Test AS o\n                     ON p.EmployeeID = o.EmployeeID\n       GROUP BY EmployeeName, Date, o.employeeID\n    ) AS j\n    PIVOT\n    (\n      Max(OrderType) FOR Date IN ('\n      + STUFF(REPLACE(@columns, ', p.[', ',['), 1, 1, '')\n      + ')\n    ) AS p) as p JOIN tmpOrders_Test as m on p.employeeID = m.employeeID\nwhere [Date] > GETDATE()-7\nGROUP BY EmployeeName ' + @columns + '\n';\n\nPRINT @sql;\nEXEC sp_executesql @sql;\n","1065":"UPDATE playerRegSeason s\nINNER JOIN players p ON s.playerID = p.playerID\nSET s.NewPlayerID =  p.NewPlayerID\n","1066":"         (SELECT * \n          FROM information_schema.COLUMNS \n          WHERE \n              TABLE_SCHEMA = 'dashboard'\n-----------------------------^ --------^\n          AND TABLE_NAME = '\".$this->table_name.\"'\n---------------------------^ --------------------^\n          AND COLUMN_NAME = 'timestamp')\n----------------------------^ --------^\n","1067":"SELECT * FROM Claims AS c\nWHERE EXISTS (\n    SELECT * FROM Edits AS e1\n    WHERE c.ClaimID = e1.ClaimID \n    AND e1.RuleId=205)\nAND NOT EXISTS (\n    SELECT * FROM Edits AS e2\n    WHERE c.ClaimID = e2.ClaimID\n    AND e2.RuleId=913)\n","1068":"SELECT  *\nFROM    mytable m\nWHERE   (ts, id) <\n        (\n        SELECT  ts, id\n        FROM    mytable mi\n        WHERE   mi.id = :myid\n        )\nORDER BY\n        ts DESC, id DESC\nLIMIT 50\n","1069":"SELECT e.id, e.name, e.description,\n       (SELECT count(*)  FROM day d WHERE d.event_id = e.id) AS days \nFROM event e;\n","1070":" create or replace view DeptInfo as\n SELECT q1.dnumber, \n        q1.dname, \n        q1.AvgSal,\n        q2.MaxSal,\n        q3.MinSal\n FROM (SELECT dnumber, dname, AVG(salary) as AvgSal \n       FROM department, employee\n       GROUP BY dnumber, dname) q1, \n      (SELECT dnumber, dname, MAX(salary) as MaxSal \n       FROM department, employee\n       GROUP BY dnumber, dname) q2, \n      (SELECT dnumber, dname, MIN(salary) as MinSal \n       FROM department, employee\n       GROUP BY dnumber, dname) q3\n WHERE q1.dnumber = q2.dnumber AND\n       q2.dnumber = q3.dnumber AND\n       q1.dname = q2.dname AND\n       q2.dname = q3.name\n","1071":"WITH CTE AS (CARD, PRIORITY, SALE_CD, ROW_NUM)\nAS\n(\n  SELECT CARD\n         , PRIORITY\n         , SALE_CD\n         , ROW_NUMBER() OVER(PARTITION BY SALE_CD ORDER BY PRIORITY ASC) AS ROW_NUM\n  FROM PAYMENT\n)\n\nSELECT\n    main_data.id,\n    main_data.dt,\n    main_data.seq_num,\n    main_data.sale_amt,\n    main_data.sale_cd,\n    promo.promo_cd,\n    CTE.card,\n    CTE.priority\nFROM\n    main_data\nINNER JOIN promo\n    ON promo.id = main_data.id\n    AND main_data.dt >= promo.start_dt\n    AND main_data.dt <= promo_end_dt\nINNER JOIN CTE CTE\n    ON CTE.sale_cd = main_data.sale_cd\n    AND CTE.card = main_data.card\nWHERE \n    main_data.dt BETWEEN '2013-10-12' AND '2013-10-12'\n    AND CTE.ROW_NUM = '1'\n","1072":"select   DISTINCT E_reg.applicant_id,\n             E_REG.L_NAME, \n             E_REG.F_NAME, \n             E_REG.B_DATE,\n            E_REG.REG_DATE,\n from    E_REG join\n         TRANSACTION\n         on E_REG.ID=TRANSACTION.PAR_ID\n  where TRANSACTION.BEGIN_DATE BETWEEN to_date ('01-APR-2012')AND to_date('30-JUN-               2012')\nand  (e_reg.applicant_id NOT IN\n              (select applicant_id\n                   from w_reg\n                  where reg_date <'01-JUL-2012' \n                   and exit_date is NULL or exit_date >='01-APR-2012'\nor  e_reg.applicant_id NOT IN\n              (select applicant_id\n                   from t_reg\n                  where reg_date <'01-JUL-2012' \n                   and exit_date is NULL or exit_date>='01-APR-2012')\nor  e_reg.applicant_id NOT IN\n              (select applicant_id\n                   from r_reg\n                  where reg_date <'01-JUL-2012' \n                     and o_attend IS NOT NULL\n                   and term_date is NULL or term_date >='01-APR-2012')\n   )\n","1073":"SELECT\n    A.*,\n    B.*,\n    C.*,\n    D.*,\n    GET_E(A.\"PK\"),\n    GET_F(A.\"PK\"),\n    GET_G(A.\"PK\")\nFROM\n    A\nLEFT OUTER JOIN B ON\n    A.\"PK\" = B.\"FK\"\nLEFT OUTER JOIN C ON\n    A.\"PK\" = C.\"FK\"\nLEFT OUTER JOIN D ON\n    A.\"FK\" = D.\"PK\"\nWHERE A.PK = ####\n","1074":"protected HqlTreeNode VisitNhMax(NhMaxExpression expression)\n{\n    return _hqlTreeBuilder.Cast(\n        _hqlTreeBuilder.Max(\n            VisitExpression(expression.Expression).AsExpression()), \n            expression.Type);\n}\n","1075":"while($row = mysqli_fetch_array($result))\n{\n echo '<tr><td><a href=\"'.$row['link'].'\">'.$row['Title'].'<\/a><\/td><\/tr>';\n}\n","1076":"    INSERT INTO [GT_INVESTMENT] \n    ([ID],[SEQN],[OrgSQENNo], OrgPaymentDate, InvestAmnt, InvestmentDate)\n\n\n    SELECT [ID],@NEW_SEQN , CASE [OrgSQENNo] WHEN 0 THEN @SEQN ELSE [OrgSQENNo] END , OrgPaymentDate, (InvestAmnt+TotalInterest), MatDate\n    FROM [GT_INVESTMENT]\n    WHERE SEQN = @SEQN\n","1077":"sudo gem install ibm_db <<heredoc\n  1\nheredoc\n","1078":"SELECT OrderID\nFROM dbo.FooTable\nORDER BY CAST(OrderID AS VARCHAR(255)) \n","1079":"Select empSal from Emp_Master where empID = '&1';    -- not &2\nexit\n","1080":"select * \nfrom orders\nwhere extract(month from order_date) in (3,4,5);\n","1081":"\nOFFSET { integer_constant | offset_row_count_expression } { ROW | ROWS }\n[\n  FETCH { FIRST | NEXT } {integer_constant | fetch_row_count_expression } { ROW | ROWS } ONLY\n]\n","1082":"UPDATE categories \nSET categories_image = 'bearings.jpg' \nWHERE categories_id IN (\n  SELECT categories_id \n  FROM categories_description \n  WHERE categories_name = 'Bearings'\n)\n","1083":"create or replace function random_str(v_length number) return varchar2 is\n    my_str varchar2(4000);\nbegin\n    for i in 1..v_length loop\n        my_str := my_str || dbms_random.string(\n            case when dbms_random.value(0, 1) < 0.5 then 'l' else 'x' end, 1);\n    end loop;\n    return my_str;\nend;\n\/\n\nselect random_str(30) from dual;\n\nRANDOM_STR(30)\n--------------------------------------------------------------------------------\npAAHjlh49oZ2xuRqVatd0m1Pv8XuGs\n","1084":"WITH RECURSIVE months(m) AS (\n  SELECT strftime('%Y-%m', 'now')\n  UNION ALL\n  SELECT strftime('%Y-%m', m || '-01', '-1 month')\n  FROM months\n  LIMIT 5\n)\nSELECT m FROM months;\n","1085":"Public Sub MIAB1290()\n\n    Dim lastB&, k&, e, f, z, v, w, vErr, r As Range\n\n    With [a2]\n        Set r = .Resize(.Item(.Parent.Rows.Count - .Row + 1, 5).End(xlUp).Row - .Row + 1, .Item(, .Parent.Columns.Count - .Column + 1).End(xlToLeft).Column - .Column + 1)\n        lastB = .Item(.Parent.Rows.Count - .Row + 1, 2).End(xlUp).Row - .Row + 1\n    End With\n\n    With r\n        .Worksheet.Sort.SortFields.Clear\n        .Sort Key1:=.Item(1, 2), Order1:=1, Key2:=.Item(1, 2), Order2:=1, Header:=xlYes\n        v = .Value2\n    End With\n\n    ReDim w(1 To UBound(v), 1 To 1)\n    vErr = CVErr(xlErrNA)\n\n    For k = 2 To UBound(v)\n        e = v(k, 5)\n        f = v(k, 6)\n        w(k, 1) = vErr\n        z = BSearch(v, 2, e, 1, lastB)\n        If z Then\n            Do While v(z, 2) = e\n                If Abs(v(z, 3) - f) <= 3 Then\n                    w(k, 1) = v(z, 1)\n                    Exit Do\n                End If\n                z = z + 1\n                If z > UBound(v) Then Exit Do\n            Loop\n        End If\n    Next\n\n    r(1, 8).Resize(r.Rows.Count) = w\n\nEnd Sub\n\n\nPrivate Function BSearch(vA, col&, vVal, ByVal first&, ByVal last&)\n    Dim k&, middle&\n    While last >= first\n        middle = (last + first) \/ 2\n        Select Case True\n            Case vVal < vA(middle, col)\n                last = middle - 1\n            Case vVal > vA(middle, col)\n                first = middle + 1\n            Case Else\n                k = middle - 1\n                Do While vA(k, col) = vA(middle, col)\n                    k = k - 1\n                    If k > last Then Exit Do\n                Loop\n                BSearch = k + 1\n                Exit Function\n        End Select\n    Wend\n    BSearch = 0\nEnd Function\n","1086":"update Dash set\n    Analysts = \n    stuff(\n         (\n             select ', ' + P.NameLast\n             from dbo.Item as I\n                 inner join dbo.Assignment as A on A.ItemId = I.ItemId\n                 inner join dbo.Person as P on P.PersonId = A.PersonId\n             where I.ItemId = D.DPItem and P.RoleId in (3, 4)\n             for xml path(''), type\n         ).value('.', 'nvarchar(max)')\n    , 1, 2, '')\nfrom dbo.Dash as D\n","1087":"SELECT GROUP_CONCAT(i SEPARATOR '|')\n  FROM (  SELECT i\n            FROM (  SELECT i\n                      FROM integers\n                     WHERE i BETWEEN 1 AND 50\n                  ORDER BY RAND()\n                     LIMIT 5) sort_these_five\n        ORDER BY i) concat_these_five;\n","1088":"select \n  (select top 1 Name from Period where StartDate < DateModified order by StartDate desc),\n  a.OldValue,  \n  a.NewValue  \nfrom Audit a\n","1089":"SELECT COUNT(DISTINCT User_Id) FROM (\n  SELECT   User_Id\n  FROM     t1\n  GROUP BY User_Id, Action_Type\n  HAVING   COUNT(*) > 1\n) t\n","1090":"SELECT col1,\n       col2,\n       MIN(grp) AS source_group\nFROM   (SELECT 1 AS grp,\n               col1,\n               col2\n        FROM   t1\n        UNION ALL\n        SELECT 2 AS grp,\n               col1,\n               col2\n        FROM   t2) AS t\nGROUP  BY col1,\n          col2\nORDER  BY MIN(grp),\n          col1  \n","1091":"select DATEADD(dd, DATEDIFF(dd, 0, COL),0) from TABLE\n","1092":"select * from table_name \n  order by \n        date desc, \n        case when new='true' then 1 else 0 end desc\n","1093":"type t_id_table is table OF other_table.id%type index by binary_integer;\nv_table t_id_table;\n\n-- fill the table\nselect id\nbulk collect into v_table\nfrom other_table \nwhere abc in ('&val1','&val2','&val3');     \n\n-- then at a later stage...    \n\nselect *\nfrom some_table st\n,    table(cast(v_table AS t_id_table)) idt\nwhere st.id = idt.id;\n","1094":"select date_posted, count(*)\nfrom (select date_posted from article union all\n      select date_posted from blogposts) v\ngroup by date_posted\n","1095":"UPDATE table SET FieldA = CONCAT(IFNULL(FieldB,'No Value'), ' - arbitrary string')\n","1096":"IF EXISTS (SELECT 1 FROM people WHERE person_id = my_person_id) THEN\n  -- do something\nEND IF;\n","1097":"select\n   replace(replace(img_name, '.png', ''), '.jpg', '') as name\nfrom image\ngroup by replace(replace(img_name, '.png', ''), '.jpg', '')\nhaving count(*) = 3\n","1098":"SELECT \n       col1,\n       SUM(A) TotalA,\n       SUM(B) TotalB\nFROM \n(\n       select col1, \n              CASE WHEN col2 = 1 THEN col3 ELSE 0 END A,\n              CASE WHEN col2 = 2 THEN col3 ELSE 0 END B\n       from  tabella\n) t\nGROUP BY Col1\n","1099":"create unique index idx_tbl_col2_col3 on (col2, col3)\n","1100":"DECLARE @TotalHours VARCHAR(5) = '44:43'\n\n\nSELECT CAST(CAST(AvgMinutes AS INT)\/60 AS VARCHAR) + ':'\n        + CAST(CAST(AvgMinutes AS INT)%60 AS VARCHAR)\nFROM (\n        SELECT CEILING((CAST(LEFT(@TotalHours,CHARINDEX(':',@TotalHours) - 1) AS INT ) * 60 \n           + CAST(RIGHT(@TotalHours,LEN(@TotalHours) - CHARINDEX(':',@TotalHours)) AS INT ))\/5.0) AvgMinutes\n     ) AS TotalMinutes\n","1101":"INSERT INTO Table_C (SELECT null, Table_A.item, Table_B.color, null FROM \nTable_A CROSS JOIN Table_B);\n","1102":"SELECT * \nFROM   (SELECT id, itemcount, version, \n               ROW_NUMBER() OVER (ORDER BY version DESC, itemcount DESC) AS rn\n        FROM   (SELECT id, SUM(itemcount) as itemcount, version \n                FROM ARTICLE_COUNTER_STATISTICS_m \n                WHERE id != '0' \n                GROUP BY id, version\n               )\n        )\nWHERE  rn BETWEEN 3 AND 20 -- just an example\n","1103":"select sa.name as \"Sender Account\"\nfrom security_account sa\njoin spot s on sa.id = s.provider_account_id\nwhere s.format = 'SD'\nexcept\nselect sa.name as \"Sender Account\"\nfrom security_account sa\njoin spot s on sa.id = s.provider_account_id\nwhere s.format <> 'SD'\n","1104":"SELECT *\nFROM `job` \nWHERE c_name = 'John doe'\nAND (customer_ref LIKE '%do%'\nOR order_details LIKE '%do%')\n","1105":"package com.MyPackage;\n\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.UUID;\n\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.SQLException;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteException;\nimport android.database.sqlite.SQLiteOpenHelper;\nimport android.util.Log;\n\npublic class AnyDBAdapter {\n\nprivate static final String TAG = \"AnyDBAdapter\";\nprivate DatabaseHelper mDbHelper;\nprivate static SQLiteDatabase mDb;\n\n\/\/make sure this matches the \n\/\/package com.MyPackage;\n\/\/at the top of this file\nprivate static String DB_PATH = \"\/data\/data\/com.MyPackage\/databases\/\";\n\n\/\/make sure this matches your database name in your assets folder\n\/\/ my database file does not have an extension on it \n\/\/ if yours does\n\/\/ add the extention\nprivate static final String DATABASE_NAME = \"data\";\n\n\/\/Im using an sqlite3 database, I have no clue if this makes a difference or not\nprivate static final int DATABASE_VERSION = 3;\n\nprivate final Context adapterContext;\n\npublic AnyDBAdapter(Context context) {\n    this.adapterContext = context;\n}\n\npublic AnyDBAdapter open() throws SQLException {\n    mDbHelper = new DatabaseHelper(adapterContext);\n\n    try {\n        mDbHelper.createDataBase();\n    } catch (IOException ioe) {\n        throw new Error(\"Unable to create database\");\n    }\n\n    try {\n        mDbHelper.openDataBase();\n    } catch (SQLException sqle) {\n        throw sqle;\n    }\n    return this;\n}\n\/\/Usage from outside\n\/\/ AnyDBAdapter dba = new AnyDBAdapter(contextObject); \/\/in my case contextObject is a  map\n\/\/ dba.open();\n\/\/ Cursor c = dba.ExampleSelect(\"Rawr!\");\n\/\/ contextObject.startManagingCursor(c);\n\/\/ String s1 = \"\", s2 = \"\";\n\/\/ if(c.moveToFirst())\n\/\/ do {\n\/\/  s1 = c.getString(0);\n\/\/  s2 = c.getString(1);\n\/\/  } while (c.moveToNext());\n\/\/ dba.close();\npublic Cursor ExampleSelect(string myVariable)\n{\n    String query = \"SELECT locale, ? FROM android_metadata\";\n    return mDb.rawQuery(query, new String[]{myVariable});\n}\n\n\/\/Usage\n\/\/ AnyDBAdatper dba = new AnyDBAdapter(contextObjecT);\n\/\/ dba.open();\n\/\/ dba.ExampleCommand(\"en-CA\", \"en-GB\");\n\/\/ dba.close();\npublic void ExampleCommand(String myVariable1, String myVariable2)\n{\n    String command = \"INSERT INTO android_metadata (locale) SELECT ? UNION ALL SELECT  ?\";\n    mDb.execSQL(command, new String[]{ myVariable1, myVariable2});\n}\n\npublic void close() {\n    mDbHelper.close();\n}\n\nprivate static class DatabaseHelper extends SQLiteOpenHelper {\n\n    Context helperContext;\n\n    DatabaseHelper(Context context) {\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n        helperContext = context;\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        Log.w(TAG, \"Upgrading database!!!!!\");\n        \/\/db.execSQL(\"\");\n        onCreate(db);\n    }\n\n    public void createDataBase() throws IOException {\n        boolean dbExist = checkDataBase();\n        if (dbExist) {\n        } else {\n\n            \/\/make sure your database has this table already created in it\n            \/\/this does not actually work here\n            \/*\n             * db.execSQL(\"CREATE TABLE IF NOT EXISTS \\\"android_metadata\\\" (\\\"locale\\\"     TEXT DEFAULT 'en_US')\"\n             * );\n             * db.execSQL(\"INSERT INTO \\\"android_metadata\\\" VALUES ('en_US')\"\n             * );\n             *\/\n            this.getReadableDatabase();\n            try {\n                copyDataBase();\n            } catch (IOException e) {\n                throw new Error(\"Error copying database\");\n            }\n        }\n    }\n\n    public SQLiteDatabase getDatabase() {\n        String myPath = DB_PATH + DATABASE_NAME;\n        return SQLiteDatabase.openDatabase(myPath, null,\n                SQLiteDatabase.OPEN_READONLY);\n    }\n\n    private boolean checkDataBase() {\n        SQLiteDatabase checkDB = null;\n        try {\n            String myPath = DB_PATH + DATABASE_NAME;\n            checkDB = SQLiteDatabase.openDatabase(myPath, null,\n                    SQLiteDatabase.OPEN_READONLY);\n        } catch (SQLiteException e) {\n        }\n        if (checkDB != null) {\n            checkDB.close();\n        }\n        return checkDB != null ? true : false;\n    }\n\n    private void copyDataBase() throws IOException {\n\n        \/\/ Open your local db as the input stream\n        InputStream myInput = helperContext.getAssets().open(DATABASE_NAME);\n\n        \/\/ Path to the just created empty db\n        String outFileName = DB_PATH + DATABASE_NAME;\n\n        \/\/ Open the empty db as the output stream\n        OutputStream myOutput = new FileOutputStream(outFileName);\n\n        \/\/ transfer bytes from the inputfile to the outputfile\n        byte[] buffer = new byte[1024];\n        int length;\n        while ((length = myInput.read(buffer)) > 0) {\n            myOutput.write(buffer, 0, length);\n        }\n\n        \/\/ Close the streams\n        myOutput.flush();\n        myOutput.close();\n        myInput.close();\n    }\n\n    public void openDataBase() throws SQLException {\n        \/\/ Open the database\n        String myPath = DB_PATH + DATABASE_NAME;\n        mDb = SQLiteDatabase.openDatabase(myPath, null,\n                SQLiteDatabase.OPEN_READWRITE);\n    }\n\n    @Override\n    public synchronized void close() {\n\n        if (mDb != null)\n            mDb.close();\n\n        super.close();\n\n    }\n}\n\n}\n","1106":"SELECT t.src\n     , t.title\n     , t.maker\n     , t.partnum\n     , t.price\n  FROM (\n         SELECT '[data]'         AS `src`\n              , d1.title         AS `title`\n              , d1.maker         AS `maker`\n              , d1.partnum       AS `partnum`\n              , d1.price         AS `price`\n              , d1.partnum       AS `product`\n           FROM data d1\n          WHERE d1.sysn = ?\n\n          UNION ALL\n\n         SELECT '[cross]'\n              , c2.title\n              , c2.maker\n              , c2.partnum\n              , c2.price\n              , c2.product\n           FROM cross c2\n           JOIN data d2\n             ON d2.partnum = c2.product\n          WHERE d2.sysn = ?\n       )\n ORDER BY t.product DESC, t.src DESC, t.price ASC\n","1107":"select\n  m.id, m.datecolumn, m.note\nfrom\n  (select max(datecolumn) datecolumn, id\n   from mytable\n   group by id) sub\ninner join mytable m on m.id = sub.id and m.datecolumn= sub.datecolumn\n","1108":"select pallet_id,\n    case \n        when count(case when product_group not in ('LAMINAAT','ACCESSORIE') then 1 end) > 0 then ''\n        when count(distinct product_group) > 1 then 'Mix'\n        when count(case when product_group = 'LAMINAAT' then 1 end) > 0 then 'LAM'\n        else 'ACC'\n    end as label\nfrom mytable\ngroup by pallet_id\n","1109":"SELECT p FROM BlogRegionBundle:Post p LEFT JOIN p.tags t WHERE t.id = :blogId AND p.state = :state AND p.deleted = 0 AND :user NOT MEMBER OF p.views\n","1110":"NODE\nid\n\nNODE_POST\nid pk fk node(id)\ntitle\nbody\n\nNODE_COMMENT \nid pk fk node(id) \nbody \npost_id fk node_post(id) \nparent_comment_id fk node_comment(id)\n","1111":"INSERT INTO Client_First_Name VALUES(SELECT Client_Name LIKE '% %' THEN LEFT(Client_Name, Charindex(' ', Client_Name) - 1));\n\nINSERT INTO Client_Surname VALUES(SELECT Client_Name LIKE '% %' THEN RIGHT(Client_Name, Charindex(' ', Reverse(Client_Name)) - 1));\n","1112":"Using a SQL query\nSELECT \n  nspname,         -- schema name\n  defaclobjtype,   -- object type\n  defaclacl        -- default access privileges\nFROM pg_default_acl a JOIN pg_namespace b ON a.defaclnamespace=b.oid;\n","1113":"<?php \n$dates = array(\n     '2014-07-26',\n     '2014-08-04'\n);\n$this->db->from('tblName');\n$this->db->where('id','007');\n\n\/\/ first variant\nforeach($dates as $date){\n$this->db->where('doj !=',$date);\n}\n\n\/\/ or second variant\n$this->db->where_not_in('doj',$dates); \/\/ <- seems to be better\n\n\/\/ finally get result\n$result = $this->db->get();\n\nif($result->num_rows()){\n     var_dump($result->result_array());\n} else {\n     echo 'no rows found';\n}\n\/\/ check query\necho $this->db->last_query();\n\n?>\n","1114":"select 'Current' As TimePeriod,\nsum(case when CPT_ORIGINATED > SUBDATE(DATE(NOW()),30) THEN 1 else 0\n    end) as CountOfThings,\nfrom `cpt-prod`\nwhere CPT_STATE <> 'Closed'\nUNION ALL\nSELECT 'Past1' AS TimePeriod,\nsum(case when CPT_ORIGINATED > SUBDATE(DATE(NOW()),60) AND CPT_ORIGINATED < SUBDATE(DATE(NOW()),30) THEN 1 else     0\n    end) as CountOfThings,\nfrom `cpt-prod`\nwhere CPT_STATE <> 'Closed'\n","1115":"OPEN V_CF_CURSOR FOR SELECT COUNT(*) FROM \"VPA\".\"Employee\"; -- returns 1 row\nFETCH V_CF_CURSOR INTO CF_ROWCOUNT;\n","1116":"WHERE (pc.IsBusinessDay IS NULL AND ac.IsBusinessDay = 0)\nOR pc.IsBusinessDay = 0\n","1117":"if @SelectFlag = 1\n  select name, Address, salary, CreatedBy from employee\nelse\nif @UpdateFlag = 1\n  select name, Address, salary from employee    \n","1118":"SELECT * FROM financials WHERE date >= NOW() - INTERVAL 30 DAY\n","1119":"\n\nvar conn = {\r\n  host     : '127.0.0.1',\r\n  user     : 'user',\r\n  password : 'pass',\r\n  charset  : 'utf8'\r\n};\r\n\r\n\/\/ connect without database selected\r\nvar knex = require('knex')({ client: 'mysql', connection: conn});\r\n\r\nknex.raw('CREATE DATABASE my_database')\r\n  .then(function(){\r\n    knex.destroy();\r\n    \r\n    \/\/ connect with database selected\r\n    conn.database = 'my_database';\r\n    knex = require('knex')({ client: 'mysql', connection: conn});\r\n\r\n    knex.schema.createTable('my_table', function (table) {\r\n      table.string('my_field');\r\n    })\r\n    .then(function() {\r\n      knex.destroy();\r\n    });\r\n  });","1120":" SELECT ImpFile, DATEADD(hh, DATEDIFF(hh, 0, ImpDate), 0)\n FROM nol_artikula_izmaina\n","1121":"SELECT \n    a.name, \n    b.office, \n    c.firm, \n    d.status\nFROM \n    job a\nJOIN depts b ON a.office = b.ref\nJOIN firms c ON b.firm  = c.ref\nJOIN statuses d ON a.status = d.ref\n","1122":"with start_grp as (\n  select dt, user_id, programme,\n         case when dt - lag(dt,1) over (partition by user_id order by dt) \n                   > interval '0 day 2:00:00'\n              then 1\n              else 0\n         end grp_start\n  from binge\n  ),\nassign_grp as (\n  select dt, user_id, programme,\n  sum(grp_start) over (partition by user_id order by dt) grp\n  from start_grp)\nselect user_id, grp as binge, max(dt) - min(dt) as binge_length\nfrom assign_grp\ngroup by user_id, grp\nhaving count(programme) > 1\n","1123":"select column1\nfrom the_table\nwhere column2 in ('Doc1', 'Doc2', 'Doc3')\ngroup by column1\nhaving count(distinct column2) = 3;\n","1124":"SELECT Col1, \n        Col2, \n        Col3 \nFROM(\n    SELECT \n        Col1, \n        Col2, \n        Col3, \n        ROW_NUMBER() OVER (PARTITION BY Col1 ORDER BY Col1, Col2, Col3) RNum\n    FROM YourTable \n)X WHERE RNum<=5\n","1125":"UPDATE       userprofileplus\nSET                mobile = 9199225533\nWHERE        (mobile is null and userid = 5) and (Id IN\n                             (SELECT        TOP (1) Id\n                               FROM            userprofileplus AS userprofileplus_1\n                               WHERE        (mobile IS NULL) AND (UserId = 5)))\n","1126":"select \n    g.*\n    , home.team_name as home_team_name\n    , road.team_name as road_team_name\nfrom Games g\n    inner join Teams home on home.tid = g.home_team_id\n    inner join Teams road on road.tid = g.road_team_id\nwhere g.home_team_id = 1\n    or g.road_team_id = 1\n","1127":"Private Sub txtFileName_AfterUpdate()\n    If Not IsNull(txtFileName) Then\n        txtFileName = Trim$(txtFileName)\n        If Not Right$(txtFileName, 4) = \".zip\" Then\n            txtFileName = txtFileName & \".zip\"\n        End If\n    End If\nEnd Sub\n","1128":"WITH all_items AS (\n    SELECT\n          t1.import_id\n        , t1.import_at\n        , t2.item_id\n        , t2.item_url\n        , t2.item_name\n        , t2.item_description\n        , ROW_NUMBER() OVER(PARTITION BY item_url ORDER BY t1.import_at DESC) AS item_url_rank \n    FROM dbo.table1 AS t1\n    JOIN dbo.table1 AS t2 ON\n        t2.import_id = t1.import_id\n    )\nSELECT \n          t1.import_id\n        , import_at\n        , item_id\n        , item_url\n        , item_name\n        , item_description\nWHERE \n    item_url_rank = 1;\n","1129":"SELECT DISTINCT PosterID\nFROM table1 x\nWHERE PostingDate BETWEEN '2012-05-01' AND '2012-06-30'\nAND posterID NOT IN (SELECT PosterID\n  FROM table1 y\n  WHERE PostingDate > '2012-07-01' AND x.CategoryID = y.CategoryID);  \n","1130":"SELECT  TO_CHAR(696585242087, '99G999G999G9999', 'NLS_NUMERIC_CHARACTERS=\",.\"')\nFROM    dual\n","1131":"Select I_Ftn, I_Col, count(c.i_id_num) cnt \nFrom DSCL_ALL.W_CALENDER c \nWhere c.UNIT_CODE= '01' \nAND c.i_g_vill = '45'\nand c.i_g_code = '1'\nand c.survey_year = '2012-2013'\nand not exists (select 1 from w_mill_pur m where m.unit_code = c.unit_code and m.m_vill = c.i_g_vill and m.m_grow = c.i_g_code and m.m_indent = c.i_number)  \nGroup By I_Ftn, I_Col\nORDER BY I_ftn, I_col)\n","1132":"SELECT currency, SUM(total1) AS total FROM\n(\nSELECT currency_a AS currency, SUM(a_amount)  AS total1 FROM table1\nGROUP BY currency_a\nUNION ALL\nSELECT currency_b, SUM(b_amount) AS total2 FROM table1\nGROUP BY currency_b\nUNION ALL\nSELECT currency_c, SUM(c_amount) AS total2 FROM table1\nGROUP BY currency_c\n) T\nGROUP BY currency\n","1133":"select (case when min(name) = max(name) then max(name)\n             else thegroup\n        end) as name,\n       sum(balance) as balance\nfrom theRecords r\ngroup by thegroup;\n","1134":"sqlplus x\/x@orcl <sql.txt\n","1135":"SELECT COUNT(Dispute_Reference_no) AS reg_inc\nFROM   mytable \nWHERE  reasoncd in ('b2', 'b3') AND\n       ((DATENAME(weekday, GETDATE()) = 'monday' AND \n         datecreated = dbo.fn_getdateonly(GETDATE()-3)) OR\n        (DATENAME(weekday, GETDATE()) = 'tuesday' AND \n         datecreated BETWEEN dbo.fn_getdateonly(GETDATE()-3) AND \n                             dbo.fn_getdateonly(GETDATE())) OR\n        (atecreated = dbo.fn_getdateonly(GETDATE()-1)\n       )\n","1136":";WITH cte AS \n( SELECT StaffId, FirstWeekEnding AS WeekEnding\n  FROM STAFF\n  UNION ALL\n  SELECT StaffId, DATEADD(D, 7, WeekEnding) FROM cte\n  WHERE DATEADD(D, 7, WeekEnding) <= GETDATE()\n)\nSELECT StaffId, WeekEnding\nFROM cte LEFT JOIN Header ON cte.StaffId = Header.StaffId AND cte.WeekEnding = Header.WeekEnding\nWHERE Header.WeekEnding IS NULL\nOPTION (MAXRECURSION 32767)\n","1137":"SELECT  TO_CHAR ( TO_DATE ( SUBSTR (regexp_replace(file_name, '[A-Z][a-z]', '')\n                           , INSTR (regexp_replace(file_name, '[A-Z][a-z]', '') , '_', -1, 2)+ 1, 8), 'YYYYMMDD'), 'DD-MM-YYYY')\n  FROM dual;\n","1138":"WITH temp_roles \n  as (     \n      SELECT *\n        FROM role_\n       WHERE name IN ('User', 'Owner', 'Portal Content Reviewer', \n                      'Community Owner', 'Administrator')\n      UNION\n      SELECT <values>\n        FROM dual\n     )\n","1139":"ORDER BY Min([Transaction Date]) DESC\nORDER BY 4 DESC\n","1140":"create table albums (\n    album_id integer primary key,\n    -- other fields...\n);\n\ncreate table special_offers (\n    album_id integer primary key references albums(album_id),\n    -- other fields...\n);\n","1141":"select s.col1, s.col2, ... s.colN, \nmax(s.col1) over (partition by s.col2, ... ),\nmin(s.col1) over (partition by s.col2, ... )\nfrom stuff as s;\n","1142":"declare\n    @Questions varchar(max),\n    @SQLQuery varchar(max)\n\ncreate table #OutputTable\n    (\n    refID int,\n    SessionID int,\n    QuestionID varchar(50),\n    AnswerValue varchar(50)\n    )\ninsert into #OutputTable\n    values\n        (9000,205545715,'[4907]','Good morning'),\n        (12251,205543469,'[10576:16307]','3'),\n        (12255,205543469,'[10907:17001]','4'),\n        (13157,205543703,'[10576:16307]','3'),\n        (14387,205543493,'[10907:17001]','2'),\n        (14389,205543493,'[10911:17007]','3')\n\nset @Questions = (STUFF((SELECT distinct ',' + cast(i.QuestionID as varchar(20))          \n    FROM #OutputTable i\n    FOR XML PATH(''), TYPE).value('.','VARCHAR(max)'), 1, 1, ''))\n\nset @SQLQuery = '\n    select SessionID,'+ @Questions +'\n    from    (\n            select\n                SessionID,\n                replace(replace(QuestionID,''['',''''),'']'','''') QuestionID,\n                AnswerValue\n            from #OutputTable\n            ) p \n        PIVOT (\n              max(Answervalue)\n              FOR p.QuestionID IN ('+ @Questions +')\n              ) as pvt\n    order by SessionID desc'\n\nexec(@SQLQuery)\n","1143":"select (case when value between 0 and 20 then '0-20'\n             when value between 21 and 45 then '21-45'\n             when value between 46 and 100 then '46-100'\n             else 'other'\n        end) as range,\n       count(*)\nfrom RandomValueTable\ngroup by (case when value between 0 and 20 then '0-20'\n               when value between 21 and 45 then '21-45'\n               when value between 46 and 100 then '46-100'\n               else 'other'\n          end);\n","1144":"SELECT a.student_id, s.name, COUNT(a.subject_id) as taken_subjects\nFROM assignments a\nINNER JOIN students s ON a.student_id = s.id\nGROUP BY a.student_id, s.name\nHAVING COUNT(a.subject_id) = (SELECT COUNT(*) FROM assignments GROUP BY student_id LIMIT 1)\n","1145":"ALTER FUNCTION dbo.CalcMinsInHour(@start DATETIME, @end DATETIME, @hour INTEGER)\nRETURNS INTEGER \nAS\nBEGIN\n    DECLARE @StartOfHour DATETIME\n    DECLARE @EndOfHour DATETIME\n    SELECT @StartOfHour = DATEADD(hh, @hour, CAST(CAST(@start AS DATE) AS DATETIME))\n    IF NOT (@StartOfHour BETWEEN @start and @end)\n        SET @StartOfHour = DATEADD(hh, @hour, CAST(CAST(@end AS DATE) AS DATETIME))\n\n    SELECT @EndOfHour = DATEADD(hh, 1, @StartOfHour)\n\nRETURN\n(\nSELECT \n    CASE WHEN @EndOfHour < @start OR @StartOfHour > @end THEN 0 ELSE\n        DATEDIFF(mi,\n            CASE WHEN @StartOfHour <= @start THEN @start ELSE @StartOfHour END,\n            CASE WHEN @EndOfHour > @end THEN @end ELSE @EndOfHour END)  \n    END\n)\nEND\n","1146":"create table Editions (\n    EditionsId int not null identity(1, 1) primary key,\n    JournalId varchar(10) references Publications(JournalId),\n    EditionName varchar(255),\n    . . .\n)\n","1147":"Select ID as Num, \n       (select Count(*) from TASK t where t.ID = o.ID) as Total \nfrom ORDER o;\n","1148":"Id\nTaskId\nPersonId\nMonthYearKey\nMonthYearValue\n","1149":"db.collection.find({\"string_list\" : {$all:[\"large\",\"world\",\"hello\"]}, \"string_list\": {$size: 3}});\n","1150":"SELECT (left(convert(char(11), date, 107), 3) + \" \" +\nright(convert(char(11), date, 107), 2)) as date from \n(\n    select date from yourtable \n    group by date \n    order by year(date) asc, month(date)asc\n) as a    \n","1151":"SELECT CASE\n  WHEN fourthlevel.case_type IN ('Complaint')\n  THEN\n     (SELECT cast(COUNT(*) as varchar2(255))\n        FROM work_days1\n       WHERE     work_days1.business_date > fourthlevel.cdate\n             AND work_days1.business_date <=\n                    COALESCE (fourthlevel.close_date, SYSDATE))\n  WHEN fourthlevel.case_type IN ('Enquiry')\n  THEN\n     (SELECT cast(COUNT(*) as varchar2(255))\n        FROM work_days1\n       WHERE     work_days1.business_date > fourthlevel.create_date\n             AND work_days1.business_date <=\n                    COALESCE (fourthlevel.close_date, SYSDATE))\n  WHEN fourthlevel.case_status = 'Cancelled'\n  THEN\n     'N\/A'\nEND AS sla_days\nFROM fourthlevel\n","1152":"Select case when firstcity = '008' then secondcity else firstcity end 'City',\n       Distance,Roadname,Roadstatus\nfrom   table\nwhere (firstcity= '008' or secondcity ='008')\n","1153":"SELECT A.Date, \n       SUM(CASE WHEN A.Methos = 'A' THEN A.Count ELSE 0 END) AS 'A', \n       SUM(CASE WHEN A.Methos = 'B' THEN A.Count ELSE 0 END) AS 'B', \n       SUM(CASE WHEN A.Methos = 'C' THEN A.Count ELSE 0 END) AS 'C', \n       SUM(CASE WHEN A.Methos = 'D' THEN A.Count ELSE 0 END) AS 'D', \n       SUM(CASE WHEN A.Methos = 'E' THEN A.Count ELSE 0 END) AS 'E', \n       SUM(CASE WHEN A.Methos = 'F' THEN A.Count ELSE 0 END) AS 'F', \n       SUM(CASE WHEN A.Methos = 'G' THEN A.Count ELSE 0 END) AS 'G', \n       SUM(CASE WHEN A.Methos = 'H' THEN A.Count ELSE 0 END) AS 'H'\nFROM tableA A \nGROUP BY A.Date\n","1154":"if (ds.Tables.Count > 0) {\n  ds.Tables[ds.Tables.Count - 1].TableName = \"name\";\n}\n","1155":"DECLARE @sql1 VARCHAR(4000) = ''\nDECLARE @sql2 VARCHAR(4000) = ''\nDECLARE @sql3 VARCHAR(4000) = ''\n\nSELECT @sql1 =\n'SELECT \n    Id\n    , Team\n'\n\nSELECT @sql2 = @sql2 +\n'   , MAX(CASE WHEN RN = ' + CONVERT(VARCHAR(10), RN) + ' THEN Players END) AS ['  + CONVERT(VARCHAR(10), RN) + ']' + CHAR(10)\nFROM(\n    SELECT DISTINCT\n        RN = ROW_NUMBER() OVER(PARTITION BY Id, Team ORDER BY (SELECT NULL))\n    FROM Tbl\n)t\nORDER BY RN\n\nSELECT @sql3 =\n'FROM(\n    SELECT *,\n        RN = ROW_NUMBER() OVER(PARTITION BY Id, Team ORDER BY (SELECT NULL))\n    FROM Tbl\n)t\nGROUP BY\nId, Team'\n\nPRINT (@sql1 + @sql2 + @sql3)\nEXEC (@sql1 + @sql2 + @sql3)\n","1156":" public boolean Exists(String link) {\n           Cursor cursor = ourDatabase.rawQuery(\"select 1 from fav where link='\"+link+\"'\",new String[] {});\n           boolean exists = (cursor.getCount() > 0);\n           cursor.close();\n           return exists;\n        }\n","1157":"CREATE TYPE my_dates AS TABLE OF DATE;\n\/\n\nSELECT d.column_value AS Date_Of_Concern, count(Player_Id) AS Retained\n  FROM Player\n  JOIN TABLE (my_dates(to_date('2012-sep-03', 'yyyy-mon-dd'),\n                       to_date('2012-sep-04', 'yyyy-mon-dd'),\n                       to_date('2012-sep-05', 'yyyy-mon-dd'))) d\n          ON d.column_value - trunc(Init_Dtime) BETWEEN 0 AND 7\n GROUP BY d.column_value\n","1158":"create table dbo.Products (\n    ProductCode char(10) not null primary key,\n    ProductName nvarchar(50) not null,\n    ProductDescription nvarchar(100) not null,\n    -- other columns\n)\n\ncreate table dbo.ProductsTranslations (\n    ProductCode char(10) not null,\n    LanguageCode char(2) not null,\n    ProductName nvarchar(50) not null,\n    ProductDescription nvarchar(100) not null,\n    -- other translations\n    constraint FK1 foreign key (ProductCode)\n        references dbo.Products (ProductCode),\n    constraint FK2 foreign key (LanguageCode)\n        references dbo.Languages (LanguageCode),\n    constraint PK primary key (ProductCode, LanguageCode)\n)\n","1159":"Select \n    (Select Count (*) from tso_skf_nomeas_in60days_v) \n    \/ \n    (Select Count (*) from tso_skf_recent_meas) as perc\nfrom dual\n","1160":"with cte as (\n    select p.productcategory, p.ProductSubCategory, COUNT(*) cnt, \n        ROW_NUMBER() over (partition by p.productcategory order by count(*) desc) rn \n    from products p \n        join sales s on p.ProductSubCategory = s.ProductSubCategory\n    group by p.productcategory, p.ProductSubCategory\n    )\nselect * \nfrom cte \nwhere rn = 1\n","1161":"Declare @Date date = '2015-05-02'\nWhile DATENAME(WEEKDAY,@Date) <> 'Thursday'\n    begin\n    Set @Date = DATEADD(dd, -1,@Date)\n    end\nSelect @Date\n","1162":"SELECT\n    DIM_DRUG_NAME_SHORT.Drug_Name_Short AS 'Med_Name_Short'\n    , SUM(Baseline.Doses) as 'DOT'\n    , Day(Baseline.Dispense_Date) as 'd_Date'\nFROM    \n    FACT_AMS_Baseline_Report Baseline\n    INNER JOIN DIM_DRUG_NAME_SHORT ON Baseline.Med_Name_ID = DIM_DRUG_NAME_SHORT.Drug_Name_Long\n    INNER JOIN DIM_Date tDate ON Baseline.Dispense_Date = tDate.Date\n\nWHERE\n    Baseline.Encounter = '00000001\/01'\n\nGROUP BY\n    DIM_DRUG_NAME_SHORT.Drug_Name_Short\n    , Baseline.Dispense_Date\n\nOrder By\n    Drug_Name_Short\n","1163":"SELECT year_born as year, count(*) as numridersborn  \nFROM Riders \nGROUP BY year_born \nORDER BY year_born;\n","1164":"lstResults.RowSource = \"select EmpId from tblTesting where Empid = \" & Me.txtSearchEmpId.Value\n","1165":"select r.ID, m.MATERIALID, m.LOT, sum(ms.AMMOUNT) as aantal,\n       sum(m.NETPRICE )as prijs, sum(ms.AMMOUNT * m.NETPRICE) as Total\nfrom rc_recall r inner join\n     RC_RECALLMATSTORE ms\n     on r.ID = ms.RECALLID inner join\n     RC_RECALLMATERIAL m\n     ON ms.RECALLID = m.RECALLID and ms.LINE = m.LINE \nwhere r.ID = '2015073' and d.LANG = 'FR'\ngroup by r.ID, m.MATERIALID, m.LOT;\n","1166":"select * from dbo.ONE where LastLogin is NULL and  \n                            datediff(ss,regdate,GetDate())<30\n","1167":";with cte AS (SELECT *,COUNT(*) OVER(PARTITION BY Country,Category) CT\n                      ,CASE WHEN Category IS NOT NULL THEN DENSE_RANK() OVER (ORDER BY Country) END Rank_\n              FROM Table1)\nSELECT Country\n      ,State\n      ,Category\n      ,CASE WHEN CT > 1 AND Rank_ IS NOT NULL THEN DENSE_Rank() OVER(ORDER BY Rank_ DESC) END AS Group_\nFROM cte\nORDER BY Country DESC,State\n","1168":"SELECT c.id, \n  c.name \nFROM customers c\nWHERE not exists (select customer_id\n                  from modulemembers m\n                  where c.id = m.customer_id)\norder by c.name\n","1169":"WHERE ProductID NOT IN (\n  SELECT ProductID FROM ProductCustomerLevel \n  WHERE CustomerLevelID=9\n)\n","1170":"SELECT Username, COUNT(DISTINCT(Date)) AS UniqueDaysAppeared\nFROM Occurrences\nGROUP BY Username\n","1171":"select A.transactionNumber,\nA.DealNumber,     \nC.GroupLookup AS [Group]\nfrom TableOne A    \ninner join TableTwo B     \non A.transactionNumber = B.tranNumber     \ninner join TableThree C\non C.Group = A.Group\nwhere B.ID = 111111  \n","1172":"# get all rows with distinct (unique) hashes from Remote and create a list of hashes.\nremote_hash_list = [item.hash for item in Remote.query.distinct(Remote.hash).all()]\n\n# Now get all Local items that hash is not in remote hashes list\nlocal_items = Local.query.filter(Local.hash.notin_(remote_hash_list)).all()\n","1173":"select \n     customer.customer_num, customer.fname, \n     isnull(sum(items.total_price),0) amountSpent\nfrom customer\n    left join orders\n        on customer.customer_num = orders.customer_num\n    left join items\n        on orders.order_num = items.order_num \n       and items.manu_code like 'HRO'\ngroup by customer.customer_num, customer.fname\n","1174":"BEGIN\n\nSET NOCOUNT ON;\n\nSELECT    Top 20 A.imgID,\n            COUNT(*) OVER() AS volume,\n            (\n                SELECT      B.commentID,\n                            COUNT(*) OVER() AS volume\n                FROM        MOC_ImgComments B\n                WHERE       B.imgID = A.imgID\n                FOR XML PATH(''), ELEMENTS, TYPE\n            )\nFROM        MOC_ImgComments A\nORDER BY    volume desc, A.imgID\nFOR XML PATH('images'), ELEMENTS, TYPE, ROOT('ranks')   \ngroup by A.imgID\nEND\n","1175":"SELECT *, ROW_NUMBER() OVER (ORDER BY somefield) rownum\nFROM table;\n","1176":"SELECT something*1.0\/total FROM somewhere\n","1177":"UPDATE table_name\n   SET column1_name = round(column1_name, 2 ),\n       column2_name = round(column2_name, 2 ),\n       ...\n       columnN_name = round(columnN_name, 2 )\n","1178":";With OrgChart as        \n(        \n  SELECT id,id as BaseID\n  FROM employee WHERE Active=1\n  UNION ALL \n  SELECT e.ID, g.BaseID as BaseID         \n  FROM employee e \n  JOIN OrgChart g on e.supervisorid=g.id\n  WHERE e.Active=0\n), ForUpd as\n(SELECT ID,BASEID FROM OrgChart WHERE ID<>BAseID)\n\n UPDATE A SET empid = B.baseID\n FROM component A\n JOIN ForUpd B ON A.empid = B.id\n","1179":"select * from  sampleTable\n             where \n             status = 'A' \n             and SUBSTR(some_code_column, 1, 4)  = 9999\n","1180":"create table re (country varchar2(10),reg varchar2(100));\n\ninsert into re values ('us','^[0-9]{3}-[0-9]{2}-[0-9]{4}$');\n\nselect \n   case when regexp_like('987-65-4321' ,reg) \n      then 'Match Found' \n      else 'No Match Found' \n   end as output \nfrom re\nwhere country = 'us';\n\nMatch Found\n","1181":"    SELECT month(u.`userRegistredDate`),\nsum(CASE WHEN u.`userTypeID`=1 THEN 1 ELSE 0 END) AS agent,\nsum(CASE WHEN u.`userTypeID`=2 THEN 1 ELSE 0 END) AS individuals,\nsum(CASE WHEN u.`userTypeID`=3 THEN 1 ELSE 0 END) AS builders,\nsum(CASE WHEN u.`userTypeID`=4 THEN 1 ELSE 0 END) AS real_estate_companies,\n u.`userRegistredDate` AS 'timestamp',m.month\nFROM (\nSELECT 'January' AS\nMONTH\nUNION SELECT 'February' AS\nMONTH\nUNION SELECT 'March' AS\nMONTH\nUNION SELECT 'April' AS\nMONTH\nUNION SELECT 'May' AS\nMONTH\nUNION SELECT 'June' AS\nMONTH\nUNION SELECT 'July' AS\nMONTH\nUNION SELECT 'August' AS\nMONTH\nUNION SELECT 'September' AS\nMONTH\nUNION SELECT 'October' AS\nMONTH\nUNION SELECT 'November' AS\nMONTH\nUNION SELECT 'December' AS\nMONTH\n) AS m\nleft join `dp_users` AS u  ON m.month = MONTHNAME(u.`userRegistredDate`) and u.`userRegistredDate` < Now( )\nAND u.`userRegistredDate` > DATE_ADD( Now( ) , INTERVAL -12 MONTH )\nLEFT JOIN `dp_user_types` AS ut ON u.`userTypeID` = ut.`type_id`\n\nGROUP BY  m.month\norder by FIELD(m.month,'July','August','September','October','November','December','January','February','March','April','May','June')\n","1182":"SELECT FixHours, AddHours, CalculatedValue\nFROM tbl\nWHERE FixHours = 0\nOR AddHours = 0\n\nUNION\n\nSELECT FixHours, 0, CalculatedValue\nFROM tbl\nWHERE FixHours <> 0\nAND AddHours <> 0\n\nUNION\n\nSELECT 0, AddHours, CalculatedValue\nFROM tbl\nWHERE FixHours <> 0\nAND AddHours <> 0\n","1183":"select @one := 1 as one, 2 * @one as two;\n","1184":"SELECT CST_ID,\n   SUM(CASE WHEN Type='SH' THEN 1 ELSE 0 END) as SH,     \n   SUM(CASE WHEN Type='KA' THEN 1 ELSE 0 END) as KA,\n   SUM(CASE WHEN Type='EF' THEN 1 ELSE 0 END) as EF,\n   SUM(CASE WHEN Type='SC' THEN 1 ELSE 0 END) as SC,\n   SUM(CASE WHEN Type='KA' THEN 1 ELSE 0 END) as KA,\n   SUM(CASE WHEN Type='NO' THEN 1 ELSE 0 END) as NO,\n   SUM(CASE WHEN Type='WE' THEN 1 ELSE 0 END) as WE,\n   SUM(CASE WHEN Type='TH' THEN 1 ELSE 0 END) as TH,\n   SUM(CASE WHEN Type='BV' THEN 1 ELSE 0 END) as BV\n\nFROM\n(\n  SELECT CST_ID,TRC_TYPE as Type FROM T\n   UNION ALL\n  SELECT CST_ID,COLL_TYPE as Type FROM T\n) T1\nGROUP BY CST_ID\n","1185":"DELETE\nFROM code_sum_country\nWHERE code in\n (SELECT code\n  FROM code_sum_country\n  GROUP BY code\n  HAVING COUNT (code) > 1) \nAND country NOT IN\n (SELECT MIN(country)\n  FROM code_sum_country\n  GROUP BY code\n  HAVING COUNT (code) > 1)\n","1186":"SELECT\n     T1.id,\n     T1.business_key,\n     T1.result\nFROM\n     dbo.My_Table T1\nLEFT OUTER JOIN dbo.My_Table T2 ON\n     T2.business_key = T1.business_key AND\n     T2.id > T1.id\nWHERE\n     T2.id IS NULL\n","1187":"SELECT DISTINCT SUBCASE_ID FROM YOUR_TABLE \nWHERE SUBCASE_ID NOT IN (SELECT SUBCASE_ID FROM YOUR_TABLE where ACTIVITY='Closed')\n","1188":"SELECT a.`date`, count(*) cnt, a.ip \nFROM fwlog a\nJOIN (SELECT ip, count(*) today_count\n      FROM fwlog \n      where `date` = date(now()) \n      group by ip) t\n  ON a.ip = t.ip and t.today_count > 100\nGROUP BY a.ip, a.date\nORDER BY t.today_count DESC, a.ip, a.`date` DESC\n","1189":"update t\nset t.ID = r.ID\nFROM (Select Min(ID) as ID,Cat1 From Records group by cat1) r \nINNER JOIN #Records t ON r.Cat1 = t.cat1 \nWhere t.cat1 is not null\n","1190":"declare\n    v_sql varchar2(32767) := 'select 1 column1, 2 column2 from dual';\n    v_cursor_id integer;\n    v_col_cnt integer;\n    v_columns dbms_sql.desc_tab;\nbegin\n    v_cursor_id := dbms_sql.open_cursor;\n    dbms_sql.parse(v_cursor_id, v_sql, dbms_sql.native);\n    dbms_sql.describe_columns(v_cursor_id, v_col_cnt, v_columns);\n\n    for i in 1 .. v_columns.count loop\n        dbms_output.put_line(v_columns(i).col_name);\n    end loop;\n\n    dbms_sql.close_cursor(v_cursor_id);\nexception when others then\n    dbms_sql.close_cursor(v_cursor_id);\n    raise;\nend;\n\/\n\nOutput:\nCOLUMN1\nCOLUMN2\n","1191":"UPDATE webform_submitted_data as a, webform_submitted_data as b \nSET a.data = b.data WHERE a.sid = b.sid AND a.cid = 64 AND b.cid = 56\n","1192":"SELECT IFNULL((SELECT _id FROM empty_table LIMIT 1), 1)\n","1193":"ALTER proc [dbo].[prcAdvanceSearchUser] @username varchar(50) \nas \nbegin \n\nselect *,1 as tag from userdetails \nwhere vname like @username + '%' \n\nUnion\n\nselect *,2 as tag from userdetails \nwhere vemail like @username + '%'\n\nUnion\n\nselect *,3 as tag from userdetails \nwhere vpassword like @username +'%'\n\norder by tag\n\nend\n","1194":"select s.uid ,\ns.scenid,\ngroup_concat(distinct b.badgeid) badges,\ngroup_concat(distinct w.warningid)  `warnings`,\ns.score,\ns.attempts\nfrom tblUserScenScores s\njoin tblUserWarnings w on(s.uid = w.uid and s.scenid = w.scenid)\njoin tblUserBadges b  on(s.uid = b.uid and s.scenid = b.scenid)\ngroup by s.uid ,s.scenid\n","1195":"POST \/service\/$batch HTTP\/1.1 \nHost: host \nOData-Version: 4.0\nContent-Type: multipart\/mixed;boundary=batch_36522ad7-fc75-4b56-8c71-56071383e77b\n\n--batch_36522ad7-fc75-4b56-8c71-56071383e77b\nContent-Type: multipart\/mixed;boundary=changeset_77162fcd-b8da-41ac-a9f8-9357efbbd\n\n--changeset_77162fcd-b8da-41ac-a9f8-9357efbbd\nContent-Type: application\/http \nContent-Transfer-Encoding: binary \nContent-ID: 1 \n\nPOST \/service\/Customers HTTP\/1.1 \nHost: host  \nContent-Type: application\/atom+xml;type=entry \nContent-Length: ### \n\n<AtomPub representation of a new Customer>\n--changeset_77162fcd-b8da-41ac-a9f8-9357efbbd\nContent-Type: application\/http \nContent-Transfer-Encoding: binary \nContent-ID: 2\n\nPOST $1\/Orders HTTP\/1.1 \nHost: host \nContent-Type: application\/atom+xml;type=entry \nContent-Length: ### \n\n<AtomPub representation of a new Order>\n--changeset_77162fcd-b8da-41ac-a9f8-9357efbbd--\n--batch_36522ad7-fc75-4b56-8c71-56071383e77b--\n","1196":"# Microsoft Developer Studio Project File - Database Project\nBegin DataProject = \"Database Project\"\n   MSDTVersion = \"80\"\n   SccProjectName = \"SAK\"\n   SccLocalPath = \"SAK\"\n   SccAuxPath = \"SAK\"\n   SccProvider = \"SAK\"\n Begin Folder = \"Changes\"\n      Script = \"Create users table.sql\"\n End\nEnd\n","1197":"DECLARE @version_group int\n\nselect @version_group = version_replace from (you're missing this from your query) where id=@sid\n","1198":"Select \n  in_date, \n  Sum (case when item_code = item1 then 1 else 0 end) item1,\n  Sum (case when item_code = item2 then 1 else 0 end) item2\nFrom tbl\nGroup by in_date\n","1199":"SELECT MIN(ID), FileName\nFROM YourTable\nGROUP BY FileName\n","1200":" SET @row := -1;\n UPDATE chart\n SET indx = @row := @row + 1\n WHERE report = 2\n ORDER BY indx\n","1201":"bcp AdventureWorks2012.Sales.Currency out Currency.dat -T -c -SServer1\nbcp AdventureWorks2012.Sales.Currency in Currency.dat -T -c -SServer2\n","1202":"select *\nfrom cards c\nleft join \n(\n  select *\n  from schedules s\n  join users u on s.UserID = u.ID\n  where u.ID = 1\n) x on c.ID = x.CardID\n","1203":"Update T1\nSet T1.EndDate = T2.StartDate\nFrom [Table] T1\nInner Join [Table] T2 on T1.Id = T2.Id - 1\n","1204":"SQL Fiddle DEMO\nSELECT class,\n      SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) `M`,\n      SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) `F`,\n      COUNT(1) Total\nFROM Table1\nGROUP BY class\n","1205":"$db->select()\n->from(array('a' => 'my_table'), array())\n->join(array('b' => 'my_table'), 'b.Sender = a.Recipient', array('Recipient'))\n->where('a.Sender = ?', $id)\n","1206":"MERGE INTO [Episode] AS T \nUSING (\n    SELECT [E], [1], [2], [3], [4] \n    FROM \n        ( \n             SELECT [E], [I], ROW_NUMBER() \n               OVER (PARTITION BY [E] ORDER BY [O]) AS rn\n             FROM [ICD] \n        ) AS p\n    PIVOT \n    (\n       MAX([I]) \n       FOR rn IN ([1], [2], [3], [4])) AS p2\n    ) AS S\nON T.[Epinum] = S.[E] \nWHEN MATCHED THEN\n    UPDATE SET [DX1] = S.[1], [DX2] = S.[2], [DX3] = S.[3], [DX4] = S.[4];\n","1207":"SELECT c.city, t.time_slot \nFROM cities c\nLEFT JOIN city_date d on d.city_id = c.id \nLEFT JOIN city_time t on t.city_date_id = d.city_id AND t.city_date_id = '1'\n","1208":"SELECT  DATEPART(YEAR,f_downloadtimestamp) as var_Year, \n        DATEPART(MONTH,f_downloadtimestamp) as var_Month,\n        DATEPART(DAY,f_downloadtimestamp) as var_Day,\n        COUNT(DISTINCT f_downloadIPaddress) Total_Downloads,\n        COUNT(DISTINCT CASE WHEN f_product = 'Product A' \n                           THEN f_downloadIPaddress END) Downloads_Prod_A,\n        COUNT(DISTINCT CASE WHEN f_product = 'Product B' \n                           THEN f_downloadIPaddress END) Downloads_Prod_B\nFROM tb_downloads\nGROUP BY DATEPART(YEAR,f_downloadtimestamp),\n         DATEPART(MONTH,f_downloadtimestamp),\n         DATEPART(DAY,f_downloadtimestamp)\nORDER BY var_Year desc, var_Month desc, var_Day DESC\n","1209":",DECODE(IS_COMPLETED,'Y','<a href=\"f?p=&APP_ID.:1:&SESSION.::::P1_FILE_NAME:' || FAC_FILE.NAME ||'\">View Detail<\/a>','N','') AS 'Detail'\n","1210":"select * \nfrom orders\nwhere to_char(OrderDate,'MM') = to_char(add_months(sysdate,-1),'MM')\n","1211":"WHERE ...\n  AND FIND_IN_SET(group_user.group_id, '64,66,63') > 0\n","1212":"select acc_yr, dev_age, state,\n       (case when dev_age > 12 then rev12 else revenue end) as revenue, loss\nfrom (select l.acc_yr, l.dev_age, l.state, r.revenue, l.loss,\n             max(case when l.dev_age = 12 then r.revenue end) over (partition by l.acc_yr, l.state) as rev12\n      from loss l left join\n           revenue r\n           on l.acc_yr = r.acc_yr and l.dev_age = r.dev_age and l.state = dev.state\n     ) lr;\n","1213":"CREATE TABLE page (\n  domain_name text,\n  domain_suffix text,\n  page_url text,\n  page_title text,\n  page_descr text,\n  page_updated timestamp,      \n  PRIMARY KEY ((domain_suffix, domain_name), page_updated)\n);\n","1214":"SELECT Data_CardCustomer.Code,\n    Isnull(Data_ActionPriceList.Price1 ,0) As price1,\n    Isnull(Data_ActionPriceList.Price2 ,0) As price2, \n    Isnull(Data_ActionPriceList.Price3 ,0) As price3 \nFROM Data_CardCustomer \nleft join Data_ActionPriceList on Data_ActionPriceList.CustomerId=Data_CardCustomer.CustomerId and StockId=10005\n","1215":"SESSION 1                                  SESSION 2\n--------------------------------           --------------------------------------\nSELECT count(*) FROM test;\n=> 10\n                                           INSERT INTO test VALUES ('x');\n\nSELECT count(*) FROM test;\n=> 10 with read committed\/serializable\n=> 11 with read uncommited (dirty read)\n                                           COMMIT;\n\nSELECT count(*) FROM test;\n=> 10 with serializable\n=> 11 with read uncommitted\/read committed\n","1216":"SELECT B.Book_ID\n     , B.Book_Title\n     , group_concat(A.Author_name order by ABP.Prec Desc separator ', ') as Authors\nFROM Author_Book_Percent ABP\nINNER JOIN AUTHORS A\n  on ABP.Author_ID = A.Author_ID\nINNER JOIN BOOKS B\n  on ABP.Book_ID = B.Book_ID\nGROUP BY B.Book_ID, B.Book_Title\n","1217":"select 'DROP TRIGGER ' || rdb$trigger_name || ';' from rdb$triggers\n  where (rdb$system_flag = 0 or rdb$system_flag is null)\n","1218":"set delimiter \/\/\n\ncreate procedure iskanje(in naziv varchar(10))\n\nBEGIN\n    SELECT A.ime, A.opis, B.kategorija\n    FROM file as A, cathegory as B\n    WHERE A.ime LIKE concat('%',naziv,'%')\n       OR A.opis LIKE concat('%',naziv,'%')\n       OR B.kategorija LIKE concat('%',naziv,'%');\nEND\/\/\n\nset delimiter ;\n","1219":"Dim adapter As New SqlDataAdapter(cmd)\nDim ds As New DataSet\nadapter.Fill(ds)\n\nlsbDestination.DataTextField = \"Company\"\nlsbDestination.DataValueField = \"CustomerId\"\nlsbDestination.DataSource = ds.Tables(0)\nlsbDestination.DataBind()\n","1220":"SELECT *\nFROM posts p\nWHERE NOT EXISTS(\n    SELECT 1\n    FROM comments c\n    WHERE c.comment_date >= 'deadline'\n    AND p.post_id = c.post_id\n)\n","1221":"SELECT to_char(rs.cr_date, 'MM\/DD\/YYYY') as \"Date\",\n       sum(case when rs.s_method Like '%RTS%' then 1 else 0 end) as \"RTS Returned Orders\"\nFROM return_sku rs join\n     order_sku os\n     on os.ord_sku_id = rs.ord_sku_id\nWHERE trunc(created_date) = trunc(SYSDATE)\nGROUP BY to_char(rs.cr_date, 'MM\/DD\/YYYY');\n","1222":"<c:forEach var=\"row\" items=\"${recordset.rows}\">\n  <tr>\n    <td><c:out value=\"${row.INSEE_COMMUNE}\"\/><\/td>\n    <td><c:out value=\"${row.NOM_COMMUNE_MIN}\"\/><\/td>\n    <td><c:out value=\"${row.NOM_CC}\"\/><\/td>\n  <\/tr>\n<\/c:forEach>\n","1223":"UPDATE myTable old\n  JOIN myTable new USING (id)\nSET    new.start_year = old.end_year,\n       new.end_year = old.start_year\nWHERE  old.start_year > old.end_year\n","1224":"UPDATE YourTable set StateCol = replace(StateCol,'.','')\n","1225":"CREATE OR REPLACE FUNCTION test( p_test text[] )\n  RETURNS void AS\n$BODY$\nBEGIN\n  SELECT id FROM unnest( p_test ) AS id;\nEND;\n$BODY$\n  LANGUAGE plpgsql IMMUTABLE\n  COST 1;\n","1226":"with \ncount_table as (\n     select 1001 device_id,  4 quantity from dual union all\n     select 1002 device_id, 20 quantity from dual union all\n     select 1003 device_id,  1 quantity from dual \n),\ndevice_table as (\n     select 1001 id, 'Yes'     wifi, 'No'       email, 'No'  bluetooth from dual union all\n     select 1002 id, 'Yes'     wifi, 'Yes'      email, 'No'  bluetooth from dual union all\n     select 1003 id, 'Unknown' wifi, 'Unknown'  email, 'Yes' bluetooth from dual \n)\n----------------------------------------\nselect * from (\n      select\n        feature,\n        yes_no_unknown,\n        sum(quantity)  quantity\n      from \n         count_table  c join \n         device_table d on c.device_id = d.id\n      unpivot  ( yes_no_unknown\n                 for feature in (wifi, email, bluetooth)\n      ) \n      group by \n      feature,\n      yes_no_unknown\n)  \npivot ( sum (quantity)\n        -- only this line I have changed  ..\n        for featur in ('WIFI' as Wifi, 'EMAIL' as Email, 'BLUETOOTH' as Bluetooth)\n);\n","1227":"select \n  a.Id,\n  a.Answer1, \n  a.Answer2, \n  a.Answer3, \n  a.Answer4,\n  TopAnswers.*\nfrom AnswerTable a\nouter apply (\n  select top 1 Answer, count(*) as cnt\n  from (\n    select Answer1 as Answer from AnswerTable where Id = a.Id\n    union all\n    select Answer2 from AnswerTable where Id = a.Id\n    union all\n    select Answer3 from AnswerTable where Id = a.Id\n    union all\n    select Answer4 from AnswerTable where Id = a.Id\n  ) x\n  group by Answer\n  order by count(*) desc, Answer asc\n) TopAnswers\n","1228":"select (case when ref like 'FA%' then 'FA' else 'OTHER' end) as grp,\n       sum(ETILIQUIDO) as total\nfrom pn where FDATA between #1# and #2#\ngroup by (case when ref like 'FA%' then 'FA' else 'OTHER' end);\n","1229":"Private Sub TotalMonthlyEnquiries_Click()\n\n    DoCmd.OpenForm \"frmQuery2\", acFormDS\n\n    Forms!frmQuery2.Filter = \"Format([DateOfEnquiry], \"\"mmmm\"\") = '\" & Me![Month] & \"'\"\n    Forms!frmQuery2.FilterOn = True\n\nEnd Sub\n","1230":"INSERT INTO sys.book \nSELECT * FROM syste.mytable\nWHERE column1 = valueThatYouWantInTableBook\n","1231":"SELECT id, first_name, last_name \nFROM users \nWHERE (first_name LIKE 'jo%' OR last_name like 'jo%')\n","1232":"INSERT  Table2\n        (Produce, Cust1_Totals, Cust2_Totals, Cust3_Totals)\nSELECT  Fruit\n,       SUM(case when Customer_ID = 1 then quantity end)\n,       SUM(case when Customer_ID = 2 then quantity end)\n,       SUM(case when Customer_ID = 3 then quantity end)\nFROM    Table1\nWHERE   Customer_ID IN (1,2,3)\nGROUP BY \n        Fruit\n","1233":"select Id\nfrom tbl\ngroup by Id\nhaving max(case when Code='a' then 0 else 1 end) = 0\n","1234":"SELECT   context, SUM(file_size) AS size \nFROM     content_resource\nGROUP BY context\nHAVING   SUM(file_size) > 5000000000\n","1235":"SELECT    ([Address Line 1] + ', ' + [Address Line 2] + ', ' + [Address Line 3] + ', ' \n          + Town + ', ' + Region + ', ' + Postcode) AS Address\nFROM      TableName\n","1236":"select 0, sum(iif(coffee = 0, 1, 0)) as coffee, sum(iif(tea = 0, 1, 0)) as tea,\n       sum(iif(water = 0, 1, 0)) as water, sum(iif(hot_choc = 0, 1, 0)) as hot_choc\nfrom drinks d\nunion all\nselect 1, sum(iif(coffee = 1, 1, 0)) as coffee, sum(iif(tea = 1, 1, 0)) as tea,\n       sum(iif(water = 1, 1, 0)) as water, sum(iif(hot_choc = 1, 1, 0)) as hot_choc\nfrom drinks d\nunion all\nselect 2, sum(iif(coffee = 2, 1, 0)) as coffee, sum(iif(tea = 2, 1, 0)) as tea,\n       sum(iif(water = 2, 1, 0)) as water, sum(iif(hot_choc = 2, 1, 0)) as hot_choc\nfrom drinks d;\n","1237":"SELECT *\nFROM (\n    SELECT people.*,\n        IF(gender=0, @mr:=@mr+1, @fr:=@fr+1) AS rank\n    FROM people, (SELECT @mr:=0, @fr:=0) initvars\n) tmp\nORDER BY rank ASC, gender ASC;\n","1238":"with ValidNumbers as (\n     select 1 as begin_num, 10 as end_num from dual union all\n     select 11, 20 from dual union all\n     select 21, 30 from dual union all\n     select 55, 70 from dual\n    )\nselect v_begin, v_end,\n       sum(1 + (case when v_end >= vn.end_num then vn.end_num else v_end end) -\n           (case when v_begin >= vn.begin_num then v_begin else vn.begin_num end)\n          ) as SumInRecords,\n       max(1 + v_end - v_begin) as TheRange,\n       (case when sum(1 + (case when v_end >= vn.end_num then vn.end_num else v_end end) -\n                      (case when v_begin >= vn.begin_num then v_begin else vn.begin_num end)\n                     ) =\n                   max(1 + v_end - v_begin)\n             then 'All' else 'Missing'\n         end)\nfrom ValidNumbers vn cross join\n     (select 2 as v_begin, 8 as v_end from dual union all\n      select 2, 18 from dual union all\n      select 2, 28 from dual union all\n      select 2, 38 from dual\n     ) const\nwhere v_begin <= vn.end_num and\n      v_end >= vn.begin_num\ngroup by v_begin, v_end;\n","1239":"create table a(line string) row format delimited fields terminated by '\\A';\n\ncreate view b as\nselect\nregexp_extract(line, '([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)', 1) as col1,\nregexp_extract(line, '([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)', 2) as col2,\nregexp_extract(line, '([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)', 3) as col3,\nregexp_extract(line, '([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)', 4) as col4,\nregexp_extract(line, '([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)', 5) as col5,\nsplit(regexp_extract(line, '([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)\\;([^\\;]*)', 6), '\\;') as rest\nfrom a;\n","1240":"declare @totalProfitAndLoss decimal(18,0); --I'd go for BIGINT here unless you're sure you need 18 digits\ndeclare @resultTable table (\n    Particular varchar(100),\n    Amount decimal(18,0),\n    Particular2 varchar(100),\n    Amount2 decimal(18,0));\ninsert into @resultTable exec ssspAccProfitAndLoss\nselect @totalProfitAndLoss = sum(Amount1) from @resultTable\n","1241":"+------------+---------------------------------+\n    | SourceValue| DestinationValue After execution|\n    +------------+---------------------------------+\n    | 0.579      | 0.579                           |\n    | 0.637      | 0.637                           |\n    | 0.503      | 0.503                           |\n    +------------+---------------------------------+\n","1242":"to_char(date_column, 'dd\/mm\/yyyy')\n","1243":"SET NOCOUNT ON;\n\nDECLARE @sql NVARCHAR(MAX) = N'';\n\nSELECT @sql += ' UNION ALL \n    SELECT [name] = ''' + QUOTENAME(name) + ''', \n    catalog_name = name COLLATE Latin1_General_CI_AI,\n    is_importing\n  FROM ' + QUOTENAME(name) + '.sys.fulltext_catalogs'\n  FROM sys.databases WHERE database_id > 4;\n\nSET @sql = 'SELECT [database] = d.name, \n    s.catalog_name,\n    s.is_importing\nFROM sys.databases AS d \nLEFT OUTER JOIN (' + STUFF(@sql, 1, 10, '') + ') AS s \nON QUOTENAME(d.name) = s.name\nWHERE d.database_id > 4;';\n\nCREATE TABLE #temp(db SYSNAME, catalog_name NVARCHAR(255), is_importing BIT);\n\nINSERT #temp EXEC sp_executesql @sql;\n\nDECLARE @db SYSNAME, @catalog_name NVARCHAR(255), @is_importing BIT;\n\nDECLARE c CURSOR LOCAL STATIC FORWARD_ONLY READ_ONLY\nFOR SELECT db, catalog_name, is_importing FROM #temp;\n\nOPEN c;\n\nFETCH NEXT FROM c INTO @db, @catalog_name, @is_importing;\n\nWHILE @@FETCH_STATUS = 0\nBEGIN\n    IF @catalog_name IS NULL\n    BEGIN\n        PRINT 'No catalogs for ' + @db;\n    END\n    ELSE\n    BEGIN\n        IF @is_importing = 1\n        BEGIN\n            PRINT 'Do something to ' + @db \n                + '(importing)';\n        END\n        ELSE\n        BEGIN\n            PRINT @db + ' is not importing.';\n        END\n    END\n    FETCH NEXT FROM c INTO @db, @catalog_name, @is_importing;\nEND\n\nCLOSE c;\nDEALLOCATE c;\n\nDROP TABLE #temp;\n","1244":"for e in Entry.objects.all():\n    print e.headline\n","1245":"select (case when su1.id is not null and su2.id is not null then 'BOTH'\n             when su1.id is not null then 'TYPE1'\n             when su2.id is not null then 'TYPE2'\n             else 'Neither'\n        end)\nfrom (select 999 as user_id from dual) u left join\n     sub_user_1 su1\n     on su1.id = u.user_id left join\n     sub_user_2 su2\n     on su2.id = u.user_id\n","1246":"select EOMonth(weeks), sum(month_summ)\nfrom ((select weeks, year(weeks) as yy, month(weeks) as mm,\n              (case when day(weeks) >= 7 then summ\n                    else summ * day(weeks) \/ 7.0\n               end) as month_summ\n       from #old o\n      ) union all\n      (select dateadd(month, -1, weeks) as weeks,\n              year(dateadd(month, -1, weeks)) as yy,\n              month(dateadd(month, -1, weeks)) as mm,\n              summ * (1 - day(weeks) \/ 7.0)\n       from #old o\n       where day(weeks) < 7\n      )\n     )\ngroup by EOMonth(weeks);\n","1247":"SELECT @Average = \n   case\n   when convert(int, @hour) <> 0 then convert(varchar(9), convert(int, @hour)) + ':'\n   else ''\n   end +   \n   right('00' + convert(decimal(10,0), convert(decimal(18,2), @Mns)), 2) + ':' +\n   right('00' + CONVERT(decimal(10,0), convert(varchar(10), @second)), 6)\n","1248":"SELECT   YearCreated, COUNT(*)\nFROM     (SELECT    UserId, DATEPART(year, MIN(DateCreated)) AS YearCreated\n          FROM      users\n          GROUP BY  UserId) t\nGROUP BY YearCreated\n","1249":"SELECT\n  t.ID,\n  count(case when A between 2 and 4 then ID end),\n  AVG(case when B between 19 and 40 then B end),\n  COUNT(case when C between 12 and 14 then id end)\nFROM t\nGROUP BY ID\nUNION\nselect\n  'Overall',\n  count(case when A between 2 and 4 then ID end),\n  AVG(case when B between 19 and 40 then B end),\n  COUNT(case when C between 12 and 14 then id end)\nFROM t\n","1250":"try\n{\n    \/\/ Create the TransactionScope to execute the commands, guaranteeing\n    \/\/ that both commands can commit or roll back as a single unit of work.\n    using (TransactionScope scope = new TransactionScope())\n    {\n        using (SqlConnection connection1 = new SqlConnection(connectString1))\n        {\n            \/\/ Opening the connection automatically enlists it in the \n            \/\/ TransactionScope as a lightweight transaction.\n            connection1.Open();\n\n\n           \/\/ Call sql stored procedure(SP1) to generate a reference Number                 \n\n           SqlCommand command1 = new SqlCommand(commandText1, connection1);\n           returnValue = command1.ExecuteScalar();\n\n\n          \/\/Begin loop. loop count would be number of records that are in a collection \n              \/\/Insert records to database using another stored procedure(SP2) using the \n              \/\/reference number generated in the previous step \n          \/\/End Loop \n\n        }\n        \/\/ The Complete method commits the transaction. If an exception has been thrown,\n        \/\/ Complete is not  called and the transaction is rolled back.\n        scope.Complete();\n    }\n}\ncatch (TransactionAbortedException ex)\n{\n    writer.WriteLine(\"TransactionAbortedException Message: {0}\", ex.Message);\n}\n","1251":"Use XML path for this.\n\nselect (select BandName+',' from BandMaster where BandId<100 for xml path('')) as NewColumnName\n\nTry this\n","1252":"DELIMITER $$\n\nCREATE PROCEDURE ABC()\nBEGIN\n  CREATE TEMPORARY TABLE tmpEnt SELECT 1;\nEND$$\n\nCREATE PROCEDURE XYZ()\nBEGIN\n  INSERT INTO tmpEnt VALUES (100);\nEND$$\n\nDELIMITER ;\n\nCALL ABC; -- it will create temp. table\nCALL XYZ; -- it will insert one more record into temp. table\n\nSELECT * FROM tmpEnt;\n+-----+\n| 1   |\n+-----+\n|   1 |\n| 100 |\n+-----+\n","1253":"SELECT url,row_number FROM(\n     SELECT url,row_number() OVER (PARTITION BY domain) FROM website\n     WHERE domain IN\n    (SELECT DISTINCT domain FROM link)  \n) AS links \nWHERE row_number <= 10\nLIMIT 25\n","1254":"select [Your column list] from tableA A\ninner join tableB B\non A.EANno = B.EANno\n\nunion all\n\nselect [Your column list] from tableB B\nwhere B.EANno not in (select distinct EANno from tableA)\n","1255":"select t1.*,t2.team as opponent, t2.group as opponentgroup, t2.country as opponent country\nfrom table t1 inner join table t2 on t1.country<>t2.country and t1.group<>t2.group\n","1256":"CREATE OR REPLACE PROCEDURE TST_SMS_IN\n(\n--P_MSISDN NUMBER,\nP_MOBILE_NO varchar2, \nP_SMS_BODY VARCHAR2,\np_IN_ID    INTEGER\n)\nIS\n\nV_SYSTEM_DATE DATE;\nV_YEAR NUMBER;\nV_YEAR_SYSTEM NUMBER;\nV_TABLE_NAME VARCHAR2(100) :='';\nV_SQL VARCHAR2(1000) :='';\nV_ERROR_MESSAGE VARCHAR2(1000) :='';\n\nP_AVG NUMBER;\nV_CREATED_BY NUMBER;\n\nBEGIN\n     INSERT INTO SMS_IN(IN_ID,MOBILE_NO,SMS_BODY,STATUS,USERS,REMARKS,IN_TIME) VALUES\n     (SMS_IN_SEQ.NEXTVAL,P_MOBILE_NO,P_SMS_BODY,0,'gp','TEST',sysdate);\n\n     p_IN_ID := SMS_IN_SEQ.CURRVAL;\n\n     COMMIT;\n\nEND TST_SMS_IN;\n","1257":"SELECT * FROM table1 where ID in (SELECT min(ID) FROM table1 WHERE ID > 12)\n","1258":"ALTER TABLE DEPARTAMENTOS \n    ADD CONSTRAINT FK_DEPT_EMP FOREIGN KEY (numDirect) \n    REFERENCES EMPLEADOS(numEmpl)\n    DEFERRABLE INITIALLY DEFERRED\n    ;\nALTER TABLE EMPLEADOS \n    ADD CONSTRAINT FK_EMP_DEPT FOREIGN KEY (numDept) \n    REFERENCES DEPARTAMENTOS(numDept)\n    DEFERRABLE INITIALLY DEFERRED\n    ;\n","1259":"SET NOCOUNT ON\nGO\n\n    DECLARE @DataSource TABLE\n    (\n        [IssueDependencyId] BIGINT IDENTITY(1,1) NOT NULL,\n        [IssueId] BIGINT NOT NULL,\n        [DependsOnIssueId] BIGINT NOT NULL\n    )\n\n    INSERT INTO @DataSource ( [IssueId], [DependsOnIssueId])\n    VALUES   (48, 0)\n            ,(49, 48)\n            ,(50, 48)\n            ,(51, 48)\n            ,(55, 48)\n            ,(56, 48)\n            ,(52, 49)\n            ,(52, 50)\n            ,(52, 51)\n            ,(53, 52)\n            ,(57, 54)\n            ,(54, 55)\n            ,(57, 56)\n\n    ;WITH DataSource ([IssueId], [DependsOnIssueId], [Start_Point], [End_Point]) AS \n    (\n        SELECT AnchorMebemr.[IssueId]\n              ,AnchorMebemr.[DependsOnIssueId]\n              ,0\n              ,10\n        FROM @DataSource AS AnchorMebemr\n        WHERE AnchorMebemr.[IssueId] = 48\n        UNION ALL\n        SELECT RecursiveMebemer.[IssueId]\n              ,RecursiveMebemer.[DependsOnIssueId]\n              ,DS.[End_Point]\n              ,DS.[End_Point] + 10\n        FROM @DataSource AS RecursiveMebemer \n        INNER JOIN DataSource DS\n            ON RecursiveMebemer.[DependsOnIssueId] = DS.[IssueId]\n\n    )\n    SELECT DISTINCT DS.[IssueId]\n                   ,DS.[DependsOnIssueId]\n                   ,DS.[Start_Point]\n                   ,DS.[End_Point]\n    FROM DataSource DS\n    ORDER BY DS.[IssueId]\n            ,DS.[DependsOnIssueId]\n\nSET NOCOUNT OFF\nGO\n","1260":"SELECT SUM(o.duration) \/ 60.00 AS duration\nFROM dbo.tbl_chatMessages t1\n  OUTER APPLY (\n               SELECT TOP 1 \n                 CASE WHEN DATEDIFF(second, t2.messageTime, t1.messageTime) > 600\n                      THEN 0 \n                      ELSE DATEDIFF(second, t2.messageTime, t1.messageTime) END\n               FROM dbo.tbl_chatMessages t2\n               WHERE t1.messageTime > t2.messageTime\n               ORDER BY t2.messageTime DESC\n               ) o(duration)\n","1261":"for (i in 1:1000) {\n  tmp.ids <- ids[((i - 1) * 100 + 1) : (i * 100)]\n  query <- paste0(\"SELECT * FROM myTable WHERE idvar IN (\", \n                     paste0(tmp.ids, collapse = \", \"),\n                  \")\")\n  dbSendquery(con, query)\n  fetch results, etc..\n}\n","1262":"SELECT  *\n        , COUNT(UserID) OVER(PARTITION BY UserID) AS 'Total'\nFROM    TBL1 1  \n        INNER JOIN TBL2 2 On 2.FK = 1.FK\n        INNER JOIN TBL3 3 On 3.PK = 2.PK INNER JOIN TBL4 4 On 4.PK = 3.PK \n        LEFT OUTER JOIN TBL5 5 ON 4.PK = 5.PK \nWHERE   1.Date_Time_In BETWEEN '2010-11-15 12:00:00' AND '2010-11-30 12:00:00'\nORDER BY \n        4.Column, 3.Column, 3.Column2, 1.Date_Time_In DESC\n","1263":"CREATE table #msg(id integer, type integer, msg nvarchar(max), ts datetime)\n\nINSERT INTO #msg VALUES (1, 2, 'user msg 1',     '2011-11-01 16:00')\nINSERT INTO #msg VALUES (2, 2, 'user msg 2',     '2011-11-01 16:01')\nINSERT INTO #msg VALUES (3, 1, 'operator msg 1', '2011-11-01 16:02')\nINSERT INTO #msg VALUES (4, 1, 'operator msg 2', '2011-11-01 16:03')\nINSERT INTO #msg VALUES (5, 1, 'operator msg 3', '2011-11-01 16:04')\nINSERT INTO #msg VALUES (6, 2, 'user msg 3',     '2011-11-01 16:05')\nINSERT INTO #msg VALUES (7, 2, 'user msg 4',     '2011-11-01 16:06')\n\n;WITH\n   o AS (\n  SELECT id, ts, msg\n  FROM   #msg\n  WHERE  type = 1\n  )\n  ,u AS (\n  SELECT id, ts, msg, (SELECT TOP 1 id FROM o\n                       WHERE  o.ts <= x.ts ORDER BY ts DESC) AS o_id\n  FROM   #msg x\n  WHERE  type = 2\n  )\nSELECT o.msg, (SELECT u.msg + ',' FROM u WHERE  u.o_id = o.id\n               ORDER  BY u.ts, u.id FOR XML PATH('')) AS u_msg\nFROM   o\nORDER  BY o.ts\n","1264":"UPDATE A\nSET\nA.Balance = @Balance\n, @PreBalance = @Balance\n, @Balance = ( CASE WHEN (@Balance IS NULL OR @AccountType <> A.AccountType)\n                    THEN \n                        CASE WHEN A.Balance - A.Due >= 0\n                            THEN A.Balance\n                            ELSE A.Balance + A.Due\n                        END\n                    ELSE \n                        CASE WHEN @Balance - A.Due >= 0 AND (@Flag = 1 OR @AccountNO <> A.AccountNO)\n                              THEN @Balance\n                              ELSE @Balance + A.Due\n                         END\n                END) - A.Due\n, A.FLAG = @Flag\n, @AccountNO = CASE WHEN A.Flag = 0 THEN A.AccountNO ELSE 'NoDueFoundForAcc' END\n, @Flag = CASE WHEN @AccountType = A.AccountType \n                THEN \n                    CASE WHEN @PreBalance = @Balance \n                            THEN 0 \n                            ELSE 1 \n                        END\n                ELSE \n                    CASE WHEN A.Balance - A.Due >= 0\n                            THEN 1\n                            ELSE 0 \n                        END\n                END\n, @AccountType = A.AccountType\nFROM #tempTable A\n\nSELECT * FROM #tempTable A WHERE A.Flag = 1\n","1265":"CREATE TRIGGER [dbo].[TRIG_MyTable]\nON [dbo].[MyTable]\nAFTER INSERT, UPDATE\n\nAS \n\nDECLARE @INS int, @DEL int\n\nSELECT @INS = COUNT(*) FROM INSERTED\nSELECT @DEL = COUNT(*) FROM DELETED\n\nIF @INS > 0 AND @DEL > 0 \nBEGIN\n\n    -- a record got updated, so log accordingly.\n\n    INSERT INTO MyLogTable\n    SELECT 'New Values', getdate() FROM INSERTED\n\n    INSERT INTO MyLogTable\n    SELECT 'Old Values', getdate() FROM DELETED\n\nEND\n\nELSE \nBEGIN\n\n    -- a new record was inserted.\n\n    INSERT INTO MyLogTable\n    SELECT 'Insert', getdate() FROM INSERTED\n\nEND\n","1266":"Select min(ID), Name, min(value)\nFrom yourtable\nGroup by  name\n","1267":"insert into DiscussionParticipation (User_id, Discussion_id) (\n\n    select a.User_id as User_id, d.id as Discussion_id\n    from Discussion d\n    inner join Activity a on (a.id = d.Activity_id)\n\n    union\n\n    select r.User_id as User_id, d.id as Discussion_id\n    from Discussion d\n    inner join Response r on (r.Activity_id = d.Activity_id)\n\n);\n","1268":"with location_code as (\nselect 'ASDFSFD' loc_code, 555555 zipcode from dual\nunion all select 'OUIXVCX', 555555 from dual\nunion all select '2KLJSDF', 555555 from dual\nunion all select '887CSD', 555555 from dual\n)\nselect rtrim (xmlagg (xmlelement (e, loc_code || ',')).extract ('\/\/text()'), ',') \nfrom location_code where zipcode = 555555;\n","1269":"select Parent,\nmax(case when Child='Color' then Value End) 'Color',\nmax(case when Child='Height' then Value End) 'Height',\nmax(case when Child='Width' then Value End) 'Width',\nmax(case when Child='Length' then Value End) 'Length'\nfrom yourtable\ngroup by Parent\n","1270":"SELECT id, chapter_id, question, answer \nFROM (SELECT IF(@chapterId=@chapterId:=chapter_id, @id:=@id+1, @id:=0) queNo, id, chapter_id, question, answer \n      FROM `questions`, (SELECT @chapterId:=0, @id:=0) AS A \n      WHERE `chapter_id` IN (19, 20, 21, 22, 23)\n      ORDER BY `chapter_id`\n     ) AS A \nWHERE queNo < 10\n","1271":"SUM(Totals) AS \"Week Day Count\"\n","1272":"WHERE ISNULL(Code4,SomeInteger)=SomeInteger\n","1273":"columnID\ncolumnId\ncolumnIDAlternative\ncolumnIdAlternative\nRASCScore\nRascScore\n\ncolumn_id\ncolumn_id_alternative\nrasc_score\n","1274":"SELECT *\n  FROM table\n WHERE LOWER(A) = 'x'\n   AND LOWER(B) IN ('w', 'y', 'z')\n","1275":"SELECT type, car_numbers, AVG(price) AS average_price\nFROM (SELECT type_id, type, SUM(car_numbers) AS car_numbers\n      FROM table1\n      GROUP BY type_id) AS t1\nJOIN table2 AS t2 ON t1.type_id = t2.type_id\nGROUP BY type\n","1276":"CREATE EVENT DO_INSERT_OP\nON SCHEDULE\nAT CURRENT_TIMESTAMP + INTERVAL 1 SECOND\nDO INSERT INTO mytable (name,surname)\nVALUES ('john','john');\n","1277":"select\n    c.caseNo,\n    max(e.eventDate) as eventDate\nfrom\n    cases c\n    inner join events e on\n        c.id = e.caseid\ngroup by\n    c.caseNo\n","1278":"select p.id, p.text, c.id, c.parent, c.feature\nfrom Parents p\nleft join (select c1.id, c1.parent, c1.feature\n             from Childs c1\n             join (select p1.id, max(c2.feature) maxFeature\n                     from Parents p1\n                left join Childs c2 on p1.id = c2.parent\n            group by p1.id) cf on c1.parent = cf.id \n                              and c1.feature = cf.maxFeature) c\non p.id = c.parent\n","1279":"DELIMITER \/\/\n\nCREATE FUNCTION STRINGDECODE(str TEXT CHARSET utf8)\nRETURNS text CHARSET utf8 DETERMINISTIC\nBEGIN\ndeclare pos int;\ndeclare escape char(6) charset utf8;\ndeclare unescape char(3) charset utf8;\nset pos = locate('\\\\u', str);\nwhile pos > 0 do\n    set escape = substring(str, pos, 6);\n    set unescape = char(conv(substring(escape,3),16,10) using ucs2);\n    set str = replace(str, escape, unescape);\n    set pos = locate('\\\\u', str, pos+1);\nend while;\nreturn str;\nEND\/\/\n\nDELIMITER ;\n","1280":"SELECT MIN(time) time, status\n  FROM\n(\n  SELECT time, status,\n         @n := @n + 1 rnum,\n         @g := IF(status = @s, @g + 1, 1) rnum2,\n         @s := status\n    FROM table1 CROSS JOIN (SELECT @n := 0, @g := 0, @s := NULL) i\n   ORDER BY time \n) q\n GROUP BY rnum - rnum2\n","1281":"@PrePersist\nvoid makeCreationTimestamp() {\n createdAt = System.currentTimeMillis();\n}\n","1282":"SELECT name,gender from (\n    SELECT name,gender,\n           row_number() OVER(PARTITION BY gender ORDER BY name ASC) as rnk\n    FROM YourTable)\nWHERE rnk = 1\n","1283":"CREATE OR REPLACE TRIGGER trigger_name\nBEFORE INSERT ON TABLE_NAME\nFOR EACH ROW BEGIN \n   IF :new.NAME = 'Bob' then\n      :new.VALUE := :new.VALUE + (:new.VALUE*0.25) ;\n  END IF; \nEND; \n\/\n","1284":"select year,\ncount(distinct case when `Genre` = 'hip hop' then 1 end) as hiphop,\ncount(distinct case when `Genre` = 'pop-dance' then 1 end) as popdance\nfrom tbl\ngroup by year\n","1285":"select \ncenter_id, month_id, sales_amt,\n(\nsales_amt + \nlead (sales_amt,1,0) over (PARTITION BY center_id ORDER BY month_id desc) +\n  lead (sales_amt,2,0) over (PARTITION BY center_id ORDER BY month_id desc) +\n  lead (sales_amt,3,0) over (PARTITION BY center_id ORDER BY month_id desc)\n) sales_4_month\nfrom Sales\n","1286":"SELECT\nPLSSUPostcode  \n,case when CHARINDEX(' ', PLSSUPostcode) > 0 \n then SUBSTRING(PLSSUPostcode, 1, CHARINDEX(' ', PLSSUPostcode))\nelse PLSSUPostcode end AS PCode\nFROM \nTblPostcodes\n","1287":"SELECT CASE \n           WHEN CAST(tDate as DATE) < CAST(GETDATE() as date) -- if older then Today\n           THEN DATEADD(dd,-1,CAST(GETDATE() as date))        -- assgin yesterday's date\n           ELSE CAST(tDate as date)                           -- use the date\n       END as tDate, \n       SUM(tDuration-ISNULL(tDone,0)) as tToDo FROM tTable \n\n    WHERE .....conditions.....\n\n    GROUP BY CASE \n           WHEN CAST(tDate as DATE) < CAST(GETDATE() as date) -- if older then Today\n           THEN DATEADD(dd,-1,CAST(GETDATE() as date))        -- assgin yesterday's date\n           ELSE CAST(tDate as date)                           -- use the date\n       END   \n    ORDER BY tDate\n","1288":"UPDATE test SET name = INSERT(name, LENGTH(name), 0, '_');\n","1289":"-- BAD! DO NOT DO THIS! --\ninsert customer (email, count) \nselect 'foo@example.com', 0\nwhere not exists (\n      select 1 from customer\n      where email = 'foo@example.com'\n)\n","1290":"column = Production.t171.label('3harm')\ncolumn.quote = True\nsession.query(column)\n","1291":"select m.maker, t.type\nfrom (select distinct maker from product) m cross join\n     (select distinct type from product) t;\n","1292":"@Query(\"from table t where t.propertyOne in :param1 and (t.propertyTwo like :param2 or t.propertyThree like :param3 or t.propertyFour like :param4)\")\nList<Table> findByParams(@Param(\"param1\") List<String> param1, @Param(\"param2\") String param2, @Param(\"param3\") String param3, @Param(\"param4\") String param4);\n","1293":"SELECT * FROM table_a  WHERE CURDATE() <= date_created \n","1294":"PLAYER_ATTEMPTS_TB::Game_Level\n","1295":" SELECT CL.CompanyName, count([IncentiveId]) \n FROM AdminInvoices\n INNER JOIN (select distinct AdminId, CompanyId from AdminClientSystem) as ACS\n ON AdminInvoices.AdminId = ACS.AdminId\n INNER JOIN ClientData\n ON ACS.CompanyId= ClientData.CompanyId\n GROUP BY CL.CompanyName\n ORDER BY CL.CompanyName ASC\n","1296":"INSERT INTO SecondTable\nSELECT id, A, B, C\nFROM CurrentTable\n\nINSERT INTO ThirdTable\nSELECT id, D, E\nFROM CurrentTable\n","1297":"SQL> set long 5000\nSQL> var c clob\nSQL>\nSQL> declare\n  2      ctx dbms_xmlgen.ctxhandle;\n  3  begin\n  4      ctx := dbms_xmlgen.newcontext('select * from emp where deptno = 10');\n  5      -- set EMPTY_TAG  flag\n  6      dbms_xmlgen.SETNULLHANDLING (ctx, 2);\n  7      :c := dbms_xmlgen.getxml(ctx);\n  8  end;\n  9  \/\n\nPL\/SQL procedure successfully completed.\n\nSQL>\nSQL> print c\n\nC\n--------------------------------------------------------------------------------\n<?xml version=\"1.0\"?>\n<ROWSET>\n <ROW>\n  <EMPNO>7782<\/EMPNO>\n  <ENAME>BOEHMER<\/ENAME>\n  <JOB>MANAGER<\/JOB>\n  <MGR>7839<\/MGR>\n  <HIREDATE>09-JUN-81<\/HIREDATE>\n  <SAL>2450<\/SAL>\n  <COMM\/>\n  <DEPTNO>10<\/DEPTNO>\n  <LEAVE_DATE\/>\n <\/ROW>\n <ROW>\n  <EMPNO>7839<\/EMPNO>\n  <ENAME>SCHNEIDER<\/ENAME>\n  <JOB>PRESIDENT<\/JOB>\n  <MGR\/>\n  <HIREDATE>17-NOV-81<\/HIREDATE>\n  <SAL>5000<\/SAL>\n  <COMM\/>\n  <DEPTNO>10<\/DEPTNO>\n  <LEAVE_DATE\/>\n <\/ROW>\n <ROW>\n  <EMPNO>8070<\/EMPNO>\n  <ENAME>DUGGAN<\/ENAME>\n  <JOB>SALES<\/JOB>\n  <MGR>7782<\/MGR>\n  <HIREDATE>19-NOV-09<\/HIREDATE>\n  <SAL>2500<\/SAL>\n  <COMM\/>\n  <DEPTNO>10<\/DEPTNO>\n  <LEAVE_DATE\/>\n <\/ROW>\n<\/ROWSET>\n\n\nSQL>\n","1298":"UPDATE your_table t1 -- Your table goes here\nSET [Column3] = rand()\nFROM your_table t2 -- and here\nWHERE (t1.[Column1] = t2.[Column1] AND t1.[Column2] = t2.[Column2]) OR\n    (t1.[Column1] = t2.[Column2] AND t1.[Column2] = t2.[Column1])\n","1299":"select convert(decimal(10,2),sum(balance)\/100.0) as Balance   \nfrom member\n","1300":"SELECT l.img_id, l.img_name, \n (SELECT COUNT(*) FROM tbl_comments c WHERE i.img_id = c.img_id ) AS comment_count,\n (SELECT COUNT(*) FROM tbl_vote v WHERE i.img_id = v.img_id ) AS vote_count\nFROM tbl_images i \n","1301":"select e.*\nfrom events e\nwhere exists (select 1\n              from events e2\n              where e2.name = e.name and\n                    year(e2.DateOfAttendence) = 2002\n             );\n","1302":"CREATE TABLE Owner (\n  ownerID int not null primary key indentity(1,0),\n  FirstName varchar(255),\n  LastName varchar(255),\n  \/* other fields here *\/\n)\nGO\nCREATE TABLE Car\n  carID int not null primary key identity(1,0),\n  ownerID int not null references Owner(ownerID),\n  \/* other fields go here *\/\nGO\n\n\/* a convenience, read only view to replace your old CAR OWNER table *\/\nCREATE VIEW Car_Owner AS\n  SELECT c.*, o.FirstName, o.LastName FROM Car c INNER JOIN Owner o ON c.ownerID = o.ownerID\n","1303":"SELECT   userID, game_level, SUM(score), x.avg\nFROM     my_table JOIN (\n           SELECT   AVG(CASE WHEN (@rank := (CASE\n                      WHEN t.userID     = @userID\n                       AND t.game_level = @gamelevel\n                      THEN @rank + 1\n                      ELSE 0\n                    END) < 20 THEN score END)   AS avg,\n                    @userID     := userID     AS userID,\n                    @game_level := game_level AS game_level\n           FROM     my_table,\n                    (SELECT @rank := @userID := @game_level := NULL) init\n           ORDER BY userID, game_level, date_of_attempt DESC\n         ) x USING (userID, game_level)\nGROUP BY userID, game_level\n","1304":"WITH t AS (\n  SELECT\n    Client,\n    Task,\n    Hours,\n    ROW_NUMBER() OVER(PARTITION BY Client,Task,Date ORDER BY Date) rn,\n    DATEPART(dw,date) DayOfWeek\n  FROM MyTable\n)\nSELECT Client, Task, [1] Sun, [2] Mon, [3] Tues, [4] Wed, [5] Thu, [6] Fri, [7] Sat\nFROM t\nPIVOT(SUM(Hours) FOR DayOfWeek IN ([1],[2],[3],[4],[5],[6],[7])) p\n","1305":"select distinct owner\nfrom all_tables\nwhere table_name = 'mytable'\n","1306":"select e.name\nfrom employee e\nwhere\n    -- Projects in department\n    exists (\n        select *\n        from \n            workon w\n            join project p\n                on w.pid = p.pid\n                and p.did = e.did\n        where w.empid = e.empid\n    )\n    -- Projects out of department\n    and exists (\n        select *\n        from \n            workon w\n            join project p\n                on w.pid = p.pid\n                and p.did != e.did\n        where w.empid = e.empid\n    )\n","1307":"SELECT e.ID, e.firstName, e.lastName,ee.firstName, ee.lastName from employees e\nJOIN employees ee\nON e.reportsTo=ee.ID\n","1308":"select distinct id, department \nfrom tbl\n","1309":"select day2,count(*), group_concat(id)\n    from resultater\n    group by day\n    having count(*)>1;\n","1310":"select pm.post_id\nfrom post_meta pm\nwhere pm.key = 'coolness'\norder by pm.value + 0;\n","1311":"strSQL = \"SELECT tblCases.CaseNumber, tblCasesClients.ClientID\" \nstrSQL = strSQL & \" FROM tblCases\"\nstrSQL = strSQL & \" LEFT JOIN tblCasesClients ON (tblCases.AgencyID = tblCasesClients.AgencyID)\"\nstrSQL = strSQL & \" AND (tblCases.CaseNumber = tblCasesClients.CaseNumber)\"\nstrSQL = strSQL & \" WHERE (((tblCases.CaseNumber) Like '*\" & [Forms]![frmCaseSearch]![txtCaseFilter] & \"*')\" \n\nIf Not IsNull([Forms]![frmCaseSearch]![cboClients]) Then\n    strSQL = strSQL & \" AND ((tblCasesClients.ClientID)=([Forms]![frmCaseSearch]![cboClients])))\"\nElse \n    strSQL = strSQL & \")\"\nEnd If\n\nstrSQL = strSQL & \" ORDER BY tblCases.CaseNumber;\"\n\nForms!frmCaseSearch!lstCases.RowSource = strSQL\n","1312":" alter table university\n      add constraint uni_name_uk unique (name_of_university);\n","1313":"SQL> SELECT rawtohex('\u00dd') FROM dual;\n\nRAWTOHEX('\u00dd')\n--------------\nC39D\n","1314":"SELECT COLUMN1 FROM MYTABLE WHERE (COLUMN1 != 'A' OR COLUMN1 IS NULL)\n","1315":"    SQLiteDatabase db = sqlHelper.getWritableDatabase(); \/\/ get a writable database here\n    db.beginTransaction();\n\n    try {\n        for (int insertQuery : listOfQueries) {  \/\/ loop through your records \n            db.insert(...);\n        }\n\n        db.setTransactionSuccessful();\n    }\n    finally {\n        db.endTransaction();\n    }\n\n    db.close();\n","1316":";WITH CTE AS (\nselect  case\n            WHEN @Weight <= BP   then minimum\n            when @Weight < value then Normal\n            when @Weight >= value AND  @weight <= Q then Price\n            WHEN @weight >= Value AND  @Weight >  Q then Price\n        end as 'Price'\nfrom    Waybill.RoutePrices inner join Waybill.RoutePriceQ on Waybill.RoutePrices.Id = Waybill.RoutePriceQ.RoutePriceId\nwhere   RouteFrom = @from and routeTo = @to\n)\nSELECT TOP 1 *\nFROM CTE \nORDER BY Price\n","1317":"GROUP BY  t1.NumberID, t1.Copies, t1.NameStreet\n","1318":"Function FCN_QClip(strQRY As String) As String\n\n     qds = CurrentDb.QueryDefs(strQRY).SQL\n\n     FCN_QClip = qds\n\nEnd Function\n","1319":"Declare @Resolution int = 3 -- resolution in hours\n\nSelect\n    DateAdd(Hour, \n        DateDiff(Hour, 0, datetime) \/ @Resolution * @Resolution, -- integer arithmetic\n        0) as bucket,\n    Sum(values)\nFrom\n    table\nGroup By\n    DateAdd(Hour, \n        DateDiff(Hour, 0, datetime) \/ @Resolution * @Resolution, -- integer arithmetic\n        0)\nOrder By\n    bucket\n","1320":"WHERE (INSTR('500 Oracle Parkway, Redwood Shores, CA', 'Apple') > 0\n      OR\n      INSTR('500 Oracle Parkway, Redwood Shores, CA', 'Park') > 0\n      OR\n      INSTR('500 Oracle Parkway, Redwood Shores, CA', 'Shores') > 0)\n","1321":"delete games from games inner join \n    (select  min(id) minid, date, time,\n             hometeam_id, awayteam_id, locationcity, locationstate\n     from games \n     group by date, time, hometeam_id, \n              awayteam_id, locationcity, locationstate\n     having count(1) > 1) as duplicates\n   on (duplicates.date = games.date\n   and duplicates.time = games.time\n   and duplicates.hometeam_id = games.hometeam_id\n   and duplicates.awayteam_id = games.awayteam_id\n   and duplicates.locationcity = games.locationcity\n   and duplicates.locationstate = games.locationstate\n   and duplicates.minid <> games.id)\n","1322":"SELECT DISTINCT t1.Ebeln, t2.Ebelp, t1.Ekorg, t2.belnr, t3.netpr FROM TABLE1 t1\nRIGHT JOIN TABLE2 t2 ON t1.EBELN = t2.EBELN\nFULL JOIN table3 t3 ON t2.belnr = t3.belnr\n","1323":"select tmp.id, tmp.email, tmp.date_val, min(tmp.timestamp) from (\n    select \n        id, \n        email, \n        timestamp, \n        date_format(from_unixtime(timestamp), '%e %b %Y') as date_val\n    from email_table\n) as tmp  \ngroup by tmp.email, tmp.date_val\n","1324":"SELECT  timestamp, badge_id\nFROM    mytable\nGROUP BY\n        timestamp, badge_id\nHAVING  COUNT(*) > 1\n","1325":"UPDATE noeuds INNER JOIN \n(SELECT noeuds.* FROM noeuds WHERE (((noeuds.LONG_CABLE)=\" 1\") AND (noeuds.DELETED=\" \"))) a ON noeuds.n_amount = a.n_amount\nSET noeuds.insee_com = a.insee_com, noeuds.rivoli = a.rivoli, noeuds.num_voie = a.num_voie\n","1326":"SELECT date, time, custom_id, Number\nFROM traffic t\nWHERE CONCAT(date, ' ', time) BETWEEN '01\/06\/2014 00:00' AND '01\/10\/2014 23:00'\nAND Number = \n(SELECT MAX(CAST(Number as smallint)) FROM traffic WHERE t.date = date and t.custom_id = custom_id)\nORDER BY date, CAST(Number as smallint) DESC, custom_id\n","1327":"SELECT words, count(*), group_concat(idtag) as tags\nFROM (SELECT idTag, GROUP_CONCAT(idWord order by position ASC SEPARATOR ' ') AS words\n      FROM tTagWord\n      GROUP BY idTag\n     ) t\nGROUP BY words\nHAVING count(*) > 1;\n","1328":"Insert into child (`CASE`,`LASTNAME`,`FIRSTNAME`,`GENDER`,\n                   `DOB`,`SSN`,`RACE`,`STREET`,`STREET2`,`CITY`,\n                   `STATE`,`ZIP`,`PHONE`,`WORKPHONE`,`CELLPHONE`,\n                   `PARENT NAME`,`GR`,`ADMITDATE`,`DISCHDATE`,\n                   `WRK`,`WFIRSTNAME`,`WRKPHONE`)\nVALUES ('null', 'Sivanesh', 'Jashawn', 'Male', '2002-03-08', \n        '206-80-2175', 'African American', '1689 Crucible Street', \n        'null', 'Pittsburgh', 'PA', '15210', '(412)458-3788', \n        'null', '(412)377-6079', 'Latel Williams', '2nd', '2010-03-17',\n        'null', 'null', 'Addison', '(412)594-2545')\nON DUPLICATE KEY UPDATE \n        LASTNAME = 'Sivanesh',\n        FIRSTNAME= 'Jashawn',...\n","1329":"Select * \nFROM test_table \nWHERE user_id = value \nAND date_added = (select max(date_added) \n   from test_table \n   where user_id = value)","1330":"SELECT\n    cashier.cashier_name,\n    COALESCE(gross_amount, 0) AS gross_amount,\n    (CASE WHEN item.other_discount_type = 'PATRONAGE_CASH' THEN COALESCE(item.other_discount_amount, 0) ELSE 0 END) AS other_discount_amount,\n    COALESCE(item.net_of_discount_amount, 0) AS net_of_discount_amount\nFROM item_tbl item\n    INNER JOIN (Select receipt_no, Max(payment_dt) payment_dt from payment_tbl Group By receipt_no) payment ON item.receipt_no = payment.receipt_no\n    LEFT JOIN cashier_tbl cashier ON cashier.id = item.cashier_id\nWHERE \n    AND date(payment.payment_dt) = to_date('31 May 2016', 'dd Mon YYYY')\n","1331":"Select item_descr, [shop1], [Shop2]\nfrom \n(\n  Select item_descr, shop_id, times\n  from [Order]  \n)p\npivot \n(\n  sum(times)\n  for shop_id in ([shop1], [Shop2])\n)pvt;\n","1332":"select t.*\nfrom t\ngroup by val1\nhaving count(*) = 1;\n","1333":"\/\/ fetch liferay's session factory\nSessionFactory sessionFactory = (SessionFactory) PortalBeanLocatorUtil.locate(\"liferaySessionFactory\");\n\nSession session = null;\n\ntry {\n    \/\/ open session using liferay's session factory\n    session = sessionFactory.openSession();\n\n    \/\/ fetches the query string from the default.xml\n    String sql = CustomSQLUtil.get(FIND_ONLY_ACTIVE_SITES);\n\n    SQLQuery sqlQuery = session.createSQLQuery(sql);\n\n    \/\/ use portal class loader, since this is portal entity\n    sqlQuery.addEntity(\"Group_\", PortalClassLoaderUtil.getClassLoader().loadClass(\"com.liferay.portal.model.impl.GroupImpl\"));\n\n    return (List<Group>) QueryUtil.list(sqlQuery, getDialect(), 0, QueryUtil.ALL_POS);\n}\ncatch (Exception e) {\n    throw new SystemException(e);\n}\nfinally {\n    sessionFactory.closeSession(session); \/\/ edited as per the comment on this answer\n    \/\/ closeSession(session);\n}\n","1334":"SELECT o.OwnerName, i.Id, i.ItemName\nFROM Items AS i\nJOIN Owners AS o \nON o.Id = i.OwnerId\n","1335":"FOR tbl IN (SELECT owner, table_name\n              FROM dba_tables\n             WHERE table_name = 'MYTABLE')\nLOOP\n  EXECUTE IMMEDIATE 'update ' || tbl.owner || '.' || tbl.table_name ||\n                    '  set field1 = ''N'', ' ||\n                    '      field2 = null ';\nEND LOOP;\n","1336":"select machine_id, (lastend - start_time) as down_time\nfrom (select pt.*,\n             lag(end_time, 1) over (partition by machine_id order by end_time) as lastend\n      from process_time pt\n     ) pt\nwhere lastend is not null\n","1337":"function view( $id ) {\n   \/\/ ....\n   $this->Model->updateAll( \n       array( 'Model.viewcount', 'Model.viewcount + 1' ),\n       array( 'Model.id', $id )\n   );\n}\n","1338":"CREATE INDEX idx_partial ON othertable (m_id)\nWHERE (col1 is not null and col2 is not null and col3 is not null);\n","1339":"SELECT t1.Team, t1.Sprint,g.wh-SUM(t2.WorkHours)\n FROM tbl t1 JOIN tbl t2 ON t1.Team = t2.Team AND t2.Sprint <= t1.Sprint\n JOIN \n   (SELECT SUM(WorkHours) AS wh, Team  FROM tbl GROUP BY Team) g ON t1.Team=g.Team\n GROUP BY t1.Team, t1.Sprint,g.wh\n","1340":"select no from\n(SELECT 1 a, 2 b FROM DUAL) dummy\nunpivot (no for col in (a as 'A', b as 'B'))\n","1341":" DECLARE @Table TABLE (\n        column_a    INT          ,\n        column_b    VARCHAR (128),\n        column_c    VARCHAR (128),\n        column_d    VARCHAR (128),\n        column_date [time]         );\n\n    INSERT  INTO @Table\n    VALUES \n    ('1', 'test_1', 'test_1', 'type_1', '11:00'),\n    ('2', 'test_2', 'test_2', 'type_2', '11:01'),\n    ('3', 'test_3', 'test_6', 'type_2', '11:02'),\n    ('4', 'test_4', 'test_4', 'type_3', '11:03'),\n    ('5', 'test_2', 'test_6', 'type_2', '11:04'),\n    ('6', 'test_1', 'test_2', 'type_1', '11:05');\n\n    WITH     C\n    AS       (SELECT *,\n                     ROW_NUMBER() OVER (PARTITION BY column_d ORDER BY column_date DESC) AS RN\n              FROM   @Table),\n             ToCompare\n    AS       (SELECT *\n              FROM   c\n              WHERE  Rn < 3\n                     AND EXISTS (SELECT *\n                                 FROM   c AS C2\n                                 WHERE  C.column_d = C2.column_d\n                                        AND Rn = 2))\n    SELECT   T.column_a,\n             NULLIF (T.column_b, T2.column_b) AS [column_b],\n             NULLIF (T.column_c, T2.column_c) AS [column_c],\n             T.column_d,\n             T.column_date\n    FROM     ToCompare AS T\n             INNER JOIN\n             ToCompare AS T2\n             ON T.column_d = T2.column_d\n    WHERE    T.Rn = 1\n             AND T2.RN = 2\n    ORDER BY T.column_a;\n","1342":"SELECT AVG(Salary) as AVERAGE,\n       MAX(case when seqnum = cnt \/ 2 then salary end) as median,\n       MAX(SALARY) as MAXIMUM, \n       MIN(SALARY) as MINIMUM,\n       SUM(SALARY) as TOTAL,\n       TOTAL as NUMBER_OF_EMP\nFROM (SELECT e.*, \n             count(*) over () as total,\n             row_number() over (order by salary) as seqnum\n      FROM TblEmployees e\n     ) e\n","1343":"SELECT 'Column1' as Name, Column1 as Value FROM my_table\nUNION ALL\nSELECT 'Column2' as Name, Column2 as Value FROM my_table\nUNION ALL\nSELECT 'Column3' as Name, Column3 as Value FROM my_table\n","1344":"   SELECT * FROM SYS.COLUMNS \n    WHERE NAME NOT IN (\n      SELECT COLUMN_NAME\n      FROM INFORMATION_SCHEMA.COLUMNS\n      WHERE TABLE_NAME = 'XXXX'\n      AND CHARINDEX(COLUMN_NAME + ';', 'ABC;XYZ;') > 0\n    );\n","1345":"SELECT DISTINCT AccountKey\nFROM TABLE \nWHERE (ProductGroup = 'A' AND ProductVersion = 13) \n   OR (ProductGroup != 'A' AND ProductVersion = 19)\n","1346":";WITH  Hierarchy AS\n(\n    SELECT DISTINCT  JID\n            ,CAST(NULL AS DATETIME) EntryDate\n            ,CAST(NULL AS DATETIME) RefundDate\n            ,CAST(NULL AS VARCHAR(MAX)) Comments\n            ,CAST(NULL AS BIT) Refund\n            ,CAST(NULL AS VARCHAR(30)) ActionBy\n            ,nLevel = 1\n            ,CAST(NULL AS INT) AS CID\n    FROM refundrequested\n    UNION ALL\n    SELECT   CAST(NULL AS INT) JID\n            ,E.EntryDate\n            ,E.RefundDate\n            ,E.Comments\n            ,E.Refund\n            ,E.ActionBy\n            ,H.nLevel+1\n            ,H.JID  AS CID\n\n    FROM refundrequested   E\n    JOIN Hierarchy  H ON E.JID = H.JID\n\n)\n\nSELECT *\nFROM Hierarchy\nORDER BY COALESCE(JID, CID) DESC, nLevel\n","1347":"ID    Version\n 1        1\n 2        2\n 3        3\n 1        4\n","1348":"SELECT  a.id ,a.[year],valA,valB\nfrom(\nSELECT id ,[year],SUM(Total_Volume)\/ (count(distinct(month))*7) valA from TableA  \ngroup by id,[year]) a INNER JOIN\n\n(select id,[year],SUM(Total_volume)\/(count(distinct(month))*5) valB\nfrom TableA  \nWHERE weekday NOT IN ('Friday','Saturday') \ngroup by station_id,[year]) b\non a.id=b.id and a.[year]=b.[year]\n","1349":"    INSERT INTO t_Duration\n    SELECT \n        t.interval\n        ,t.call_id\n        ,t.agent_id\n        ,t.service_id\n        ,t.state\n        ,t.duration\n    FROM (\n        SELECT \n            *\n        FROM\n            inserted AS i\n        CROSS APPLY (\n        SELECT \n            *\n        FROM \n            fInterval2(i.state_time,i.end_time,15) AS iid\n        ) AS ext\n    ) AS t\n","1350":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing Microsoft.Deployment.WindowsInstaller;\nusing System.IO;\nusing System.Text.RegularExpressions;\n\nnamespace SaveSqlStrings\n{\n    public class CustomActions\n    {\n        [CustomAction]\n        public static ActionResult SaveSqlStrings(Session session)\n        {\n            StringBuilder sqlStrings = new StringBuilder();\n            Database db = session.Database;\n            View view = db.OpenView(\"SELECT * FROM `SqlString`\");\n            IList<string> SqlStringElements = db.ExecuteStringQuery(\"SELECT `String` FROM `SqlString`\");\n            Regex bracketedProperties = new Regex(@\"\\[(\\b[A-Z_]*\\b)\\]\");\n            Regex formattedProperties = new Regex(@\"{\\[(\\b[A-Z_]*\\b)\\]}\");\n            Regex openeningSquareBrackets = new Regex(@\"\\[\\\\\\[\\]\");\n            Regex closingSquareBrackets = new Regex(@\"\\[\\\\\\]\\]\");\n            string sqlDb_ = \"\";\n            string sqlString = \"\";\n            string Database = \"\";\n            foreach (string dbString in SqlStringElements)\n            {\n                sqlDb_ = (string)db.ExecuteScalar(\"SELECT `SqlDb_` FROM `SqlString` WHERE `String` ='{0}'\",dbString);\n                sqlString = (string)db.ExecuteScalar(\"SELECT `SQL` FROM `SqlString` WHERE `String` ='{0}'\",dbString);\n                view.Close();\n                view = db.OpenView(\"SELECT * FROM `SqlDatabase`\");\n                Database = (string)db.ExecuteScalar(\"SELECT `Database` from `SqlDatabase` WHERE `SqlDb`='{0}'\", sqlDb_);\n                if(bracketedProperties.IsMatch(Database))\n                {\n                    Database = bracketedProperties.Match(Database).Groups[1].Value;\n                    Database = session[Database];\n                }\n                if (openeningSquareBrackets.IsMatch(sqlString))\n                    sqlString = openeningSquareBrackets.Replace(sqlString, \"[\");\n                if (closingSquareBrackets.IsMatch(sqlString))\n                    sqlString = closingSquareBrackets.Replace(sqlString, \"]\");\n                if(formattedProperties.IsMatch(sqlString))\n                {\n                    string propertyName = formattedProperties.Match(sqlString).Groups[1].Value;\n                    string propertyValue = session[propertyName];\n                    sqlString = formattedProperties.Replace(sqlString, propertyValue);\n                }\n                sqlStrings.AppendLine(String.Format(\"use {0}\",Database));\n                sqlStrings.AppendLine(sqlString);\n            }\n            string home = session[\"PersonalFolder\"];\n            string sqlPath = string.Concat(home, @\"Script.sql\");\n            try\n            {\n                File.WriteAllText(sqlPath, sqlStrings.ToString());\n            }\n            catch (Exception ex)\n            {\n                session[\"FailedTowrite\"] = sqlPath;\n            }\n            view.Close();\n            db.Close();\n            return ActionResult.Success;\n        }\n    }\n}\n","1351":"CASE WHEN (CAST(SVS_DT AS DATE) - CAST(DSCH_TS AS DATE)) < 90 THEN 1 \n                                                              ELSE 0 \n     END AS FU90\n","1352":"LEFT(A.IVC_Number+'    ',6) INV_Nr , \n","1353":"select 'max', max(thickness) value from thicknesses where thickness < requirement \nunion\nselect 'min', min(thickness) value from thicknesses where thickness > requirement \n","1354":"SELECT dbo.AlbumTags.Tag_Name, \n       COUNT(dbo.AlbumTagBridge.Tag_Id) AS Cnt\nFROM dbo.AlbumTagBridge \nINNER JOIN dbo.AlbumTags ON dbo.AlbumTagBridge.Tag_Id = dbo.AlbumTags.Tag_ID\nGROUP BY dbo.AlbumTags.Tag_Name\n","1355":"SELECT ads.id, ads.title, count(sign_ups.user_id) AS total\nFROM sign_ups\nRIGHT JOIN ads ON ads.id = sign_ups.ad_id\nWHERE advertiser_id=1 AND sign_ups.user_id IS NOT NULL\nUNION ALL\nSELECT ads.id, ads.title, 0 AS total\nFROM sign_ups\nRIGHT JOIN ads ON ads.id = sign_ups.ad_id\nWHERE advertiser_id=1 AND sign_ups.user_id IS NULL\n","1356":"create table house_law\n(   -- the proposed up for vote\nlaw_id varchar(50) NOT NULL PRIMARY KEY,\ndescr varchar(255)\n);\n\ninsert house_law (law_id,descr) values ('HR-109B','Forbid driving near turtles');\n\ncreate table house_rep\n(   -- a session is say Monday to Friday, captures a start date\nrep_id int not null PRIMARY KEY,\nfullname varchar(80) not null,\nparty varchar(80)\n);\n\ninsert house_rep (rep_id,fullname,party) values (1001,'Thomas Jefferson','Whig');\ninsert house_rep (rep_id,fullname,party) values (800,'fred','Abstain Party');\ninsert house_rep (rep_id,fullname,party) values (700,'stan','Abstain Party');\n\ncreate table votes_cast\n(law_id varchar(50) not null,\nrep_id int not null,\nthe_vote varchar(20) -- for, against, abstain\n);\n\ninsert votes_cast (law_id,rep_id,the_vote) values ('HR-109B',1001,'against');\ninsert votes_cast (law_id,rep_id,the_vote) values ('HR-109B',800,'abstain');\ninsert votes_cast (law_id,rep_id,the_vote) values ('HR-109B',700,'abstain');\n\n-- get the results\n\nselect l.law_id,\nl.descr,\nsum(case when v.the_vote='for' then 1 else 0 end) for_votes,\nsum(case when v.the_vote='against' then 1 else 0 end) against_votes,\nsum(case when v.the_vote='abstain' then 1 else 0 end) abstain_votes\nfrom house_law l\njoin votes_cast v\non v.law_id=l.law_id\ngroup by l.law_id -- or a where close for 1 law in particular\n","1357":"CREATE PROCEDURE my_procedure_name AS\n    v_file UTL_FILE.file_type;\nBEGIN\n   ...\nEND;\n\/\n","1358":"INSERT INTO tblinbox\n\/* \n   maybe add column definitions here to make it clearer\n   column definitions could look like this:\n    (\n    someField,\n    type,\n    subject,\n    LRN,\n    content,\n    `date`,\n    newyearLevel,\n    someOtherField,\n    userType,\n    id\n    )\n*\/\nSELECT\n    '',\n    '$sender',\n    '$type',\n    '$subject',\n    '$LRN',\n    '$content',\n    '$date',\n    '$newyearLevel',\n    '',\n    '$userType',\n    id\nFROM tblscholar\nWHERE schoYear = '$newyearLevel'\n","1359":"create table XXX (\n    key number primary key,\n    parent number\n)\n\/\n\nalter table XXX add constraint XXX_FK foreign key (parent) references XXX\n\/\n","1360":"begin\n dbms_stats.gather_table_stats('ALERTS_OWNER','ASYNC_PROCESSING_REQUEST_T');\nend;\n","1361":"SELECT CONVERT(CHAR(10), GETDATE(), 105)\n\nresult: 10-12-2015\n","1362":"Insert Into TargetDatabase.SchemaName.TableName (TargetColumn)\nSelect SouorceColumn\nFrom SourceDatabase.SchemaName.TableName\n","1363":"SELECT \n    * \nFROM   \n    emp \nWHERE   \n    convert(datetime, date, 101)  BETWEEN (Getdate() - 6) AND Getdate() \nORDER BY \n    date \n","1364":"SELECT\nT1.F01 AS UPC,\nT2.F254 AS TheDate,\n(SELECT SUM (COALESCE (X.F64, 0)) FROM [STORESQL].[dbo].[RPT_ITM_D] X WHERE X.F1034 = 1 AND X.F01 = T2.F254 AND X.F01 = T1.F01) AS PURCHASED,\n(SELECT SUM (COALESCE (X.F65, 0)) FROM [STORESQL].[dbo].[RPT_ITM_D] X WHERE X.F1034 = 1 AND X.F01 = T2.F254 AND X.F01 = T1.F01) AS AMT_P,\n(SELECT SUM (COALESCE (X.F64, 0)) FROM [STORESQL].[dbo].[RPT_ITM_D] X WHERE X.F1034 = 2 AND X.F01 = T2.F254 AND X.F01 = T1.F01) AS SOLD,\n(SELECT SUM (COALESCE (X.F65, 0)) FROM [STORESQL].[dbo].[RPT_ITM_D] X WHERE X.F1034 = 2 AND X.F01 = T2.F254 AND X.F01 = T1.F01) AS AMT_S,\n(SELECT SUM (COALESCE (X.F64, 0)) FROM [STORESQL].[dbo].[RPT_ITM_D] X WHERE X.F1034 = 3 AND X.F01 = T2.F254 AND X.F01 = T1.F01) AS ADJUSTED,\n(SELECT SUM (COALESCE (X.F65, 0)) FROM [STORESQL].[dbo].[RPT_ITM_D] X WHERE X.F1034 = 3 AND X.F01 = T2.F254 AND X.F01 = T1.F01) AS AMT_A\nFROM [STORESQL].[dbo].[COST_TAB] t1\nLEFT OUTER JOIN [STORESQL].[dbo].[RPT_ITM_D] t2 \nON t1.F01=t2.F01 AND (F254='2011-10-1') and (F1034=1 or F1034=2 or F1034=3)\ngroup by T1.F01, T2.F254\nORDER BY T1.F01, T2.F254\n","1365":"SELECT \n    MyTable.team AS team, \n    MyTable.rel AS rel,\n    AVG(iif(Testable,1,0)) AS result\nFROM MyTable \nWHERE \n    MyTable.team IN (1,2) \n    AND MyTable.rel IN (1,2,3) \nGROUP BY \n    MyTable.rel, \n    MyTable.team \nORDER BY \n    MyTable.team, \n    MyTable.rel\n","1366":"SELECT Id,\n       Year,\n       Type,\n       Date,\n       Amount - IFNULL((SELECT Amount\n                        FROM data AS previousQuarter\n                        WHERE previousQuarter.Year = data.year\n                          AND previousQuarter.Type = data.Type\n                          AND previousQuarter.Periods = data.Periods - 1\n                       ), 0) AS Amount\nFROM data\n","1367":"SELECT  CONVERT(VARCHAR(4),YEAR(LastModifedDate)) + ' ' + \n        CONVERT(VARCHAR(3),DATENAME(MONTH,LastModifedDate)) AS Dates,\n        COUNT(*) as Number\nFROM aims.Modification\nWHERE CompanyID = @companyID \n    AND LastModifedDate >= DATEADD(MONTH,@numberOfMonths * -1,GETDATE())\nGROUP BY CONVERT(VARCHAR(4),YEAR(LastModifedDate)) + ' ' + \n         CONVERT(VARCHAR(3),DATENAME(MONTH,LastModifedDate)),\n         CONVERT(VARCHAR(6),LastModifedDate,112)\nORDER BY CONVERT(VARCHAR(6),LastModifedDate,112)\n","1368":"WHERE\n    MD2.iBatchNumber = @iBatchNumber\nORDER BY\n    MD2.sTableName, MD2.iRowIndex\n","1369":"select t.number, t.status,\n       row_number() over (partition by status, grp order by number) as seqnum\nfrom (select t.*,\n             (row_number() over (order by number) -\n              row_number() over (partition by status order by number\n             ) as grp\n      from table t\n     ) t;\n","1370":"SELECT company_name, cnt\nFROM (\n    SELECT company_name, count(employee_name) AS cnt\n    FROM works\n    GROUP BY company_name\n) w1\nORDER BY cnt DESC\nLIMIT 1\n","1371":"DECLARE @result varchar(MAX)\nSET @result = '';\n\nSELECT \n  @result = @result + NAME + ','\nFROM\n  Table\nWHERE\n  ID = @Id\n\nSET @result = SUBSTRING(@result, 1, LEN(@result) - 1)\n\nSELECT @result\n","1372":"with j as ( select * from jobs )\nselect j.*, inv.*\nfrom invoices inv\n     join j on ( inv.job_no = j.job_no)\nunion\nselect j.*, inv.*\nfrom invoices inv\n     join j on ( inv.job_no = j.client_no)\n","1373":"CREATE OR REPLACE TRIGGER TBL_ADMINCOMMAND_TRG\nBEFORE INSERT OR UPDATE ON tbl_AdminCommands\nFOR EACH ROW \nBEGIN \n  IF inserting AND :new.ADMINCOMMANDID IS NULL\n  THEN\n    SELECT TBL_ADMINCOMMANDS_SEQ.nextval\n      INTO :new.ADMINCOMMANDID\n      FROM DUAL;\n  END IF;\nEND;\n\/\n\nALTER TRIGGER TBL_ADMINCOMMAND_TRG ENABLE;\n","1374":"declare @s varchar(100)\n\nselect @s = 'http:\/\/info@abc.com'\n\nselect right(@s, len(@s) - charindex('@', @s))\n","1375":"UPDATE (PB \nINNER JOIN Noeuds ON PB.NOEUD = Noeuds.NOEUD) \nINNER JOIN ColInfo ON Noeuds.NUM_COL = ColInfo.NUM_COL \nSET PB.FORFAIT = \"E\"\nWHERE (((ColInfo.INTEREXTER)=2));\n","1376":"select  t1.id\n        , case\n            when t1.value1=t2.value then t2.value\n            else null\n        end as value1\n        , case\n            when t1.value2=t2.value then t2.value\n            else null\n        end as value2\n        , case\n            when t1.value3=t2.value then t2.value\n            else null\n        end as value3\nfrom temp1 t1\nleft join\ntemp2 t2 on ((t1.value1=t2.value) and (t1.id = t2.id))\n            OR ((t1.value2=t2.value) and (t1.id = t2.id))\n            OR ((t1.value3=t2.value) and (t1.id = t2.id))\n","1377":"CREATE PROC dbo.Paramtest (@foo int = 42)\nAS\nSET NOCOUNT ON;\nGO\n\nSELECT OBJECT_NAME(object_id), has_default_value, default_value\nFROM sys.parameters\nWHERE name = '@foo' AND object_id = OBJECT_ID('dbo.Paramtest')\n\n-- gives Paramtest, 0, NULL\n","1378":"create view PAIRWISE_DISTANCE_SQUARES as\nselect \n  a.id as a_id,\n  b.id as b_id,\n  (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y) as square\nfrom point_table as a, point_table as b\n-- where a.id != b.id if you wish\n","1379":"protected void HistoryEngine_AddedEntry(object sender, HistoryAddedEventArgs e)\n{\n    Item item = e.Database.GetItem(e.Entry.ItemId);\n    \/\/TODO: Add logic to make sure e.Entry.ItemId requires a parent\/child reindex as well\n    \/\/TODO: Make sure that logic also prevents excessive or infinite recursion since we'll be triggering the AddedEntry event again below\n    Item parent = item.Parent;\n    \/\/RegisterItemSaved doesn't appear to do anything with its second argument\n    e.Database.Engines.HistoryEngine.RegisterItemSaved(parent, null);\n}\n","1380":";WITH Top10Distinct AS\n(\n    SELECT DISTINCT TOP 10 YourColumn\n    FROM dbo.YourTable\n    ORDER BY YourColumn DESC\n)\nSELECT *\nFROM dbo.YourTable tbl\nINNER JOIN Top10Distinct cte ON tbl.YourColumn = cte.YourColumn\n","1381":"SELECT \n    accommodation_id, \n    SUM(amount * persons) as max_persons_available \nFROM \n    availabilities \nWHERE \n    available = 1 and arrival >= '2015-12-19' and arrival < '2015-10-26'\nGROUP BY \n    accommodation_id\n","1382":"select usrs.*\nfrom students s \njoin system_users usrs on \n    s.father=usrs.user_id OR\n    s.mother=usrs.user_id OR\n    s.guardian=usrs.user_id\nwhere s.user_id = '201209291';\n","1383":"class procedure TdmodCheckDatabase.UpgradeDatabase(databasePath: string; currentVersion, newVersion: integer);\nvar\nmodule: TdmodCheckDatabase;\nf: integer;\nbegin\nmodule:= TdmodCheckDatabase.create(nil);\ntry\n  module.OpenDatabase( databasePath );\n\n  for f:= 0 to module.ComponentCount -1  do\n  begin\n    if module.Components[f] is TDBISAMTable then\n    begin\n      try\n        \/\/ if we need to upgrade table to dbisam 4\n        if currentVersion <= DB_VERSION_FOR_DBISAM4 then\n          TDBISAMTable(module.Components[f]).UpgradeTable;\n\n        module.UpgradeTable(TDBISAMTable(module.Components[f]));\n      except\n       \/\/ logging and error stuff removed\n      end;\n    end;\n  end;\n\n  for f:= currentVersion + 1 to newVersion do\n    module.RunUpgradeScripts(f);\n\n  module.sqlMakeIndexes.ExecSQL; \/\/ have to create additional indexes manually\n finally\n  module.DBISAMDatabase1.Close;\n  module.free;\nend;\nend;\n\n\nprocedure TdmodCheckDatabase.UpgradeTable(table: TDBISAMTable);\nvar\n fieldIndex: integer;\n needsRestructure: boolean;\n canonical: TField;\nbegin\n needsRestructure:= false;\n\n table.FieldDefs.Update;\n\n \/\/ add any new fields to the FieldDefs\n if table.FieldDefs.Count < table.FieldCount then\n begin\n   for fieldIndex := table.FieldDefs.Count to table.Fields.Count -1 do\n   begin\n     table.FieldDefs.Add(fieldIndex + 1, table.Fields[fieldIndex].FieldName, table.Fields[fieldIndex].DataType, table.Fields[fieldIndex].Size, table.Fields[fieldIndex].Required);\n   end;\n   needsRestructure:= true;\n end;\n\n \/\/ make sure we have correct size for string fields\n for fieldIndex := 0 to table.FieldDefs.Count -1 do\n begin\n   if (table.FieldDefs[fieldIndex].DataType = ftString) then\n   begin\n     canonical:= table.FindField(table.FieldDefs[fieldIndex].Name);\n     if assigned(canonical) and (table.FieldDefs[fieldIndex].Size <> canonical.Size) then\n   begin\n     \/\/ field size has changed\n     needsRestructure:= true;\n     table.FieldDefs[fieldIndex].Size:= canonical.Size;\n   end;\n   end;\n end;\n\n if needsRestructure then\n   table.AlterTable(); \/\/ upgrades table using the new FieldDef values\nend;\n\nprocedure TdmodCheckDatabase.RunUpgradeScripts(newVersion: integer);\nbegin\n case newVersion of\n   3: sqlVersion3.ExecSQL;\n   9: sqlVersion9.ExecSQL;\n   11: begin  \/\/ change to DBISAM 4\n         sqlVersion11a.ExecSQL;\n         sqlVersion11b.ExecSQL;\n         sqlVersion11c.ExecSQL;\n         sqlVersion11d.ExecSQL;\n         sqlVersion11e.ExecSQL;\n       end;\n   19: sqlVersion19.ExecSQL;\n   20: sqlVersion20.ExecSQL;\n end;\nend;\n","1384":"using (OleDbConnection connection = new OleDbConnection(connectionString))\n{\n    connection.Open();\n\n    DataTable tableColumns = connection.GetOleDbSchemaTable(OleDbSchemaGuid.Columns, new object[] { null, null, \"Streets\", null }));\n    foreach (DataRow row in tableColumns.Rows)\n    {\n        var columnNameColumn = row[\"COLUMN_NAME\"];\n        var dateTypeColumn = row[\"DATA_TYPE\"];\n        var ordinalPositionColumn = row[\"ORDINAL_POSITION\"];\n        ...\n    }\n}\n","1385":" SELECT u.id, u.orderId, p.productName, u.key2, i.forced_matrix_sponsor_id\n FROM ubercart_reseller_orders u join\n      productInfo p\n      on p.productId=u.productId join\n      ir i\n      on u.key2=i.id\n where p.productName like '%OSS HOSTING FEE%' and\n       u.createdDate > '2014-02-1' and\n ----------------------^\n       forced_matrix_sponsor_id is null\n order by u.key2;\n","1386":"ALTER TABLE tableName ADD NewIdn INT NOT NULL AUTO_INCREMENT KEY\n","1387":"SELECT Position, Count(position) AS 'QTY'\nFROM tblemployee\nGROUP BY Position\nHAVING Count(Position) != 1\n","1388":"mysql> select * from t;\n+------+-------+\n| id   | data  |\n+------+-------+\n|    1 | max   |\n|    2 | linda |\n|    3 | sam   |\n|    4 | henry |\n+------+-------+\n4 rows in set (0.02 sec)\n\nmysql> update t set data=concat(data, 'a');\nQuery OK, 4 rows affected (0.01 sec)\nRows matched: 4  Changed: 4  Warnings: 0\n\nmysql> select * from t;\n+------+--------+\n| id   | data   |\n+------+--------+\n|    1 | maxa   |\n|    2 | lindaa |\n|    3 | sama   |\n|    4 | henrya |\n+------+--------+\n4 rows in set (0.00 sec)\n","1389":"WITH t AS (\n  SELECT row, scan, col, val\n  FROM MyTable\n  UNPIVOT(val FOR col IN ([1],[2],[3],[4],...<snip>...,[2570],[2571]))p\n)\nSELECT\n  row, scan, col AS range_start, col + 15 AS range_end, min_val\nFROM t t1\nCROSS APPLY (\n  SELECT\n    MIN(t2.val) AS min_val\n  FROM t\n  WHERE\n    row = t1.row AND\n    scan = t1.scan AND\n    col BETWEEN t1.col AND t1.col + 15\n) t2\n","1390":"WITH cteRanges\nAS\n(\n    SELECT\n            site,\n            CASE\n              WHEN MONTH(date) IN (1) THEN CAST(YEAR(date) - 1 AS VARCHAR(4)) + '-8' + ' ' + CAST(YEAR(date) AS VARCHAR(4)) + '-1'\n              WHEN MONTH(date) IN (8, 9, 10, 11, 12) THEN CAST(YEAR(date) AS VARCHAR(4)) + '-8' + ' ' + CAST(YEAR(date) + 1 AS VARCHAR(4)) + '-1'\n              ELSE CAST(YEAR(date) AS VARCHAR(4)) + '-2' + ' ' + CAST(YEAR(date) AS VARCHAR(4)) + '-7'\n            END AS range\n    FROM\n            test\n)\n\nSELECT\n          site,\n          COUNT(*),\n          range\nFROM\n          cteRanges\nGROUP BY\n          site,\n          range\nORDER BY\n          range,\n          site;\n","1391":" ResultSet rs = ...\n ResultSetMetaData rsmd = rs.getMetaData();\n int numberOfColumns = rsmd.getColumnCount();\n String columnLabel = rsmd.getColumnLabel(1);\n String columnName = rsmd.getColumnName(1);\n int columnType = rsmd.getColumnType(1);\n String columnTypeName = getColumnTypeName(1);\n\n etc\n","1392":"DECLARE @var VARCHAR(100) = 'ABC' + CHAR(13) + CHAR(10);\n\nSELECT @var = CASE WHEN @var LIKE '%' + CHAR(13) + CHAR(10) \n                 THEN LEFT(@var, LEN(@var) - 2)\n                 ELSE @var\n              END;\n\n\n SELECT @var, LEN(@var);\n","1393":"SELECT W.LastName + ', ' + W.FirstName AS [Worker], \n       M.LastName + ', ' + M.FirstName AS [Manager], \n       Details.SiteName AS [Site Name], \n       Details.Description AS [Description], \n       Details.Action AS [Action],\nFROM Details \nINNER JOIN Staff AS W ON Details.Worker = W.StaffID \nINNER JOIN Staff AS M ON Details.Manager = M.StaffID\n","1394":"create table Drawing (\n    DrawingId int not null primary key,\n    Name varchar not null\n)\n\ncreate table ShapeKind (\n    ShapeKindId int primary key,\n    ShapeKindName varchar\n)\ninsert into ShapeKind values (1, 'Line')\ninsert into ShapeKind values (2, 'Circle')\n\ncreate table Shape (\n    ShapeId int not null,\n    ShapeKindId int not null,\n    DrawingId int not null,\n    CenterX numeric not null,\n    CenterY numeric not null,\n    SizeX numeric not null,\n    SizeY numeric not null,\n    Color int not null,\n    primary key (ShapeId, ShapeKindId),\n    foreign key (ShapeKindId) references ShapeKind (ShapeKindId),\n    foreign key (DrawingId) references Drawing (DrawingId)\n)\n\ncreate table Line (\n    ShapeId int not null,\n    ShapeKindId int not null check (ShapeKindId = 1),\n    LineWidth int not null,\n    Orientation int not null,\n    primary key (ShapeId, ShapeKindId),\n    foreign key (ShapeId, ShapeKindId) references Shape (ShapeId, ShapeKindId)\n)\n\ncreate table Circle (\n    ShapeId int not null,\n    ShapeKindId int not null check (ShapeKindId = 2),\n    FillColor int, -- null if not filled\n    primary key (ShapeId, ShapeKindId),\n    foreign key (ShapeId, ShapeKindId) references Shape (ShapeId, ShapeKindId)\n)\n","1395":"SELECT name, GROUP_CONCAT(start_time ORDER BY start_time) AS start_times\nFROM your_table GROUP BY name\nORDER BY COUNT(start_time)\n","1396":"ALTER proc [dbo].[sp_mysp]\n@starttime datetime,\n @endtime datetime  \n as     \nSELECT [Day],\n        SUM(CASE WHEN [Type] = 'a' OR [Type] = 'c' THEN price ELSE 0.00 END) SELL,\n        SUM(CASE WHEN [Type] = 'b' OR [Type] = 'd' THEN price ELSE 0.00 END) BUY\nFROM    [TABLE]\nWHERE   [Day] BETWEEN @starttime AND @endtime\nGROUP BY    [Day]\n","1397":"select c.customer_id, \n       count(distinct o.order_id) distinct_orders,\n       group_concat(distinct i.sku) ordered_item_skus\nfrom customers c\nleft outer join orders o on c.customer_id = o.customer_id\nleft outer join order_items oi on o.order_id = oi.order_id\nleft outer join items  i on oi.item_id = i.item_id\ngroup by c.customer_id\n","1398":"SELECT   m.* \nFROM     main_table m JOIN category_available c ON c.main_table_id = m.id\nWHERE    c.category_id IN (206, 207)\nGROUP BY m.id\nHAVING   COUNT(DISTINCT c.category_id) = 2\n","1399":"SELECT \n    DATE_FORMAT(CHANGE_DATE, '%Y-%m') AS date,\n    COUNT(DISTINCT CHANGE_ID) AS change_count,\n    NAME\nFROM \n    CHANGE_TABLE, (SELECT\n       NAME AS name,\n         COUNT(DISTINCT CHANGE_ID) AS changes\n    FROM CHANGE_TABLE\n    WHERE DATE(CHANGE_DATE) > DATE(now() - INTERVAL 1 MONTH)\n    GROUP BY name\n    ORDER BY changes DESC\n) subq\nWHERE CHANGE_DATE > curdate() - INTERVAL 10 MONTH AND change_table.name = subq.name\nGROUP BY date, name\n","1400":"= \"update table set name = '\" & B1 & \"' where namefk = '\" & A1 & \"'\"\n","1401":"select '[''' || table1.collectdatetime as \"['Date-Time\",table1.cycletime as \"'Time'\" from table1 where interfacename='somename' and collectdatetime > (CURRENT_DATE - 1)\norder by collectdatetime ASC;\n","1402":"SELECT *\nFROM v$tempseg_usage\n","1403":"Select FROM_UNIXTIME(stime), bytes \nfrom argusTable_2009_10_22 \nwhere stime > (UNIX_TIMESTAMP()-600)\ngroup by floor(stime \/10)\n","1404":"SELECT \n  'Quarter '+CAST(DATEPART(Q,DATEADD(MM,-3,GETDATE())) AS VARCHAR) AS QUARTER\n","1405":"select \n    t1.id,\n    t1.time2-case when status='HOLD' then t2.time else 0 end-t1.time1\nfrom\n    t1 left join t2 on t1.id=t2.id and t2.status='HOLD'\n","1406":"@DatabaseField(dataType = DataType.BYTE_ARRAY)\nbyte[] imageBytes;\n","1407":"CREATE VIEW [dbo].[School_Year_Amount]\nAS SELECT \nISNULL(ROW_NUMBER() OVER (ORDER BY (SELECT NULL)), -1) AS sID,\nParent_Share_Amount.trans_name AS parent_trans_name,\nOJT_Share_Amount.trans_name AS ojt_trans_name,\nParent_Share_Amount.ID_Number AS ID_Number, \nParent_Share_Amount.adviser_info_id AS adviser_info_id, \nParent_Share_Amount.student_fname AS student_fname,     \nParent_Share_Amount.student_lname AS student_lname,\nParent_Share_Amount.student_info_id AS student_info_id,\nParent_Share_Amount.amount AS parent_amount,\nOJT_Share_Amount.amount AS ojt_amount,\nisnull(OJT_Share_Amount.amount,0) + isnull(Parent_Share_Amount.amount,0) AS total_amount,\n(120000 - isnull(OJT_Share_Amount.amount,0) - isnull(Parent_Share_Amount.amount,0)) AS total_balance\nFROM [Parent_Share_Amount]\nLEFT OUTER JOIN OJT_Share_Amount\nON Parent_Share_Amount.student_info_id = OJT_Share_Amount.student_info_id;\n","1408":"Select col1, col2, col3\nFrom dbo.vw_MyView With (NoExpand)\n","1409":"CREATE VIEW test.t1 AS (\n    SELECT \n        'pcount' AS type,\n        `temp`.`pcount` AS value \n    FROM \n        `temp` \n    WHERE (\n        `temp`.`id` = (\n                SELECT \n                    MAX(`temp`.`id`) \n                FROM \n                    `temp`\n        )\n    )\n    UNION \n    SELECT \n        'ncount' AS type,\n        `temp`.`ncount` AS value \n    FROM \n        `temp` \n    WHERE (\n        `temp`.`id` = (\n                SELECT \n                    MAX(`temp`.`id`) \n                FROM \n                    `temp`\n        )\n    )\n)\n","1410":"$params = array(\n    ...\n    'contain' => array(\n        'Class' => array(\n            'conditions' => array(\n                'Class.exp IS NOT NULL', \n                'Class.tb <20',\n            ),\n            'fields' => array('a', 'b')\n        )\n    )\n);\n","1411":"select\n    <city_id>, c.y, count(t.city_id)\nfrom generate_series(1990, 2005) as c(y)\n    left outer join Table1 as t on\n          c.y between extract(year from t.start_date) and extract(year from t.end_date) and\n          t.city_id = <city_id>\ngroup by c.y\norder by c.y\n","1412":"SELECT * FROM numbers\nWHERE id NOT IN (\n    SELECT id FROM numbers\n    WHERE val IN (\n        SELECT MAX(val) FROM numbers\n    ) OR val IN (\n        SELECT MIN(val) FROM numbers\n    )\n);\n","1413":"select substring(reverse(str),\n                 patindex('%[^0-9]%', reverse(str)),\n                 1)\n","1414":"SELECT d.Department, d.DepartmentID, count(e.EmployeeID)\nFROM Departments d\n    LEFT JOIN employees e\n    ON d.DepartmentID = e.DepartmentID\nGROUP BY \n d.Department, d.DepartmentID\n","1415":"Select p.ProductID , p.ProductDesc, count(p.ProductId)\nfrom Product p\ninner join OrderDetails od on p.productid = od.productid\ninner join Order1 o on o.orderid = od.orderid\nwhere orderpayment = 'cash'\nGroup by p.ProductID, p.ProductDesc\n","1416":"select \n  c.name as \"Conference Name\",\n  c.Date, \n  coalesce(n2.name, n2.\"fallback_name\") as \"Main Contact\",\n  group_concat(coalesce(n.name, n.\"fallback_name\"), ', ') as Attendees\nfrom conferences c\ninner join attendees a on c.\"Conference ID\" = a.\"Conference ID\"\ninner join name n on n.id = a.\"Name Row\"\ninner join name n2 on n2.Contact_id = c.\"main_contact\"\ngroup by c.name \norder by c.date\n","1417":"DROP TABLE bar CASCADE CONSTRAINTS;\n","1418":"SELECT * FROM (\nSELECT g.*,\n@r:= CASE WHEN @g = g.`user` THEN @r +1 ELSE 1 END rownum,\n@g:= g.`user` user_group\n FROM sn.sn_graph_reduced g\nCROSS JOIN (SELECT @g:=0,@r:=0) t2\nORDER BY `user` , RAND() \n) t\n WHERE rownum <= 100 \n","1419":"DECLARE @OrigDate datetime\nDECLARE @NewDate datetime\n\nSET @OrigDate = '1\/12\/2012'\n\nSET @NewDate = DATEADD(Day, -1, DATEADD(Month, 1, Cast(CAST(Month(@OrigDate) as varchar) + '\/1\/' + CAST((Year(@OrigDate)+1) as varchar) as datetime)))\n","1420":"SELECT DISTINCT c.Cust, options = ((SELECT c2.opt1 + c2.opt2 \n  FROM dbo.myDB AS c2 WHERE c2.Cust = c.Cust \n  FOR XML PATH(''), TYPE).value('.[1]', 'nvarchar(max)'))\nFROM dbo.myDB AS c;\n","1421":"SET NOCOUNT ON;\n\n-- (use temp table, since table vars do not participate in transactions)\nCREATE TABLE #T1(C int);\nCREATE TABLE #T2(C int);\nCREATE TABLE #T3(C int);\nCREATE TABLE #T4(C int);\nCREATE TABLE #T5(C int);\n\nINSERT INTO #T1 SELECT 1;\nINSERT INTO #T2 SELECT 1;\nINSERT INTO #T3 SELECT 1;\nINSERT INTO #T4 SELECT 1;\nINSERT INTO #T5 SELECT 1;\n\nBEGIN TRY \n\n    BEGIN TRAN TR1;\n\n    DELETE FROM #T1;\n    DELETE FROM #T2;\n    DELETE FROM #T3;    \n    DELETE FROM #T4;\n    --select 1\/0 as 'forced error @ stage1';\nEND TRY\nBEGIN CATCH\n    PRINT 'error @stage1';\n    PRINT 'rollback @stage1';\n\n    ROLLBACK TRAN TR1;  \n    RETURN;\nEND CATCH\n\nBEGIN TRY\n    DELETE FROM #T5;\n    select 1\/0 as 'forced error @stage2';\n    COMMIT TRAN TR1;\nEND TRY\nBEGIN CATCH\n    PRINT 'error @stage2';  \n    ROLLBACK TRAN TR1;  \n\n    BEGIN TRY\n        print 'redo delete T4'\n        BEGIN TRAN TR2;\n        DELETE FROM #t4;\n        --select 1\/0 as 'forced error @redo delete';\n        COMMIT TRAN TR2;\n    END TRY\n    BEGIN CATCH\n        ROLLBACK TRAN TR2;\n        PRINT 'second chance delete from T4 failed';    \n    END CATCH\n\nEND CATCH\n\nselect count(*) as count,'T1' as 'table' from #T1\nunion all\nselect count(*) as count,'T2' as 'table' from #T2\nunion all\nselect count(*) as count,'T3' as 'table' from #T3\nunion all\nselect count(*) as count,'T4' as 'table' from #T4\nunion all\nselect count(*) as count,'T5' as 'table' from #T5\n\nDROP TABLE #T1;\nDROP TABLE #T2;\nDROP TABLE #T3;\nDROP TABLE #T4;\nDROP TABLE #T5;\n","1422":"SELECT domains.domainID, domainName, COUNT(*), SUM(uniqueUploads)\nFROM domains\nINNER JOIN files ON files.domainID = domains.domainID\nINNER JOIN serverFiles on serverFiles.fileID = files.fileID\nGROUP BY domains.domainID, domainName\n","1423":"SELECT 'EMAIL', Email.Email\n  FROM Contacts.Email\n WHERE Email.ContactId = :contactId\nUNION ALL\nSELECT 'PHONE', Phone.Phone\n  FROM Contacts.Phone\n WHERE Phone.ContactId = :contactId\n ORDER BY 1 -- put e-mail addresses before phone-numbers\n;\n","1424":"=\", '\" & TEXT(ScriptSQL!L5, \"yyyy-MM-dd\") & \"'\"\n","1425":"SELECT activity\n    ,DATEADD(wk, DATEDIFF(wk,0,Cast(starttime AS DATE)), 0) AS Week\n    ,SUM(datediff(second, starttime, endtime)) \/ 60.0 AS TimePerDay\nFROM cte WITH (NOLOCK)\nWHERE starttime >= dateadd(week, @LastXWeeks, last_update)\nGROUP BY activity\n    ,DATEADD(wk, DATEDIFF(wk,0,Cast(starttime AS DATE)), 0)\n","1426":"SELECT * FROM Articles as a\nINNER JOIN comments as c\nON a.articleId = c.ArticleId\n","1427":"select x.ID, x.mindate as FirstActionDate, x.FirstAction as FirstAction, y.maxdate as LastActionDate, y.LastAction as LastAction\nfrom \n(\n  --FirstDate and Action \n  select a.ID, a.mindate as mindate, t.action as FirstAction \n  from \n  (\n\n    select ID, Min(date) as mindate\n     from data\n     group by ID\n   ) a inner join data t on a.mindate = t.date\n ) x inner join \n  (\n    --Last Date And Action\n    select a.ID, a.maxdate, t.action as LastAction \n    from \n    (\n\n      select ID, max(date) as maxdate\n       from data\n       group by ID\n     ) a inner join data t on a.maxdate = t.date\n  ) y on x.ID = y.ID\n","1428":"SELECT  a.*,\n        b.key,\n        COALESCE(c.value, b.default) Value\nFROM    Objects a\n        CROSS JOIN Attributes b\n        LEFT JOIN Object_Attributes c\n            ON  a.ID = c.object_id AND\n                b.key = c.key\nORDER   BY a.ID, b.key\n","1429":"Select Distinct\n  t1.id\nFrom\n  Table_1 t1\n    Inner Join\n  Table_1 t2\n    On\n      t1.Id = t2.Id And \n      t1.Boolean = True And \n      t2.Boolean = False And\n      DateDiff(Second, t1.Timestamp, t2.Timestamp) Between 0 And 1\n","1430":"SELECT\n  event.event_name,\n  event.event_date,\n\n  MAX(CASE WHEN participant.fighter_id = fighter.id THEN fighter.name   END) AS fighter,\n  MAX(CASE WHEN participant.fighter_id = fighter.id THEN record.wins    END) AS wins,\n  MAX(CASE WHEN participant.fighter_id = fighter.id THEN record.draws   END) AS draws,\n  MAX(CASE WHEN participant.fighter_id = fighter.id THEN record.losses  END) AS losses,\n\n  CASE WHEN fight.winner = participant.fighter_id THEN 'Win'\n       WHEN fight.winner IS NULL                  THEN 'Draw'\n                                                  ELSE 'Loss' END            AS result,\n  fight.method,\n\n  MAX(CASE WHEN participant.fighter_id <> fighter.id THEN fighter.name  END) AS Opp,\n  MAX(CASE WHEN participant.fighter_id <> fighter.id THEN record.wins   END) AS Opp_wins,\n  MAX(CASE WHEN participant.fighter_id <> fighter.id THEN record.draws  END) AS Opp_draws,\n  MAX(CASE WHEN participant.fighter_id <> fighter.id THEN record.losses END) AS Opp_losses      \nFROM\n  event\nINNER JOIN\n  fight\n     ON event.id = fight.event_id\nINNER JOIN\n  participant\n    ON participant.fight_id = fight.id\nINNER JOIN\n(\n  SELECT\n    participant.fighter_id,\n    participant.fight_id,\n    SUM(CASE WHEN prevFight.winner  = participant.fighter_id THEN 1 ELSE 0 END) AS wins,\n    SUM(CASE WHEN prevFight.winner IS NULL)                                     AS draws,\n    SUM(CASE WHEN prevFight.winner <> participant.fighter_id THEN 1 ELSE 0 END) AS losses\n  FROM\n    participant\n  INNER JOIN\n    fight\n      ON  participant.fight_id = fight.id\n  INNER JOIN\n    participant        AS prevParticipant\n      ON  prevParticipant.fighter_id = participant.fighter_id\n  INNER JOIN\n    fight              AS prevFight\n      ON  prevFight.id              = prevParticipant.fight_id\n      AND prevFight.fight_date_time < fight.fight_date_time\n  GROUP BY\n    participant.fighter_id,\n    participant.fight_id\n)\n  AS record\n    ON record.fight_id = participant.fight_id\nINNER JOIN\n  fighter\n    ON fighter.id = record.fighter_id\nGROUP BY\n  event.id,\n  fight.id,\n  participant.fighter_id\n","1431":"SELECT CASE WHEN LTRIM(RTRIM(Desk_name)) LIKE '% %'  -- finds any space in string\n            THEN Desk_name \n            ELSE Desk_name + ' mm'\n       END AS Name, \n       head AS sector_head \nFROM   tableName\n","1432":"SELECT\nID,\nScore,\nISNULL(convert(int, lead(Score) over(partition by id order by timestamp)), 0) \n- convert(int, Score)\nFROM RiskPredLog \n-- where ID = '1002010'\n","1433":"A          R PROM\nA            MACT           2A\nA            MITEM         20A\nA            MP             2A\nA            MPITCL         2A\nA            MSTDAT         8S 0\nA            MEXDAT         8S 0\nA            MLIST          8S 2\nA            MRETAL         8S 2\nA            MCOST          8S 2\nA            MQTY          10S 0\nA            MPCHNG         6S 0\nA            MNPEFT        12A\nA            MNSTDT         8S 0\nA            MNEXDT         8S 0\nA            MNLST          8S 2\nA            MPNRTL         8S 2\nA            MNCOST         8S 2\nA            ZZ14           8A\nA            MALPHA         8A\nA            ZZ64         170A\nA          K MITEM\nA          K MP\nA          K MPITCL\n","1434":"ALTER INDEX IX_Index ON dbo.Table\nDISABLE ;\n","1435":"declare @v varchar(max) = 'bzip2,1,668,sometext'\nselect substring(@v, CHARINDEX(',', @v, CHARINDEX(',', @v, CHARINDEX(',', @v)+1)+1)+1, len(@v))\n","1436":"db.newColl.insert([a, b])\n","1437":"WHERE 0=1\n OR (owner_name = 'A' AND table_name = 'T1')\n OR (owner_name = 'B' AND table_name = 'T2')\n OR (owner_name = 'A' AND table_name = 'T3')\n","1438":"<security:http auto-config=\"true\" use-expressions=\"true\">\n    <security:intercept-url pattern=\"\/login\" access=\"permitAll\" \/>\n    <security:intercept-url pattern=\"\/registration\" access=\"permitAll\" \/>\n    <security:intercept-url pattern=\"\/**\" access=\"isAuthenticated()\" \/>\n     ...\n<\/security:http>\n","1439":"Tournament.objects.order_by(Func('date', function='\"time\"')).all()\n","1440":"SELECT c.*\nFROM dbo_Contact AS c\nWHERE\n   c.Expertise Like '*' & Nz(Forms!Data_Qry_Test_Page!Expertise1, 'BOGUS') & '*' \nOR c.Expertise Like '*' & Nz(Forms!Data_Qry_Test_Page!Expertise2, 'BOGUS') & '*' \nOR c.Expertise Like '*' & Nz(Forms!Data_Qry_Test_Page!Expertise3, 'BOGUS') & '*' \nOR c.Expertise Like '*' & Nz(Forms!Data_Qry_Test_Page!Expertise4, 'BOGUS') & '*'\n","1441":"SELECT p.name, p.birth_date\n    FROM Player p\n        WHERE p.birth_date > '1986-04-30'\n            AND p.birth_date < '1986-06-01';\n","1442":"SELECT Department,\n   COUNT(DISTINCT ID) AS total, \n   COUNT(DISTINCT CASE WHEN course LIKE 'AS%' THEN id END) Total_AS \nFROM schedule \nGROUP BY Department \nORDER BY Department ASC \n","1443":"WITH cte \n     AS (SELECT ph.IC_PO_HEADER, \n                ph.PO_NUMBER, \n                ph.revision_number, \n                pl.ic_line_key, \n                pl.ic_po_line, \n                Row_number() \n                  OVER ( \n\n                    ORDER BY ph.IC_PO_HEADER, IC_LINE_KEY) Rn \n         FROM   PO_HEADER ph \n                INNER JOIN PO_LINE pl \n                        ON ph.po_number = pl.po_number \n         ) \nSELECT t1.IC_PO_HEADER, \n       t1.PO_NUMBER, \n       t1.revision_number, \n       t1.ic_line_key,\n       t2.ic_line_key + t1.rn - 1, \n       t2.IC_PO_LINE + t1.rn - 1\nFROM   cte t1\n       INNER JOIN cte t2 \n       ON t2.rn = 1\n\nORDER  BY IC_PO_HEADER\n","1444":"delete from tvsemp e\nwhere rowid>(select min(rowid) from tvsemp m where e.ename=m.ename);\n","1445":"SELECT `mid`, `message`, `created_at`, \n        CASE WHEN (SELECT `uid` \n                   FROM `bulletin_message` AS t2 \n                   WHERE t1.`bid` = t2.`bid` \n                   ORDER BY `mid` ASC LIMIT 1) = t1.`uid`  \n               THEN 1 \n             ELSE 0 \n        END AS `is_op`            \nFROM`bulletin_message` AS t1\nORDER BY `mid` ASC\n","1446":"BEGIN TRY\n    BEGIN TRANSACTION\n\n    INSERT INTO table1(col1, col2)\n        SELECT DISTINCT col1, col2 FROM tbl\n\n    INSERT INTO table2(col3, table1fk)\n        SELECT\n            t.col3,\n            t1.Id\n        FROM tbl t\n        INNER JOIN table1 t1\n            ON t1.col1 = t.col1\n            AND t1.col2 = t.col2\n\n    COMMIT TRANSACTION\nEND TRY\n\nBEGIN CATCH\n    IF (@@TRANCOUNT > 0) BEGIN\n        ROLLBACK TRANSACTION\n    END\n    DECLARE\n            @ErrorNumber    INT,\n            @ErrorMessage   NVARCHAR(4000),\n            @ErrorState     INT,\n            @ErrorSeverity  INT,\n            @ErrorLine      INT\n\n    SELECT\n        @ErrorNumber    =   ERROR_NUMBER(),\n        @ErrorSeverity  =   ERROR_SEVERITY(),\n        @ErrorState     =   ERROR_STATE(),\n        @ErrorLine      =   ERROR_LINE(),\n        @ErrorMessage   =   ERROR_MESSAGE()\n\n    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState)\n    PRINT 'Error detected, transaction rolled back.'\nEND CATCH\n","1447":"SELECT C.Id AS CategoryId, C.Title AS CategoryTitle, N.Id, N.Title\nFrom NewsCategories C\nOUTER APPLY (\n   SELECT TOP 10 *\n   FROM News \n   WHERE CategoryId = C.Id\n) AS N\nORDER BY C.Id Desc\n","1448":"SELECT\n t_cluster.id,\n t_cluster.name,\n t_cluster.desc,\n t_logging_max.xd1\nFROM\n t_cluster\n LEFT OUTER JOIN\n (\n  SELECT id, MAX(xd1) AS xd1\n  FROM t_logging\n  GROUP BY id\n ) t_logging_max ON t_cluster.id = t_logging_max.id\nWHERE \n t_cluster.id LIKE '%73%';\n","1449":"select   top 1\n         [price]\nfrom(\nselect  [id],\n        [count],\n        [price],\n        sum([count]) over(order by [id]) as run_sum\nfrom    tbl\n) x\nwhere    120 <= run_sum\norder by run_sum\n","1450":":connect server1\nuse DatabaseName\nGO\n:r StoredProcedure.sql\nGO\n\n:connect server2\nuse DatabaseName\nGO\n:r StoredProcedure.sql\nGO\n\n:connect server3\nuse DatabaseName\nGO\n:r StoredProcedure.sql\nGO\n","1451":" SELECT Customer_details.CUS_name, (SUM(SALES.Bill_Amount) - SUM(SALES.Recived_Amount)) as       Subtract,Customer_details.Cus_id\n\n from sales INNER JOIN Customer_details ON Customer_details.Cus_id=sales.Cus_id\n\n where SALES.Cus_id = 1 \n\n group by Customer_details.CUS_name,Customer_details.Cus_id\n\n order BY Cus_id\n","1452":"SELECT movie, string_agg(actor, ', ') AS actor_list\nFROM   tbl\nGROUP  BY 1;\n","1453":"with cte as\n(select o.*, \n        case AdjustmentFlag when 1 then -1 else 1 end DrCr,\n        row_number() over (partition by OrderId, Amount, case AdjustmentFlag when 1 then 1 end\n                           order by AdjustmentFlag, Id) Rn\n from [Order] o)\nselect OrderId,\n       max(case DrCr when 1 then Id end) DrId,\n       sum(case DrCr when 1 then Amount else 0 end) DrAmount,\n       max(case DrCr when 1 then AdjustmentFlag end) DrAdjustmentFlag,\n       max(case DrCr when -1 then Id end) CrId,\n       sum(case DrCr when -1 then Amount else 0 end) CrAmount,\n       max(case DrCr when -1 then AdjustmentFlag end) CrAdjustmentFlag,\n       sum(DrCr * Amount) BalanceAmount\nfrom cte\ngroup by OrderId, Amount, Rn\nhaving sum(DrCr * Amount) >= 0 \/* excludes unmatched cancelled orders *\/\n","1454":"declare @ctr integer\n\nset @ctr = 1\n\nwhile @ctr < 1000\nbegin\n\n--Do your logic\n\nselect @ctr = @ctr + 1\n\nend\n","1455":"cast(621*1.0\/7 as Decimal(5,3))\n","1456":"SELECT a_id FROM mytable GROUP BY a_id HAVING count(a_id) > 1\n","1457":"SELECT p1.product_id,\n       substring(\n          ( SELECT ',' + engine_id\n              FROM ProductEngine p2\n              WHERE p2.product_id = p1.product_id\n              FOR XML PATH('') ), 2, 4000)\n       AS engine_id\n      FROM Products p1;\n","1458":"WHERE  ( @param_1 is NULL or field_1 = @param_1)\n       AND \n       ( @param_2 is NULL or field_2 = @param_2)\n       AND\n       ( @param_3 is NULL or field_3 = @param_3)\n\nOPTOIN(RECOMPILE)\n","1459":"SELECT *\n  FROM tower\n WHERE sitenumber NOT IN\n     (SELECT sitenumber\n       FROM sites)\n","1460":"columnname type\n","1461":"SELECT orderNumber FROM `order`\nWHERE id IN (\n    SELECT orderid FROM orderDetail od1\n    INNER JOIN orderDetail od2\n    USING (orderid)\n    WHERE od1.reference = 'F40' AND od2.description = \"Epee\"\n)\n","1462":"SELECT @StartTm=CASE WHEN @SOSlckTm=8 THEN\nDATEADD(day,1,@SODocDueD)\nend\n","1463":"CREATE INDEX ON my_table (name) WHERE name IS NOT NULL;\n","1464":"declare @t table ( group_code varchar(15))\n\ninsert into @t values ('122.2') ,('122.3' ) ,( '122.4' ) ,( '112.6'),( '112.0') , ( '119.1')\n\n   SELECT  (left(group_code, 3)) as Grop, \n        count(left(group_code, 3)) as occurrence \n    from @t\n        group by left(group_code, 3) \n\nselect * from\n(\n\n    SELECT  (left(group_code, 3)) as Grop, \n        count(left(group_code, 3)) as occurrence \n    from @t\n        group by left(group_code, 3) \n) a\njoin @t t on a.Grop  = left(t.group_code, 3)\n","1465":"SELECT \n m.member_id,\n m.login, \n p.type,\n CASE p.type \n   WHEN 1 THEN '<div id=1>' \n   WHEN 2 THEN '<div id=2>'\n END as MyDiv\nFROM \n permissions p\nINNER JOIN members m ON p.member_id = m.member_id\nWHERE \n K_id = '$kid' \nORDER BY p.type DESC\n","1466":"CREATE TABLE t1(id int primary key);\nCREATE TABLE t3(id int primary key);\nCREATE TABLE t2(t1_id int references t1(id), t3_id int references t3(id));\nCREATE TABLE t4(id int primary key, t1_id int references t1(id));\n\n\nCREATE FUNCTION Foo(@t4_id int, @t3_id int) \nreturns int \nas \nbegin  return (select count(*) from t2 where t3_id=@t3_id and t1_id in (select t1_id from t4 where id=@t4_id)); end;\nGO;\n\nCREATE TABLE t5(\n  t4_id int references t4(id),\n  t3_id int references t3(id),\n  PRIMARY KEY (t3_id,t4_id),\n  CHECK ( Foo(t3_id,t4_id)>0 )\n);\n","1467":"select match_id from table_name where \"AAA\" in (player_1,player_2) and   \n\"BBB\" in (player_1,player_2);  \n","1468":"Private Sub Detail_Format(Cancel As Integer, FormatCount As Integer)\n\n    Me.MyTextBox = \"<div><font face=Arial size=4 color=Blue>\" & _\n                   \"<strong>My Blue Bold Text<\/strong><\/font><\/div>\"\n\nEnd Sub\n","1469":"SELECT DATALENGTH (\n                    (SELECT *\n                    FROM products\n                    FOR XML RAW, ROOT('products')\n                    ) \n                )\n","1470":"v_url := '<your url to the report>';\nhost ('cmd \/c start '||v_url); \n","1471":"DECLARE @minDateTime AS DATETIME;\nDECLARE @maxDateTime AS DATETIME;\n\nSET @minDateTime = '2014-01-13 02:00:00';\nSET @maxDateTime = '2014-12-31 14:00:00';\n\n;\nWITH Dates_CTE\n     AS (SELECT @minDateTime AS Dates\n         UNION ALL\n         SELECT Dateadd(hh, 1, Dates)\n         FROM   Dates_CTE\n         WHERE  Dates < @maxDateTime)\nSELECT *\nFROM   Dates_CTE\nOPTION (MAXRECURSION 0) \n","1472":"SELECT id\nfrom table1 a FULL JOIN\n     table2 b\n     using (id) FULL JOIN\n     table3 c\n     using (id) FULL JOIN\n     table4\n     using (id);\n","1473":"EXAMPLE\nCREATE OR REPLACE PROCEDURE target_deletion\nIS\n   number_of_the_job   NUMBER;\nBEGIN\n   DBMS_JOB.submit (number_of_the_job, 'begin stored_procedure_for_deletion; end;', SYSDATE);\nEND;\n\/\n","1474":"select exists(\n    select 1\n    from tbl_stats_assigned\n    where username = 'abc'\n);\n","1475":"select distinct r.risk_ID, r.title, ah.Approval_ID as Approver_ID  \nfrom dbo.tbl_risk r left join\n     dbo.tbl_Approval_History ah\n     on ah.risk_ID = r.risk_ID and ah.Status_ID = 5 ;\n","1476":"select dvdID as 'unique number', count(*) as 'times hired' \nfrom MonthlyRental \nwhere month(dateHired) = 8 \ngroup by dvdId\n","1477":"SELECT Id,\n       Value\n  FROM(SELECT Id,\n              Value,\n              COUNT(*) OVER (PARTITION BY Id) cnt,\n              SUM(DECODE(Value, 'X', 1, 0)) OVER (PARTITION BY Id) sumx\n         FROM your_table\n      )\n WHERE cnt = 1 OR sumx = 0;\n","1478":"select t1.id,\n  t1.name,\n  t2.cnt\nfrom yourtable t1\ninner join\n(\n  SELECT max(id) id,\n    COUNT(id) AS cnt\n  FROM   yourtable\n  GROUP  BY name\n  HAVING cnt > 1\n) t2\n  on t1.id = t2.id\n","1479":"WITH CTE AS (\nSELECT ID, Rating, CreatedDate, ROW_NUMBER() OVER (PARTITION BY ID ORDER BY CreatedDate DESC) RowID\nFROM [TABLESWITHJOIN]\n)\nSELECT *\nFROM CTE\nWHERE RowID = 1;\n","1480":"SELECT photo.src_big, photo.created, photo.modified, photo.owner, photo.aid, \nphoto.caption FROM photo \ninner join album on album.aid = photo.aid \ninner join  friend on album.owner = friend.uid2 \nWHERE uid1=me() or uid2 = me()\norder by modified desc,created DESC LIMIT 30\n","1481":"SELECT CAST(ABS(CHECKSUM(Indicator)) % 220 AS TINYINT)   AS Indicator,\n       CAST(CIndicator AS VARCHAR(100))                  AS CIndicator,\n       CAST(ABS(CHECKSUM(SK_IndicatorL2)) % 220 AS TINYINT) AS SK_IndicatorL2,\n       CAST(IndicatorL2 AS varchar(100))                   AS IndicatorL2\n\nFROM   ( VALUES ('Alcohol',\n       'Alcohol',\n       'Audit C recorded',\n       'Audit C recorded  (excluding screen in 3y prior to start of quarter)'),\n                ('Alcohol',\n       'Alcohol',\n       'Community Detox and TH CAT',\n       'Community Detox and TH CAT'),\n                ('Alcohol',\n       'Alcohol',\n       'Follow Up appointment',\n       'Follow Up appointment'),\n                ('Healthy Lifestyles',\n       'Healthy Lifestyles',\n       'HealthyLifestyle-Aged 19-39',\n       'HealthyLifestyle-Aged 19-39'),\n                ('Healthy Lifestyles',\n       'Healthy Lifestyles',\n       'Aged 19-39 - BMI recorded',\n       'Aged 19-39 - BMI recorded') ) AS Nis (Indicator, \n                                              CIndicator, \n                                              SK_IndicatorL2, \n                                              IndicatorL2)\n","1482":"TimeIn >= '1\/8\/1950' AND TimeIn < '1\/9\/1950' \nAND CASE WHEN TimeIn >= '1950-01-08' AND TimeIn < '1950-01-09' \n         THEN DATEADD(week, DATEDIFF(week, '1\/8\/1950', '9\/14\/2014'), TimeIn) \n    END >= '2014-09-14'\n","1483":"SELECT dT.partkey, dT.numreturns\nFROM\n   (SELECT O.o_partkey as partkey,\n       SUM(CASE WHEN O.o_returnflag = 'R' THEN 1 ELSE 0 END) as numreturns       \n    FROM [ORDER] O\n    GROUP BY O.o_partkey) AS dT\nORDER BY dT.numreturns DESC;\n","1484":"timestampfield > current_timestamp - interval '1' hour\n","1485":"WITH RECURSIVE docCTE AS\n(\n    \/* Recursive Seed *\/\n    SELECT\n        cast(null as int) as parentdoc\n        documentID,\n        0 as depth,\n        documentid as originalDocument,\n        CAST(null as varchar(100) as docpath\n    FROM\n        dbo.document\n    Where originalDocID IS NULL\n\n    UNION ALL\n\n    \/* Recursive Term *\/\n    SELECT\n        docCTE.DocumentID as parentdoc,\n        document.documentID,\n        depth + 1 as depth,\n        docCTE.originalDocument,\n        docCTE.Path + '>' + document.documentID\n    FROM\n        docCTE\n        INNER JOIN dbo.document on doccte.document = document.originalDocID\n    WHERE\n        depth <= 15 \/*Keep it from cycling in case of bad hierarchy*\/\n\n)\n\nSELECT * FROM docCTE;\n","1486":"SELECT *\nFROM    (\n            SELECT *\n            FROM TABLE\n            WHERE event_time < NOW()\n            ORDER BY event_time DESC\n            LIMIT 2\n        ) First2\nUNION ALL\nSELECT *\nFROM    (\n            SELECT *\n            FROM TABLE\n            WHERE event_time > NOW()\n            ORDER BY event_time ASC\n            LIMIT 1\n        ) Next1\nORDER BY event_time\n","1487":"<?php\n    class HompageController extends AppController {\n\n\n    public function index(){\n      ...\n\n      \/\/For us to be able to call a different Model if it doesnt have a relationship with this model. Instantiate Product Model\n      $Products = ClassRegistry::init('Product');\n\n      \/\/to get the data in product database. you can do it in two ways\n      \/\/1. use the find method to get all data in Product database\n      $myproducts = $Products->find('all');\n\n      \/\/2. or call some function in your Product model e.g. get_products() that return the data.\n      $myproducts = $Products->get_products();\n\n\n      \/\/pass myproducts variable to homepage index\n      $this->set('myproducts', $myproducts);\n\n\n    }\n?>\n","1488":"SELECT Branch AS 'Branch Code',\n    SUM(CASE WHEN CustomerStatus_Value = 'E' THEN 1 ELSE 0 END) AS 'Created',\n    SUM(CASE WHEN CustomerStatus_Value = 'A' THEN 1 ELSE 0 END) AS 'Active',\n    SUM(CASE WHEN CustomerStatus_Value = 'B' THEN 1 ELSE 0 END) AS 'Blocked',\n    SUM(CASE WHEN CustomerStatus_Value = 'C' THEN 1 ELSE 0 END) AS 'Cancelled',\n    COUNT(CustomerStatus_Value) AS 'All'\nFROM CustomerStatusEntries\nGROUP BY Id\n","1489":"Question                 Answer\n--------                 ------ \nQuestion ID              Answer ID\nEdit counter             Edit counter\nQuestion text            Answer Text\n","1490":"select t1.TableID as TableID1,\n    t1.StateValue as StateValue1,\n    t2.TableID as TableID2,\n    t2.StateValue as StateValue2,\n    t1.StateDefinition  \nfrom MyTable t1\ninner join MyTable t2 on t1.TableID = 1 and t2.TableID = 2\nwhere t1.StateValue = t2.StateValue \n    and t1.StateDefinition  = t2.StateDefinition \n","1491":"CREATE OR REPLACE FUNCTION f_test(string1 varchar)\nRETURNS VOID AS\n$$\nDECLARE\n    string2 varchar = 'A1,A2,A3,A4,A5,A6,A7';\n    string3 varchar;\n    string4 varchar;\n    string5 varchar;\n    string6 varchar;\n    intCount int;\nBEGIN\n    string3 := REPLACE(string1,',',' = 1 AND ')||' = 1';\n\n    RAISE INFO '%',string3;\n\n    string4 := REPLACE(string2,string1,string3);\n\n    RAISE INFO '%',string4; \nselect string_agg(c,' AND ') into  string6 from (\nselect  * from (\nselect c ||'= 1' c from (\nselect regexp_split_to_table(string2,',') c\n)t \nwhere c in (select regexp_split_to_table(string1,','))\nunion all \nselect c ||' IS NULL ' c from (\nselect regexp_split_to_table(string2,',') c\n)t \nwhere  c  not in (select regexp_split_to_table(string1,','))\n) t group by c order by c \n)t;\n    RAISE INFO '%',string6; \nEND;\n$$\nLANGUAGE PLPGSQL;\n","1492":"var app = Application;\nvar interval = TimeSpan.FromSeconds(1);\nvar windowSize = TimeSpan.FromSeconds(10);\nvar hopSize = TimeSpan.FromSeconds(1);\n\n\/* Replace the Observable.Interval with your logic to poll the database and\n   convert the messages to instances of TPayload. It just needs to be a class\n   that implements the IObservable<TPayload> interface. *\/\nvar observable = app.DefineObservable(()=> Observable.Interval(interval));\n\n\/\/ Convert the observable to a point streamable.\nvar streamable = observable.ToPointStreamable(\n            e=> PointEvent.CreateInsert(DateTimeOffset.Now, e),\n            AdvanceTimeSettings.IncreasingStartTime);\n\n\/* Using the streamable from the step before, write your actual LINQ queries\n   to do the analytics you want. *\/\nvar query = from win in streamable.HoppingWindow(windowSize, hopSize)\n        select new Payload{\n            Timestamp = DateTime.UtcNow,\n            Value = win.Count()\n        };\n\n\/* Create a sink to output your events (WCF, etc). It just needs to be a\n   class that implements the IObserver<TPayload> interface. The\n   implementation is highly dependent on your needs. *\/\nvar observer = app.DefineObserver(()=> Observer.Create<Payload>(e => e.Dump()));\n\nquery.Bind(observer).Run();\n","1493":"SELECT SUM(transaction_amount)\nWHERE YEAR(transaction_date) = '2008'\nGROUP BY YEAR(transaction_date)\n","1494":"SELECT VRI.Street_Number_and_Modifier \n    + CASE WHEN VRI.Street_Number_and_Modifier <> '' THEN ', ' ELSE '' END\n       + VRI.Street_Direction\n    + CASE WHEN VRI.Street_Direction <> '' THEN ', ' ELSE '' END\n       + VRI.Street_Name\n    + CASE WHEN VRI.Street_Name <> '' THEN ', ' ELSE '' END\n       + VRI.Street_Direction\n    + CASE WHEN VRI.Street_Direction <> '' THEN ', ' ELSE '' END\n       + VRI.Street_Suffix\n    + CASE WHEN VRI.Street_Suffix <> '' THEN ', ' ELSE '' END\n       + VRI.Street_Post_Direction\n    + CASE WHEN VRI.Street_Post_Direction <> '' THEN ', ' ELSE '' END\n       + VRI.Unit\n    + CASE WHEN VRI.Unit<> '' THEN ', ' ELSE '' END\nFROM View_Report_Information_Tables VRI\n","1495":"CREATE PROCEDURE MyFolder_DeleteFolder\n\n    @UserId  int\n\nAS\n\nSET NOCOUNT on\n\nDECLARE @RowsDeleted int\nSET @RowsDeleted = 1\n\nWHILE @RowsDeleted > 0\n BEGIN\n    --  Loop until a call to DELETE does not delete any rows\n    DELETE Folder\n     WHERE FolderID IN \n        (SELECT ch.FolderID\n          FROM Folder ch \n           LEFT JOIN Folder p\n            ON ch.ParentID = p.FolderID \n          WHERE p.FolderID IS NULL\n           AND ch.ParentID > 0) \n        AND UserID = @UserID\n\n    SET @RowsDeleted = @@rowcount\n END\n\nRETURN 0\n","1496":"DECLARE @MaxKeyLength INT = (SELECT MAX(LEN([Name])) FROM testTable)\n\n\nselect '(''{' + cast(UniqueId as varchar(MAX)) + '}'',''' + LEFT(LTRIM([Name]) + ''',                                             ', @MaxKeyLength + 4) + ''''  + Address+ '''),'\nfrom testTable;  \n","1497":"SELECT \n  a.id,\n  b.id as AlternateID,\n  a.value\nFROM \n  (SELECT MIN(id) as id , value FROM YourTable GROUP BY value) a\nJOIN YourTable b on a.value = b.value and a.id <> b.id\n","1498":";WITH cte As\n(\nSELECT array_id, [date], comment,\nROW_NUMBER() OVER (PARTITION BY array_id ORDER BY [date] DESC) AS RN\nFROM my_table\nWHERE master_frame = 1\n)\n\nSELECT array_id, [date], comment\nFROM cte \nWHERE RN=1;\n","1499":"UPDATE mytable\nSET url = SUBSTRING_INDEX(url, '?', 1)\n","1500":"SELECT *\nFROM\n(\n    **(**\n        SELECT profileId\n        FROM \n        (\n            SELECT profileId\n            FROM profile profile2\n            WHERE profile2.profilePublishDate <= Now()\n            ORDER BY profile2.profilePublishDate DESC\n            LIMIT 0,40\n        ) AS profile1\n        ORDER BY RAND()\n        LIMIT 0,20\n    **)**\n    UNION\n    (\n        SELECT profileId\n        FROM profile profile4\n        WHERE profileId NOT IN (\n            SELECT profileId\n            FROM profile profile4\n            WHERE profile4.profilePublishDate <= Now()\n            ORDER BY profile4.profilePublishDate DESC\n            LIMIT 0,40\n            )\n        ORDER BY RAND()    \n        LIMIT 0,40\n    )\n) TEMP\nORDER BY RAND();\n","1501":"select p.post_title,m.meta_key,m.meta_value \nfrom wp_post p \njoin wp_postmeta m on p.id=m.post_id \nwhere p.post_status = 'publish' AND p.post_type = 'product' and\n(m.meta_key='_price' or m.meta_key='_regular_price')\n","1502":"UPDATE tablename SET columName = columnName \/ 42 WHERE rowId !=42;\n","1503":"SELECT @var = ISNULL(MAX(Column1), 0)\nFROM   myschema.mytable\nWHERE  Id = @suppliedId; \n","1504":"select c.cust_id, c.name, c.schema_id, s.period, s.amt, s.updated_date\nfrom customer c\ninner join\n(\n  select s1.schema_id, s1.period, s1.amt, s1.updated_date\n  from `schemas` s1\n  inner join \n  (\n    select schema_id, max(updated_date) MaxDate\n    from `schemas`\n    group by schema_id\n  ) s2\n    on s1.schema_id = s2.schema_id\n    and s1.updated_date = s2.maxdate\n) s\n  on c.schema_id = s.schema_id\n","1505":"select a_id from table_A_B\nwhere b_id in ('a','c')\ngroup by a_id having count(distinct b_id) = 2\n","1506":"select id as \"#\",first_name,last_name from student\n","1507":"insert into temp123(description) values('TESTING') returning 23,*;\n","1508":"regexp_replace( CUST_PART_NO, '(.*)(R)(.*)', '\\3' )\n","1509":"SELECT \n     u.name \nFROM \n     friends f \n     JOIN users s ON (u.id = f.user_id_2) \nWHERE \n     f.user_id_2 = 1234\n","1510":"$ wdiff a b\n\n# 1,\"abc\",\"( @docid =\"\"00123\"\" or @docid =\"\"00456\"\") AND [-a_number-] {+@a_number+} is not NULL\"\n","1511":"SELECT `src`, `value`\nFROM\n(\n    SELECT 'a' AS `src`, a AS `value` FROM yourtable WHERE id = 42\n    UNION ALL\n    SELECT 'b' AS `src`, b AS `value` FROM yourtable WHERE id = 42\n    UNION ALL\n    -- etc...\n    UNION ALL\n    SELECT 'j' AS `src`, j AS `value` FROM yourtable WHERE id = 42\n) T1\nORDER BY `value`\nLIMIT 3\n","1512":"  substring(fieldname,50,10)\n","1513":"query {\n    for h in dc.Table do\n    where h.SectorId.HasValue\n    select h\n}\n","1514":"For Each row As DataRow In dtDataTable.Rows\n    If row.Item(\"fDateAdded\") = *your match criteria* Then\n        *Do something - you can utilies* row.Item(\"fName\") *if you need*\n    End if\nNext row\n","1515":"select * from\n(\nselect row_number()over(partition by id order by time desc) Rn,\n       lag(item) over(partition by id order by time) prev_item,*\nfrom yourtable\n) A\nWhere Rn = 1\n","1516":";WITH\n    CTE1 AS\n    (\n        SELECT      Div, Dept,\n                    REPLACE(States,' ','') + ',' AS States\n        FROM        Table2\n    ),\n    CTE2 AS\n    (\n        SELECT      c1.Div, c1.Dept,\n                    LEFT(c1.States,CHARINDEX(',', c1.States)-1)                 AS IndividualState,\n                    RIGHT(c1.States,LEN(c1.States)-CHARINDEX(',', c1.States))   AS RemainingStates\n        FROM        CTE1    c1\n        UNION ALL\n        SELECT      c2.Div, c2.Dept,\n                    LEFT(c2.RemainingStates,CHARINDEX(',', c2.RemainingStates)-1),\n                    RIGHT(c2.RemainingStates,LEN(c2.RemainingStates) - CHARINDEX(',', c2.RemainingStates))\n        FROM        CTE2    c2\n        WHERE       LEN(c2.RemainingStates) > 0\n    ),\n    CTE3 AS\n    (\n        SELECT      Div, Dept,\n                    IndividualState,\n                    COUNT(*)            AS StateCount\n        FROM        CTE2\n        GROUP BY    Div, Dept, IndividualState\n    ),\n    CTE4 AS\n    (\n        SELECT      t1.Div, t1.Dept,\n                    (\n                        SELECT  c3.IndividualState + ' - (' + CONVERT(varchar(10),c3.StateCount) + '), ' \n                        FROM    CTE3 c3\n                        WHERE   c3.Div = t1.Div AND c3.Dept = t1.Dept\n                        FOR XML PATH('')\n                    )       AS States\n        FROM        Table1  t1\n    )\n\nSELECT  Div, Dept,\n        LEFT(States, LEN(States) - 1) AS States\nFROM    CTE4\n","1517":"       SELECT @Result As ReturnVal\n","1518":"email\nphone_number\naddress\n","1519":"SELECT [coly]\/[table].[colx]... \n","1520":"select c.*, m._id, m.message\nfrom (select c.*,\n             (select max(_id) as maxid\n              from message m\n              where c._id = m.conversationid\n             ) as messageid\n      from conversation c\n     ) c join\n     message m\n     on c.messageid = m._id;\n","1521":"declare @p table(id int, name varchar(10))\ndeclare @c table(id int, name varchar(10))\ndeclare @pc table(pid int, cid int)\n\ninsert into @p (id, name) values (1, 'laptop')\ninsert into @p (id, name) values (2, 'desktop')\ninsert into @p (id, name) values (3, 'milk')\n\ninsert into @c (id, name) values (1, 'computer')\ninsert into @c (id, name) values (2, 'device')\ninsert into @c (id, name) values (3, 'food')\n\ninsert into @pc (pid, cid) values (1, 1)\ninsert into @pc (pid, cid) values (1, 2)\n--insert into @pc (pid, cid) values (1, 3)\ninsert into @pc (pid, cid) values (2, 1)\ninsert into @pc (pid, cid) values (2, 2)\ninsert into @pc (pid, cid) values (3, 3)\n\n\ndeclare @productId int;\nset @productId = 1;\n\nselect * \nfrom @p p \nwhere  \n--count of categories that current product shares with the source product \n--should be equal to the number of categories the source product belongs to\n(\nselect count(*) \nfrom @pc pc \nwhere pc.pid = p.id\nand pc.cid in (\n      select cid from @pc pc\n      where pc.pid = @productId\n  )\n) = (select count(*) from @pc pc where pc.pid = @productId)\nand\np.id <> @productId\n","1522":"WITH cte AS (\nSELECT  av.userid, av.DateofDays, SUM(rooms.max_guests * av.RoomAvailable) AS maxPeople \nFROM av AS av INNER JOIN rooms \nON av.room = rooms.ID AND av.DateofDays BETWEEN '09\/28\/2012' AND '10\/03\/2012' \nGROUP BY av.userid, av.DateofDays\nHAVING SUM(rooms.max_guests * av.RoomAvailable) >= 10 \n)\nselect cte.userid \nfrom cte \ngroup by av.userid \nhaving COUNT(*) = 6\n","1523":"SELECT t1.a,t1.b,t1.c,t1.d,t1.e\nFROM tablename AS t1\nINNER JOIN (SELECT a, b, c, MAX(d) d\n            FROM tablename\n            GROUP BY a, b, c\n           ) AS t2\nON  t1.a = t2.a\nAND t1.b = t2.b\nAND t1.c = t2.c\nAND t1.d = t2.d\n","1524":"select\n  r.employee, d.description\nfrom\n  table1 as d\n  inner join (select min(rank) as rank, employee\n              from\n                 table1\n              group by employee) r on d.rank = r.rank\n                                      and d.employee = r.employee\n","1525":"CREATE VIEW [dbo].[myview] (a,b,c)\nAS\nSELECT a,b,CAST(NULL AS NVARCHAR(100)) c;\n","1526":"SET ARITHABORT OFF;\nSET ANSI_WARNINGS OFF;\n\nWITH Product(Quantity,StatusId) As\n(\nSELECT -2147483648,1\n)\nSELECT (CASE WHEN P.StatusId IN (5, 8) THEN 0 ELSE -P.Quantity END) AS Quantity  \nFROM Product P\n","1527":"SELECT s.id, s.title, s.description, sq.cc  \n FROM  survey s  \n join ( SELECT ss.id, count(qq.id) as cc \n          FROM  survey ss  \n          LEFT OUTER JOIN questionnaire q  \n                ON q.survey_id = s.id  \n         GROUP BY s.id \n      ) sq \n   on sq.id = s.id \n","1528":"public override void Input0_ProcessInputRow(Input0Buffer Row)\n{\n    const string pFirstName = @\"^[A-Z]([-']?[a-z]+)*\";\n    const string pSuffix = @\"((Jr|Sr|I|V|X)( ?))*\";\n    const string pInitial = @\"(?<=\\s)[A-Z](?=\\s)\";\n    const string pLastName = @\"(?!(?:Jr|Sr|I|V|X|^))([A-Z][-'\\s]?[a-z]+)\";\n\n    string fullName = Row.Name.ToString();\n    string firstName = Regex.Match(fullName, pFirstName).Value;\n    string suffix = Regex.Match(fullName, pSuffix).Value;\n    string initial = Regex.Match(fullName, pInitial).Value;\n    string lastName = Regex.Match(fullName, pLastName).Value;\n\n    if (!string.IsNullOrEmpty(initial))\n        lastName += \" \" + initial;\n\n    if (!string.IsNullOrEmpty(suffix))\n        lastName += \" \" + suffix;\n\n    Row.FirstName = firstName;\n    Row.LastName = lastName;\n}\n","1529":"select wtdate, CONVERT(DATE,\n        '20'+RIGHT(wtdate,2)\n        +REVERSE(LEFT(SUBSTRING(REVERSE(wtdate),5,2)+'0',2))\n        +LEFT(RIGHT(wtdate,4),2)\n    ) AS ConvertedDate\nfrom Trans\ngroup by wtdate\norder by wtdate\n","1530":"SELECT [FieldA], [FieldB], a.[FieldC], [FieldD], [FieldE]\nFROM [TABLE] a\nLEFT JOIN(\nSELECT DISTINCT [FieldC], pwdencrypt([FieldC]) as [FieldE]\nFROM [TABLE]) b\nON a.[FieldC] = b.[FieldC]\n","1531":"SELECT  ParticipantId \nFROM    Contact\nWHERE   EXISTS\n        (   SELECT  1\n            FROM    Contact c2\n            WHERE   c2.ParticipantID = c.ParticipantId\n            AND     ContactTypeId = 1\n            GROUP BY ParticipantID\n            HAVING COUNT(*) > 1\n            AND COUNT(CASE WHEN IsCurrent = 0 AND IsActive = 1 THEN 1 END) >= 1\n        );\n","1532":"select k.*\nfrom\n(\n  select 1 as pk\n  union all\n  select 3\n  union all\n  select 7\n) k\nleft join your_table t on t.id = k.pk\nwhere t.id is null\n","1533":"SELECT * from shops s \nWHERE s.shoptype = 0 \nAND NOT EXISTS \n(SELECT 1 \n FROM  receipts r,\n       receiptaddinfo ri\n WHERE r.receiptid = ri.receiptid \n AND   r.shop = ri.shop\n AND   ri.shop = s.shop \n AND   ri.creationtime >= '2016-05-19 00:00:00') \n","1534":"SELECT B.PermissionId\n    ,A.RoleId\nFROM RolesPermissions A\nINNER JOIN (\n    SELECT PermissionId\n    FROM RolesPermissions\n    WHERE HasPermission = 0 --Get all permissions for user(Duplicates entries)\n        AND RoleId IN (\n            SELECT RoleId\n            FROM aspnet_UsersInRoles\n            WHERE UserId = '3ee38aa9-0e1a-4805-9506-aa47aa38a79c'\n            )\n    GROUP BY PermissionId\n    HAVING Count(PermissionId) = (\n            SELECT count(RoleId)\n            FROM aspnet_UsersInRoles\n            WHERE UserId = '3ee38aa9-0e1a-4805-9506-aa47aa38a79c'\n            )\n    ) AS B ON A.PermissionId = B.PermissionId Where HasPermission = 0\n          AND A.RoleId IN (\n            SELECT RoleId\n            FROM aspnet_UsersInRoles\n            WHERE UserId = '3ee38aa9-0e1a-4805-9506-aa47aa38a79c'\n            )\n    group by B.PermissionId,A.RoleId\n","1535":"SELECT GetName (empno) name\n     , amount\nFROM bonus;\n","1536":"insert into a (id, ... ) values \n(coalesce($1, uuid_generate_v4()), ... );\n","1537":"select a.a_name, a.max_b, count(*) as num_a_id from a join a_to_b on a.a_id=a_to_b.a_id group by a_id\n","1538":"declare @Yourtable table\n (SecID int, Date Date, Price int)\n\n INSERT INTO @Yourtable\nSELECT 1,GETDATE()-5,10 union all\nSELECT 1,GETDATE()-4,10 union all\nSELECT 1,GETDATE()-3,5 union all\nSELECT 1,GETDATE()-2,10 union all\nSELECT 1,GETDATE()-1, 10\n\n;WITH cte AS\n(\nSELECT SecID,Date,Price,\n       ROW_NUMBER() OVER (PARTITION BY SecID ORDER BY Date) -\n       ROW_NUMBER() OVER (PARTITION BY Price, SecID ORDER BY Date) AS Grp\nFROM @Yourtable\n)\nSELECT SecID,Price, MIN(Date) StartDate, MAX(Date) EndDate\nFROM cte\nGROUP BY SecID, Grp, Price\nORDER BY SecID,  MIN(Date)\n","1539":"SELECT\n    cr.TransID,\n    MAX(inv.TransID) as InvoiceID,\n    MAX(CASE WHEN inv.TransID is NULL THEN 1 ELSE 0 END) as Unsatsified\nFROM\n    @t cr\n       left join\n    @t inv\n       on\n           cr.Product = inv.Product and\n           cr.OrderRef = inv.OrderRef and\n           cr.Qty = inv.Qty and\n           cr.Date = inv.Date and\n           inv.TransType = 'Invoice'\nWHERE\n    cr.TransType = 'Credit'\nGROUP BY\n    cr.TransID\nHAVING\n    MAX(CASE WHEN inv.TransID is NULL THEN 1 ELSE 0 END) = 0\n","1540":"UPDATE DisplayArticles\nSET    ArticleID = (SELECT MAX(ArticleID) \n                    FROM   Articles AS a                        \n                    WHERE  a.CategoryID = CategoryID\n                           AND ArticleID NOT IN (\n                             SELECT ArticleID \n                             FROM   DisplayArticles da\n                             WHERE  da.CategoryID = CategoryID \n                           )\n                   )\nWHERE  IsAuto = 'true'\n","1541":"SELECT plantname, orderfreq, totalincome \nFROM plantreview \nWHERE score >='5' \nAND recommended='1' \nORDER BY score DESC\nLIMIT 0, 5\n","1542":"SELECT \n\n    a.Geog1.STIntersection(b.Geog2) AS OverlapGeog\n,   a.Geog1.STIntersection(b.Geog2).STArea() AS AreaOverlap\nFROM\n(\n    SELECT \n    GEOGRAPHY::STGeomFromText('POINT(0.0 0.0)',4326).STBuffer(100) AS Geog1\n) a\nINNER JOIN\n(\n    SELECT \n    GEOGRAPHY::STGeomFromText('POINT(0.001 0.0)',4326).STBuffer(100) AS Geog2\n) b\nOn\na.Geog1.STIntersects(b.Geog2) = 1\n","1543":"with ABCOrdered as\n(\n  select *\n    , FirstEvent = row_number() over (partition by ID order by CODE_DATE)\n    , LastEvent = row_number() over (partition by ID order by CODE_DATE desc)\n  from ABC\n)\nselect f.ID\n  , [RESULT] = case\n    when f.CODE_GROUP = l.CODE_GROUP or l.CODE_GROUP is null then f.CODE_GROUP\n    else f.CODE_GROUP + ' THEN ' + l.CODE_GROUP\n    end\n  , EVER_APPROVED = case\n    when exists (select 1 from ABC where l.ID = ABC.ID and ABC.CODE_GROUP = 'APPROVED') then 'Y'\n    else 'N'\n    end\n  , EVER_DENIED = case\n    when exists (select 1 from ABC where l.ID = ABC.ID and ABC.CODE_GROUP = 'DENIED') then 'Y'\n    else 'N'\n    end\n  , EVER_ON_HOLD = case\n    when exists (select 1 from ABC where l.ID = ABC.ID and ABC.CODE_GROUP = 'ON HOLD') then 'Y'\n    else 'N'\n    end\nfrom ABCOrdered f\n  left join ABCOrdered l on f.ID = l.ID and l.LastEvent = 1\nwhere f.FirstEvent = 1\norder by f.ID\n","1544":"SELECT \n  TotalRooms = COUNT(*)\n, StartDate = MIN(i.StartDate)\n, EndDate =  MAX(i.EndDate)\nFROM bookings b \nLEFT JOIN bookingitems bi \n  ON b.BookingID = bi.BookingID\nGROUP BY b.BookingID\nWHERE MIN(i.StartDate) >= '2010-01-01'\nORDER BY StartDate, EndDate\n","1545":"SELECT \nYEAR(your_column) AS the_year, \nDATE_FORMAT(your_column, '%b') AS the_month_abbreviated, \nGROUP_CONCAT(DATE_FORMAT(your_column, '%D') ORDER BY DAY(your_column) SEPARATOR ', ') AS the_days\nFROM your_table\nGROUP BY YEAR(your_column), DATE_FORMAT(your_column, '%b')\nORDER BY YEAR(your_column), MONTH(your_column)\n","1546":"SELECT source, user, COUNT(*)\nFROM logs\nGROUP BY source, user ;\n","1547":"start_date < sysdate - 30 \/ (24 * 60)\n","1548":"update ... set gameCapacity = gameCapacity -1 where ...\n","1549":"Category\n----------\nCategoryId\nParentCategoryId --nullable\nCategoryName\n","1550":"select t.name as TableWithForeignKey, fk.constraint_column_id as FK_PartNo , c.name as ForeignKeyColumn \nfrom sys.foreign_key_columns as fk\ninner join sys.tables as t on fk.parent_object_id = t.object_id\ninner join sys.columns as c on fk.parent_object_id = c.object_id and fk.parent_column_id = c.column_id\nwhere fk.referenced_object_id = (select object_id from sys.tables where name = 'TableOthersForeignKeyInto')\norder by TableWithForeignKey, FK_PartNo\n","1551":"revoke all on all tables in schema information_schema from public;\n","1552":"Select p1.fkProductId From AttributeBindings p1\n    inner join AttributeBindings p2 on p1.fkProductId = p2.fkProductId\nwhere \n    (p1.fkAttributeId = 17 and p1.fkAttributeValueId = 97)\n    and (p2.fkAttributeId = 6 and p2.fkAttributeValueId = 11)\n","1553":"SELECT * FROM test WHERE timestamp < date('now', '-2 days')\n","1554":"CASE 'some_expression'\n   WHEN 1 THEN concat('Monday',first)\n   WHEN 2 THEN concat('Tuesday',second)\n   ELSE 'undefined'\nEND AS 'days_of_week'\n","1555":"declare @binaryS binary(180)\nset @binaryS = 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0700000000000000\ndeclare @s varchar(max)\nset @s = Convert(varchar(max), @binaryS, 2)\ndeclare @seconds int\nset @seconds = 0\ndeclare @i int\nset @i = 1\ndeclare @t datetime\nset @t = Convert(datetime, '01\/01\/2014', 101)\nWHILE (@i <= 360)\nBEGIN\n    declare @segment varchar(max)\n    set @segment = substring(@s, @i, 2)\n    --print '0x' + @segment\n    set @seconds = (convert(int, convert(varbinary, '0x' + @segment, 1))) * 15\n    set @t = DATEADD(ss,480,@t)\n    --print @seconds\n    if(@seconds > 0)\n      print @t\n    set @i = @i + 2\nEND\n","1556":"USE AdventureWorks2008R2;\nGO\nWITH OrderedOrders AS\n(\n    SELECT SalesOrderID, OrderDate,\n    ROW_NUMBER() OVER (ORDER BY OrderDate) AS 'RowNumber'\n    FROM Sales.SalesOrderHeader \n) \nSELECT * \nFROM OrderedOrders \nWHERE RowNumber BETWEEN 50 AND 60;\n","1557":"select * from TABLE_2 where category_id in (select category_id from TABLE_1 where parent_id = 1) \n","1558":"UPDATE LookUpWrkflwTemp\n    SET SpiralUniverse = (SELECT Count(*)\n                          FROM SpiralUniverse su\n                          WHERE su.Date = LookUpWrkflwTemp.Date\n                         )\n    WHERE SprialUniverse IS NULL;\n","1559":"SELECT p.*\nFROM categories c\nJOIN relationships r ON c.cat_id = r.cat_id\nJOIN products p ON r.prod_id = p.prod_id\nWHERE c.name = 'Books' -- or specify parameter like @Books\n","1560":"select \n  name\nfrom \n  (select \n    round((min(LATITUDE) + max(LATITUDE)) \/ 2) as LATITUDE,\n    round((min(LONGITUDE) + max(LONGITUDE)) \/ 2) as LONGITUDE\n   from STATION \n   where DISTRICT_ID = '110' \n     AND NAME LIKE 'Vancouver%') AS center\n  inner join STATION s\nwhere\n  s.DISTRICT_ID = '110' \n  and s.NAME like 'Vancouver%'\n  and s.LATITUDE between center.LATITUDE - 5 and center.LATITUDE + 5\n  and s.LONGITUDE between center.LONGITUDE - 5 and center.LONGITUDE + 5\n","1561":"SELECT\n    MT.some_date,\n    COALESCE(ST.search_string, MT.column_1) AS my_group,\n    MT.column_2,\n    SUM(MT.column_3)\nFROM\n    My_Table MT\nLEFT OUTER JOIN Search_Table ST ON MT.column_1 LIKE '%' + ST.search_string + '%'\nGROUP BY\n    MT.some_date,\n    COALESCE(ST.search_string, MT.column_1) AS my_group,\n    MT.column_2\n","1562":"CREATE TABLE Customers(ID INT IDENTITY(1,1),\n                       CustomerName VARCHAR(100), Country VARCHAR(100));\n\nINSERT INTO Customers (CustomerName, Country)\nVALUES ('John', 'USA'), ('Martin','Germany');\n\nINSERT INTO Customers (CustomerName, Country)\nSELECT CustomerName, Country \nFROM Customers\nWHERE Country='Germany';\n\nSELECT *\nFROM Customers;\n","1563":"CREATE PROCEDURE sort_Students_By_Avg (\n    IN in_student_Id INT(11),\n    OUT out_student_Name VARCHAR(20)\n)\nBEGIN\n    SELECT s.name INTO out_student_name\n    FROM student s\n    WHERE s.id = in_student_Id AND s.avg > 70; \nEND;\n","1564":"439 left outer join 365 on 439.C = 365.C\nleft outer join 444 on 365.K = 444.K left outer join T on 444.K = T.K \n","1565":"SELECT array_agg(id) AS id, \"value\"\n  FROM Two\n GROUP BY \"value\";\n","1566":"SELECT cname, GROUP_CONCAT(survey_id) as survey_ids\nFROM categories \nGROUP BY cname\n","1567":"SELECT STAFF.Name\n   ,STAFF.Position\n   ,BRANCH.BranchID\nFROM STAFF\nINNER JOIN BRANCH\n    ON STAFF.BranchID = BRANCH.BranchID\nORDER BY STAFF.Name;\n","1568":";WITH CTE AS (\n SELECT a.BikePathId, c.ZipCodeId,\n \u00a0 \u00a0 Rnum =ROW_NUMBER() OVER (PARTITION BY a.BikePathId ORDER BY c.Boundary.STIntersection(d.Boundary))\n FROM      [dbo].[BikePaths] a\n    INNER JOIN [dbo].[BikePathBoundaries] b on a.BikePathId = b.BikePathId\n\u00a0 \u00a0 INNER JOIN [dbo].[ZipCodeBoundaries] c on b.Boundary.STIntersects(c.Boundary) = 1\n    INNER JOIN [dbo].[ZipCodes] d on c.ZipCodeId = d.ZipCodeId)\nUPDATE a\nSET a.ZipCodeId = cte.ZipCodeId\nFROM [dbo].[BikePaths] a\n\u00a0 \u00a0 INNER JOIN cte on cte.bikepathid =a.bikepathid and cte.rnum=1;\n","1569":"SELECT e.event_id, COUNT(c.parent_id) as NumComments\nFROM events e left JOIN\n     comments c\n     ON c.parent_id=e.id \nWHERE e.owner_id = X     \ngroup by e.event_id;\n","1570":"WITH X AS ( SELECT id, min(value) as minval from Foo group by id )\nSELECT * FROM \n(\n    SELECT Foo.*, RANK() OVER ( PARTITION by Foo.id order by Foo.hid, Foo.value ) as Rank\n    FROM Foo JOIN X on Foo.id = X.id and Foo.value = X.minval\n) tmp\nWHERE Rank = 1\n\n\nid          hid         value       Rank                 \n----------- ----------- ----------- -------------------- \n1           1           1           1\n2           3           3           1\n3           2           2           1\n","1571":"ALTER SYSTEM SET resource_limit = TRUE scope = BOTH \n","1572":"WITH cte AS (SELECT DISTINCT * FROM Table2)\nSELECT t1.\"pId\" \nFROM Table1 t1 JOIN cte t2 ON t1.\"pId\" = t2.\"pId\"\nWHERE t1.\"status\" = 1 AND t1.\"keyVal\" = 45\nGROUP BY t1.\"pId\"\nHAVING SUM(\n  CASE WHEN t2.\"mode\"=2 AND t2.\"modeVal\"=5 OR t2.\"mode\"=3 AND t2.\"modeVal\"=6 \n       THEN 1 END) = 2 AND COUNT(*)=2\n","1573":"SELECT SUM(CASE WHEN pKey = 1 THEN 1 ELSE 0 END) \n     = SUM(CASE WHEN pKey = 2 THEN 1 ELSE 0 END)\nFROM testable\nWHERE prodStatus = 0\n","1574":"text VARCHAR2(10) generated always as \n    (cast(to_char(id)||'_'||to_char(num) as VARCHAR2(10))) VIRTUAL\n","1575":"UPDATE animal_attrib_values aav\nSET animal_attrib_value_name= 'true'\nWHERE aav.animal_attrib_value_id = (\n    SELECT a.animal_attrib_value_id \n    FROM animals a \n    WHERE a.animal_id = 458 \n        AND a.animal_attrib_type_id  = 38\n)\n;\n","1576":"UPDATE messages \n    SET message_deleted_from =  \n    CASE WHEN message_user = ? \n    AND message_id = ? THEN 1 ELSE message_deleted_from END,\n\n    messages_delete_to = \n    CASE WHEN message_to=? \n    AND message_id = ? THEN 1 ELSE messages_delete_to END\n","1577":"SELECT i.SenderNumber,\n       COALESCE(c.Name, d.SpvName, sd.SpvName, v.SpvName) as Name,\n       CASE WHEN c.Name IS NOT NULL THEN 'contact'\n            WHEN d.SpvName IS NOT NULL THEN 'district'\n            WHEN sd.SpvName IS NOT NULL THEN 'sub_district'\n            WHEN v.SpvName IS NOT NULL THEN 'village'  \n            ELSE ''\n       END AS Type,\n       i.Message\n    FROM inbox i\n        LEFT JOIN contact c\n            ON i.SenderNumber = c.Number\n        LEFT JOIN district d\n            ON i.SenderNumber = d.Number\n        LEFT JOIN sub_district sd\n            ON i.SenderNumber = sd.Number   \n        LEFT JOIN village v\n            ON i.SenderNumber = v.Number   \n","1578":"select  datename(month,date) [month]\n       ,isnull(sum(case when year(DATE) = 2015 then sales end), 0) as '2015'\nfrom tblSales\nwhere tenantcode = 'cmbina13'\ngroup by  datename(month,date)\nOrder by DATEPART(MM,datename(month,date)+' 01 2011')\n","1579":"select listagg(source,',') within group (order by source) final_source from ( \nselect\ndistinct\nb.source source--,\nfrom taba_parent a, taba b\nwhere b.name = a.parent_name\nand b.name_type = 'Category'\nconnect by prior a.parent_name = a.name\nstart with a.name = 'Name3'        \n);\n","1580":"SELECT full_table.attribute, main_table.articleID FROM main_table\nINNER JOIN full_table ON full_table.articleID = main_table.articleID \nINNER JOIN other_table ON other_table.attribute = full_table.attribute\nGROUP BY full_table.attribute, main_table.articleID\n","1581":"result := REGEXP_REPLACE(subject, '_0+', '_', 1, 0, 'c');\n","1582":"SELECT p.NamePK, p.Name,\n STUFF((\n        select '+' + n.Note\n        from tblNote n\n        where n.NameFK = p.NamePK\n        for xml path('')\n    ), 1, 1, '')\nFROM tblPeople p\n","1583":"SELECT sp_id, company_name\nFROM Student_Training\nGROUP BY company_name\n","1584":"<?xml version=\"1.0\" encoding=\"utf-16\" standalone=\"no\"?>\n<DataMacros xmlns=\"http:\/\/schemas.microsoft.com\/office\/accessservices\/2009\/11\/application\">\n  <DataMacro Event=\"BeforeChange\">\n    <Statements>\n      <ConditionalBlock>\n        <If>\n          <Condition>Updated(&quot;ThingDateStamped&quot;)<\/Condition>\n          <Statements>\n            <ConditionalBlock>\n              <If>\n                <Condition>Not IsNull([Old].[ThingDateStamped])<\/Condition>\n                <Statements>\n                  <Action Name=\"RaiseError\">\n                    <Argument Name=\"Number\">1<\/Argument>\n                    <Argument Name=\"Description\">An existing datestamp cannot be altered.<\/Argument>\n                  <\/Action>\n                <\/Statements>\n              <\/If>\n            <\/ConditionalBlock>\n          <\/Statements>\n        <\/If>\n      <\/ConditionalBlock>\n    <\/Statements>\n  <\/DataMacro>\n<\/DataMacros>\n","1585":"SELECT DISTINCT ON (release) *\nFROM   release_country\nORDER  BY release, date_year, date_month, date_day;\n","1586":"mysql -u user -p dbnane\n","1587":"SELECT tag, (SELECT COUNT(1) \n             FROM tag_newPosts t2\n             WHERE t2.tag LIKE CONCAT('%',t1.tag,'%')) AS tag_count\nFROM tags t1;\n","1588":"SELECT DATEADD(month,6,DATEADD(yy, DATEDIFF(yy,1,GETDATE())-1,0)) AS StartDate\n      ,DATEADD(month,6,DATEADD(dd,-1,DATEADD(yy, DATEDIFF(yy,0,GETDATE()),0))) AS EndDate\n","1589":"SELECT MAX(column_name) FROM table_name where column_name => 901000000\n","1590":"select Id,\n    name,\n    partnumber,\n    param1,\n    param2,\n    param3, \n    stock,\n    active \n    from (\n        select *, \n            RANK() (parition by id, param1, param2, param3 order by stock desc) as max_stock \n            from product)x\n        where max_stock = 1\n","1591":"CREATE TRIGGER trgAfterPersonInsert\nON dbo.Person AFTER INSERT \nAS BEGIN\n   INSERT INTO dbo.Car(PersonID)\n      SELECT i.PersonID \n      FROM INSERTED i\nEND\n","1592":"DECLARE @TableName SYSNAME = 'Address'\nDECLARE @DataBaseName SYSNAME = 'AdventureWorks2008'\n\nDECLARE @PrimaryKey VARCHAR(max) = '',\n        @sql        NVARCHAR(max)\n\nSET @sql ='SELECT @PrimaryKey += '',''+COLUMN_NAME FROM '\n          + @DataBaseName + '.INFORMATION_SCHEMA.KEY_COLUMN_USAGE\nWHERE TABLE_NAME = '''\n          + @TableName\n          + ''' AND CONSTRAINT_NAME LIKE ''PK%'''\n\n--print @sql\nEXEC Sp_executesql\n  @sql,\n  N'@PrimaryKey varchar(1000) output',\n  @PrimaryKey output\n\nSELECT RIGHT(@PrimaryKey, Len(@PrimaryKey) - 1) \n","1593":"Select subject_id\n    , Sum( Case When Score = 0 Then 1 Else 0 End ) As [0]\n    , Sum( Case When Score = 1 Then 1 Else 0 End ) As [1]\n    , Sum( Case When Score = 2 Then 1 Else 0 End ) As [2]\n    , Sum( Case When Score = 3 Then 1 Else 0 End ) As [3]\n    , Sum( Case When Score = 4 Then 1 Else 0 End ) As [4]\nFrom Table\nGroup By subject_id\n","1594":"IF EXISTS (SELECT ClientId FROM Business WHERE UserId = @userId)\nBEGIN\n  SELECT DISTINCT Id\n  FROM Client\nEND\nELSE\nBEGIN\n  SELECT Id\n  FROM Client\n  WHERE Id NOT IN\n  (\n    SELECT DISTINCT ClientId\n    FROM Business\n  )\nEND\n","1595":"' Note: This code requires the following COM reference:\n'\n' Microsoft Office 14.0 Access Database Engine Object Library\n'\nDim dbe As New Microsoft.Office.Interop.Access.Dao.DBEngine\nDim db As Microsoft.Office.Interop.Access.Dao.Database = dbe.OpenDatabase(\"C:\\__tmp\\testData.accdb\")\ndb.TableDefs(\"Users\").Fields(\"UserName\").AllowZeroLength = False\n","1596":"-- ----------------------------\n-- Table structure for `gallery_album`\n-- ----------------------------\nDROP TABLE IF EXISTS `gallery_album`;\nCREATE TABLE `gallery_album` (\n  `album_id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(255) NOT NULL COMMENT 'name of the album',\n  `description` text COMMENT 'description of the album',\n  `visible` enum('0','1') NOT NULL DEFAULT '1' COMMENT 'is album visible',\n  `position` int(11) unsigned NOT NULL,\n  `date_created` datetime NOT NULL,\n  `date_updated` datetime NOT NULL,\n  PRIMARY KEY (`album_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n-- Table structure for `gallery_image`\n-- ----------------------------\nDROP TABLE IF EXISTS `gallery_image`;\nCREATE TABLE `gallery_image` (\n  `image_id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `title` varchar(30) DEFAULT NULL COMMENT 'name of the image used as image ALT attribute',\n  `description` varchar(100) DEFAULT NULL COMMENT 'description of the image used as image TITLE attribute',\n  `visible` enum('0','1') NOT NULL DEFAULT '1',\n  `date_created` datetime NOT NULL,\n  `date_updated` datetime NOT NULL,\n  PRIMARY KEY (`image_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n-- Table structure for `gallery_relation`\n-- ----------------------------\nDROP TABLE IF EXISTS `gallery_relation`;\nCREATE TABLE `gallery_relation` (\n  `album_id` int(11) unsigned NOT NULL,\n  `image_id` int(11) unsigned NOT NULL,\n  `position` int(11) unsigned NOT NULL,\n  PRIMARY KEY (`album_id`,`image_id`),\n  KEY `image_id` (`image_id`),\n  CONSTRAINT `gallery_relation_ibfk_1` FOREIGN KEY (`album_id`) REFERENCES `gallery_album` (`album_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT `gallery_relation_ibfk_2` FOREIGN KEY (`image_id`) REFERENCES `gallery_image` (`image_id`) ON DELETE CASCADE ON UPDATE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n","1597":"select *\n  from all_objects\n where owner = 'OWNER_NAME'\n   and object_name = 'ISEMPTY'\n   and object_type = 'SYNONYM'\n","1598":"--create list of all possible category values (get first category from every row, then second, then third, etc)\ndeclare @Category table (SingleCategory VARCHAR(50))\ninsert into @Category\nselect distinct LEFT(SingleCategory, charindex('~', SingleCategory))\nfrom (\n    select categories as SingleCategory from @News\n    union\n    select SUBSTRING(categories, charindex('~', categories)+1, 100) from @News where Categories like '%~%~'\n    union\n    select SUBSTRING(categories, charindex('~', categories, charindex('~', categories)+1)+1, 100) from @News where Categories like '%~%~%~'\n    --repeat if 4 and 5 occurances possible, etc\n) sq\n\n--create a 'glue' table\ndeclare @Glue table(ArticleId INT NOT NULL, DateAdded SMALLDATETIME NOT NULL, Category VARCHAR(50) NOT NULL)\ninsert into @Glue \nselect articleid, dateadded, SingleCategory\nfrom @News n\ninner join @Category c on n.categories LIKE '%' + c.SingleCategory + '%'\n\n--use the glue table to identify the articles we do want, and delete all the others\ndelete from @News where ArticleId not in (\n    SELECT articleid\n    FROM (\n        SELECT articleid, Category, \n        RANK() OVER(PARTITION BY Category ORDER BY dateadded DESC) AS RankThem\n        FROM @Glue\n    ) sq\n    WHERE RankThem <= 5\n)\n","1599":"oMainQueryR = \"SELECT * FROM DBSelections WHERE 0 = 1\"\n","1600":"declare\n  x sys.odcinumberlist := sys.odcinumberlist(123);\n  y number;\nbegin\n  select column_value into y from table(x);\n  dbms_output.put_line(y);\nend;\n","1601":" AND (MATCH( T.truck_number, T.make, T.model, T.engine, T.vin_number,\n      T.transmission_number, T.comments) AGAINST( '$vehicle' )\n     OR MATCH( P.part_num, P.part_desc, P.part_ref,M.comments, M.work_done) \n     AGAINST( '$keywords' ))\n","1602":"WHERE people.LOGIN LIKE CONCAT(TRIM(IFNULL(expression, '')), '%')\n","1603":"select \n    [contact_list_name] as 'Table'\n    , [ov_number_dialed] as 'Number Dialed'\n    , convert(date, [time_of_contact], 101) as 'Date'\n    , convert(time, dateadd(hour, -7,[time_of_contact]), 108) as 'Time'\n    , agent_full_name as 'Agent'\n    , max(case when [response_status] = 'DAM' then response_status end) as 'Disp1_DAM'\n    , max(case when [response_status] = 'DNA' then response_status end) as 'Disp2_DNA'\n    ...\nFROM [meldb].[dbo].[cl_contact_event]\nGROUP BY\n    [contact_list_name] \n    , [ov_number_dialed] \n    , convert(date, [time_of_contact], 101) \n    , convert(time, dateadd(hour, -7,[time_of_contact]), 108) \n    , agent_full_name \n","1604":"SELECT coalesce( maingroup, 'subgroup_total' ) As maingroup,\n       coalesce( subgroup, 'group_total' ) As subgroup,\n       count(*) cnt \nFROM very_complex_subquery\nGROUP BY GROUPING SETS((maingroup, subgroup), (maingroup), (subgroup))\norder by 1,2\n;\n","1605":"SELECT PerceptionistID, SSNLastFour, SUM(CommissionPay) CommissionPay,\n        SUM(PTOPay) PTOPay, SUM(HolidayPay) HolidayPay, SUM(Overtime) Overtime, SUM(TotalPay) TotalPay\nFROM\n(\n    SELECT  PerceptionistID, SSNLastFour, CommissionPay,\n        PTOPay, HolidayPay, Overtime, TotalPay\n    FROM [dbo].fnCalculateCommissionForWeekOf(@MondayOfCurrentWeek)\n\n    UNION ALL\n\n    -- Need to get the following week's data and sum the two together\n    SELECT  PerceptionistID, SSNLastFour, CommissionPay,\n        PTOPay, HolidayPay, Overtime, TotalPay\n    FROM [dbo].fnCalculateCommissionForWeekOf(@MondayOfFollowingWeek)\n) t\nGROUP BY PerceptionistID, SSNLastFour\n","1606":"SELECT Modules.UserID, Module_Info.ModuleTitle, Modules.ModuleMarks,\n       Modules.ExamMark, Modules.AssignmentMark, MarkClassification.MarkDescription,\n       (SELECT AVG(Modules.ExamMark) \n        FROM Module_Info \n        INNER JOIN Modules ON Module_Info.ModuleID = Modules.ModuleID\n        WHERE (Modules.ModuleID = '2')) as Average\nFROM Module_Info \nINNER JOIN Modules\n ON Module_Info.ModuleID = Modules.ModuleID \nINNER JOIN MarkClassification\n ON Modules.MarkCodeDescription = MarkClassification.MarkId\nWHERE(Modules.UserID = '8')\n","1607":"SELECT DISTINCT ON (id) id, x, y FROM table\n","1608":"SELECT DISTINCT col_name \nFROM table_name\nWHERE TRIM(col_name) != ''\n","1609":"SELECT * \n    FROM messages \n        LEFT JOIN users \n            ON messages.message_to = users.user_id OR messages.message_user = users.user_id \n        LEFT JOIN message_replies \n            ON messages.message_id = message_replies.message_reply_main \n        LEFT JOIN user_personal_information \n            ON users.user_id = user_personal_information.user_personal_information_user \n    WHERE message_replies.message_reply_date = (SELECT MAX(message_reply_date) FROM message_replies WHERE message_reply_main = messages.message_id) \n        \/* AND more criterias *\/ \n","1610":"SELECT M.id, \n       M.accnt, \n       amount = M.amount + Isnull(s.supply, 0), \n       issued = Isnull(I.issued, 0) \nFROM   maintbl M \n       LEFT OUTER JOIN (SELECT id, \n                               Sum(supply) AS supply \n                        FROM   supplytbl \n                        WHERE  Month(dates) = 1  -- Month filter for Jan - feb Month(dates) in (1,2)\n                        GROUP  BY id) S \n                    ON s.id = M.id \n       LEFT OUTER JOIN (SELECT id, \n                               Sum(issued) AS issued \n                        FROM   issuedtbl \n                        WHERE  Month(dateissue) = 1 -- Month filter\n                        GROUP  BY id) I \n                    ON I.id = M.id \n","1611":"SELECT\n    ct.competition_id FROM\n    competitions c\nJOIN competition_type ct ON ct.competition_id = c.id AND ct.Type_id = 1 \nWHERE\n    NOT EXISTS(SELECT * FROM competitions c2 \n                     JOIN competition_type ct2 \n                     ON ct2.competition_id = c2.id AND ct2.Type_id = 2 \n                     WHERE c2.id = c.id)\n","1612":"select min(value) min, max(value) max\nfrom (select value, ROW_NUMBER() over (order by value) - value as [key] \n      from t) v\ngroup by [key]\norder by min\n","1613":"SELECT * FROM TABLE_B B\nWHERE EXISTS (SELECT field1 from TABLE_A A WHERE A.field1 = B.field1);\n","1614":"SELECT T.[taskId], T.[sectionId], T.[DateAdded],\n   CASE \n      WHEN SectionId IS NULL THEN 1\n      WHEN o.[type] = 6 THEN 2\n      ELSE 3\n   END AS [type]\nFROM [TASK] AS T \n   -- Applicable join condition goes here ...\n   LEFT OUTER JOIN Organisation o ON t.TaskID = o.TaskID\nWHERE (T.[deleted] = 0)\nORDER BY T.[DateAdded]\n","1615":"DECLARE @i INT, @sql NVARCHAR(512), @tablename varchar(200) = 'tbl'\n\nSET @sql = N'SELECT @i = COUNT(*) FROM '  + @tablename\n\nEXEC sp_executesql \n    @query = @sql, \n    @params = N'@i INT OUTPUT', \n    @i = @i OUTPUT \n\nPRINT @i \n","1616":"SELECT \n    name, \n    entnum,\n    CASE \n        WHEN SUBSTRING(entnum,4,1) = '0' THEN SUBSTRING(entnum,5,2)\n        ELSE SUBSTRING(entnum,4,3) \n    END agencycode\nFROM CUSTFILE \n","1617":"CREATE TABLE TBL (a int, b varchar(50))\ngo\n\nINSERT INTO TBL SELECT 1,'hello'\nINSERT INTO TBL SELECT 2,'goodbye'\ngo\n\nGRANT SELECT, UPDATE ON TBL TO guest\ngo\n\nCREATE TABLE AUDIT (    audittime datetime default(getdate())\n    \t\t\t\t,\ttargettable sysname\n    \t\t\t\t,\tloginname sysname\n    \t\t\t\t,\tspid int\n    \t\t\t\t,\tsqltext\tnvarchar(max))\ngo\n\nCREATE TRIGGER TR_TBL ON TBL FOR INSERT, UPDATE, DELETE\nAS BEGIN\n    CREATE TABLE #DBCC (EventType varchar(50), Parameters varchar(50), EventInfo nvarchar(max))\n\n    INSERT INTO #DBCC\n    EXEC ('DBCC INPUTBUFFER(@@SPID)')\n\n    INSERT INTO AUDIT (targettable, loginname, spid, sqltext)\n    \tSELECT  targettable\t=\t'TBL'\n    \t,\t\tsuser\t    =\tsuser_name()\n    \t,\t\tspid\t    =\t@@SPID\n    \t,\t\tsqltext     =   EventInfo \n    \tFROM #DBCC\nEND\nGO\n\n\/* Test the Audit Trigger (can be run as guest) *\/\nUPDATE TBL SET a = 3 WHERE a = 2\n","1618":"SELECT e.* \nFROM db_events.events e \n   JOIN (\n      SELECT Max(id) MaxId, device_id\n      FROM db_events.events\n      GROUP BY device_id ) e2 on e.Id = e2.MaxId AND e.device_id = e2.device_id\nWHERE e.device_id IN (\n            SELECT device_id \n            FROM db_system.devices \n            WHERE vendor = 1)\nORDER BY e.id DESC\n","1619":"select   t.template_table_name\nfrom     templates    t, \n         documents    d\nwhere    d.template_id = t.template_id\nand      d.document_id = @param_document_id\n","1620":"SELECT F_SMART_DATE('{?AS_OF}') SMART_DATE FROM DUAL;\n","1621":"select traveldate, lastservicedate, \n    'Travel services from ' + convert(varchar(20), traveldate) +\n    ' to ' + convert(varchar(20), lastservicedate) as TextResult\nfrom tablename\n","1622":"SELECT *\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_NAME = N'2000064';\n","1623":"select *\nfrom (select a.*,\n             lag(sdt) over (partition by id order by sdt) as prevsdt,\n             lead(sdt) over (partition by id order by sdt) as nextsdt\n      from table_a a\n     ) a\nwhere sdt - prevsdt <= 1\/(24*60) or\n      nextsdt - sdt <= 1\/(24*60);\n","1624":"select session_id, wm_concat(name_status), time from \n(\n  select session_id, (name+':'+status) as name_status, time\n  from stuff\n)\ngroup by session_id\norder by time\n","1625":"select\n    Lastname, Firstname, Filename,\n    case\n        when Filename = max(Filename) over(partition by Lastname, Firstname) then Filename\n        else null\n    end as Max_Filename\nfrom Table1\n","1626":"SELECT t1.* FROM sales t1\nJOIN (\n  SELECT date, min(price) price FROM sales\n  GROUP BY date\n) t2 ON t1.date = t2.date AND t1.price = t2.price\n","1627":"  select top(5) *\n    from tbl\norder by created_date desc\n","1628":"SELECT Total = COUNT(*) OVER()\nFROM Table1;\n","1629":"''''+cast(cast(table.field as date) as varchar(255))+''''\n","1630":"SELECT *\nFROM address\nWHERE name LIKE 'a%' OR name LIKE '% a%' \nORDER BY CASE WHEN name LIKE 'a%' THEN 0 ELSE 1 END\nLIMIT 10\n","1631":"SELECT CAST(`duration` AS DECIMAL(10,4)) * CAST(`fee` AS DECIMAL(10,4))\nFROM   `simvoip`\n","1632":"EXEC master.dbo.sp_addlinkedserver @server = N'ALIAS', @srvproduct=N'ACTUALSERVER', @provider=N'SQLOLEDB', @datasrc=N'ACTUALSERVER'\n","1633":"Imports System\nImports System.Data\nImports System.Math\nImports Microsoft.SqlServer.Dts.Pipeline.Wrapper\nImports Microsoft.SqlServer.Dts.Runtime.Wrapper\n\n<microsoft.sqlserver.dts.pipeline.ssisscriptcomponententrypointattribute> _\n<clscompliant(false)> _\nPublic Class ScriptMain\n    Inherits UserComponent\n\n    Public Overrides Sub Input0_ProcessInputRow(ByVal Row As Input0Buffer)\n        ' Create a Globally Unique Identifier with SSIS\n        Row.Guid = System.Guid.NewGuid()\n    End Sub\nEnd Class\n","1634":"select *\n  from\n  (\n    select\n        sal\n          ,dense_rank() over (order by sal desc) ranking\n    from   table\n  )\n  where ranking = 4 -- Replace 4 with any value of N\n","1635":"select t.time, \nisnull(\n(select c.studentCode \nfrom tbClassRsv c \nwhere c.transdate='2014-02-05 00:00:00' \nand c.class='ROOM 01'\nand c.status<>'DEL' \nand DateAdd(MINUTE, 30, Convert(datetime, t.time))>= Convert(datetime, c.time) \nand Convert(datetime, t.time) <= Convert(datetime, c.until)\n),'-') from [tbTime] t\n","1636":"select type,\n       sum(case when name like '% Smith' then 1 else 0 end) as SmithCount,\n       sum(case when name like '% Anderson' then 1 else 0 end) as AndersonCount\n    from mates\n    group by type\n","1637":"select d.*\nfrom (select d.*,\n             (case when month6 is null then 0\n                   when month5 is null then 1\n                   when month4 is null then 2\n                   when month3 is null then 3\n                   when month2 is null then 4\n                   when month1 is null then 5\n              end) as cnt\n      from data d\n     ) d\nwhere cnt >= 3;\n","1638":"type\n  TABSDBHack = class\n  private\n    FFilename: TFileName;\n\n    \/\/ 2 relevant contiguous headers of an Absolute Database file\n    FDBHeader: array [0..SIZEOFDBHEADER-1];\n    FCryptoHeader: array [0..SIZEOFCRYPTOHEADER-1];\n\n    \/\/ Mirror of the ControlBlock record from CryptoHeader\n    FControlBlock: array [0..SIZEOFCONTROLBLOCK-1] of Byte; \n    \/\/\n    function GetEncrypted: Boolean;\n    function GetFileName: TFileName;\n    function GetPageSize: Word;\n    function GetPageCountInExtent: Word;\n    function GetCryptoAlgorithm: Byte;\n  protected\n    \/\/ Retrieving Data from stream into FDBHeader and FCryptoHeader\n    procedure ReadStream(F: TStream);\n\n    \/\/ Mainly FillChar(..., ...,#0) of the corresponding record\n    procedure ClearDBHeader;\n    procedure ClearCryptoHeader;\n    procedure ClearControlBlock;\n\n    \/\/ Probe the existence of 'ABS0LUTEDATABASE' as file signature\n    function CheckABSSignature: Boolean;\n\n    \/\/ Compute the CRC of FControlBlock record\n    function CRC32: Cardinal;\n\n    \/\/ Decrypt the persisted Control Block into FControlBlock\n    function InternalDecryptBuffer(const APassword: string):Boolean;\n  public\n    procedure Clear;\n\n    \/\/ Wrapping a ReadStream using a local TFileStream\n    procedure LoadFromFile(Filename: TFileName);\n\n    \/\/ Return True if the decrypted Control Block correspond to original plain one.\n    \/\/ Otherwise stated: The persisted CRC (in the Crypto Header) is equal to \n    \/\/ the value returned by the function CRC32\n    function CheckPassword(const APassword: string): Boolean;\n\n    property FileName: TFileName read GetFileName;\n\n    \/\/ Sample of plain Data peristed that can be retrieved\n    property PageSize: Word read GetPageSize;\n    property PageCountInExtent: Word read GetPageCountInExtent;\n    property Encrypted: Boolean read GetEncrypted;\n    property CryptoAlgorithm: Byte read GetCryptoAlgorithm;\n  end;\n","1639":"SELECT  AwardReference.ownerID ,\n        COUNT(*) AS count\nFROM    AwardReference\nWHERE   AwardReference.ownerType = 'song'\nGROUP BY AwardReference.ownerID\n","1640":"select\n  min(col1) as col1,\n  col2\nfrom\n  TheTable\ngroup by\n  col2\norder by\n  col2\n","1641":"-- DB2\nselect * from table fetch first 10 rows only \n-- Informix \nselect first 10 * from table \n-- Microsoft SQL Server and Access \nselect top 10 * from table \n-- MySQL and PostgreSQL \nselect * from table limit 10 \n-- Oracle \nselect * from (select * from table) where rownum <= 10\n","1642":"UPDATE B\nSET B.cpid = 250\nFROM A \nWHERE A.id = B.a_id AND A.cgid LIKE '0002' \n     AND B.cpid = 312\n","1643":"Sub SplitData()\n    Dim rData As Range\n    Dim rCat As Range\n    Dim rProd As Range\n    Dim Cat As String\n    Dim Prod As String\n    Dim Price As Currency\n    Dim Cat_ID As Long\n    Dim Prod_ID As Long\n\n    Set rData = ActiveWorkbook.Worksheets(\"Data\").Cells(1, 1)\n    Set rCat = ActiveWorkbook.Worksheets(\"Catagory\").Cells(1, 1)\n    Set rProd = ActiveWorkbook.Worksheets(\"Product\").Cells(1, 1)\n\n    rCat = \"id\"\n    rCat.Offset(0, 1) = \"title\"\n    Set rCat = rCat.Offset(1, 0)\n\n    rProd = \"id\"\n    rProd.Offset(0, 1) = \"title\"\n    rProd.Offset(0, 2) = \"catagory_id\"\n    rProd.Offset(0, 3) = \"price\"\n    Set rProd = rProd.Offset(1, 0)\n\n    Cat_ID = 0\n    Prod_ID = 0\n\n    Do While rData <> \"\"\n        If rData.Font.Bold Then\n            Cat = rData\n            Cat_ID = Cat_ID + 1\n\n            rCat = Cat_ID\n            rCat.Offset(0, 1) = Cat\n\n            Set rCat = rCat.Offset(1, 0)\n        Else\n            Prod = rData\n            Price = rData.Offset(0, 1)\n            Prod_ID = Prod_ID + 1\n\n            rProd = Prod_ID\n            rProd.Offset(0, 1) = Prod\n            rProd.Offset(0, 2) = Cat_ID\n            rProd.Offset(0, 3) = Price\n\n            Set rProd = rProd.Offset(1, 0)\n        End If\n        Set rData = rData.Offset(1, 0)\n    Loop\n\n\nEnd Sub\n","1644":"SELECT order,\n       MAX( CASE WHEN attribute LIKE 'CL_ACC%G_ADSL_DETAILS1COS_BLEACHING_FLAG'\n                 THEN value END ) AS tech,\n       MAX( CASE WHEN attribute LIKE 'CL_ACC%G_ADSL_DETAILS1G_6LAYER_COS_CIPR_AF1'\n                 THEN value END ) AS bleach,\n       MAX( CASE WHEN attribute LIKE 'CL_ACC%G_ADSL_DETAILS1G_6LAYER_COS_CIPR_AF2'\n                 THEN value END ) AS af1,\n       MAX( CASE WHEN attribute LIKE 'CL_ACC%G_ADSL_DETAILS1G_6LAYER_COS_CIPR_AF3'\n                 THEN value END ) AS af2,\n       MAX( CASE WHEN attribute LIKE 'CL_ACC%G_ADSL_DETAILS1G_6LAYER_COS_CIPR_AF4'\n                 THEN value END ) AS af3,\n       MAX( CASE WHEN attribute LIKE 'CL_ACC%G_ADSL_DETAILS1G_6LAYER_COS_CIPR_EF'\n                 THEN value END ) AS af4,\n       MAX( CASE WHEN attribute LIKE 'CL_ACC%G_ADSL_DETAILS_ACCESS_TECHNOLOGY'\n                 THEN TO_DATE( value, 'DD\/MM\/YYYY' ) END ) AS ef\nFROM   attributes\nWHERE  order IN ( '802605-S844' \/*, ...*\/ )\nGROUP BY order;\n","1645":"SELECT t.formid,\n   t.statusname,\n   MAX(t.actiondate) 'actiondate',\n   t.formtype,\n   t.chargeoffaccount,\n   t.reasoncode,\n   t.approvalcode,\n   MAX(t.followupdate) 'followupdate'\nFROM (\n   SELECT t.formid, \n          fs.name 'StatusName',\n          t.actiondate,\n          ft.name 'formtype',\n          coa.account 'ChargeOffAccount',\n          rc.name 'ReasonCode',\n          ac.description 'ApprovalCode',\n          ffu.followupdate,\n          row_number() OVER (PARTITION BY ef.formid ORDER BY t.actiondate DESC) 'DateSortKey'\n     FROM EXTENSION.FORMDATE t \n     JOIN EXTENSION.FORM ef ON ef.formid = t.formid\n     JOIN EXTENSION.FORMSTATUS fs ON fs.statusid = t.statusid\n     JOIN EXTENSION.FORMTYPE ft ON ft.formtypeid = ef.formtypeid\nLEFT JOIN EXTENSION.CHARGEOFFACCOUNT coa ON coa.chargeoffid = ef.chargeoffid\nLEFT JOIN EXTENSION.REASONCODE rc ON rc.reasoncodeid = ef.reasoncodeid\nLEFT JOIN EXTENSION.APPROVALCODE ac ON ac.approvalcodeid = ef.approvalcodeid\nLEFT JOIN EXTENSION.FORMFOLLOWUP ffu ON ffu.formid = t.formid) t\n    WHERE t.datesortkey = 1\n GROUP BY t.formid, t.statusname, t.formtype, t.chargeoffaccount, t.reasoncode, t.approvalcode\n ORDER BY t.formid\n","1646":"CREATE VIEW dbo.Foo\nAS\nSELECT 1 AS X\n\nGO\n\nCREATE SCHEMA bar\n\nGO\nALTER SCHEMA bar TRANSFER dbo.Foo;\n\nSELECT *\nFROM bar.Foo\n","1647":"select tablename, \n   HAS_TABLE_PRIVILEGE(tablename, 'select') as select,\n   HAS_TABLE_PRIVILEGE(tablename, 'insert') as insert,\n   HAS_TABLE_PRIVILEGE(tablename, 'update') as update,\n   HAS_TABLE_PRIVILEGE(tablename, 'delete') as delete, \n   HAS_TABLE_PRIVILEGE(tablename, 'references') as references \nfrom pg_tables where schemaname='public' order by tablename;\n","1648":"SELECT *\nFROM table1 tab1 \nLEFT OUTER JOIN table2 tab2 ON tab1.fg = tab2.fg\nLEFT OUTER JOIN table4 tab4 ON tab1.ss = tab4.ss\nINNER JOIN table3 tab3 ON tab4.xya = tab3.xya\nLEFT OUTER JOIN table5 tab5 ON tab4.kk = tab5.kk\n","1649":":SYSTEM.MESSAGE_LEVEL := '25';\nCOMMIT;\n:SYSTEM.MESSAGE_LEVEL := '0';\n","1650":"SELECT t.date, t.value_A\/t2.value_B AS calc\nFROM table t JOIN table t2 ON t.date = DATE_ADD(t2.date, INTERVAL 1 MONTH)\n","1651":"DECLARE @i int\nSET @i = 1\nDECLARE @sql_alter nvarchar(4000)\n      , @sql_update nvarchar(4000)\n      , @sql_select nvarchar(4000)\n\nCREATE TABLE #FLAT_TABLE (FID_0 int, FENCODED_0 varchar(10))\nSET @sql_select = N'SELECT FID_0, FENCODED_0'\n\nINSERT INTO #FLAT_TABLE (FID_0, FENCODED_0)\nSELECT MAPENTRY_ID\n     , ENCODED\n  FROM XCO_MASTER\n WHERE MAPENTRY_ID = PARENT_ID\n\nwhile (@@ROWCOUNT > 0) begin\n\n    SET @sql_select = @sql_select + ', FID_' + @i\n\n    SET @sql_alter = N'\n        ALTER TABLE #FLAT_TABLE ADD COLUMN FID_' + @i + N' int\n        ALTER TABLE #FLAT_TABLE ADD COLUMN FENCODED_' + @i + N' varchar(10)\n    '\n\n    SET @sql_update = N'\n        UPDATE #FLAT_TABLE\n           SET FID_' + @i + N' = MAPENTRY_ID\n             , FENCODED_' + @i + N' = ENCODED\n          FROM XCO_MASTER\n         WHERE MAPENTRY_ID <> PARENT_ID\n           and MAPENTRY_ID = FID_' + (Cast (@i - 1) as nvarchar(8))\n    '\n    SET @i = @i + 1\n\n    sp_executesql @sql_alter\n    sp_executesql @sql_update\nend\n\n@sql_select = @sql_select + ' FROM #FLAT_TABLE'\nSELECT @sql_select\n","1652":"SELECT . . .,\n       COUNT(PO_Line.propA) OVER (PARTITION BY PO.ID) as LINES\nFROM PO LEFT JOIN\n     PO_Lines\n     ON PO.ID = PO_Lines.PO_ID;\n","1653":"Select * FROM (\nSelect *, CASE WHEN weekNo(Tableweeks) < week(TableX) THEN 1 ELSE 0 END 'Valid'\nfrom tableX CROSS APPLY Tableweeks )\nWHERE Valid = 1\n","1654":"SELECT C.crsid, MAX(TC.score) as maxscore\nFROM Class C\nJOIN ClassSection CS\non C.crsid = CS.crsid\nJOIN TookClass TC\non TC.secid = CS.secid\nGROUP BY C.crsid\norder by maxscore desc;\n","1655":"  SELECT a.city AS city\n    FROM YOUR_TABLE a\nGROUP BY a.city\n  HAVING COUNT(a.country) = 1\nUNION ALL\n SELECT CONCAT(b.city, ', ', b.country) AS city\n   FROM YOUR_TABLE b\n  WHERE EXISTS (SELECT NULL\n                  FROM YOUR_TABLE c\n                 WHERE c.city = b.city\n              GROUP BY c.city\n                HAVING COUNT(c.country) > 1)\nORDER BY city\n","1656":"SELECT CONNECT_BY_ROOT PART_NO as ROOT_PART_NO,\n       LEVEL, PART_NO, COMPONENT_PART, QTY_PER_ASSEMBLY\n  FROM MANUF_STRUCTURE \nCONNECT BY\n   PRIOR COMPONENT_PART = PART_NO AND \n   PRIOR CONTRACT = CONTRACT AND \n   PRIOR BOM_TYPE_DB = BOM_TYPE_DB \nSTART WITH PART_NO IN ('&PN1', '&PN2', '&PN3')\nORDER SIBLINGS BY LINE_ITEM_NO;\n","1657":"-- Retrieve maximum value of CustomerId\nDECLARE @maxid int = 0\nSELECT @maxid = MAX(CustomerId) FROM Company.Customer\n\n-- When inserting data for column CustomerId add maximum id value and row number\n-- This should ensure that the key values do not clash\nINSERT INTO Company.Customer (CustomerId, FirstName, LastName)\nSELECT ROW_NUMBER() OVER (ORDER BY CustomerId ASC) + @maxid, FirstName, LastName \nFROM Company.Customer    \nWHERE LastName LIKE '%JONES%';\n","1658":"select *\n    from YourTable\n    where charindex(' 18,', ' ' + AllowedSystems + ',') <> 0\n","1659":"SUBSTR (text, INSTR(text,'\/Library\/Caches\/')+16)\n","1660":"SHOW CREATE TABLE Courses\n","1661":"SELECT origin, destination \nFROM mytable\nGROUP BY origin, destination\nHAVING COUNT(*) > 1\n","1662":"create table t1 (col1 number,\n                 col2 number,\n                 col1_col2_least generated always as (least(col1, col2)),\n                 col1_col2_greatest generated always as (greatest(col1, col2)));\n\n--not strictly necessary\nalter table t1 add constraint t1_u1 unique (col1, col2);\n\nalter table t1 add constraint t1_u2 unique (col1_col2_least, col1_col2_greatest);\n\ninsert into t1 (col1, col2) values (1, 2);\n\ninsert into t1 (col1, col2) values (2, 1);\n\n-- ORA-00001: unique constraint (SCHEMA.T1_U2) violated\n\ninsert into t1 (col1, col2) values (2, 2);\n","1663":"SELECT FIELD_1, FIELD_2... FIELD_N, SUM(AMOUNT),\n       (case when field_1 <> lag(field_1) over (order by FIELD_1, FIELD_2... FIELD_N) or\n                  lag(field_1) over (order by FIELD_1, FIELD_2... FIELD_N) is null\n             then 'field_1'\n             when field_2 <> lag(field_2) over (order by FIELD_1, FIELD_2... FIELD_N)\n             then 'field_2'\n             . . .\n             else 'field_n'\n        end) as WhichGrouping\nFROM TABLE\nGROUP BY FIELD_1, FIELD_2... FIELD_N\nORDER BY FIELD_1, FIELD_2... FIELD_N\n","1664":"DATE_ADD(DATE_FORMAT(now(), \"%Y-%m-%d %H:%i:00\"), INTERVAL (30 + (IF(SECOND(now() > 29, 1, 0))) MINUTE)\n","1665":"DECLARE @var VARCHAR(MAX) = 'foo'\n\nSELECT *, \n    (LEN(TextColumn) - LEN(REPLACE(TextColumn, @var, ''))) \/ LEN(@var)\nFROM tbl\nWHERE \n    CHARINDEX(@var, TextColumn) > 0\nORDER BY \n    (LEN(TextColumn) - LEN(REPLACE(TextColumn, @var, ''))) \/ LEN(@var) DESC\n","1666":"    select sum(a.costoimp*movstocktotal.stock)\nFROM     vsboremix.dbo.CompraLinea AS a \nINNER JOIN\n    (SELECT compralinea.IdArticulo, MAX(compralinea.IdDocumento) AS iddocumento, IdListaEmpresa\n    FROM     vsboremix.dbo.Compralinea join vsboremix.dbo.documento on CompraLinea.IdDocumento = documento.IdDocumento join VsBoremix.dbo.articulo on compralinea.IdArticulo=articulo.IdArticulo\n    where IdDeposito in(30,38,40,44,50,60,70,90,100) and compralinea.CostoImp>0.0 and idseccion=101\n    GROUP BY compralinea.IdArticulo, IdListaEmpresa) AS b ON b.IdArticulo = a.IdArticulo AND b.iddocumento = a.IdDocumento \njoin vsboremix.dbo.movstocktotal on a.IdArticulo = MovStockTotal.IdArticulo and b.IdListaEmpresa=MovStockTotal.IdEmpresa\n","1667":"select *\nfrom (\n    (select *\n    from observations\n    where category = 'C'\n    order by random()\n    limit 243369* 0.1)\n    union\n    (select *\n    from observations\n    where category <> 'C')\n    ) sub\norder by random()\nlimit 1;\n","1668":"SELECT ID, Type, SubType, Percentage, Category\nFROM one\nUNION\n    SELECT DISTINCT 0, t2.Type, t2.SubType, 0.00, t1.Category\n    FROM one t1\n    INNER JOIN two t2 ON t2.Type = t1.Type AND t2.SubType NOT IN\n        (SELECT t3.SubType FROM one t3 WHERE t3.Category = t1.Category and t3.Type = t1.Type)\nORDER BY Category, Type, SubType\n","1669":"CHARACTERSET UTF8\n","1670":"psql -h hostname -p port_number -U username -f your_file.sql databasename \n","1671":"SELECT\n    [item],\n    [Prox],\n    [z],\n    coalesce([item], '') + coalesce([Prox], '') + coalesce([z], '') as result\nFROM\n    [FIELD$];\n","1672":"select stdcode, group_concat(value separator ';') as values\nfrom table1\ngroup by stdcode;\n","1673":"SQL> create table t( col1 varchar2(3) );\n\nTable created.\n\nSQL> create sequence t_seq;\n\nSequence created.\n\nSQL> ed\nWrote file afiedt.buf\n\n  1  insert into t\n  2    select to_char( t_seq.nextval, 'fm009' )\n  3      from dual\n  4*  connect by level <= 10\nSQL> \/\n\n10 rows created.\n\nSQL> select * from t;\n\nCOL\n---\n004\n005\n006\n007\n008\n009\n010\n011\n012\n013\n\n10 rows selected.\n","1674":"select i.*\nfrom Instructor i\nwhere exists (select 1\n              from CourseInstructor ci join \n                   Course c\n                   on c.CourseId = ci.CourseId \n              where ci.InstructorId = i.InstructorId and\n                    c.DepartmentId = @p0\n             );\n","1675":"select ROUTINE_NAME\nfrom information_schema.routines\nwhere DATEDIFF(CURDATE(),created) < 14\n","1676":"function combination(n in integer, k in integer)\n    return integer\nis\n    l_result integer;\nbegin\n    for i in 1..k loop\n        l_result := l_result * (n-i+1) \/ k;\n    end loop;\n    return l_result;\nend;\n\/\n","1677":"SELECT 100 * SUM( CASE WHEN (maint_fault_date + 5) < maint_action_date\n                   THEN 1\n                   ELSE 0 END\n       ) \/ COUNT(*) AS percentage\nFROM mainthistory;\n","1678":"SELECT name \nfrom   products p\nWHERE  backorder IS NULL OR backorder <> 2\n","1679":"from google.appengine.ext import ndb\n\nclass User(ndb.Model):\n    email = db.StringProperty()\n\n\noptions = ndb.QueryOptions(keys_only=True)\ncondition_1 = ndb.Query(User, options=options).filter(User.email == \"mom@home.com\")\ncondition_1 = ndb.Query(User, options=options).filter(User.email == \"dad@home.com\")\n\nkey_list = list(set(list(condition_1) + list(condition_2)))\n\nmom_and_dad = ndb.get_multi(key_list)\n","1680":"SELECT\n    date,\n    number,\n    ROW_NUMBER() OVER(PARTITION BY date, number ORDER BY number DESC) AS index\nFROM\n    myTable;\n","1681":"SELECT  d.*\nFROM    rule\nCROSS APPLY\n        (\n        SELECT  id, email\n        FROM    a\n        WHERE   a.id = rule.id\n        UNION ALL\n        SELECT  id, email\n        FROM    b\n        WHERE   b.id = rule.id\n        UNION ALL\n        SELECT  id, email\n        FROM    c\n        WHERE   c.id = rule.id\n        ) d\n","1682":"select family.* \n  from table as member \n  join table as familiy \n    on member.ParentID = family.ParentID \n where member.ItemID = 'firstGUID'\n","1683":"select idCust, Name, sum(quantity * unitPrice) as TotalPurchase,\n       sum(case when sku = 1344 then quantity * unitPrice end) as TotalPurchase_1344\nfrom table t\nwhere date >= '2014-06-01' and date < '2014-07-01'\ngroup by idCust, Name;\n","1684":"select A,B \nfrom\n(\nselect row_number() over(partition by A order by C desc)rn,A,B,C\nfrom yourtable\n)\nwhere RN=1\n","1685":"SELECT Tbl_member.member_id,\n       Sum(points_earned) - Sum(points_redeemed) Remaining_points\nFROM   Tbl_member\n       JOIN Tbl_member_participation\n         ON tbl_member_participation.member_id = Tbl_member.member_id\n       JOIN Tbl_member_redemption\n         ON tbl_member_redemption.member_id = Tbl_member.member_id\nGROUP  BY Tbl_member.member_id,\n          Datepart(mm, datecol),\n          Datepart(yyyy, datecol) \n","1686":"SELECT t1.name, t2.x, t2.y, t2.z FROM TABLENAME t1\nJOIN TABLENAME t2 on t1.id = t2.refer\n","1687":"SELECT DISTINCT ON (book_container_id)\n       isbn, book_container_id, shelf_id, update_time \nFROM   bookshelf_configuration\nWHERE  isbn = 555\nAND    update_time <= '2015-12-01 07:00'  -- ISO 8601 format\nORDER  BY book_container_id, update_time DESC;\n","1688":"with s as (\n    select *\n    from\n        customers\n        inner join\n        orders using (custid)\n        inner join\n        itemsordered using (orderid)\n        inner join\n        items using (itemid)\n)\nselect distinct\n    least(s1.name, s2.name),\n    greatest(s1.name, s2.name)\nfrom\n    s s1\n    inner join\n    s s2 on\n        s1.description = s2.description\n        and\n        s1.custid < s2.custid\norder by 1, 2\n","1689":"pg_restore -O dump_file | fix_latin | psql -d database\n","1690":"SELECT *\nFROM comments\nORDER BY IF(ParentId = 0, Id, ParentId), ParentId!=0, Id desc\n","1691":"SELECT [SITE ID], [Parameter],\n       Min(Results) As MinOfResults,\n       Max(Results) As MaxOfResults,\n       Avg(Results) As AvgOfResults,\n       StDev(Results) As StDevOfResults,           \n       Count(Results) As CountOfResults\nFROM Chemistry1\nWHERE [SITE ID] = 'LB-100' \n  AND [Parameter] = 'Calcium, Dissolved'\n  AND Year([SampleDate]) = 2014\nGROUP BY [SITE ID], [Parameter]\n","1692":"public List<TaskClass> getAllTasks() {\n    List<TaskClass> tasks = new ArrayList<TaskClass>();\n    Cursor cursor = db.query(tb_Name, null, null, null, null, null, \"id asc\");\n    Log.d(TAG, \"Getting tasks: \" + cursor.getCount());\n    while (cursor.moveToNext()) {\n        TaskClass task = new TaskClass();\n        task.setId(cursor.getLong(0));\n        task.setTitle(cursor.getString(1));\n        \/\/ Populate rest of fields accordingly\n        tasks.add(task); \n    }\n    Log.d(TAG, \"Returning tasks: \" + tasks);\n    return tasks;\n}\n","1693":"SELECT a,b,c, SUM(d) AS d, SUM(e) AS e \n  FROM tableT \n  WHERE (SELECT COUNT(*) FROM tableT) <= 3\n  GROUP BY a,b,c \nUNION ALL\nSELECT a,b,c,d,e \n  FROM tableT \n  WHERE (SELECT COUNT(*) FROM tableT) > 3\n;\n","1694":"SELECT t1.Name, t2.Name\nFROM mytable AS t1\nINNER JOIN mytable AS t2 ON t1.Name < t2.Name\nORDER BY t1.Name, t2.Name\n","1695":"select\n  emp_id,\n  work_date\nfrom (\n  select\n    emp_id,\n    work_date,\n    min(element) min_element,\n    max(element) max_element,\n    count(*) rows_counted\n  from\n    mytable\n  where\n    work_date = :p_workdate\n  group by\n    emp_id,\n    work_date\n  having\n    count (*) > 1)\nwhere\n  rows_counted > 2 or\n  (min_element,max_element) not in (select 'element1' el1, 'element2' el2 from dual union all\n                                    select 'element3' el1, 'element4' el2 from dual)\n","1696":"INSERT INTO Temp_table (column1, column2, column3, column4)\nSELECT column1, column2, ISNULL(column3,0), ISNULL(column4,0) FROM TABLE1 WHERE someCondition\nUNION ALL\nSELECT ISNULL(column1,0), ISNULL(column2,0), column3, column4 FROM TABLE1 WHERE someOtherCondition\n","1697":"select *\nfrom tab\nqualify\n   row_number() over (partition by id order by date) = 1\n","1698":";WITH Q1\nAS (\n    SELECT pvt.probcat\n        ,pvt.probdesc\n        ,ISNULL(pvt.[Dev], 0) AS 'Dev'\n        ,ISNULL(pvt.[QA], 0) AS 'QA'\n        ,ISNULL(pvt.[Prod], 0) AS 'Prod'\n    FROM (\n        SELECT pc.probcat\n            ,pc.probdesc\n            ,ps.noofproblems\n            ,ps.stage\n        FROM Probcat pc\n        LEFT JOIN ProbSummary ps ON pc.probcat = ps.probcat\n        ) t\n    PIVOT(max(noofproblems) FOR stage IN (\n                [Dev]\n                ,[QA]\n                ,[Prod]\n                )) pvt\n    ),\nq2 as\n(SELECT q1.*\n    ,sum(q1.Dev + q1.QA + q1.Prod) AS Total\nFROM q1\n\nGROUP BY q1.probcat\n    ,q1.probdesc\n    ,q1.Dev\n    ,q1.QA\n    ,q1.Prod\n)\nselect q2.probcat\n    ,q2.probdesc\n    ,q2.Dev\n    ,q2.QA\n    ,q2.Prod\n    ,cast(q2.Total as varchar(10)) + ' (' +\n    cast(cast((cast(q2.Total as decimal(5,2))\/cast(d.CrossSum as decimal(5,2)))*100 \n    as decimal(5,2)) as varchar(10))\n    + '% )' as FinalTotal\n    from q2\n  CROSS APPLY (\n    SELECT sum(q1.Dev + q1.QA + q1.Prod) AS CrossSum\n    FROM q1\n    ) d  \nORDER BY q2.probcat\n","1699":"SELECT ASSETNAME,PROJECT,MIN(T.MIN)START_DAY,MAX(T.MAX) END_DAY,\n       DATEDIFF(DD,MIN(t.min) ,MAX(T.MAX)) DURATION\nFROM\n(\nSELECT  ASSETNAME,PROJECT,DATEADD(DD,MIN(WEEK),WEEKBEGINNING) 'MIN',DATEADD(DD,MAX(WEEK),WEEKBEGINNING) 'MAX'\nFROM #TEMP  T\nCROSS APPLY(SELECT 0 'WEEK' WHERE T.MONDAY=1 UNION ALL SELECT 1 WHERE T.TUESDAY=1 UNION ALL\n            SELECT 2 WHERE T.WEDNESDAY=1 UNION ALL SELECT 3 WHERE T.THURSDAY=1 UNION ALL\n            SELECT 4 WHERE T.FRIDAY=1 UNION ALL SELECT 5 WHERE T.SATURDAY=1 UNION ALL\n            SELECT 6 WHERE T.SUNDAY=1 \n            ) D\nGROUP BY ASSETNAME,PROJECT,WEEKBEGINNING\n)T\n","1700":"ColorPref\nColorPrefQuestion\nRating\nRatingQuestion\n","1701":"CREATE TABLE Recipes (\n id int,\n name text,\n PRIMARY KEY (`id`)\n);\n\nCREATE TABLE Ingredients(\n id int,\n name text,\n PRIMARY KEY (`id`)\n);\n\nCREATE TABLE Recipes2Ingredients (\n rec_id int,\n ing_id int,\n amount int,\n -- and maybe some other needed fields\n FOREIGN KEY (rec_id)\n   REFERENCES Recipes(id),\n FOREIGN KEY (ing_id)\n   REFERENCES Ingredients(id)\n);\n","1702":"SELECT     *\nFROM         StaffHours\nWHERE     (SiteID = '164') AND (ID IN\n                      (SELECT     Min(ID)\n                        FROM          StaffHours\n                        WHERE      (SiteID = '164')\n                        GROUP BY RecordID\n                        HAVING      (COUNT(RecordID) > 1)))\nORDER BY RecordID DESC\n","1703":"SELECT SUBSTRING( string , LEN(string) -  CHARINDEX('\/',REVERSE(string)) + 2  , LEN(string)  ) FROM SAMPLE;\n","1704":"SELECT\n\nDATE_SUB(\n    LAST_DAY(\n        DATE_ADD(NOW(), INTERVAL 1 MONTH)\n    ), \n    INTERVAL DAY(\n        LAST_DAY(\n            DATE_ADD(NOW(), INTERVAL 1 MONTH)\n        )\n    )-1 DAY\n) AS firstOfNextMonth,\n\nLAST_DAY(\n    DATE_ADD(NOW(), INTERVAL 1 MONTH)\n)AS lastOfNextMonth\n","1705":"select *\nfrom (\n   SELECT i.BOOK_ID\n   , i.in_out\n   , i.event_date AS in_time\n   , LOCATION in_location\n   , lag(event_date) over (partition by book_id order by event_date) out_date\n   , lag(location) over (partition by book_id order by event_date) out_location\n   FROM TRANSACTIONS i\n   ORDER BY i.event_date)\nwhere in_out = 'I'\nand   in_location != out_location;\n","1706":"select * from tablename\nwhere (flag & 64) = 64\n","1707":"select \n case\n  when charindex(' ', member_name) > 0 then\n  SUBSTRING(member_name, charindex('\/', member_name) + 1, charindex(' ', member_name) - charindex('\/', member_name))  \n  when charindex(' ', member_name) < 1 then\n    SUBSTRING(member_name, charindex('\/', member_name) + 1, len(member_name) - charindex('\/', member_name))  \nend as FIRST_NAME, \n  left(member_name, charindex('\/', member_name) - 1) + ' ' as last_name\nfrom\n  member\n","1708":"select to_char(to_date(TMS,'YYYY-MM-DD')+3,'YYYY-MM-DD') from city;\n","1709":" SELECT dates.TheDate, count(recordID) \n FROM \n ( select \n      convert(date,dateadd(d,number,'2013-08-12')) as theDate \n   from master..spt_values \n   where type='p' and number < 9\n ) dates\n left join yourtable on dates.thedate = convert(date,yourtable.thedate)\n GROUP BY dates.TheDate \n","1710":"SELECT \n    count(*) AS Cnt\n    ,COALESCE(users.country, 'unknown') AS Country\nFROM \n    sessions\n    LEFT JOIN users ON sessions.username=users.username\nGROUP BY users.country;\n","1711":"select player_id, sum(total) total from (\n  select winner_id player_id, count(*) total from results group by winner_id\n  union all\n  select loser_id, count(*) from results group by loser_id\n) s\ngroup by player_id\norder by total desc\n","1712":"SELECT site_id, MAX(download_date) AS download_date, count(*)\nFROM pages_urls\nGROUP BY site_id;\n","1713":"SELECT p.id, p.name, p.image, p.stock\nFROM Combine as c\ninner join\nProduct as p\non (c.item1=p.id or c.item2=p.id or c.item3=p.id)\nWhere id = ###\n","1714":" <dg:DataGrid.ItemContainerStyle>\n    <Style\n       TargetType=\"{x:Type dg:DataGridRow}\"\n       BasedOn=\"{StaticResource {x:Type dg:DataGridRow}}\">\n       <Setter\n          Property=\"Background\"\n          Value=\"{Binding ItemColour}\" \/>\n    <\/Style>\n <\/dg:DataGrid.ItemContainerStyle>\n","1715":"set rowcount 1\nselect * from data order by timestamp desc\n","1716":"select IDs.ID, ifnull(count(globals_lists.global_id),0) as group_count\nfrom (select 3 as ID\n             UNION select 4\n             UNION select 5\n             UNION select 6) as IDs\nleft join globals_lists on IDs.ID = globals_lists.global_id\ngroup by IDs.ID\norder by group_count desc;\n","1717":"SELECT OBJECT_NAME(object_id)\nFROM sys.sql_modules\nWHERE definition LIKE '%MyTable%'\n","1718":"ContentResolver cr = getContentResolver();\n    Cursor cur = cr.query(ContactsContract.Contacts.CONTENT_URI,\n            null, null, null, null);\n    if (cur.getCount() > 0) {\n        while (cur.moveToNext()) {\n              String id = cur.getString(cur.getColumnIndex(ContactsContract.Contacts._ID));\n              String name = cur.getString(cur.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));\n              if (Integer.parseInt(cur.getString(\n                    cur.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER))) > 0) {\n                 Cursor pCur = cr.query(\n                           ContactsContract.CommonDataKinds.Phone.CONTENT_URI,\n                           null,\n                           ContactsContract.CommonDataKinds.Phone.CONTACT_ID +\" = ?\",\n                           new String[]{id}, null);\n                 while (pCur.moveToNext()) {\n                     String phoneNo = pCur.getString(pCur.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));\n              Log.e(\"TAG\",\"Name :: \"+Name);\n              Log.e(\"TAG\",\"Phone no :: \"+phoneNo);\n\n                 }\n                pCur.close();\n            }\n        }\n    }\n","1719":"select sum(case when category = 'value_a' then 1 else 0 end) as group_a,\n       sum(case when category = 'value_b' then 1 else 0 end) as group_b\n    from tbl\n    where category in ('value_a', 'value_b')\n","1720":";With T As\n(\nSELECT 7 AirQuoteID,'M' Name,49.50 SalesValue UNION ALL\nSELECT 7 AirQuoteID,'N', 23.10 UNION ALL\nSELECT 7 AirQuoteID,'+45',233.20 UNION ALL\nSELECT 7 AirQuoteID,'+100',233.20 UNION ALL\nSELECT 7 AirQuoteID,'+250',2333.10\n)\nSELECT AirQuoteID, [M], [N], [+45], [+100], [+250] \nFROM T\nPIVOT\n(\nMAX(SalesValue)\nFOR Name IN ([M], [N], [+45], [+100], [+250])\n) AS pvt;\n","1721":"C = Check Constraint\nD = Default or Default Constraint\nF = Foreign Key Constraint\nL = Log\nFn = Scalar Function\nIf = Inlined Table Function\nP = Stored Procedure\nPk = Primary Key Constraint\nRf = Replication Filter Stored Procedure \nS = System Table\nTf = Table Function\nTr = Trigger\nU = User Table\nUq = Unique Constraint \nV = View\n\nSELECT DISTINCT SysObjects.Name 'Table Name', \n                Procedures.Name 'Stored Procedure'\n           FROM SysObjects \n           JOIN (SysObjects Procedures    \n           JOIN SysDepends     \n             ON Procedures.Id = SysDepends.Id) \n             ON SysDepends.DepId = SysObjects.Id\n          WHERE SysObjects.XType = 'U'     \n-- Change XType Values here using chart above     \n            AND Procedures.XType = 'P'\n       GROUP BY SysObjects.Name, \n                SysObjects.Id, \n                Procedures.Name\n       ORDER BY SysObjects.Name ASC\n","1722":"select t1.*\nfrom my_table t1\njoin (select serialno, max(Last_seen) Last_seen\n      from my_table\n      group by serialno) t2\n    on t1.serialno = t2.serialno and t1.Last_seen = t2.Last_seen\norder by t1.Last_seen desc\n","1723":"Declare @myDate Datetime    \nSet @myDate = dateadd(HOUR, 5, getdate())\n\nSELECT Left(Convert(varchar(10),@myDate,21),10) +\n       stuff(right(convert(varchar(26), @myDate, 109 ), 15 ), 7, 7, ' ')\n","1724":"SELECT TOP 1 id FROM table WHERE date = '2010-01-01' ORDER BY value DESC\n","1725":"select   \n    case\n         when Dr.DrugNDCType = 49 then Dr.DrugNDCNbr\n         else\n               stuff   (   Dr.DrugNDCNbr,\n               case \n                       when Dr.DrugNDCType in (50, 56) then 1 \n                       when Dr.DrugNDCType in (51, 57) then 6    \n                       when Dr.DrugNDCType = 52 then 10     \n               end, 0, '0')\n    end\n\n from drug Dr\nwhere Dr.drugnbrkey = 6284\n","1726":"SELECT \n    TableOne.ID, \n    TableOne_1.Name, \n    TableOne_2.Address\nFROM \n    (TableOne \nLEFT JOIN \n    TableOne AS TableOne_1 \n        ON TableOne.ID = TableOne_1.ID) \nLEFT JOIN \n    TableOne AS TableOne_2 \n        ON TableOne.ID = TableOne_2.ID\nGROUP BY \n    TableOne.ID, \n    TableOne_1.Name, \n    TableOne_2.Address\nHAVING \n    TableOne_1.Name Is Not Null \n    AND \n    TableOne_2.Address Is Not Null;\n","1727":"SELECT U.NetworkIdentifier, U.FirstName, U.LastName,\n       H.HardwareName, H.SerialNumber\n  FROM (SELECT UserID, MAX(AssignedOn) LastAssignment\n          FROM HardwareAssignments\n         GROUP BY UserID) AS T\n  JOIN HardwareAssignments AS HA\n       ON HA.UserId = T.UserID AND HA.AssignedOn = T.LastAssignment\n  JOIN Users AS U ON U.ID = HA.UserID\n  JOIN Hardware AS H ON H.ID = HA.HardwareID\n ORDER BY U.NetworkIdentifier;\n","1728":"field LIKE 'Hash.System.Data.DataSet has(%).ds'\n","1729":"SELECT  tblCounty.ID, \n    ISNULL(tblAddress.Code, 'none')\n    --Whatever you want to select\nFROM tblCounty\nLEFT JOIN tblCode ON tblCounty.Name = tblCode.Name\n    LEFT JOIN tblAddres ON ISNULL(tblCode.Code, 'none') = ISNULL(tblAddress.Code, 'none')\n","1730":"Select id\n, Sum(Case when Type='Link' then 1 else 0 end) as Links\n, Sum(Case when Type='Forms' then 1 else 0 end) as Forms\n, Sum(Case when Type='Page' then 1 else 0 end) as Pages\nFrom SomeTable\nGroup by ID\n","1731":"from table1 inner join table2 on table1.x = table2.y and table1.a = table2.b\n","1732":"select FromUser, ToUser, Message, [Date], UserId, UserFullName, UserName, UserPhoto\nfrom (SELECT CM.FromUser, CM.ToUser, CM.Message, CM.Date, U.UserId,\n             U.UserFullName, U.UserName, U.UserPhoto,\n             row_number() over (partition by CM.FromUser, CM.ToUser order by [Date] desc) as seqnum\n      FROM ConversationMessages CM INNER JOIN\n           Users U\n           ON U.UserName = CM.FromUser\n      WHERE  CM.ToUser = @user\n     ) s\nWHERE seqnum = 1\nORDER BY CM.Date DESC ;\n","1733":"create table test2 (\nrowid varchar(10),\nid varchar(20),\nperson_id varchar(20),\nitem_name varchar(20),\nvalue varchar(20));\n\ninsert into test2 \n(rowid,id, person_id,item_name,value)\nvalues ('1','1','1','first item','first value');\n\ninsert into test2\n(rowid,id, person_id,item_name,value)\nvalues ('2','1','1','first item','first value');\n\ncommit;\n\nSELECT item_name,Count(*) FROM test2 GROUP BY person_id, item_name;\n\n\nDELETE FROM Test2\n WHERE rowid NOT IN (SELECT * \n                    FROM (SELECT MAX(n.rowid)\n                            FROM test2 n\n                        GROUP BY n.person_id, n.item_name) x);\n\nSELECT item_name,Count(*) FROM test2 GROUP BY person_id, item_name;\n","1734":"SELECT x.client_id, \n       x.project_id,\n       x.project_name\n  FROM (SELECT t.client_id,\n               t.project_id,\n               t.project_name,\n               CASE\n                 WHEN @client_id != t.client_id THEN @rownum := 0\n                 WHEN @client_id = t.client_id THEN @rownum := @rownum + 1\n                 ELSE @rownum \n               END AS rank,\n               @client_id := t.client_id\n          FROM TABLE t,\n               (SELECT @rownum := 0, @client_id\n      ORDER BY t.client_id) r) x\nORDER BY x.rank, x.client_id\n","1735":"SELECT D.Username,      \n      SUM(CASE WHEN D.type = 'Yes' THEN 1 ELSE 0 END) AS Yes,      \n      SUM(CASE WHEN D.type = 'No'  THEN 1 ELSE 0 END) AS No,      \n      SUM(CASE WHEN S.mobile IS NULL THEN 0 ELSE 1 END) AS MatchSales \n FROM dairy AS D     \n LEFT JOIN (SELECT DISTINCT mobile FROM sales) AS S ON D.MobileNo = S.mobile \n WHERE D.source = 'Company'  \n AND   UNIX_TIMESTAMP(D.CheckDate) >= $From_timestamp \n AND   UNIX_TIMTIMESTAMP(D.CheckDate) <= $To_timestamp \n GROUP BY D.Username\n","1736":"FileReader file = new FileReader(fileName);\nBufferedReader buffer = new BufferedReader(file);\nString line = \"\";\nString tableName =\"TABLE_NAME\";\nString columns = \"_id, name, dt1, dt2, dt3\";\nString str1 = \"INSERT INTO \" + tableName + \" (\" + columns + \") values(\";\nString str2 = \");\";\n\ndb.beginTransaction();\nwhile ((line = buffer.readLine()) != null) {\n    StringBuilder sb = new StringBuilder(str1);\n    String[] str = line.split(\",\");\n    sb.append(\"'\" + str[0] + \"',\");\n    sb.append(str[1] + \"',\");\n    sb.append(str[2] + \"',\");\n    sb.append(str[3] + \"'\");\n    sb.append(str[4] + \"'\");\n    sb.append(str2);\n    db.execSQL(sb.toString());\n}\ndb.setTransactionSuccessful();\ndb.endTransaction();\n","1737":"010\n009\n1\n","1738":"SELECT `Part Name`\nFROM Parts p\nINNER JOIN OrderDetails o ON p.PartID = o.PartID\nWHERE o.OrderDetailsID = ...;\n","1739":"create function [dbo].[getCloaks]\n(\n@String     varchar(8000)\n)\nreturns @tbl table (s varchar(1000))\nas\nbegin\ndeclare @i int, @j int, @k int\n    select  @i = 1\n    while charindex('{cloak:id=', @String, @i) > 0\n    begin\n        select @j = charindex('{cloak:id=', @String, @i)\n        select @k = charindex('}', @String, @j)\n        insert  @tbl select substring(@String, @j + 10, @k - @j - 10)\n        select  @i = @k + 1\n    end\n    return\nend\n","1740":"WITH cte \n     AS (SELECT menuld, \n                menutitle, \n                parentmenuld \n         FROM   Yourtable \n         WHERE  menuld = 1601120013 \n         UNION ALL \n         SELECT t.menuld, \n                t.menutitle, \n                t.parentmenuld \n         FROM   cte c \n                INNER JOIN Yourtable t \n                        ON t.menuld = c.parentmenuld) \nSELECT * \nFROM   cte \n","1741":"select [date], sum( case when type = 'Electronics' then (ordersize) else 0 end) AS ElectronicsSum,\nsum( case when type = 'Electronics' then 1 else 0 end) AS ElectronicsCount,\nsum( case when type = 'Books' then (ordersize) else 0 end) AS BooksSum,\nsum( case when type = 'Books' then 1 else 0 end) AS BooksCoumt\nfrom orders\ngroup by [date]\n","1742":"where Txndate like '%' +   CONVERT(VARCHAR(12), GETDATE(), 107) + '%'\n","1743":"select  AgeGroup\n,       count(*)\nfrom    (\n        select  case\n                when  age between 13 and 17 then 1\n                when  age between 18 and 21 then 2\n                ...\n                end as AgeGroup\n        from    (\n                SELECT  ROUND(DATEDIFF(Cast(NOW() as Date),\n                            Cast(birthday as Date)) \/ 365, 0) as age\n                FROM    YourTable\n                ) as SubQueryAlias\n        ) as SubQueryAlias2\ngroup by\n        AgeGroup\n","1744":"and rownum = 1\n","1745":"SELECT Person, Sum(GiftAmount)\nFROM tblGifts \nWHERE Person NOT IN (\n    SELECT Person FROM tblGifts\n        WHERE GiftDate >  [Forms]![InputForm]![EndDate] \n            OR  GiftDate <  [Forms]![InputForm]![StartDate]\n) \nGROUP BY Person\n","1746":"IF EXISTS (SELECT ActiveStatus From TableName where ActiveStatus = 0)\n  SELECT 'False'\nELSE\n  SELECT 'True'\nAS OutputColumn\n","1747":"SELECT OrderID,OrderDate,\nDATEADD(DAY,2,OrderDate) as ApproxShipDate,\nDATEDIFF(DAY,OrderDate,DATEADD(DAY,2,OrderDate)) as DaysToShip\nFROM Orders\nWHERE YEAR(OrderDate) = 2012 AND MONTH(OrderDate) = 3\n","1748":"select score,\n       max(case when type = 'satisfaction' then count end) as satisfaction_count,\n       max(case when type = 'response' then count end) as response_count,\n       max(case when type = 'responder' then count end) as responder_count,\n       max(case when type = 'service' then count end) as service_count             \nfrom (\n  select satisfaction_score as score, \n         count(satisfaction_score) as count, \n         'satisfaction' as type\n  from j_survey_response\n  where satisfaction_score != 0\n  group by satisfaction_score\n\n  union all\n\n  select response_score,\n         count(response_score) as count, 'response' as type\n  from j_survey_response\n  where response_score != 0\n  group by response_score\n\n  union all\n\n  select responder_score,\n         count(responder_score) as count, 'responder' as type\n  from j_survey_response\n  where responder_score != 0\n  group by responder_score\n\n  union all\n\n  select service_score,\n         count(service_score) as count, 'service' as type\n  from j_survey_response\n  where service_score != 0\n  group by service_score) as t\ngroup by score\n","1749":"SELECT\n  id2\n  , SUM(updated) as updates\n  ,MAX(updated_on) as last_update\nFROM table1\nGROUP BY id2\nORDER BY last_update DESC\n","1750":"DELETE\n  FROM table1\n WHERE exists(\n           SELECT 1\n             FROM table2\n            WHERE table2.stn = table1.stn\n              and table2.jaar = year(table1.datum)\n       )\n","1751":"with userCTE as (\n    select\n        u.userId ,\n            c.columnId\n    from tblUsers as u\n        cross join tblColumns as c\n)\n\nselect \n    u.* ,\n    Coalesce(cd.ColumnDatacontent, 'N\/A') AS columnDataContent\nfrom userCTE as u\n    left join tblColumnData as cd\n        on u.columnId = cd.columnId and u.userID = cd.userId\n","1752":"  SELECT z.id,\n         MAX(z.col)\n    FROM (SELECT x.id,\n                 x.column1 AS col\n            FROM TABLE x\n          UNION \n          SELECT y.id,\n                 y.column2\n            FROM TABLE y) z\nGROUP BY z.id\n","1753":"LIKE '%\\%%' ESCAPE '\\'\n","1754":"SELECT T.user_id, U.username, T.score, T.time \nFROM tests_1 T\nJOIN users U on U.user_id = T.user_id\nWHERE T.score = (\nSELECT MAX(T2.score)\nFROM tests_1 T2\nWHERE T2.user_id = T.user_id\n)\nORDER BY T.score DESC, T.time ASC;\n","1755":"SELECT MAX(Case When B.ValueOrdinal='1' Then B.Displayvalue end) as Account,\n       MAX(case when B.ValueOrdinal='2' then B.Displayvalue end) as Department,\n       MAX(case when B.ValueOrdinal='3' then B.Displayvalue end) as Misc,\n       A.Text,\n       Sum(A.reportingcurrencyamount) as PostedAmount,\n       A.Recid\nFrom GeneralJournalAccountEntry A Inner Join\n     DimensionAttributeLevelValueAllView B\n     on A.Ledgerdimension = B.ValueCombinationRecID Inner Join\n     DIMENSIONATTRIBUTEVALUECOMBINATION C\n     on A.Ledgerdimension = C.RecID\nWhere C.accountstructure in ('5637145326','5637165585')\nGroup by A.Recid,  A.Text;\n","1756":"ALTER TRIGGER [dbo].[trigger_insertInStatus] \n   ON  [dbo].[DeviceStatus] \n   AFTER INSERT \nAS \nBEGIN\n\n   --Update Records where DeviceIP does exist in GeneralStatus\n   UPDATE GS \n   SET GS.ServiceStatus = I.ServiceStatus\n   FROM GeneralStatus GS INNER JOIN Inserted I ON GS.DeviceIP = I.DeviceIP\n\n\n   -- Insert statements for trigger here:\n   -- Insert records where DeviceIP does not exist in GeneralStatus \n   INSERT INTO GeneralStatus\n   ( DeviceIP,ServiceStatus )\n   SELECT DeviceIP , ServiceStatus FROM INSERTED I\n   LEFT JOIN GeneralStatus GS ON GS.DeviceIP = I.DeviceIP \n   WHERE GS.DeviceIP IS NULL;\n\nEND\n","1757":"SELECT C.names\nFROM C\n    INNER JOIN B ON C.B_ID = B.B_ID\n    INNER JOIN A ON B.A_ID = A.A_ID\nWHERE A.A_ID = 3\n","1758":"SQL> DECLARE\n  2    CURSOR c IS SELECT 1 FROM DUAL;\n  3  BEGIN\n  4     NULL;\n  5  END;\n  6  \/\n\nPL\/SQL procedure successfully completed.\n","1759":"SELECT IFNULL(var1, 0) + IFNULL(var2, 0) FROM test\n","1760":"This works in oracle\nselect a.*\nfrom route  a\nstart with a.rowid = (select min(rowid) from route )\nconnect by prior a.t = a.f; \n","1761":"DECLARE\n    @std_y  FLOAT,\n    @std_x1 FLOAT,\n    @std_x2 FLOAT\n\nSELECT\n    @std_y =  SUM(W*Y),\n    @std_x1 = SUM(W*X1),\n    @std_x2 = SUM(W*X2)\nFROM\n    dbo.My_Table\n\nUPDATE dbo.My_Table\nSET\n    Y  = SQRT(W) * (Y  - @std_y),\n    X1 = SQRT(W) * (X1 - @std_y),\n    X2 = SQRT(W) * (X2 - @std_y)\n\nSELECT\n    @std_y  AS std_y,\n    @std_x1 AS std_x1,\n    @std_x2 AS std_x2\n","1762":"SELECT pl.email\nFROM gameday.player_settings pl\nWHERE NOT EXISTS (\n  SELECT 1\n  FROM unnest(?) AS wanted_tags(tag)\n  LEFT JOIN admin.tags tags\n    ON tags.tag = wanted_tags.tag\n  WHERE  tags.player_id = pl.id\n    AND wanted_tags.tag IS NULL\n);\n","1763":"select t1.id, t1.name, t1.value, t2.id as id2, t2.name as name2, t2.value as value2\nfrom (select t1.*, row_number() over (order by id) as seqnum\n      from table_1 t1\n     ) t1 full outer join\n     (select t2.*, row_number() over (order by id) as seqnum\n      from table_2 t2\n     ) t2\n     on t1.seqnum = t2.seqnum;\n","1764":"SET foreign_key_checks = 'ON'\n","1765":"dte = InputBox(\"What date was the Data Dump run?\", \"Please Input a date (MMDDYYYY)\")\n\n\nclientQry = \"SELECT DISTINCT t.[CLIENT ID], t.[CLIENT NAME] \" & _\n            \"FROM FN_DataDump_ALL_\" & dte & \" as t WHERE \" & _ \n            \" (((t.[CLIENT NAME]) Not Like  \"\"*Test*\"\" ));\"\n","1766":"SELECT CASE \n        WHEN e.ELECT_BONUS_DFRL_SEQ_ID IS NULL OR MAX(e.ELECT_BONUS_DFRL_SEQ_ID) < 1\n        THEN 1\n        ELSE MAX(e.ELECT_BONUS_DFRL_SEQ_ID) + 1\n    END AS ELECT_BONUS_DFRL_SEQ_ID\nFROM ELECT_BONUS_DFRL AS e\nGROUP BY e.ELECT_BONUS_DFRL_SEQ_ID;\n","1767":"SET NOCOUNT ON;\n\nDECLARE @user_name    SYSNAME\n        , @login_name SYSNAME;\n\nSELECT @user_name = 'user_name',\n       @login_name = 'login_name'\n\nSELECT '\n    USE ' + QUOTENAME(NAME) + ';\n\n    CREATE USER ' + QUOTENAME(@user_name)\n       + ' FOR LOGIN ' + QUOTENAME(@login_name)\n       + ' WITH DEFAULT_SCHEMA=[dbo];\n\n    EXEC sys.sp_addrolemember\n      ''db_datareader'',\n      ''' + QUOTENAME(@user_name) + ''';\n\n    EXEC sys.sp_addrolemember\n      ''db_denydatawriter'',\n      '''\n       + QUOTENAME(@user_name) + '''; \n\nGO\n'\nFROM   sys.databases\nWHERE  database_id > 4\n       AND state_desc = 'ONLINE' \n","1768":"select t1.ID from Table t1\nwhere EXISTS (\n              SELECT *\n              FROM Table t2\n              WHERE t2.DefID = 1 AND t2.ValStr = 'hi'\n              ) and  t1.ValInt = 1\n","1769":"SELECT * FROM task_id AS taskid INNER JOIN task_in AS taskin ON taskid.id = taskin.id INNER JOIN customer AS cust ON taskin.id = cust.id WHERE id = YOUR_VALUE_HERE   \n","1770":"Select T1.TicketNumber,T1.Rules_Count_1,T2.Rules_Count_2\nFROM\n(\n  Select [TicketNumber], COUNT([TicketNumber]) AS Rules_Count_1 \n  from [Table1] T1\n  group by TicketNumber) T1\nINNER JOIN\n(\n  Select [TicketNumber], COUNT([TicketNumber]) AS Rules_Count_2\n  from [Table2] T2\n  group by TicketNumber\n ) T2\non T1.TicketNumber = T2.TicketNumber\n","1771":"$count = $query->count()->execute();\n","1772":"SELECT TRIM(SUBSTRING(tag, 1, (CHAR_LENGTH(tag) - LOCATE('(', REVERSE(tag))))) AS new_tag\nFROM table_name;\n","1773":"SUM(COALESCE(WOSE,0) +COALESCE(WO,0) + COALESCE(SSSE,0)+COALESCE(SS,0))\n","1774":"select\n    AssetID\nfrom (\n    select distinct\n        AssetID,\n        KeywordID\n    from AssetKeyword\n    where\n        KeywordID in (3,4,5)\n) t\ngroup by\n    AssetID\nhaving \n    COUNT(*) = 3\n","1775":"DECLARE @Range AS INT = 7374\n\n;WITH E1(N) AS( -- 10 ^ 1 = 10 rows\n    SELECT 1 FROM(VALUES (1),(1),(1),(1),(1),(1),(1),(1),(1),(1))t(N)\n),\nE2(N) AS(SELECT 1 FROM E1 a CROSS JOIN E1 b), -- 10 ^ 2 = 100 rows\nE4(N) AS(SELECT 1 FROM E2 a CROSS JOIN E2 b), -- 10 ^ 4 = 10,000 rows\nE8(N) AS(SELECT 1 FROM E4 a CROSS JOIN E4 b), -- 10 ^ 8 = 10,000,000 rows\nCteTally(N) AS(\n    SELECT TOP(@Range) ROW_NUMBER() OVER(ORDER BY(SELECT NULL))\n    FROM E8\n)\nSELECT * FROM CteTally\n","1776":"SELECT PersonID FROM FormsSubmitted\nWHERE \n    [type]=\"A\" \n    AND \n    [month]=\"June\"\n    AND\n    PersonID NOT IN (\n        SELECT PersonID FROM FormsSubmitted\n        WHERE [type]=\"B\" AND [month]=\"August\"\n    )\n","1777":"Wishlist\nwishlist_id, user_id, ...\n\nWishlistEntry\nwishlist_id, book_id, ...\n","1778":"SELECT scores.id, scores.name,items.id,items.weight, scores.score * items.weight\/t.sum_weight AS 'last_score'\nfrom scores\nINNER JOIN items ON items.id = scores.item_id\nINNER JOIN (SELECT scores.name, sum(items.weight) sum_weight\n            FROM scores INNER JOIN items ON items.id = scores.item_id\n            GROUP BY scores.name) t ON scores.name=t.name\n","1779":"Select ...\nFrom wp_posts As P\nWhere Exists    (\n                Select 1\n                From wp_posts As P1\n                    Join wp_term_relationship As WTR1\n                        On WTR1.object_id = P1.ID\n                            And WTR1.term_taxonomy_id In(3)\n                Where P1.post_parent = P.Id\n                    And P1.post_type = 'attachment'\n                )\n    And P.post_type = 'post'\nOrder By p.post_date DESC\nLimit 15    \n","1780":"SELECT\n    UserSessionSequenceID, \n    SessionGuid, \n    UserSessionID,\n    SiteID, \n    Timestamp, \n    UrlTitle, \n    Url\nFROM (\n    SELECT\n        Seq.UserSessionSequenceID, \n        Usr.SessionGuid, \n        Usr.UserSessionID,\n        Usr.SiteID, \n        Usr.Timestamp AS UsrTimestamp, \n        Seq.Timestamp, \n        Seq.UrlTitle, \n        Seq.Url,\n        ROW_NUMBER() OVER (PARTITION BY Usr.UserSessionID\n                           ORDER BY Seq.UserSessionSequenceID DESC) AS rn\n    FROM\n        tblUserSession Usr\n    INNER JOIN  \n        tblUserSessionSequence Seq ON Usr.UserSessionID = Seq.UserSessionID\n    WHERE     \n        (Usr.Timestamp > DATEADD(mi, -45, GETDATE())) AND (Usr.SiteID = 15)\n) T1\nWHERE rn = 1\nORDER BY UsrTimestamp DESC\n","1781":"SELECT COUNT(*) AS count_value \nFROM submissions s\nJOIN (\n    SELECT username, number, tstmp \n    FROM submissions WHERE id = 1\n) o ON s.number = o.number AND s.username = o.username AND s.tstmp < o.tstmp \n","1782":"select pt.Schedid, pt.schedname,\n       max(case when ct.citerianame = 'color' then ct.criteriavalue end) as Color, \n       max(case when ct.citerianame = 'width' then ct.criteriavalue end) as Width, \n       max(case when ct.citerianame = 'depth' then ct.criteriavalue end) as Depth\nfrom parenttbl pt inner join\n     criteriatbl ct\n     on pt.schedid = ct.schedid\ngroup by pt.schedid, pt.schedname;\n","1783":"insert into FINAL_TABLE   (EVENT_ID,  OID,  LINE_NUMBER)\n  (\n    select EVENT_ID,OID,\n       ROW_NUMBER() OVER(PARTITION BY EVENT_ID ORDER BY OID) as LINE_NUMBER\n    from source_table\n  );\n","1784":"SELECT id, code \nFROM table \nGROUP BY id, code \nHAVING COUNT(code) > 1;\n","1785":"with vw1(val,flg,sumval) as\n(select 1 val,0 flg,TOT_COUNT sumval\nfrom TEMP where RESOURCE_VALUE = '1'\nunion all\nselect vw1.val + 1 val,\ncase when vw1.sumval + t1.TOT_COUNT > 300 then vw1.flg + 1 else vw1.flg end flg,\ncase when vw1.sumval + t1.TOT_COUNT > 300 then t1.TOT_COUNT else vw1.sumval + t1.TOT_COUNT end sumval\nFrom TEMP t1,vw1 WHERE t1.RESOURCE_VALUE = TO_CHAR(vw1.val + 1))\nselect min(val) START_RESOURCE_VALUE,max(val) END_RESOURCE_VALUE,\nmax(sumval) \"SUM\" from vw1 group by flg order by min(val);\n","1786":"select case cast(month as number)\n    when 1 then 'Jan'\n    when 2 then 'Feb'\n    when 3 then 'Mar'\n    when 4 then 'Apr'\n    when 5 then 'May'\n    when 6 then 'Jun'\n    when 7 then 'Jul'\n    when 8 then 'Aug'\n    when 9 then 'Sep'\n    when 10 then 'Oct'\n    when 11 then 'Nov'\n    when 12 then 'Dec'\n  end as mon\nfrom ods_calendar_weeks cal\nwhere cal.year not in (0, 9999);\n","1787":"DECLARE @dtstart DATETIME= '20150101'\nDECLARE @dtend DATETIME= '20151231'\n\n;WITH CTE AS \n(\nSELECT 1 as WeekNo, @dtstart weekstart,DATEADD(d,6-DATEPART(WEEKDAY,@dtstart),@dtstart) weekend\nUNION ALL\nSELECT CTE.WeekNo + 1 as WeekNo, DATEADD(d,1,CTE.weekend),CASE WHEN  DATEADD(d,7,CTE.weekend) < @dtend THEN DATEADD(d,7,CTE.weekend) ELSE @dtend END\nFROM CTE WHERE DATEADD(d,1,CTE.weekend) < @dtend\n)\nSELECT * FROM CTE;\n","1788":"create table i (i_dt date, i_val number);\n\ninsert into i values (to_date('18\/5\/2010 1pm','dd\/mm\/yyyy hham'),        40);\ninsert into i values (to_date('18\/5\/2010 2pm','dd\/mm\/yyyy hham'),        20);\ninsert into i values (to_date('18\/5\/2010 3pm','dd\/mm\/yyyy hham'),        60);\ninsert into i values (to_date('18\/5\/2010 4pm','dd\/mm\/yyyy hham'),        30);\ninsert into i values (to_date('18\/5\/2010 5pm','dd\/mm\/yyyy hham'),        60);\ninsert into i values (to_date('18\/5\/2010 6pm','dd\/mm\/yyyy hham'),        25 );\ninsert into i values (to_date('19\/5\/2010 6pm','dd\/mm\/yyyy hham'),        300 );\ninsert into i values (to_date('19\/5\/2010 6pm','dd\/mm\/yyyy hham'),        450 );\ninsert into i values (to_date('19\/5\/2010 6pm','dd\/mm\/yyyy hham'),        375 );\ninsert into i values (to_date('20\/5\/2010 6pm','dd\/mm\/yyyy hham'),        250 );\ninsert into i values (to_date('20\/5\/2010 6pm','dd\/mm\/yyyy hham'),        310 );\n\nselect i_dt, i_val from \n   (select i.*, rank() over (partition by trunc(i_dt) order by i_val desc, i_dt asc) rn \n   from i) \nwhere rn = 1;\n","1789":"DELETE FROM `table_name` WHERE `P2` < `P1`;\n","1790":"DELETE FROM Element\nWHERE Id IN (\n    SELECT\n        Ele\n    FROM Cluster AS T\n    CROSS APPLY (VALUES\n        (T.Ele1)\n        , (T.Ele2)\n        , (T.Ele3)\n    ) AS X (Ele)\n    WHERE T.Group= 1\n)\n","1791":"SELECT PROD_ID, GEOG_ID, SUM(VALUE1) AS TOTAL\nFROM database \nWHERE GEOG_ID = 'MT' \nAND TIME_ID IN ('JAN', 'FEB')\nGROUP BY PROD_ID, GEOG_ID\n","1792":"SELECT mt.emp_id\nFROM my_table mt\nLEFT JOIN my_table mtx ON (mtx.emp_id = mt.emp_id AND (mtx.isapproved = 0 OR mtx.isvalid = 0))\nWHERE mt.isapproved = 1 AND mt.isvalid = 1 AND mtx.id IS NULL\nGROUP BY mt.emp_id\n","1793":"SELECT\n  Heading, \n  A Package_A,\n  B Package_B,\n  C Package_C,\n  D Package_D\nFROM (\n      SELECT * FROM YourTable\n) up \nPIVOT (sum(Limit) FOR Package IN (A, B, C, D)) AS pvt\n","1794":"SELECT FIND_IN_SET('b','a,b,c,d');\n","1795":"WITH t AS (SELECT 'first path**second path' text FROM DUAL\n           UNION\n           SELECT 'third pathfourth path' text FROM DUAL)\nSELECT SUBSTR(REGEXP_SUBSTR(t.text,'(\\*{2})(.+)'),3)\nFROM t\n","1796":"SELECT name\nCASE \n   WHEN ' ' || name || ' ' LIKE '% N %' THEN 'Red'\n   WHEN ' ' || name || ' ' LIKE '% B %' THEN 'White'\n   WHEN ' ' || name || ' ' LIKE '% RS %' THEN 'Green'\n   ELSE 'Other'\nEND \nFROM mytable\n","1797":"ORDER BY CASE \nWHEN RQID <> '' \nTHEN 1 \nELSE 0 \nEND, RQID, NEWID()\n","1798":"select year, \n       month,\n       fixes,\n       fixes - lag(fixes) over (order by year, month) as increase,\nfrom the_table;\n","1799":"SELECT \n   A.sifKorisnikPK,\n   IsNull(BrojDobrih,0) BrojDobrih,\n   IsNull(BrojLosih,0) BrojLosih\nFROM (select distinct sifKorisnikPK from Rezervacija) A\nLEFT JOIN #LosaRez B\n   ON A.sifKorisnikPK = B.sifKorisnikPK \nLEFT JOIN #DobraRez C\n   ON A.sifKorisnikPK  = C.sifKorisnikPK \nORDER BY (IsNull(BrojDobrih,0) - IsNull(BrojLosih,0))\n","1800":"SELECT userID, testID, MAX(someDate)\nFROM @tmp\nGROUP BY testId,userID;\n","1801":"SELECT IF(a > b, a, b) AS max_value\n  FROM (SELECT MAX(up) AS a,\n               MAX(down) AS b\n          FROM table) x\n","1802":"select * from (\n  select 'Test 1' thename union\n  select 'Test 2' union \n  select 'Test 3'\n)\nwhere thename not in (select name from foo)\n","1803":"SELECT u.id AS userId, u.name AS userName, \n       g.id AS gradeId, g.name As grade\nFROM users AS u\nINNER JOIN grades AS g ON g.id = u.grade_id\n","1804":"SELECT C.*\n  FROM Customer C \n       INNER JOIN CustDetail CD ON C.CustomerId = CD.CustomerId\n       INNER JOIN Address A ON CD.DetailID = A.DetailID\n       LEFT OUTER JOIN Group G ON C.CustomerId = G.CustomerId\n       LEFT OUTER JOIN GroupDetail D ON G.GroupId = D.DetailId\nWHERE ((G.Active = 1 AND C.code = 1) OR G.Active IS NULL) AND\n      ((D.code = '1' AND C.code = 1) OR D.code IS NULL) AND\n      C.Id = @customerId\n","1805":"declare @xml xml\n\nset @xml = N'<CodeFiveReport><Owner UnitNumber=\"Mixed\"\/><\/CodeFiveReport>'\nselect T1.C1.value('upper-case((\/CodeFiveReport\/Owner\/@UnitNumber)[1])', 'varchar(10)') from @xml.nodes('\/') T1(C1)\n\nSET @xml.modify('\n                replace value of (\/CodeFiveReport\/Owner\/@UnitNumber)[1]\n                with xs:string(upper-case((\/CodeFiveReport\/Owner\/@UnitNumber)[1]))\n                ')\n\nselect @xml\n","1806":"Select @originalTxt = @SqlTxt, @orgtxt=@SqlTxt\n\nSet @len=LEN(@orgtxt)\n\nWhile @len > 0\n    Begin       \n        Set @len=LEN(@orgtxt)   \n        Select @start=CHARINDEX('from',@orgtxt)\n        Select @end=CHARINDEX('where',@orgtxt)\n\n\n        If(@start != 0 and @end!=0)\n            Begin\n                set @split = Substring(@orgtxt, @start, @end-@start)\n\n                Set @orgtxt = SUBSTRING(@orgtxt,@end + 5 ,@len-@end)\n\n                Set @txt=@split\n\n                Select @split=Replace(Replace(Replace(Convert(Varchar(Max),@split),'from ','from AB.'),'join ','join AB.') ,',',', AB.')\n\n                Select @originalTxt=REPLACE(@originalTxt,@txt,@split)\n\n                Set @txt=@originalTxt\n            End\n        Else\n            Begin\n                break\n            End\n    End\n\n    If @txt is null\n        Begin\n            Select @txt=Replace(Replace(Convert(Varchar(Max),@originalTxt),'from ','from AB.'),'join ','join AB.')\n        End\n\nreturn @txt\n","1807":"CREATE TABLE #TEMP(id int, name varchar(100))\nINSERT INTO #TEMP VALUES(1, 'John')\nINSERT INTO #TEMP VALUES(1, 'Adam')\nINSERT INTO #TEMP VALUES(1, 'Robert')\nINSERT INTO #TEMP VALUES(1, 'Copper')\nINSERT INTO #TEMP VALUES(1, 'Jumbo')\nINSERT INTO #TEMP VALUES(2, 'Jill')\nINSERT INTO #TEMP VALUES(2, 'Rocky')\nINSERT INTO #TEMP VALUES(2, 'Jack')\nINSERT INTO #TEMP VALUES(2, 'Lisa')\nINSERT INTO #TEMP VALUES(3, 'Amy')\n\nSELECT *\nFROM #TEMP;\n\nWITH CTE(N) AS\n(\n SELECT ROW_NUMBER() OVER(PARTITION BY id ORDER BY id)\n FROM #Temp\n)\nDELETE CTE WHERE N>3;\n\nSELECT *\nFROM #TEMP;\n\nDROP TABLE #TEMP\n","1808":"INSERT INTO studies\n(\n    id\n    ,name_string\n    ,description\n    ,field\n    ,is_active\n    ,register_start\n    ,register_end\n    )\n\nSELECT nextval('studiesSequence')\n    ,NAME\n    ,''\n    ,3\n    ,0\n    ,register_start\n    ,register_end\nFROM dblink('dbname=mydb', 'select name,begins,ends from study') \n     AS t1(NAME VARCHAR(50), register_start DATE, register_end DATE);\n","1809":"DECLARE @input VARCHAR(10) = ' Person '; \n\nDECLARE @sql NVARCHAR(MAX) = '\nSELECT count(*) AS  [@Input Open Data]    \nFROM #Accounts a JOIN\n     dbo.FileFeed t\n     On t.ID = a.AccountID     \nGROUP BY a.accountid';\n\nSET @sql = REPLACE(@sql, '@Input', @Input);\n\nexec sp_executesql @sql;\n","1810":"Dim query As String = \"SELECT * FROM [Hiragana List] WHERE Pronunciation='\" & character & \"';\"\n","1811":"SELECT a from Frais a where a.libelle = 'FRET' or a.libelle = 'Douane' or a.libelle = 'Transitaire'\norder by case a.libelle when 'FRET' then 0 when 'Douane' then 1 when 'Transitaire' then 2 end\n","1812":"FMResultSet *results = [db executeQueryWithFormat:@\"SELECT * FROM allitems WHERE choice1='%@' AND choice2='%@' AND choice3='%@' AND choice4='%@'\"\n                        ,capsChoiceOne,capsChoiceTwo,capsChoiceThree,capsChoiceFour];\n","1813":"SQL> select to_char(systimestamp, 'YYYY-MM-DD HH24:MI:SS.FF TZD') as d from dual;\n\nD\n----------------------------------\n2008-10-21 17:00:43.501591\n","1814":"Select id, type from \n(SELECT id, GROUP_CONCAT(type SEPARATOR ',') AS type FROM rock_types \n        GROUP BY id) a\nWHERE INSTR(type,\"DWS\")>0 OR INSTR(type,\"Top rope\")>0\n","1815":"SELECT \"DATE\", BUS, VALUE\nFROM {your_table}\nWHERE \"DATE\" >= trunc(sysdate) and \"DATE\" < trunc(sysdate+1)\n","1816":"SELECT name, \n       surname, \n       max(greatest(tbl_name.ora_rowscn, tbl_surname.ora_rowscn)) over () as max_rowscn\nFROM tbl_name, tbl_surname \nWHERE tbl_name.id = tbl_surname.id\n","1817":"SELECT table_schema, table_name\nFROM   information_schema.columns\nWHERE  COLUMN_NAME = 'Id'        AND DATA_TYPE = 'uniqueidentifier'\nOR     COLUMN_NAME = 'Message'   AND DATA_TYPE = 'nvarchar'\nOR     COLUMN_NAME = 'EnteredOn' AND DATA_TYPE = 'datetime'\nGROUP BY table_schema, table_name\nHAVING COUNT(COLUMN_NAME) = 3\n","1818":"SELECT saledateid, sum(sl.quantity * sl.unitamount),\n       sum(case when seqnum = 1 then s.saleamount end)\nFROM sales s JOIN\n     (SELECT sl.*, row_number() over (partition by saleid order by saleid) as seqnum\n      FROM salelines sl\n     ) sl\n     USING (saleid)\nGROUP BY saledateid;\n","1819":"SELECT  T.ID,\n        T.Date,\n        Lookback = COUNT(CASE WHEN t2.Date < T.Date THEN t2.ID END),\n        Lookahead = COUNT(CASE WHEN t2.Date > T.Date THEN t2.ID END)\nFROM    T\n        INNER JOIN T t2\n            ON t2.ID = t.ID\n            AND t2.Date >= DATEADD(MONTH, -6, T.Date)\n            AND T2.Date < DATEADD(MONTH, 6, T.Date)\nGROUP BY T.ID, T.Date, T.KeyID;\n","1820":"content_type = models.ForeignKey(ContentType)\nobject_id = models.PositiveIntegerField()\ncontent_object = generic.GenericForeignKey('content_type', 'object_id')\n","1821":" UPDATE second_table ST\n SET ST.id = FT.id\n FROM first_table FT\n WHERE ST.date BETWEEN FT.run_date + interval '4 hour'\n                   AND FT.run_date + interval '4 hour' + interval '1 day'\n","1822":"SELECT [Value] = T.c.value('.', 'varchar(30)')\nFROM   (SELECT Cast(( '<s>' + Replace ((SELECT tag_id+',' FROM tbl_container_track FOR xml path('')), ',', '<\/s> <s>')\n                      + '<\/s>' ) AS XML)) AS Data\n       CROSS APPLY Data.nodes('\/s') T(c) \n","1823":"SELECT SUM(t1.total_time) FROM table1 as t1 \nINNER JOIN table2 as t2 ON t1.vehicle_id = t2.vehicle_id AND t2.feature_id = 2\n","1824":"USE master;\nGO\nDENY VIEW ANY DATABASE TO [newlogin]; \nGO\nUSE yourDB;\nGO\nDROP USER newlogin;\nGO\nUSE master;\nGO\nALTER AUTHORIZATION ON DATABASE::yourDB TO [newlogin];\nGO\n","1825":"explain select * from from cars;\n","1826":"LOAD DATA LOCAL INFILE 'c:\/mytestfile.csv' INTO TABLE report.test\nFIELDS TERMINATED BY ','\nOPTIONALLY ENCLOSED BY '\"' \nLINES TERMINATED BY '\\n'\nIGNORE 1 LINES\n(ONE, TWO)\n","1827":" ;WITH TEMPTABLE AS(\n    SELECT  DATE_STAMP,\n            ID,\n            ROW_NUMBER() OVER( PARTITION BY ID ORDER BY DATE_STAMP ) AS ROWNUMBER,\n            Count(ID) OVER(PARTITION BY Date_Stamp, ID) as countID\n    FROM #temp)\n    SELECT DATE_STAMP,\n            ID,\n            MAX(CASE WHEN ROWNUMBER = 1 THEN 1 ELSE 0 END )AS FIRST_ATTEMPT,\n            MAX(CASE WHEN ROWNUMBER = 2 THEN 1 ELSE 0 END) AS SECOND_ATTEMPT,\n            MAX(CASE WHEN ROWNUMBER = 3 THEN 1 ELSE 0 END) AS THIRD_ATTEMPT,\n            MAX(countID) Total_Attempts\n     FROM TEMPTABLE \n     GROUP BY DATE_STAMP,ID\n","1828":"SQL> SELECT 'HYPERLINK(\".\\\"&10&\"-00.PDF\")' FROM dual;\nEnter value for 10:\nold   1: SELECT 'HYPERLINK(\".\\\"&10&\"-00.PDF\")' FROM dual\nnew   1: SELECT 'HYPERLINK(\".\\\"&\"-00.PDF\")' FROM dual\n\n'HYPERLINK(\".\\\"&\"-00.PDF\"\n-------------------------\nHYPERLINK(\".\\\"&\"-00.PDF\")\n\nSQL> SET DEFINE OFF\nSQL> SELECT 'HYPERLINK(\".\\\"&10&\"-00.PDF\")' FROM dual;\n\n'HYPERLINK(\".\\\"&10&\"-00.PDF\"\n----------------------------\nHYPERLINK(\".\\\"&10&\"-00.PDF\")\n\nSQL>\n","1829":" SELECT level, components.component_id, components.component_label, component_color.component_color\n   FROM compenents JOIN component_color ON components.component = component_color.component\n  START WITH components.component_label = 'Sample'\nCONNECT BY PRIOR components.component_id = components.component_parent_id\n","1830":"SELECT \n    Item.Titel, Item.Uitgever, Game.PEGI, Game.EAN, \n    convert(varchar, Item.DvU, 101) AS DatumVUitgave, \n    Platform.Soort as Platform, Media.soort as Media, \n    GameGenre.Genre AS Genre,\n    -- here's your new column:\n    case when Item.Status=1 then 'Uitgeleend' else 'Binnen' end as Status\nFROM Game \nLEFT JOIN ITEM ON Item.ID = Game.itemID \nLEFT JOIN Media ON Game.MediaID = Media.Id \nLEFT JOIN Platform ON Game.PlatformID = Platform.Id \nLEFT JOIN GameGenre ON Game.GameGenreID = GameGenre.Id\n","1831":"WITH Cte AS(\n    SELECT\n        dtt.*,\n        dt.Data,\n        Total = SUM(dt.Data) OVER(PARTITION BY dtt.Data_Type_ID),\n        rn = ROW_NUMBER() OVER(PARTITION by dtt.Data_Type_ID ORDER BY dt.Date_Entered DESC)\n    FROM Data_Type_Table dtt\n    LEFT JOIN Data_Table dt\n        ON dt.Data_Type_ID = dtt.Data_Type_ID\n)\nSELECT\n    Data_Type,\n    Total = ISNULL(Total, 0),\n    Most_Recent = ISNULL(Data, 0)\nFROM CTE \nWHERE rn = 1\n","1832":"SELECT m0.rowid AS r0,\n       m1.rowid AS rn,\n       m0.timestamp AS a,\n       m1.timestamp AS b,\n       m1.timestamp - m0.timestamp AS rd,\n       m1.timetick - m0.timetick AS d\nFROM (SELECT rowid,     -- This is the core query attaching to each row\n             timestamp, -- the rowid of its next\n             timetick,\n             (SELECT rowid\n              FROM measurements\n              WHERE timestamp > m.timestamp\n              ORDER BY timestamp\n              LIMIT 1\n             ) AS r1\n      FROM Measurements AS m\n     ) AS m0\nJOIN measurements AS m1 ON m0.r1 = m1.rowid\nWHERE m1.timetick - m0.timetick < 0;\n","1833":"SELECT G.value('@GroupId', 'varchar(max)') FROM\n(\nSELECT\n    CAST(Document.data as XML) AS Goods\nFROM \n    Documents as Document\nWHERE type = 1\n) T\nCROSS APPLY T.Goods.nodes('Document\/Good') D(G)\nLEFT JOIN @Groups GS\nON G.value('@GroupId', 'varchar(max)') = GS.groupId\nWHERE GS.groupId IS NULL\n","1834":"SELECT  \n  transactions.idCampaignsList\n  SUM(amountOriginal) AS euro,\n  SUM(amountFinal) AS deducted,\n  EXTRACT(YEAR_MONTH FROM(dateTransaction)) AS period\nFROM transactions \nINNER JOIN campaignsList\n        ON campaignsList.idCampaignsList = transactions.idCampaignsList \nINNER JOIN customers \n        ON customers.idCustomer = campaignsList.idCustomer \nWHERE customers.idCustomer = 14\nGROUP BY period, transactions.idCampaignsList\nORDER BY period\n","1835":"select rownum, id,\n       substr(']'||check_number||']'\n              ,instr(']'||check_number||']',']',1,level)+1\n              ,instr(']'||check_number||']',']',1,level+1) \n               - instr(']'||check_number||']',']',1,level) - 1) C1VALUE,\n       substr(']'||amount||']'\n              ,instr(']'||amount||']',']',1,level)+1\n              ,instr(']'||amount||']',']',1,level+1) \n               - instr(']'||amount||']',']',1,level) - 1) C2VALUE\n    from table\nconnect by id = prior id and prior dbms_random.value is not null  \n      and level <= length(check_number) - length(replace(check_number,']')) + 1\n\n\nROWNUM ID  C1VALUE C2VALUE\n\n1      1   1001    200\n2      1   1002    300\n3      1   1003    100\n4      2   2001    500\n5      2   2002    1000\n6      3   3002    100\n7      3   3004    300\n8      3   3005    600\n9      3   3007    200\n","1836":"SELECT id, description, \nCASE\n   WHEN _dateUpdate IS NULL THEN _dateEntry\n   WHEN _dateUpdate > _dateEntry THEN dateUpdate\n   ELSE _dateEntry\nEND as date \nFROM mytable \nORDER BY \nCASE\n   WHEN _dateUpdate IS NULL THEN _dateEntry\n   WHEN _dateUpdate > _dateEntry THEN dateUpdate\n   ELSE _dateEntry\nEND desc\n","1837":"  SELECT DATEADD(dd, 7-(DATEPART(dw, DATE)), DATE)  AS WEEK_ENDING_DATE\n        ,Year(DATEADD(dd, 7-(DATEPART(dw, DATE)), DATE)) AS [YEAR]\n        ,(SUM(Value1) + SUM(Value2)) AS [Total1]\n        ,(SUM(Value3) + SUM(Value4)) AS [Total2]\n        ,((SUM(Value1) + SUM(Value2)) \/ (SUM(Value3) + SUM(Value4))) AS [Quote]\n    FROM tbl\n    WHERE DATEADD(dd, 7-(DATEPART(dw, DATE)), DATE) BETWEEN DATEADD(dd, 7-(DATEPART(dw, FromDatePickerField)), FromDatePickerField)\n            AND DATEADD(dd, 7-(DATEPART(dw, ToDatePickerField)), ToDatePickerField)\nand date >= FromDatePickerField\nand date <= ToDatePickerField\n    GROUP BY DATEADD(dd, 7-(DATEPART(dw, DATE)), DATE)    \n    ORDER BY DATEADD(dd, 7-(DATEPART(dw, DATE)), DATE)\n","1838":"SELECT Rnk,\n       min(CASE WHEN Categ = 'A' THEN Nm END) as A,\n       min(CASE WHEN Categ = 'B' THEN Nm END) as B,\n       min(CASE WHEN Categ = 'C' THEN Nm END) as C\nFROM (select t.*, row_number() over (partition by categ, rnk order by newid()) as sub_rnk\n      from Tbl t\n     ) t\nGROUP BY rnk, sub_rnk\nORDER BY rnk;\n","1839":"select * from Vehicle v\nwhere not exists (\n    select 1 from Booking \n    where regNo = v.regNo\n      and date_from <= '2015-04-05'\n      and date_to   >= '2015-03-25' \n    )\n","1840":"SELECT Tanks.*, main.*, DT.MaxInspectionID, DT.MaxInspectionOrComplianceDate \n\nFROM\n    (TankInspections main\n    INNER JOIN Tanks ON Tanks.TankID = main.TankID)\n    INNER JOIN    \n    (\n        SELECT [TankID],    \n               Max(InspectionID) As MaxInspectionID,\n               Min([Planned Inspection Date]) As MinInspection,\n               Max([Planned Inspection Date]) As MaxInspection,    \n\n               Min([Inspection Out of Compliance Date]) As MinCompliance,\n               Max([Inspection Out of Compliance Date]) As MaxCompliance,\n\n               Max(IIF(([Planned Inspection Date]) Is Null, \n                       IIF(ISNULL([Inspection Out of Compliance Date]), \n                           NULL, \n                           [Inspection Out of Compliance Date]),\n                       [Planned Inspection Date])) As MaxInspectionOrComplianceDate        \n        FROM TankInspections\n        GROUP BY [TankID]    \n    ) As DT\n\n    ON main.TankID = DT.TankID\n    AND main.InspectionID = DT.MaxInspectionID;\n","1841":"    <cfset form.filename = CFFILE.serverfile>\n","1842":"SELECT id, type, description FROM cars\nUNION\nSELECT id, type, description FROM planes\nUNION\nSELECT id, type, description FROM trains\nORDER BY id, type\n","1843":"with todelete as (\n      select t.*, row_number() over (partition by Patientid, state, grp order by id) as seqnum\n      from (select t.*,\n                   (row_number() over (partition by PatientId order by id) -\n                    row_number() over (partition by PatientId, state order by id)\n                   ) as grp\n            from table t\n           ) t\n    )\ndelete from todelete\n    where seqnum > 1;\n","1844":"Sub Whatever()\n    connection.ConnectionString = \"server=***01\\SQLEXPRESS; database=Billing; integrated security=yes\"\n    connection.Open()\n    Using da As New SqlDataAdapter(\"Select * FROM [Billing] ORDER BY Customer\", connection)\n        da.Fill(datatableMain)\n    End Using\n    connection.Close()\n\n    ' get distinct customers\n    Dim dv As New DataView(datatableMain)\n    Dim distinctCustomers As DataTable = dv.ToTable(True, \"Customer\")\n\n    For Each customer As DataRow In distinctCustomers.Rows\n        ' this messagebox is only to give you an idea which customer you are printing\n        ' not required in actual code.\n        MessageBox.Show(\"Exporting Customer... \" & customer(\"Customer\").ToString)\n\n        Dim customerRows() As DataRow = datatableMain.Select(\"Customer=\" & customer(\"Customer\").ToString)  '<-- put single quotes around value if \"Customer\" field is of string type. e.g. \"Customer='value'\"\n        For Each customerRow As DataRow In customerRows\n            ' all the rows related to this customer are here\n            ' do whatever you do to export\n\n        Next\n    Next\nEnd Sub\n","1845":"CREATE OR REPLACE FUNCTION get_join_date( in_emp_no) RETURN DATE\nIS\n  v_join_DATE DATE;\nBEGIN\n  SELECT MIN(JOINED_DATE)\n    INTO v_join_DATE \n    FROM employee\n   WHERE employee_number = in_emp_no\n     AND TYPE=in_type;\n  return v_join_DATE;\nend\n","1846":"SELECT \n    * \nFROM x_world as xr\nINNER JOIN (\n        SELECT \n                x,\n                MAX(population)\n        FROM x_world as xr\n        GROUP BY x \n) as xt ON xt.x = xr.x\nGROUP BY village\n","1847":"SELECT t2.CustomerID, t1.`Quarter`\nFROM (\n  SELECT 1 AS `Quarter` UNION ALL SELECT 2 UNION ALL \n  SELECT 3 UNION ALL SELECT 4\n) AS t1\nCROSS JOIN (\n  SELECT DISTINCT CustomerID\n  FROM salesorderheader\n) AS t2 \nLEFT JOIN (\n  SELECT CustomerID, QUARTER(OrderDate) AS `Quarter`\n  FROM salesorderheader\n) AS t3 ON t2.CustomerID = t3.CustomerID \n           AND t1.`Quarter` = t3.`Quarter`  \nWHERE t3.`Quarter` IS NULL\nORDER BY t2.CustomerID\n","1848":"SELECT c.name, COUNT(n.category) AS count_in_name_table\nFROM categories c\nLEFT JOIN name n ON n.category = c.name\nGROUP BY c.name\n","1849":"with t as\n(\nselect 'cab1' as c1, 'ae1' as e1 from dual\nunion all\nselect 'cab1' , 'ae2'  from dual\nunion all\nselect 'cab1' , 'ae3'  from dual\nunion all\nselect 'cab1' , 'ae4'  from dual\nunion all\nselect 'cab3' , 'ae1'  from dual\nunion all\nselect 'cab3' , 'ae1'  from dual\nunion all\nselect 'cab2' , 'ae'  from dual\n)\nSELECT\n c1,\n e1,\n COUNT(*) OVER (partition by c1) as p1\nFROM t\nGROUP BY c1, e1\n","1850":"select a, b, c, value\nfrom tab\nwhere tab.state = 'A' and not exists (\n  select 1                          -- let the optimizer do its thing\n  from tab ti\n  where tab.state = 'B' and ti.a=tab.a and ti.b=tab.b and ti.c=tab.c)\n","1851":"ALTER PROCEDURE [dbo].[Provider]\n(\n    @strPro varchar(200)\n)\n\nAS\nBEGIN\n    -- SET NOCOUNT ON added to prevent extra result sets from\n    -- interfering with SELECT statements.\n    SET NOCOUNT ON;\n\n    DECLARE @SQL varchar(2000)\n\n    -- Insert statements for procedure here\n    SET @SQL = 'SELECT * FROM [db1].[dbo].[table1] '\n\n    if @strPro <> 'All People'\n    BEGIN\n        SET @SQL = @SQL + ' WHERE [Name] = ''' + @strPro + '''\n    END\n\n    EXEC (@SQL)\n\nEND\n","1852":"select product_id, sum(quantity) As ProductQtySum\nfrom OrdersProducts \ngroup by product_id \norder by ProductQtySum Desc\n","1853":"UPDATE table_name \nSET column1 = value, column2 = value2 \nWHERE some_column = some_value\n","1854":"SELECT * FROM Items\nWHERE (@ItemsWithPriceTenDollarsOrMore = 1 AND Price >=10)\nOR (@ItemsWithPriceTenDollarsOrMore = 0 AND Price <10)\nOR (@ItemsWithPriceTenDollarsOrMore IS NULL)\n","1855":"UPDATE  regm\nSET     regm_pk = REGM_SEQ.nextval\n","1856":"CREATE TABLE PHONE_NUMBERS(PH_ID NUMBER(12), PHONE_NUMBER VARCHAR2(20));\n\n\n   CREATE OR replace TRIGGER trg_test_numbers \n  BEFORE INSERT OR UPDATE ON phone_numbers \n  FOR EACH ROW \nBEGIN \n    IF Substr(:new.phone_number, 1, 2) = '1-' THEN \n      :new.phone_number := Substr(:new.phone_number, 1, 9) \n                           || '-' \n                           || Substr(:new.phone_number, 10); \n    END IF; \nEND trg_test_numbers; \n\ninsert into phone_numbers(ph_id, phone_number) VALUES(1,'1-210-5551212');\nSELECT * from phone_numbers;\n","1857":"select a \nfrom tt\nwhere B in (\n            select B\n            from tt\n            group by b\n            having count(*) >= 2);\n","1858":"SELECT c.city_name, pc.subcategory_id,\nIFNULL((select `count` from products_counter where city_id = c.city_id \n                and subcategory_id = pc.subcategory_id),0) as 'Count'\nFROM cities c CROSS JOIN products_counter pc\n","1859":"DECLARE @due_date DATE, @difference varchar(50), @id INT, @Now datetime = (Select GetDate());\n\nDECLARE myCursor CURSOR FORWARD_ONLY FOR \n    SELECT [Engr Due], [Progress] \n    FROM dbo.Employee_Table OPEN myCursor\n\nFETCH NEXT FROM myCursor INTO @due_date, @Progress\nWHILE @@FETCH_STATUS = 0 \nBEGIN \n    if (@Progress != 'Completed')\n    BEGIN\n        SELECT @difference = DATEDIFF(day, @Now, @due_date) \n        UPDATE Employee_Table\n        SET [Remaining Days]=@difference \n        WHERE CURRENT OF myCursor \n    END\n    FETCH NEXT FROM myCursor INTO @due_date, @Progress\n\nEND\n\nCLOSE myCursor DEALLOCATE myCursor\n","1860":"mysql> SELECT GREATEST ('2015-01-01', '2041-11-13', '1844-05-30', '0000-00-00');\n+-------------------------------------------------------------------+\n| GREATEST ('2015-01-01', '2041-11-13', '1844-05-30', '0000-00-00') |\n+-------------------------------------------------------------------+\n| 2041-11-13                                                        |\n+-------------------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT LEAST ('2015-01-01', '2041-11-13', '1844-05-30', '0000-00-00');\n+----------------------------------------------------------------+\n| LEAST ('2015-01-01', '2041-11-13', '1844-05-30', '0000-00-00') |\n+----------------------------------------------------------------+\n| 0000-00-00                                                     |\n+----------------------------------------------------------------+\n1 row in set (0.00 sec)\n","1861":"SELECT\n    Contact\n,   Customers\n,   (SELECT SUM(Customers) FROM myTable t2 WHERE t2.Contact >= t1.Contact) as CummCustomers\nFROM myTable t1\n","1862":"ORDER by MODULE_ID\n   , case when COALESCE(fun.parent_function, fun2.function_id) is null then 1 else 0 end\n   , FUNCTION_ID\n","1863":"proc sql;\ncreate table want as\nselect ed, sum(smoke=1) as smoke1, sum(smoke=0) as smoke0\nfrom sashelp.bweight\ngroup by ed\norder by ed;\nquit;\n","1864":"INSERT INTO table_1 (user_id, room_id, enter_date)\nVALUES  (1,1, NOW())\nON DUPLICATE KEY UPDATE\nenter_date = NOW()\n\n\/\/ or\nINSERT IGNORE INTO table_1 (user_id, room_id)\nVALUES (1,1)\n","1865":"insert Brands (AccountID, BrandName, Description, etc...)\n  select 99, BrandName, Description, etc...\n  from Brands\n  where AccountID = 88;\n","1866":"select u.*\nfrom (select u.unit_name, sum(hp + shield) as totalhealth,\n             rank() over (order by sum(hp + shield) desc) as seqnum\n      from units u\n      group by unit_name\n     ) u\nwhere seqnum = 1;\n","1867":"SELECT * --You really should use only the columns you need instead of *\nFROM Careers  \nwhere (Location = @country OR @country is null)\nand ([state] = @state OR @state is null)\nand (position = @position or @position is null)\n","1868":"SELECT ID, Name, Designation,\n    ROW_NUMBER() OVER (PARTITION BY Designation ORDER BY ID) AS Appearance\nFROM theTable\n","1869":"UPDATE customers \nSET balance = balance - @amount\nWHERE id = @id;\n","1870":"SELECT a.idea_id, a.property_id, a.the_idea, a.user_id, a.added_date, a.status, \n       SUM(b.thumbs = 1) AS up, SUM(b.thumbs = 0) AS down\nFROM idea_box a \nLEFT JOIN idea_box_voting b ON a.idea_id = b.idea_id \nGROUP BY a.idea_id;\n","1871":"select max(case when id = 1 then x1 end) as x1_1,\n       max(case when id = 1 then x2 end) as x2_1,\n       max(case when id = 2 then x1 end) as x1_2,\n       max(case when id = 2 then x2 end) as x2_2,\n       max(case when id = 3 then x1 end) as x1_3,\n       max(case when id = 3 then x2 end) as x2_3       \nfrom (select t.*,\n             row_number() over (partition by id order by (select null)) a seqnum\n      from #test t\n     ) t\ngroup by seqnum;\n","1872":"select \n  u.userid\nfrom\n  usergroup u\nwhere\n  u.groupid in (27, 714)\ngroup by\n  u.userid\nhaving \n  count(u.userid) > 1\n","1873":"SELECT\n    COALESCE(p.id, c.id),\n    COALESCE(p.name, c.name),\n    p.num AS pending,\n    c.num AS completed,\n    COALESCE (p.num, 0) + COALESCE (c.num, 0) AS total\nFROM\n    pending p\n    FULL OUTER JOIN\n    completed c ON p.id = c.id\n","1874":"SELECT t1.date, t1.symbol, t1.MPR\nFROM table1 t1\nWHERE t1.MPR IN\n(\n  SELECT TOP 2 t2.MPR FROM table1 t2\n  WHERE\n  t2.date = t1.date\n  ORDER BY t2.MPR DESC\n)\n","1875":"ALTER PROC SP_SampleOuter\nAS\nDECLARE @count int\nEXEC @count = SP_SampleInner\n\nIF @count > 0\nBEGIN\nSELECT @count as Ctr,1\nEND\nELSE\nBEGIN\nSELECT @count as Ctr,0\nEND\n","1876":"SELECT COUNT(it.mac_id) AS total_installations, \n       COUNT(DISTINCT it.mac_id) AS unique_installations,\n       COUNT(CASE WHEN it.uninstalled_date <> '0000-00-00 00:00:00' \n             THEN it.mac_id \n             ELSE NULL\n             END) as total_uninstallations,\n       COUNT(DISTINCT CASE WHEN it.uninstalled_date <> '0000-00-00 00:00:00' \n                      THEN it.mac_id \n                      ELSE NULL\n                      END) as unique_uninstallations\nFROM installation_tracking it \nGROUP BY it.rs_id\n","1877":"select count(*) as numCustomersFromSydney from table where Suburb = \"Sydney\";\n","1878":"SELECT  *\nFROM    (\n        SELECT  id\n        FROM    (\n                SELECT  id\n                FROM    VWTenantPropertiesResults\n                WHERE   ContentStreet = 'Holderness Road'\n                UNION ALL\n                SELECT  id\n                FROM    VWTenantPropertiesResults\n                WHERE   ContentTown = 'Hull'\n                UNION ALL\n                SELECT  id\n                FROM    VWTenantPropertiesResults\n                WHERE   ContentPostCode = 'HU'\n                ) qi\n        GROUP BY\n                id\n        HAVING  COUNT(*) >= 2\n        ) q\nJOIN    VWTenantPropertiesResults r\nON      r.id = q.id\nWHERE   ContentBedrooms BETWEEN 1 AND 4\n        AND ContentPrice BETWEEN 50 AND 500\nORDER BY\n        ContentPrice\n","1879":"SELECT estimates.id,\nestimates.estimate_number, \nestimates.description,\nestimates.meeting_date,\nestimates.job_date,\nestimates.status,\nestimates.price,\ncount(estimate_versions.estimate_id)\nFROM\n(estimates)\nLEFT OUTER JOIN estimate_versions estimate_versions ON estimates.id = estimate_versions.estimate_id\nLEFT OUTER JOIN customers customers ON estimates.customer_id = customers.id\nWHERE customers.key = 'JsB4ND90bn'\ngroup by\nestimates.id,\nestimates.estimate_number, \nestimates.description,\nestimates.meeting_date,\nestimates.job_date,\nestimates.status,\nestimates.price\n","1880":"WHERE users_friends.bID='$USER' AND users_friends.type = '$typeUsers' AND (\n (users.firstname = '$firstname' AND users.lastname='$lastname') OR\n (users.firstname LIKE '$firstname%' AND users.lastname LIKE '$lastname%') OR\n users.firstname LIKE '$firstname%' OR\n users.lastname LIKE '$firstname%'\n)\n","1881":"insert into tbl_Name (Name)\nvalues (EncryptByKey( Key_GUID('SymmetricKey1'), N'Cat\u00e9gories'))\n","1882":"update contacts set title =@title, firstName=@firstName, middleName=@middleName, lastName=@lastName where contactID=@ContactID\n","1883":"-- note table1 is your table\n\nUPDATE t1 set t1.filed3 = t2.filed3 \nfrom table1 t1, table1 t2\nwhere t1.filed3 is null\nand t2.filed3 is not null \nand t1.filed2 = t2.filed2 and \nt1.filed1 = t2.filed1\n","1884":"UPDATE `contacts` \n       SET `calls_to` = `calls_to`+1, \n             `cost_to` = `cost_to`+0.25 \n  WHERE `contact_no`='0412345678' AND\n          calls_to is not null AND\n          cost_to is not null;\n","1885":"SELECT st_astext(st_line_substring(  st_linemerge(geom)  ,\n                                  $bas\/st_length(geom),\n                                 $son\/st_length(geom) ))\nFROM geom_line\nWHERE i_project = $id;\n","1886":"SELECT tsgroup\nFROM   master\nGROUP  BY tsgroup\nORDER  BY RIGHT(RTRIM(tsgroup), 3),\n          LEFT(RTRIM(tsgroup), 3) \n","1887":"DECLARE @sql AS NVARCHAR(MAX)\n       ,@table AS NVARCHAR(MAX) = 'DATA_table';\n\nSET @sql = 'stuff(( SELECT distinct [Site]\n                    FROM [ProcterGamble_analytics].[dbo].' + @table + '\n                    FOR XML PATH(''''), TYPE\n                     ).value(''.'', ''NVARCHAR(MAX)'') \n                        , 1,  0, '''')';\n\nEXEC(@sql);\n","1888":"CAST(value AS int)\n","1889":"SELECT T.*\nFROM MyTable T\nLEFT JOIN TblCountries C ON(T.Country = C.Country AND T.CountryCode = C.CountryCode)\nWHERE C.CountryId IS NULL -- Assuming you have a column by that name that's not nullable.\n","1890":"select month, count(*)\nfrom status s outer apply\n     (select top 1 s2.*\n      from status s2\n      where s.person_id = s2.person_id and s2.month < s.month\n      order by s2.month desc\n     ) as sprev\nwhere s.status = 3 and (sprev.status is null or sprev.status = 2)\ngroup by month;\n","1891":"SELECT team, SUM(Win) As Won, SUM(Loss) as Lost, SUM(score) as Score\nFROM\n( SELECT team_one as team, \n     CASE WHEN one_score > two_score THEN 1 ELSE 0 END as Win, \n     CASE WHEN one_score < two_score THEN 1 ELSE 0 END as Loss, one_score as score\n  FROM matches\n  UNION ALL\n  SELECT team_two as team\n     CASE WHEN two_score > one_score THEN 1 ELSE 0 END as Win, \n     CASE WHEN two_score < one_score THEN 1 ELSE 0 END as Loss, two_score as score\n  FROM matches\n) t\nGROUP BY team\nORDER By Won, Lost DESC, Score\n","1892":"values (NULL, \"heart\", \"heart_shape.jpg\", now());\n","1893":"SELECT\n  n.id,\n  IF(pmu.name IS NULL, pmm.name, pmu.name) recipient, \n  pmus.name sender, pm.msg, m.modification_id\nFROM\n  notification n\n  LEFT JOIN user_modification m ON (n.modification_id = m.modification_id)\n  LEFT JOIN pm ON (n.pm_id = pm.pm_id)\n  LEFT JOIN users pmu ON (pm.recipent_id = pmu.user_id)\n  LEFT JOIN users pmus ON (pm.sender_id = pmus.user_id)\n  LEFT JOIN users pmm ON (m.user_id = pmm.user_id)\nWHERE\n  (pmu.name = 'Peter' OR \n     pmm.name = 'Peter') AND\n  n.is_read = 0;\n","1894":"create schema authorization [schema name]\ncreate table department \n(   code      varchar2(3) primary key,\n    name      varchar2(40)  not null,\n    chair     varchar2(11),\n    constraint departmentChairFk foreign key(chair) references facultyStaff(staffId) on delete set null\n)\ncreate table facultyStaff \n(   staffID     varchar2(5) primary key,\n    dob     date,\n    firstName   varchar2(20),\n    lastName    varchar2(20),\n    rank        varchar2(10),\n    deptCode    varchar2(3),\n    constraint rankValue check (rank in ('Assistant', 'Associate', 'Full', 'Emeritus')),\n    constraint facultyDeptFk foreign key (deptCode) references department (code)\n)\ncreate table student \n(   studentId   varchar2(5) primary key,\n    dob     date ,\n    firstName   varchar2(20),\n    lastName    varchar2(20),\n    status      varchar(10),\n    major       varchar(3),\nconstraint statusValue check (status in ('Freshman', 'Sophomore', 'Junior', 'Senior',  'Graduate')),\n    constraint studentMajorFk foreign key (major) references department (code)\n);\n","1895":"WHERE CUS_joinDate BETWEEN DATEADD(mm,-1,GETDATE()) AND DATEADD(mm,1,GETDATE())\n","1896":"SELECT Centre.Centre_Name, Count(Shop_No) AS shopcount \nFROM Centre \n    LEFT JOIN Space ON Centre.Centre_Name = Space.Centre_Name \nGROUP BY Centre.Centre_Name\n","1897":"declare @stepsize float = 20.0\n\ndeclare @val float = 17.6\n\nselect CEILING(@val \/ @stepsize) * @stepsize    -- Result 20.0\n\nset @val = 31.2\n\nselect CEILING(@val \/ @stepsize) * @stepsize    -- Result 40.0\n","1898":"select `table1`.`NAME` AS `NAME`,`table2`.`PROMOTERID` AS `Promoter`\n,(IFNULL(sum(`table2`.`GUESTS`),0) + `table1`.`GUESTS`) AS `TOTAL` from\n(`table1` LEFT join `table2` on((`table1`.`ID` = `table2`.`PROMOTERID`))),\ngroup by `table1`.`ID`\n","1899":"select * from users where  REGEXP_LIKE (first_name, '^[^0-9a-z]+$', 'i');\n","1900":"SELECT test_column \nFROM test_table \nORDER BY cast(test_column as int)\n","1901":"DELETE  d\nFROM device d\nJOIN (\n    SELECT DevNum, MAX(DevReadDate) maxDevReadDate\n    FROM device\n    WHERE devReadType = 'xx'\n    GROUP BY DevNum\n) b\nON d.DevNum = b.DevNum AND (d.DevReadDate < b.maxDevReadDate OR d.devReadType = 'xx')\n","1902":"select \n    @myWhereString =stuff((select 'or isnull('+COLUMN_NAME+','''') = '''' ' as [text()] \n                       from Primebet.INFORMATION_SCHEMA.COLUMNS \n                       where TABLE_NAME = 'YourTable'\n                           and (column_name like 'col_as%'\n                                or\n                                column_name like 'col_m%')\n                       for xml path('')),1,3,'')\nset @myWhereString ='rest of your query'+ @myWhereString\n\nexec executesql with your query\n","1903":"DROP TABLE IF EXISTS my_table;\n\nCREATE TABLE my_table\n(measurement_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY\n,TreeID  INT NOT NULL\n,Diameter INT NOT NULL\n);\n\nINSERT INTO my_table (treeid,diameter) VALUES\n(1      , 3),\n(1      , 2),\n(1      , 3),\n(2      , 2),\n(2      , 2),\n(2      , 1),\n(1      , 3);\n\nSELECT x.*\n     , COUNT(*) rank\n  FROM my_table x\n  JOIN my_table y\n    ON y.treeid = x.treeid\n   AND \n     ( y.diameter > x.diameter\n       OR (y.diameter = x.diameter AND y.measurement_id <= x.measurement_id )\n     )\n  GROUP \n     BY x.treeid, x.diameter, x.measurement_id\n-- HAVING rank < something\n  ORDER BY treeid,rank;\n\n  +----------------+--------+----------+------+\n  | measurement_id | TreeID | Diameter | rank |\n  +----------------+--------+----------+------+\n  |              1 |      1 |        3 |    1 |\n  |              3 |      1 |        3 |    2 |\n  |              7 |      1 |        3 |    3 |\n  |              2 |      1 |        2 |    4 |\n  |              4 |      2 |        2 |    1 |\n  |              5 |      2 |        2 |    2 |\n  |              6 |      2 |        1 |    3 |\n  +----------------+--------+----------+------+\n","1904":"Select\n  Order.AccountID,\n  Order.UserID,\n  Order.OrderID,\n  Order.OrderDate,\n  User.UserName,\n  Note.NoteID,\n  Note.UserID,\n  Note.NoteDate,\n  Note.Text,\n  NoteWriter.UserName as 'NoteWriter_Username'\n\nFROM\n  INNER JOIN User ON (Order.UserID=User.UserID)\n  LEFT OUTER JOIN Note ON (Order.AccountID=Note.AccountID)\n  LEFT OUTER JOIN user NoteWriter on NoteWriter.userid = Note.userID\n\nWHERE\n  Order.OrderDate >=\"2016-01-01\"\n  AND Order.OrderDate <= (current date -1 day)\n  AND Note.NoteID IN (21,41,89)\n  AND Note.NoteDate >=\"2016-01-01\"\n  AND Note.NoteDate<= (current date -1 day)\n","1905":" SELECT e.Text AS StatusText,\n        a.Created AS [DATE],\n        CASE a.status\n            WHEN 2 THEN NULL\n            WHEN 3 THEN NULL\n            ELSE a.Username\n        END,  \n        b.Name  AS CustomerName,\n        c.Name  AS ServiceName,\n        d.Message AS DeviationMessage\n   FROM dbo.StatusUpdate AS a\n        LEFT OUTER JOIN dbo.Customer AS b ON a.CustomerId = b.CustomerID\n        LEFT OUTER JOIN dbo.Service AS c ON a.ServiceId = c.ServiceID\n        LEFT OUTER JOIN dbo.Deviation AS d ON a.DeviationId = d.DeviationID\n        LEFT OUTER JOIN dbo.StatusText AS e ON a.Status = e.ID\n","1906":"SELECT 'allEqual' AS COL1, COUNT(*) AS imgCount FROM (\n    SELECT imgId AS primaryId FROM primary_images pi\n    WHERE pi.ImgId = '$imgId' \n      AND pi.imgWidth = '$maxImageWidth' \n      AND pi.imgHeight = '$maxImageHeight'\n    UNION ALL \n    SELECT primaryId FROM secondary_images si\n    WHERE si.primaryId = '$imgId' \n      AND si.imgWidth = '$maxImageWidth'    \n      AND si.imgHeight = '$maxImageHeight'  \n) AS union_table                      \n","1907":"SELECT COUNT(CASE WHEN id = 2  THEN 1 END) \n       \/ COUNT(CASE WHEN id = 2 || id = 3 THEN 1 END) \nFROM candidate \n","1908":"UPDATE\n   DestinationTable \nSET \n   DestinationTable.money_owed = SourceTable.Credit\nFROM\n   DestinationTable \nINNER JOIN SourceTable\nON DestinationTable.Field2 = SourceTable.Field2\n","1909":"client_win_api_environment.get_windows_username();\n","1910":"Declare @total varchar (max)\nset @total = 1\n\nDeclare @total2 varchar (max)\nset @total2 = '1,4'\n\nexec ('if '+@total+' in ('+@total2+') print ''Success'' ' )\n","1911":"DECLARE @cols AS NVARCHAR(MAX),\n    @query  AS NVARCHAR(MAX)\n\nselect @cols = STUFF((SELECT distinct ',' + QUOTENAME(task) \n                    from t1\n            FOR XML PATH(''), TYPE\n            ).value('.', 'NVARCHAR(MAX)') \n        ,1,1,'')\n\nset @query = 'SELECT entity, ' + @cols + ' from \n             (\n                select entity, task, timespan\n                from t1\n            ) x\n            pivot \n            (\n                min(timespan)\n                for task in (' + @cols + ')\n            ) p '\n\nexecute(@query)\n","1912":"$result = db_query('SELECT nid FROM {node} WHERE ((status = :status) AND (type IN  (:type)) ORDER BY created DESC', array(':status'=>'1', ':type'=>'_my_content_type'))->fetchAll(PDO::FETCH_ASSOC);\n\nforeach ($result as $row) {\n  $node = node_load($row['nid']);\n  \/\/ Access the field as $node->field_data_my_field_node_entity_type.\n}\n","1913":"Select\n    p.*,\n    m.*\nFrom (\n    Select\n        p.*,\n        ph.*,\n        count(pv.vote) vote_count,\n        sum(pv.vote) vote_sum,\n        sum(case when pv.vote > 0 Then 1 else 0 end) plus_votes,\n        sum(case when pv.vote < 0 then 1 else 0 end) minus_votes\n    From\n        pictures p\n            left join\n        picture_votes pv\n            On pv.picture_id = p.picture_id\n            left join\n        photographers ph\n            On p.photographer_id = ph.photographer_id\n    Where\n        p.authenticated = 1 And\n        p.picture_id = ?\n    ) p\n        left join\n    picture_models m\n        On p.model_id = m.model_id\n","1914":"update group_table \njoin\n  (\n        select tab1.letter, tab1.id_group_table from \n        (\n          select  letter,\n          id_group_table, \n          count(letter) as occurrences\n          from letter\n          group by id_group_table, letter \n          order by occurrences desc\n        ) tab1\n        group by tab1.id_group_table having max(tab1.occurrences)    \n\n  ) tab2 on group_table.id_group_table = tab2.id_group_table\n\nset champion = tab2.letter\nwhere group_table.id_whatever in (1,2,3,4);\n","1915":"=SUBSTITUTE(A1, \"'\", \"''\")\n","1916":"select id_one from yourtable\nunion \nselect id_two from yourtable\n","1917":"2|4|8|16 -- rather than 30\n1|32     -- rather than 33\n","1918":"String whereClause = \"package_mane = ?\"; \/\/ package_name perhaps?\nString[] whereArgs = new String[]{\"com.mynamespase.db\"};\n","1919":"select s.id, s.classDate, s.instructor ,\ncount(distinct e.id) as enrolled,\ncount(distinct w.id) as waiting\nfrom schedule as s\nleft outer join enrolled as e\non s.id = e.scheduleID\nleft outer join waitlist as w\non s.id = w.scheduleID\ngroup by s.id\n","1920":"SQL> select rpad('*', level, '*') as c from dual connect by level <= 20 order by \n     length(c) desc;\n\nC\n------------------------------------\n********************\n*******************\n******************\n*****************\n****************\n***************\n**************\n*************\n************\n***********\n**********\n*********\n********\n*******\n******\n*****\n****\n***\n**\n*\n\n20 rows selected.\n\nSQL> select rpad('*', 2*level-1, ' *') as c from dual connect by level <= 20 order by \n     length(c) desc;\n\nC\n--------------------------------------------------\n* * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * *\n* * * * * * * * * * * * * *\n* * * * * * * * * * * * *\n* * * * * * * * * * * *\n* * * * * * * * * * *\n* * * * * * * * * *\n* * * * * * * * *\n* * * * * * * *\n* * * * * * *\n* * * * * *\n* * * * *\n* * * *\n* * *\n* *\n*\n\n20 rows selected.\n","1921":"select t.PATIENT_NUMBER, t.DATE_OF_VISIT, t.BMI\nfrom t inner join\n     (select PATIENT_NUMBER, max(DATE_OF_VISIT) as maxdate\n      from t\n      group by PATIENT_NUMBER\n     ) tmax\n     on t.PATIENT_NUMBER = tmax.PATIENT_NUMBER and t.DATE_OF_VISIT = tmax.maxdate;\n","1922":"select project\n       sum(case when score = 'labour' then hours else 0 end) as labourHrs,\n       sum(case when score = 'travel' then hours else 0 end) as travelhours\nfrom t\ngroup by project;\n","1923":"CREATE OR REPLACE TRIGGER check_order_employee_no\n  ON INSERT INTO orders\n  BEFORE EACH ROW\n  AS\n    match_count  INTEGER;\n  BEGIN\n    SELECT COUNT(*)\n      INTO match_count\n      FROM employee\n      WHERE employee_no = :new.employee_no\n        AND position IN (3,4,5,6);\n    IF match_count = 0 THEN\n      raise_application_error( -20000, 'Employee # for order must be for a Sales employee' );\n    END IF;\n  END check_order_employee_no;\n","1924":"SELECT MAX(RIGHT('0000000' + REVERSE(LEFT(REVERSE(YourTextColumn), PATINDEX('%[a-z]%', REVERSE(YourTextColumn)) - 1)), 7))\nFROM YourTable\n","1925":"Declare @test as datetime\nset @test = '2014-09-09 9:00:00'\nSELECT DATEADD(second, DATEDIFF(second, GETDATE(), GETUTCDATE()), @test)\n","1926":"DECLARE\n  max_length INTEGER; --Declare a variable to store max length in.\n  v_owner VARCHAR2(255) :='exampleSchema';     -- Type the owner of the tables you are looking at\n\nBEGIN\n  -- loop through column names in all_tab_columns for a given table\n  FOR t IN (SELECT table_name, column_name FROM all_tab_cols where owner=v_owner and table_name = 'exampleTableName') LOOP\n\n    EXECUTE IMMEDIATE \n    -- store maximum length of each looped column in max_length variable\n    'select nvl(max(length('||t.column_name||')),0) FROM '||t.table_name\n    INTO max_length;\n\n    IF max_length >= 0 THEN -- this isn't really necessary but just to ignore empty columns. nvl might work as well\n      dbms_output.put_line( t.table_name ||' '||t.column_name||' '||max_length ); --print the tableName, columnName and max length\n    END IF;\n\n  END LOOP;\nEND;\n","1927":"WITH\nMaxSalarySum AS (\n  SELECT\n    deptNo\n    , twelveMonthsPlusYear\n    , SUM(salValue) salValueSum\n  FROM (\n    select deptno, 12*month+year twelveMonthsPlusYear, salvalue \n    from career join salary on career.empno = salary.empno \n    and startdate<=to_date('01-'||to_CHAR(month)||'-'||to_CHAR(year),'dd-mm-yyyy') \n    and (\n          enddate>=to_date('01-'||to_CHAR(month)||'-'||to_CHAR(year),'dd-mm-yyyy') \n          or enddate is null\n        )\n  )\n  GROUP BY deptNo, twelveMonthsPlusYear\n)\nSELECT\n  deptNo\nFROM MaxSalarySum\nWHERE salValueSum = (SELECT MAX(salValueSum) FROM MaxSalarySum)\n;\n","1928":"SELECT MAX(Date), SUM(Value)\nFROM MyTable\nWHERE Date BETWEEN '2014-01-01' AND '2014-08-15';\n","1929":"SELECT MAX(a) + CASE WHEN (5 IN (SELECT a FROM t)) THEN 1 ELSE 2 END AS max_plus_something FROM t\n","1930":"declare @sqlstring varchar(1000)\n\nset @sqlstring = 'SELECT * FROM Order WHERE 1=1 '\n\nif @StartTime <> null OR @StartTime <> '' \nBEGIN \nset @sqlstring = @sqlstring + 'AND CreatedOn > CAST(@StartTime as datetime) ' \nEND \n\nif @EndTime <> null OR @EndTime <> '' \nBEGIN \nset @sqlstring = @sqlstring + 'AND CreatedOn < CAST(@EndTime as datetime) ' \nEND \n\nif @OrderStatusID <> null OR @OrderStatusID <> '' \nBEGIN \nset @sqlstring = @sqlstring + 'AND OrderStatusID = @OrderStatusID ' \nEND \n\nif @CustomerEmail <> null OR @CustomerEmail <> '' \nBEGIN \nset @sqlstring = @sqlstring + 'AND CustomerEmail > @CustomerEmail ' \nEND \n\nprint @sqlstring\nExec(@sqlstring)\n","1931":"SQL> SELECT root || ',' || stragg(DISTINCT column2)\n  2    FROM (SELECT CONNECT_BY_ROOT(column1) root, t.*\n  3             FROM t\n  4           CONNECT BY PRIOR column2 = column1\n  5            START WITH column1 IN (SELECT column1\n  6                                     FROM t\n  7                                    WHERE column1 NOT IN (SELECT column2\n  8                                                            FROM t))) v\n  9   GROUP BY root;\n\nROOT||','||STRAGG(DISTINCTCOLU\n-----------------------------------------\nvalue1,value2,value3,value4,value7\nvalue8,value9\n","1932":"SELECT         memno.1 EDTCDE(L), name.2, 'SYS1' NAME(SYS), \"&&startdate\" NAME(StartDate), CURRENT DATE NAME(CurDate)\nFROM           library1\/table1, library1\/table2\nJOIN               SSAN.1=SSAN.2\nWHERE          DATE(TIMESTAMP)>StartDate AND RSCODE='STP'\nUNION \nSELECT         memno.1 EDTCDE(L), name.2, 'SYS2' NAME(SYS), \"&&startdate\" NAME(StartDate), CURRENT DATE NAME(CurDate)\nFROM           library2\/table1, library2\/table1\nJOIN               SSAN.1=SSAN.2\nWHERE          DATE(TIMESTAMP)>StartDate AND RSCODE='STP'\nORDER BY   sys ASC, memno ASC\n","1933":"SELECT\nTO_CHAR(TO_DATE(TABLE.timestamp,'YYYYMMDDHH24MISS'), 'mm\/dd\/yyyy hh24:mi')\nFrom XXXX.TABLE\nWHERE ROWNUM < 10;\n","1934":"db2 VALUES CURRENT TIMEZONE\n\ndb2 \"select CURRENT TIMEZONE from sysibm.sysdummy1\"\n","1935":"SQL> ed\nWrote file afiedt.buf\n\n  1  with x as (\n  2    select 'Steve Jobs' str from dual union all\n  3    select 'Stack Overflow Question' from dual\n  4  )\n  5  select substr( str, instr( str, ' ', -1 ) + 1 ) last_word\n  6*   from x\nSQL> \/\n\nLAST_WORD\n----------------------------------------------------------------------  \nJobs\nQuestion\n","1936":"SELECT  PRVDR_NUM,SUM(ITM_VAL) as SumReimb FROM hha2011num\nINNER JOIN hha2011rpt ON hha2011num.RPT_REC_NUM = hha2011rpt.RPT_REC_NUM \nWHERE WKSHT_CD='D000000' AND LINE_NUM = '01201' AND CLMN_NUM in('0100','0200')\nGROUP BY PRVDR_NUM ORDER BY PRVDR_NUM\n","1937":"ALTER TABLE tableA ADD version AS CHECKSUM(CityName)  PERSISTED\n","1938":"UPDATE     Car\nSET        brand = 'Renault'\nFROM       Car c\nINNER JOIN Driver d ON c.driver = d.id\nWHERE      d.Name = 'Marc'\n","1939":"SELECT *\n  FROM T_USER u\n WHERE NOT EXISTS (SELECT NULL\n                     FROM T_MESSAGE\n                    WHERE user_id = u.user_id\n                      AND msgType = 1\n                      AND answered = 0)\n","1940":"SELECT DISTINCT \n     Renter.RenterID, \n     Property.PropertyId, \n     Property.PropertyName, \n     Type.TYPEName  \nFROM Rental\n    inner join Property on Rental.PropertyID = Property.PropertyID\n    inner join Type on Property.TypeID = Type.TypeID\n    inner join Renter on Rental.RenterID = Renter.RenterID\nwhere Type.TypeName = 'villa'\nand Renter.RenterFirstName = 'al'\nand Renter.RenterLastName = 'smith'\n","1941":"SELECT state_name,district_name from TableName WHERE id='jk-01' \/\/you can have your specific id here\n","1942":"SELECT table_1.id FROM table_1 LEFT JOIN table_2 ON table_2.id = table_1.id WHERE table_2.id IS NULL\n","1943":"Insert into taggings (id,tag_id,taggable_id,taggable_type,created_at) values (...your values...)\n","1944":"SELECT `UserName`, \n        `Message`,\n        SUM(CASE WHEN `status` = 'SendingOK' THEN 1 ELSE 0 END) OkStat,\n        SUM(CASE WHEN `status` = 'SendingFailed' THEN 1 ELSE 0 END) FailedStat\nFROM    db1.SmsBroadcast as A\n        JOIN db2.sentitems as B \n            ON A.MessageSMS1 = B.TextDecoded\nWHERE   A.Username = 'jamesbond'\nGROUP BY A.Username, A.Message\n","1945":"declare @start_date datetime, @end_Date datetime\nselect @start_date='2012-05-29 08:30:00.000', @end_date='2012-05-29 15:00:00.000'\nselect datediff(minute,@start_date ,@end_Date)\/60.0\n","1946":"select p.id, p.name, \n  t.id as toyid, t.name as toyname\nfrom person p\n  inner join toys t on p.id = t.person_id\n  inner join (\n    select person_id\n    from toys \n    group by person_id\n    having sum(name = 'hat') > 0 and\n      sum(name = 'doll') > 0\n    ) t2 on p.id = t2.person_id\n","1947":"select\n    user_id,\n    days,\n    date\nfrom\n    (\n    select\n        user_id,\n        days,\n        date,\n        @sum_days := @sum_days + days as sum_days\n    from\n        myTable\n    order by\n        date desc\n    ) t\n    cross join (select @sum_days := 0) const -- resetting your @sum_days var.\nwhere\n    sum_days < X -- fill a number in for X here.\n","1948":"SELECT *\nFROM `category`   AS c\nINNER JOIN images AS i ON i.category = c.id\nINNER JOIN\n(\n    SELECT  category, MAX(ID) AS MAXId\n    FROM `images` \n    GROUP BY `category`\n)AS a  ON i.category = a.category\n      AND i.ID       = a.MaxID\nWHERE c.`parent` = '1';\n","1949":"select xp.productid,\n    xp.product,\n    xc.classid,\n    xco.optionid,\n    xco.option_name,\n    count(xi.optionid) as cnt\nfrom xcart_products xp\ninner join xcart_classes xc on xp.productid = xc.productid\n    and xc.class = 'Color'\ninner join xcart_class_options xco on xc.classid = xco.classid\nleft outer join xcart_images_D xi on xi.optionid = xco.optionid\ngroup by xp.product\norder by xp.product desc\n","1950":"SELECT * FROM Messages main LEFT JOIN Messages earlier\n    ON earlier.time < main.time AND \n        (\n            earlier.To_User = main.To_User AND earlier.From_User = main.From_User OR  \n            earlier.To_User = main.From_User AND earlier.From_User = main.To_User\n        )\nWHERE (main.To_User = x OR main.From_User = x) AND earlier.id IS NULL\nORDER BY main.Time DESC\n","1951":"function h($s) { return htmlspecialchars($s); }\n$conn = mysqli_connect(\u2026);\n$result = mysqli_query($conn, 'select * from fixtures order by date');\n\n$lastdate = NULL;\nwhile(($row = mysqli_fetch_assoc($result)) !== FALSE) {\n  if($lastdate != $row['date']) {\n    \/\/ output date divider\/header\n    echo '<h1>',h($row['date']),'<\/h1>';\n    $lastdate = $row['date'];\n  }\n\n  echo h($row['hometeam']), ', ', h($row['awayteam']), ', ', h($row['time']);\n}\n","1952":"SELECT   *\nFROM     wp_booking_transaction\nWHERE    \/* Conditions that appeared in both original queries *\/\n         DATE(launched) >= \"2013-10-10\" \nAND      DATE(launched) <= \"2013-11-10\"\nAND      type = 2 \nAND      student_id = 81569\nAND      \/* Conditions that are different between the two queries *\/\n         ((action = 1 AND status = 1) OR (action IN(20, 21) AND status = 0))\nORDER BY launched DESC\n","1953":"CREATE PROCEDURE p_GetFromLog(@LogId int)\nAS\nBEGIN\n    DECLARE \n    \t@exe nvarchar(1000)\n    \t,@RefID int\n    \t,@RefTbl varchar(200)\n\n    SET @RefTbl = SELECT [ReferenceLocation] FROM dbo.[Log] WHERE [LogID] = @LogId\n    SET @RefID = SELECT [ReferenceID] FROM dbo.[Log] WHERE [LogID] = @LogId\n\n    SET @exe= N'select * from database.schema.table_here WHERE [ID] = refrence_id_here'\n    SET @exe = replace(@exe, 'database.schema.table_here', @RefTbl)\n    SET @exe = replace(@exe, 'refrence_id_here', cast(@RefID AS varchar(12)))\n    EXEC sp_executesql @exe\nEND\n","1954":" DEFAULT 0\n","1955":"SELECT CONVERT(VARCHAR(15),CAST(sa.StartDateTime AS TIME),100\n","1956":"SELECT\n  Year,\n  CASE\n    WHEN Item IN ('A', 'B', 'C') THEN 'Group1'\n    WHEN Item IN ('D', 'E', 'F') THEN 'Group2'\n    ELSE 'Others' END AS Item,\n  SUM(Cost1),\n  SUM(Cost2)\nFROM myTable\nGROUP BY\n  Year,\n  CASE\n    WHEN Item IN ('A', 'B', 'C') THEN 'Group1'\n    WHEN Item IN ('D', 'E', 'F') THEN 'Group2'\n    ELSE 'Others' END;\n","1957":"SELECT REGEXP_SUBSTR('Outstanding Trade Ticket Report_08 Apr 14.xlsx', '\\_(.*)\\.', \n1, 1, NULL, 1) from dual\n","1958":"select\n  Col_2,\n  count(*)\nfrom \n  your_table\ngroup by\n  Col_2\nhaving\n  count(*) > 1\n","1959":"SELECT \n  p.id_user,\n  ap.post AS last_post,\n  COUNT(*) as count\nFROM \n  posts p\n  JOIN posts ap on (\n    p.id_user = ap.id_user\n    AND ap.post_id = (\n      SELECT MAX(post_id) FROM posts ip WHERE p.id_user = ip.id_user\n    )\nGROUP BY \n  p.id_user,\n  ap.post\nORDER BY \n  COUNT(*) DESC\n","1960":" SYS.DBMS_LOGMNR_D.BUILD(options => SYS.DBMS_LOGMNR_D.STORE_IN_REDO_LOGS);\n                                                      ^^^^^^^^^^^^^^^^^^\n","1961":"SELECT     addon, status, SUM(amt1), SUM(amt2), company\nFROM         test\nWHERE     (addon = 'theft cover' OR\n                  addon = 'key loss') AND (status = 'yes')\nGROUP BY company, addon\n","1962":"SELECT `idMedication`,`idPatient`, CONCAT('(', `Drug` ,')') AS Drug from medication \n","1963":"select *\nfrom qsys2.systables\nwhere table_schema IN ('LAWMOD9T', 'LIBDDS')\n","1964":"SQL> show parameter spfile;\n\nNAME    TYPE    VALUE\n----    ----   ----------------------------------------------------------\nspfile  string \/root\/apps\/oracle\/10g\/dbs\/spfile<DB_NAME>.ora\n","1965":"select a.x,\nselect(mean(b.y) where b.x<a.x from data2 b) as m_y\nfrom data1 a\n","1966":"CREATE TRIGGER ...\nBEFORE UPDATE\n...\nDECLARE\n  l_exists number(10);\n  ...\nBEGIN\n  ...\n  WHEN UPDATING ('SFBETRM_ESTS_CODE') THEN\n    SELECT COUNT(*)\n      INTO l_exists\n      FROM DUAL\n     WHERE EXISTS (SELECT null FROM SFBETRM_ESTS_CODE WHERE code = :new.SFBETRM_ESTS_CODE)\n    ;\n    IF l_exists = 1\n    THEN\n      ... -- perform the update operation\n    ELSE\n      ... -- ignore update operation\n    END IF;\n    ...\nEND;\n","1967":"where '#'+LangCodes+'#' like '%#en-us#%'\n","1968":"SELECT DISTINCT pbox.id as pbid,\ncbox.id as cbid,\nbox.upload_type,\nbox.id,\nbox.box_type,\nbox.page_name,\nbox.title,\nbox.connect,\nbox.type,\nbox.uid,\nbox.description,\nbox.image,\nbox.url,\nbox.status,\nbox.date,\nbox.time\nFROM boxes as box\nLEFT JOIN page_boxes as pbox on pbox.bid=box.id\nJOIN page_subcribers as pages on pages.page_id=pbox.page_id \nLEFT JOIN category_boxes as cbox on cbox.bid=box.id \nLEFT JOIN subcribers as catsb on cbox.category_id=catsb.cid \nWHERE (pages.uid='\".$session_id.\"' \nor catsb.uid='\".$session_id.\"')\nand box.status='\".$approval.\"' \nand cbox.id<'\".$cbid.\"' \nand pbox.id<'\".$pbid.\"'\nORDER BY pbox.id desc,cbox.id DESC \nLIMIT 10\n","1969":"var criteria = unitOfWork.CurrentSession.CreateCriteria(typeof(PageDetails))\n               .CreateAlias(\"PageDetails\", \"pageDetails\")\n               .Add(Restrictions.Eq(\"pageDetails.PageRoom_Id\", pageRoom.PageRoom_Id))\n               .AddOrder(Order.Desc(\"SentDate\"))\n               .AddOrder(Order.Desc(\"Id\"));\n","1970":"<?php\n\ninclude(\"path\/to\/cake\/config\/database.php\");\n$db = new DATABASE_CONFIG;\n\necho $db->default['login'];\necho $db->default['password'];\necho $db->default['database'];\n\n?>\n","1971":"select\n  cast(left(r, charindex('%', r) - 1) AS float) as minVal,\n  cast(replace(right(r, charindex('-', r) - 1), '%', '') as float) AS maxVal\nfrom ( select '22.45% - 42.32%' as r ) as tableStub\n","1972":"where Info like '%foo%foo%'\n","1973":"SELECT *\nFROM YourTable T\nWHERE CustId IN (SELECT CustId\n                 FROM YourTable\n                 GROUP BY CustId\n                 HAVING MIN(Location) <> MAX(Location))\n","1974":"SELECT\n    Animal,\n    SUM(CASE WHEN flg = 'A' THEN V1 ELSE 0 END) AS A_V1,\n    SUM(CASE WHEN flg = 'A' THEN V2 ELSE 0 END) AS A_V2,\n    SUM(CASE WHEN flg = 'B' THEN V1 ELSE 0 END) AS B_V1,\n    SUM(CASE WHEN flg = 'B' THEN V2 ELSE 0 END) AS B_V2\nFROM\n    MyTab\nGROUP BY\n    Animal\n","1975":"select [Order qty] from [Client sales]\n","1976":"SELECT\n    vf.Value AS Updated,\n    item.ID AS ItemId,\n    item.Name AS ItemName\nFROM\n    VersionedFields vf \n    JOIN Items item ON item.ID = vf.ItemId\nWHERE\n    vf.FieldId = 'D9CF14B1-FA16-4BA6-9288-E8A174D4D522' -- id of the __updated field\n    -- vf.FieldId = '25BED78C-4957-4165-998A-CA1B52F67497' -- id of the __created field\n    AND vf.Value > '20151027'\n","1977":"SELECT distinct\n c1.companyName,\n STUFF((SELECT ', '+ cn.name  \n        from WMCCMCategories cn  \n        INNER JOIN CategorySets uc \n        ON uc.categoryId = cn.categoryID \n        INNER JOIN KeyProcesses u \n        ON u.categorySetId = uc.setId  \n        INNER JOIN Companies c \n        ON c.companyId = u.companyId        \n        WHERE c.companyName = c1.companyName \n        ORDER BY cn.name FOR XML PATH('')), 1, 1, '') AS listStr \nFROM Companies c1\nGroup by c1.companyName\n","1978":"SELECT *\nFROM myTable\nWHERE ( YEAR(myfield) = '2009')\n  AND ( MONTH(myfield) = '1')\n","1979":"CREATE OR REPLACE TYPE NUMBER_TABLE_TYPE AS TABLE OF NUMBER;\n\nDECLARE\n\n    updatedEmp NUMBER_TABLE_TYPE;\n    sqlstr VARCHAR2(1000);\n    tableName VARCHAR2(30) := 'EMPLOYEE';\n    deptId NUMBER := 12;\n\nBEGIN\n\n    sqlstr := 'UPDATE '||tableName||' SET SALARY = SALARY * 2 WHERE DEPT_ID = :deptId '||\n              'RETURNING EMP_ID  INTO :res'; \n\nEXECUTE IMMEDIATE sqlstr \n      USING deptId RETURNING BULK COLLECT INTO updatedEmp ;\n\nEND;\n","1980":"SET ROWCOUNT 1\nSELECT %s FROM %s\n","1981":"SELECT ID, things = STUFF(\n(\n  SELECT ',' + t2.thing \n     FROM Table2 AS t2\n    INNER JOIN Table1 AS ti\n    ON ',' + ti.ids + ',' LIKE '%,' + CONVERT(VARCHAR(12), t2.id) + ',%'\n    WHERE ti.ID = tout.ID\n    FOR XML PATH, TYPE\n).value('.[1]', 'nvarchar(max)'), 1, 1, '')\nFROM Table1 AS tout\nORDER BY ID\n","1982":"UPDATE  board a\n        LEFT JOIN pins b\n            ON a.id = b.board_ID\nSET     a.hide = 1\nWHERE   b.board_ID IS NULL\n","1983":"DELETE t1\nFROM mytable t1\nJOIN (SELECT Title, MAX(Created_at) AS max_date\n      FROM mytable\n      GROUP BY Title) t2\nON t1.Title = t2.Title AND t1.Created_at < t2.max_date   \n","1984":"update table1 set \"date\" = to_date(date_txt, 'MM\/DD\/YYYY HH:MI:ss AM')\n","1985":"SELECT DISTINCT\n   r.id,\n   r.name\nFROM\n   resource r\nWHERE\n   NOT EXISTS(\n      SELECT\n         *\n      FROM\n         resource_role_join rrj\n         LEFT OUTER JOIN\n            user_role_join urj\n         ON\n            urj.role_id = rrj.role_id AND\n            urj.user_id = :USER_ID\n      WHERE\n         r.id = rrj.resource_id AND\n         urj.role_id IS NULL\n   )\n;\n","1986":"WITH archive AS\n(\n    SELECT CASE WHEN EXISTS(SELECT 1 FROM dbo.tbl_Department d\n                            WHERE d.DepartmentID = e.DepartmentID)\n           THEN 'Department Found' \n           ELSE 'Department Not Found' END AS DepartmentStatus\n    FROM   dbo.tbl_Employee WITH (NOLOCK) e\n)\nSELECT DepartmentStatus, Count(*) As Cnt \nFROM archive\nGROUP BY DepartmentStatus\n","1987":"cd \/opt\/db\nDATESTRING=$(date \"+%Y-%m-%d 00:00:00\" -d \"now -90 day\")\nfor DBFILE in *.db\ndo\n  echo \"delete from tbl_outbox where time<='$DATESTRING'; vacuum;\" | sqlite3 $DBFILE\ndone\n","1988":"select id from table2 where feature = 'Car'\nintersect \nselect id from table2 where feature = 'Moto'\n","1989":"UPDATE DOT_WORKS \nSET START_DATE = case when END_DATE IS NULL then :StartDate else START_DATE end,\n    WORKS_TYPE = case when WORKS_GROUP = :WorksGroup then :WorksType else WORKS_TYPE end,\n    WORKS_CONNECTION = case when WORKS_PLACE = :WorksPlace then :WorksConn else WORKS_CONNECTION end\nWHERE ID = :WorksId \nand \n(\n  END_DATE IS NULL OR\n  WORKS_GROUP = :WorksGroup OR\n  WORKS_PLACE = :WorksPlace\n)\n","1990":"SELECT t1.v\nFROM (VALUES (1), (2), (3), (4), (5)) t1(v)\nLEFT JOIN mytable t2 ON t1.v = t2.id\nWHERE t2.id IS NULL\n","1991":"LOAD DATA LOCAL INFILE 'file.csv' INTO TABLE my_table\nFIELDS TERMINATED BY ','\nENCLOSED BY '\"'\nLINES TERMINATED BY '\\n'\n(name, address, @var1)\nset dateOfBirth = STR_TO_DATE(@var1, '%d-%b-%y')\n","1992":"--Cursor for iterating\nDECLARE @tableCursor       CURSOR\nDECLARE @TABLE_NAME        NVARCHAR(255)\nDECLARE @COLUM_NAME        NVARCHAR(255)\nDECLARE @ID_COLUM          NVARCHAR(255)\nDECLARE @CODELANGUE_COLUMN  NVARCHAR(255)\n\nSET @tableCursor = CURSOR FOR SELECT TABLE_NAME, COLUM_NAME, ID_COLUMN, CODELANGUE_COLUMN FROM [tableData] -- Substitute with the name of your table as given in your question (which you didn't specify)\n\nOPEN @tableCursor\nFETCH NEXT FROM @tableCursor INTO @TABLE_NAME, @COLUM_NAME, @ID_COLUMN, @CODELANGUE_COLUMN\nWHILE (@@fetch_status = 0)\nBEGIN\n   --dynamic sql\n   DECLARE @sql NVARCHAR(max)\n\n   --Your logic here...\n   SET @sql = 'SELECT ' + @COLUM_NAME + ', ' + @ID_COLUM + ' FROM ' + @TABLE_NAME + ' WHERE ' + @CODELANGUE_COLUMN + ' = 1'\n   EXEC dbo.sp_executesql @sql\n\nFETCH NEXT FROM @tableCursor INTO @TABLE_NAME, @COLUM_NAME, @ID_COLUMN, @CODELANGUE_COLUMN\nEND\n\nCLOSE @tableCursor\nDEALLOCATE @tableCursor\n","1993":"select * from MyDatabase.dbo.MyTable\n","1994":"select id from foo\ninner join bar b1 on b1.fooId=foo.id and b1.baz=94\nleft outer join bar b2 on b2.fooId=foo.id and b2.baz=100\nwhere b2.fooId is null\n","1995":"var query = from a in context.TB_UTILIDADE_PUBLIC_UTP\n            join b in context.TB_UTILIDADE_PUBLIC_SECTOR_UPS \n              on a.UPS_ID equals b.UPS_ID\n            join c in context.TB_UTILIDADE_PUBLIC_SUBSECTOR_USS \n              on new { a.USS_ID, a.UPS_ID } equals new { c.USS_ID, c.UPS_ID }\n            select new\n            {\n              a.UTP_NAME, \n              b.UPS_NAME, \n              c.USS_NAME\n            };\n","1996":"SELECT DATE(c.date_created) AS `date`\n       ,COUNT(DISTINCT c.customer_id) AS registered_customers_who_bought\nFROM customer AS c\nJOIN purchase AS p\n  ON c.customer_id = p.customer_id\n    AND DATE(c.date_created) = DATE(p.date_modified)\nWHERE (c.`date_created` >= '2011\/09\/01' and c.`date_created` < '2014\/05\/14')\nGROUP BY DATE(c.date_created)\n","1997":"BEGIN\n   FOR rs in (SELECT TABLESPACE_NAME \n                FROM DBA_DATA_FILES WHERE FILE_NAME LIKE '\/vol1\/u06%')  LOOP\n      BEGIN\n         EXECUTE IMMEDIATE 'DROP TABLESPACE ' || rs.TABLESPACE_NAME || ' INCLUDING CONTENTS AND DATAFILES CASCADE CONSTRAINTS';\n      END;\n   END LOOP;\nEND;\n","1998":"CREATE TABLE table1 (\n  column1 VARCHAR(255) DEFAULT NULL\n);\n\nCREATE TABLE messages (\n  id INT(11) NOT NULL AUTO_INCREMENT,\n  message VARCHAR(255) DEFAULT NULL,\n  time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (id)\n);\n\nDELIMITER $$\n\nCREATE TRIGGER trigger1\n    AFTER INSERT\n    ON table1\n    FOR EACH ROW\nBEGIN\n  INSERT INTO messages(message) VALUES ('new action');\nEND\n$$\n\nDELIMITER ;\n","1999":"select\n    P.ID\nfrom dbo.Partners as P\n    left outer join dbo.vw_Partners_Codes2 as PC with (noexpand) on PC.Partner_ID = P.ID;\n","2000":"SELECT field, ca2.c2, ca3.c3\nFROM table t\ncross apply(SELECT COUNT(*) c2\n            FROM table2 t2\n            WHERE t2.field = t.field)ca2\ncross apply(SELECT COUNT(*) c3\n            FROM table3 t3\n            WHERE t3.field = t.field)ca3\nwhere ca2.c2 <> ca1.c1\n","2001":" SELECT ti.FIRST_NAME \"Technician\",wo.WORKORDERID \"Request ID\",aau.FIRST_NAME \"Requester\",ti.FIRST_NAME \"Technician\",\n    wotodesc.FULLDESCRIPTION \"Description\",DATEDIFF(day, DATEADD(s, wo.CREATEDTIME\/1000, '01-01-1970 00:00:00'), getDate()) \"Created Time\",\n    std.STATUSNAME \"Request Status\" \n    FROM WorkOrder wo \n    LEFT JOIN SDUser sdu \n    ON wo.REQUESTERID=sdu.USERID \n    LEFT JOIN AaaUser aau \n    ON sdu.USERID=aau.USER_ID \n    LEFT JOIN WorkOrderToDescription wotodesc \n    ON wo.WORKORDERID=wotodesc.WORKORDERID \n    LEFT JOIN WorkOrderStates wos \n    ON wo.WORKORDERID=wos.WORKORDERID\n    LEFT JOIN SDUser td \n    ON wos.OWNERID=td.USERID \n    LEFT JOIN AaaUser ti \n    ON td.USERID=ti.USER_ID \n    LEFT JOIN StatusDefinition std \n    ON wos.STATUSID=std.STATUSID\n    WHERE  ((std.STATUSNAME != N'Closed' COLLATE SQL_Latin1_General_CP1_CI_AS) OR (std.STATUSNAME IS NULL)) AND (DATEDIFF(day, DATEADD(s, wo.CREATEDTIME\/1000, '01-01-1970 00:00:00'), getDate()) >= 7)\n    order by ti.FIRST_NAME\n","2002":"INSERT INTO receiving_tbl(id, name, color) \nSELECT id, name\n     , CASE color_id WHEN 1 THEN 'Green'\n                     WHEN 2 THEN 'Red'\n                     ...\n                     ELSE NULL\n       END \nFROM parent_tbl\n","2003":"If CurrentRecord = Recordset.RecordCount And CurrentRecord <> 1 Then\n    DoCmd.GoToRecord , \"\", acFirst\nElse\n    DoCmd.GoToRecord , \"\", acNext\nEnd If    \n","2004":"select Steuersatz% \nfrom USt\nwhere Steuersatz = 1\nand Datum = (select max(Datum)\n             from USt\n             where Steuersatz = 1\n               and Datum <= your_date)  \n","2005":"SELECT\n    *\nFROM\n    node_weather\nJOIN\n(\n    SELECT\n        tblInner.P_id,\n        MAX(tblInner.time) AS maxTime\n    FROM\n        node_weather as tblInner\n    GROUP BY\n        tblInner.P_id\n) AS tblMax \n    ON tblMax.maxTime = node_weather.time \n    AND tblMax.P_id = node_weather.P_id\n","2006":"Private Sub SearchButton_Click(sender As Object, e As EventArgs) Handles SearchButton.Click\n    Dim connection = New SqlConnection(\"Your Connection string here\")\n    Dim command = New SqlCommand(\"SELECT StringColumn, BooleanColumn FROM YourTable WHERE KeyColumn=@KeyColumn\", connection)\n    command.Parameters.Add(New SqlParameter(\"@KeyColumn\", Int32.Parse(KeyColumnTextBox.Text)))\n    connection.Open()\n    Dim reader = command.ExecuteReader()\n    While reader.Read()\n        StringColumnTextBox.Text = reader.GetString(0)\n        BooleanColumnCheckBox.Checked = reader.GetBoolean(1)\n    End While\nEnd Sub\n","2007":"declare @idToDelete varchar(max) = '10'\n\ndeclare @sql nvarchar(max) = ''\n\nset @sql =\n(\nselect 'delete ' + object_name(c.object_id) + ' where id = ' + @idToDelete +  char(10)\nfrom sys.columns c \n    join sys.objects o on o.object_id = c.object_id\n    join sys.schemas s on s.schema_id = o.schema_id\n        and s.name = 'dbo'\nwhere c.name = 'id'     \nfor xml path('')\n)\n\nprint @sql\n\nexec sp_executesql @sql\n","2008":"select k.*\nfrom (select k.*,\n             row_number() over (partition by cla_id order by final_score desc) as seqnum\n      from klas\n     ) k\nwhere seqnum <= 10;\n","2009":"having amount <> 0\n","2010":"select emp_id,name,\n(select name from employee_details a where a.emp_id = b.manager_id) as manager_name  \nfrom employee_details b\n","2011":"where a.c1 in\n (\n   SELECT CAST(token AS INT)\n   FROM TABLE (STRTOK_SPLIT_TO_TABLE(1, '1,2,3,4,5,6,7,8,9,5000', ',')\n        RETURNS (outkey INTEGER,\n                 tokennum INTEGER,\n                 token VARCHAR(10) CHARACTER SET UNICODE)\n              ) AS dt \n )\n","2012":"SELECT\n    CASE WHEN\n        (SELECT TOP 1 x FROM y) IS NULL\n    THEN 'No'\n    ELSE 'Yes'\n    END AS BooleanValue\n","2013":"SELECT Value1,\n       CASE WHEN Value2 = 50 THEN 0 ELSE Value2 END Value2,\n       .....\n","2014":"... AND EXTRACT(YEAR FROM \"ExpiryDate\") = 2012 ...\n","2015":"SELECT service_name,\n       GROUP_CONCAT(sensor_name ORDER BY sensor_name) AS sensors\nFROM sensor_common_service\nGROUP BY service_name\nHAVING sensors='humidity,temperature'\n","2016":"select t.* from TeamRankings t\ninner join (select team_id, year, min(source_id) as minSource\n            from TeamRankings group by team_id, year) f\non t.team_id = f.team_id AND t.year = f.year AND t.source_id = f.minSource\n","2017":"select\n    f1.data, f2.data, f3. data\n\nfrom (select data, ROW_NUMBER() over (order by data) as row_num from your_table) f1\n\nleft join (select data, ROW_NUMBER() over (order by data) as row_num from your_table) f2 on f2.row_num = f1.row_num + (select CEILING(COUNT(1) \/ 3) + 1 from your_table)\nleft join (select data, ROW_NUMBER() over (order by data) as row_num from your_table) f3 on f3.row_num = f1.row_num + (select CEILING(COUNT(1) \/ 3) + 1 from your_table) * 2\n\nwhere f1.row_num between 1 and FLOOR((select COUNT(1) from your_table) \/ 3) + 1\n","2018":"SELECT row_number() over (ORDER BY something) as num_by_something, *\nFROM table\nORDER BY something;\n","2019":"-- find t1 where it has 2 and 7 in t2\n\n    select t1.*\n    from table1 t1\n    join table2 ov2 on t1.id=ov2.masterid and ov2.optionValue=2\n    join table2 ov7 on t1.id=ov7.masterid and ov7.optionValue=7\n\n-- find t1 where it has 2 and 7 in t2, and no others in t2\n\nselect t1.*, ovx.id\n    from table1 t1\n      join table2 ov2 on t1.id=ov2.masterid and ov2.optionValue=2\n      join table2 ov7 on t1.id=ov7.masterid and ov7.optionValue=7\n      LEFT OUTER JOIN table2 ovx on t1.id=ovx.masterid and ovx.optionValue not in (2,7)\n    WHERE ovx.id is null\n","2020":"\/\/ Join table B on table A through a foreign key\n$sql = 'select a.id, a.x, b.y\n    from a\n    left join b on b.a_id=a.id\n    order by a.id';\n\n\/\/ Execute query\n$result = $this->db->query($sql)->result_array();\n\n\/\/ Initialise desired result\n$shaped_result = array();\n\n\/\/ Loop through the SQL result creating the data in your desired shape\nforeach ($result as $row)\n{\n    \/\/ The primary key of A\n    $id = $row['id'];\n\n    \/\/ Add a new result row for A if we have not come across this key before\n    if (!array_key_exists($id, $shaped_result))\n    {\n        $shaped_result[$id] = array('id' => $id, 'x' => $row['x'], 'b_items' => array());\n    }\n\n    if ($row['y'] != null)\n    {\n        \/\/ Push B item onto sub array\n        $shaped_result[$id]['b_items'][] = $row['y'];\n    }\n}\n","2021":"**Customer table**\nCustomerId\nLastName\nFirstName\n...\n\n**CustomerAttributes table**\nCustomerId\nAttributeName\nAttributeValue\n","2022":"if coalesce(@var, 0) <> 1\n    PRINT 'not 1'\nELSE \n    PRINT 'equals 1'\n","2023":"SELECT Path FROM PathTable WHERE Path NOT LIKE '%\/%'\n","2024":"IF ((SELECT COUNT(*) FROM table1 WHERE project = 1) > 0) \n    SELECT product, price FROM table1 WHERE project = 1\nELSE IF ((SELECT COUNT(*) FROM table1 WHERE project = 2) > 0) \n    SELECT product, price FROM table1 WHERE project = 2\nELSE IF ((SELECT COUNT(*) FROM table1 WHERE project = 3) > 0)\n    SELECT product, price FROM table1 WHERE project = 3\n","2025":"SELECT\n   e.Name,\n   (SELECT\n      SUM(TravelDurationDays)\n   FROM\n      TravelType1\n   WHERE\n      EmployeeID = e.EmployeeID\n   ) TravelType1Days,\n   (SELECT\n      COUNT(*)\n   FROM\n      TravelType2\n   WHERE\n      EmployeeID = e.EmployeeID AND\n      Travel = 'yes'\n   ) TravelType2Days\nFROM\n   Employees e\n","2026":"ORDER BY RIGHT(CONVERT(CHAR(4), InvoiceDate, 100) + CONVERT(CHAR(4), InvoiceDate, 120),4)\n         MONTH(InvoiceDate)\n","2027":"DECLARE @InputString VARCHAR(100);\nSET @InputString = 'hello i am here in this bright room';\n\nSELECT *\n    FROM YourTable\n    WHERE CHARINDEX(YourColumn, @InputString) <> 0;\n","2028":"DECLARE @sqlstmt VARCHAR(MAX)\nSET @sqlstmt = 'SELECT vin FROM cars WHERE 1=1'\nIF @interior<>'No Preference'\n   SET @sqlstmt = @sqlstmt + ' AND interior = '''+@interior+'''\nIF @color<>'No Preference'\n   SET @sqlstmt = @sqlstmt + ' AND color = '''+@color+'''\n...\nexec(@sqlstmt)\n","2029":"alter table category modify column catid int(11) NOT NULL;\n","2030":"SELECT g.id group_id, g.name group_name,\n       a.last_written, a.total_articles, a.total_done,\n       c.last_comment\n  FROM groups g LEFT JOIN \n(\n    SELECT `group`, \n            MAX(CASE WHEN done = 1 THEN written END) last_written,\n            COUNT(*) total_articles,\n            SUM(done) total_done\n      FROM articles\n     WHERE active = 1\n       AND user_id = 1\n     GROUP BY `group`\n) a \n    ON g.id = a.`group` LEFT JOIN \n(\n    SELECT a.`group`,\n           MAX(date_added) last_comment\n      FROM commants c JOIN articles a\n        ON c.article_id = a.id\n     WHERE a.active = 1\n       AND a.user_id = 1\n     GROUP BY a.`group`\n) c\n    ON g.id = c.`group`\n WHERE  user_id =  1\n","2031":"SELECT  ss1.userid, ss2.userid, SUM(sales)\nFROM    session ss1\nJOIN    session ss2\nON      ss2.sessionid = ss1.sessionid\n        AND ss2.userid < ss1.userid\nJOIN    sales s\nON      s.sessionid = ss1.sessionid\nGROUP BY\n        ss1.userid, ss2.userid\n","2032":"SELECT * FROM \n (  \n SELECT deptno\n      , ename\n      , sal\n      , RANK() OVER (PARTITION BY deptno ORDER BY sal desc) rnk \n      , ROW_NUMBER() OVER (PARTITION BY deptno ORDER BY sal desc) rno \n      , MAX(hiredate) OVER (PARTITION BY deptno ORDER BY deptno) max_hire_date\n   FROM emp_test\n  WHERE deptno = 20\n ORDER BY deptno\n )\n WHERE rnk = 1\n   --AND rno = 1 -- or 2 or any other number...\n\/\n\nSQL>\n\nDEPTNO  ENAME   SAL    RNK  RNO HIREDATE    MAX_HIRE_DATE\n-----------------------------------------------------------\n 20     SCOTT   3000    1   1   1\/28\/2013   1\/28\/2013\n 20     FORD    3000    1   2   12\/3\/1981   1\/28\/2013\n","2033":"SELECT user_id, username, SUM(revenue) FROM table\nGROUP BY user_id \/* add ', username' ONLY if two different usernames with the same user_id is a possible case *\/\nORDER BY SUM(revenue) DESC\nLIMIT 0,1\n","2034":"SELECT *\nFROM \n(\n    SELECT \n        *\n    FROM \n        TableA\n    WHERE ColA = '001'\n)\nPIVOT\n(\n    MAX(ColC)\n    FOR ColB IN ('AA1','AB1','AC1')\n )\n","2035":"update table1 t1\njoin table2 t2 on t1.B = t2.B\nset t1.A = 'some value'\n","2036":"DELETE target \nFROM MnA target INNER JOIN MnA temp \n     ON (target.symbol = temp.symbol \n         AND target.direction = temp.symbol\n         AND target.start_doy = temp.start_doy\n         AND target.diff = temp.diff\n         AND target.id != temp.id \n         AND temp.avg_percent > target.avg_percent);\n","2037":"SELECT * from customers\nWHERE customer_id not in (select customer_id from order)\n","2038":"select empcode, DateValue(PunchTime),\n    sum(IIF(IsInPunch='F',PunchTime,0)) -\n    sum(IIF(IsInPunch='T',PunchTime,0))\nfrom TimeSheet\ngroup by empcode, DateValue(PunchTime)\n","2039":"CREATE TABLE Emp(EPID INT PRIMARY KEY,\n    t CHAR(2) NOT NULL, UNIQUE (EPID,t));\n\nCREATE TABLE EmpFT(EPID INT PRIMARY KEY, ... other columns\n    t CHAR(2) NOT NULL CHECK (t = 'FT'),\n    FOREIGN KEY (EPID,t) REFERENCES Emp (EPID,t));\n\nCREATE TABLE EmpPT(EPID INT PRIMARY KEY, ... other columns\n    t CHAR(2) NOT NULL CHECK (t = 'PT'),\n    FOREIGN KEY (EPID,t) REFERENCES Emp (EPID,t));\n","2040":"    public partial class LegacyDate\n    {\n      public static implicit operator DateTime?(LegacyDate value)\n      {\n          return LegacyDateConverter.ToDate(value.DbData);\n      }\n\n      public static implicit operator LegacyDate(DateTime? value)\n      {\n          return new LegacyDate { DbData = LegacyDateConverter.ToLegacyDate(value) };\n      }\n   }\n\n    internal static class LegacyDateConverter\n    {\n        public static DateTime? ToDate(int data)\n        {\n            if (data == 0) return null;\n            int year = data\/10000;\n            int month = (data%10000)\/100;\n            int day = data\/1000000;\n            DateTime date;\n\n            try\n            {\n                date = new DateTime(year, month, day);\n            }\n            catch (Exception e)\n            {\n                throw new ArgumentException(String.Format(\n                    \"Value {0} kan not be converted to DateTime\", data), e);\n            }\n            return date;\n        }\n\n        public static int ToLegacyDate(DateTime? value)\n        {\n            int dateInt = 0;\n            if (value.HasValue)\n            {\n                dateInt =\n                value.Value.Year*10000 + value.Value.Month*100 + value.Value.Day;\n            }\n            return dateInt;            \n        }\n    }\n","2041":"UPDATE `Products`\nSET `Price` = REPLACE(`Price`, '$', '')\nWHERE `Price` LIKE '%$%';\n","2042":"SELECT *\nFROM User u1 \nINNER JOIN User u2 on u2.id_company = u1.id_company\nINNER JOIN Ticket t on t.id_author = u2.id_user\nWHERE u1.Name = @SessionUser\n","2043":"SELECT * FROM table1 t1\nWHERE EXISTS (\n  SELECT null FROM Table1 t2\n  WHERE t1.\"TEACHER\" = t2.\"TEACHER\"\n    AND t1.\"SUBJECT\" = t2.\"SUBJECT\"\n    AND t1.\"ID\" <> t2.\"ID\"\n)\nORDER BY \"ID\"\n","2044":"TINYBLOB, TINYTEXT       L + 1 bytes, where L < 2^8    (255 Bytes)\nBLOB, TEXT               L + 2 bytes, where L < 2^16   (64 Kilobytes)\nMEDIUMBLOB, MEDIUMTEXT   L + 3 bytes, where L < 2^24   (16 Megabytes)\nLONGBLOB, LONGTEXT       L + 4 bytes, where L < 2^32   (4 Gigabytes)\n","2045":"SELECT\n  serialnumber,\n  state,\n  at,\n  operatorid,\n  LAG(state) OVER (PARTITION BY serialnumber ORDER BY at) AS previous\nFROM\n  voucher\nWHERE\n  serialnumber in (SELECT DISTINCT serialnumber FROM voucher WHERE at LIKE '&1')\n","2046":"SELECT stats.gds_id,\n  TRUNC(stats.stat_date) stat_date,\n  SUM(stats.A_BOOKINGS_NBR) as \"Bookings\",\n  SUM(stats.RESPONSES_LESS_1_NBR) as \"<1\",\n  SUM(stats.RESPONSES_LESS_2_NBR) AS \"<2\",\n  SUM(STATS.RESPONSES_LESS_3_NBR) AS \"<3\",\n  SUM(stats.RESPONSES_LESS_4_NBR) AS \"<4\",\n  SUM(stats.RESPONSES_LESS_5_NBR) AS \"<5\",\n  SUM(stats.RESPONSES_LESS_6_NBR + stats.RESPONSES_LESS_7_NBR + stats.RESPONSES_GREATER_7_NBR) AS \">5\",\n  SUM(stats.RESPONSES_LESS_6_NBR) AS \"<6\",\n  SUM(stats.RESPONSES_LESS_7_NBR) AS \"<7\",\n  SUM(stats.RESPONSES_GREATER_7_NBR) AS \">7\",\n  SUM(stats.RESPONSES_LESS_1_NBR + stats.RESPONSES_LESS_2_NBR + stats.RESPONSES_LESS_3_NBR + stats.RESPONSES_LESS_4_NBR + stats.RESPONSES_LESS_5_NBR + stats.RESPONSES_LESS_6_NBR + stats.RESPONSES_LESS_7_NBR + stats.RESPONSES_GREATER_7_NBR) as \"Total\"\nFROM gwydb.statistics stats\nWHERE stats.stat_date >= '01-JUN-2011'\nGROUP BY stats.gds_id, TRUNC(stats.stat_date)\n","2047":"SELECT a.cost, a.quantity, COUNT(b.id) AS count\nFROM accounts AS a LEFT JOIN accounts AS b ON b.cost = a.cost\n","2048":"ON DUPLICATE KEY UPDATE total = VALUES(total)\n","2049":"SELECT A.ID,\n       A.NAME,\n       A.STORE,\n       B.STOREADDRESS as yourAlias \/* AS is ok for column aliases ... *\/\nFROM TableALong A                  \/* ... but not for table aliases *\/\n     LEFT OUTER JOIN TableBLong  B \/* JOIN syntax *\/\n       ON (A.NAME = B.NAME and A.STORE = B.STORE)\nWHERE ...\n","2050":"SELECT delivery_name \nFROM orders \nWHERE CONCAT('a',orders_id) = CONCAT('a','985225a')\n","2051":"select my, interesting, columns\nfrom (\n    select distinct GUID, ...\n    from ...\n)\n","2052":"SELECT\n  A.[Date],\n  A.[Hour],\n  SUM(CASE WHEN (B.[SessionID] IS NULL) THEN 0 ELSE 1 END) AS [Number_of_Sessions_Per_Hour]\nFROM\n(\n    SELECT DISTINCT\n        CONVERT(DATETIME,\n            LTRIM(RTRIM(CONVERT(NVARCHAR(10), YEAR(userlog.[Date]))))\n            + '-' + RIGHT('0' + LTRIM(RTRIM(CONVERT(NVARCHAR(10), MONTH(userlog.[Date])))), 2)\n            + '-' + RIGHT('0' + LTRIM(RTRIM(CONVERT(NVARCHAR(10), DAY(userlog.[Date])))), 2)\n            , 120) AS [Date],\n        hours_table.[Hour]\n    FROM\n        userlog,\n        (\n            SELECT 1 AS [Hour] UNION ALL SELECT 3 AS [Hour] UNION ALL SELECT 4 AS [Hour] UNION ALL SELECT 5 AS [Hour] UNION ALL SELECT 6 AS [Hour]\n             UNION ALL SELECT 7 AS [Hour] UNION ALL SELECT 7 AS [Hour] UNION ALL SELECT 8 AS [Hour] UNION ALL SELECT 9 AS [Hour] UNION ALL SELECT 10 AS [Hour]\n             UNION ALL SELECT 11 AS [Hour] UNION ALL SELECT 12 AS [Hour] UNION ALL SELECT 13 AS [Hour] UNION ALL SELECT 14 AS [Hour] UNION ALL SELECT 15 AS [Hour]\n             UNION ALL SELECT 16 AS [Hour] UNION ALL SELECT 17 AS [Hour] UNION ALL SELECT 18 AS [Hour] UNION ALL SELECT 19 AS [Hour] UNION ALL SELECT 20 AS [Hour]\n             UNION ALL SELECT 21 AS [Hour] UNION ALL SELECT 22 AS [Hour] UNION ALL SELECT 23 AS [Hour] UNION ALL SELECT 24 AS [Hour] \n        ) as hours_table\n) AS A\nLEFT OUTER JOIN\n(\n    SELECT \n        userlog.SessionID,\n        MAX(CASE WHEN userlog.LogType = 'LOGON' \n                 THEN CONVERT(DATETIME,\n                        LTRIM(RTRIM(CONVERT(NVARCHAR(10), YEAR(userlog.[Date]))))\n                        + '-' + RIGHT('0' + LTRIM(RTRIM(CONVERT(NVARCHAR(10), MONTH(userlog.[Date])))), 2)\n                        + '-' + RIGHT('0' + LTRIM(RTRIM(CONVERT(NVARCHAR(10), DAY(userlog.[Date])))), 2)\n                        , 120)\n                 ELSE CONVERT(DATETIME, '1900-01-01', 120)\n            END) AS [Date_Session_START],\n        MAX(CASE WHEN userlog.LogType = 'LOGOFF' \n                 THEN CONVERT(DATETIME,\n                        LTRIM(RTRIM(CONVERT(NVARCHAR(10), YEAR(userlog.[Date]))))\n                        + '-' + RIGHT('0' + LTRIM(RTRIM(CONVERT(NVARCHAR(10), MONTH(userlog.[Date])))), 2)\n                        + '-' + RIGHT('0' + LTRIM(RTRIM(CONVERT(NVARCHAR(10), DAY(userlog.[Date])))), 2)\n                        , 120)\n                 ELSE CONVERT(DATETIME, '1900-01-01', 120)\n            END) AS [Date_Session_END],\n        MAX(CASE WHEN userlog.LogType = 'LOGON' THEN DATEPART(HOUR, userlog.[Date]) ELSE 0 END) AS [Hour_Session_START],\n        MAX(CASE WHEN userlog.LogType = 'LOGOFF' THEN DATEPART(HOUR, userlog.[Date]) ELSE 0 END) AS [Hour_Session_END],\n    FROM\n        userlog\n    GROUP BY\n        userlog.SessionID\n) AS B\n    ON (A.[Date] >= B.[Date_Session_START] AND A.[Date] <= B.[Date_Session_END])\n        AND (A.[Hour] >= B.[Hour_Session_START] AND A.[Hour] <= B.[Hour_Session_END])\nWHERE\n    A.[Date] Between @X and @Y\nGROUP BY\n  A.[Date],\n  A.[Hour]\n","2053":"SELECT (SELECT ...) AS `005`\nFROM table1\nGROUP BY ...\nHAVING `005` > 0\n","2054":"SELECT MAX(cov_julian(t.tatime)) \nFROM   table1   t\nWHERE  t.tatime <= TO_NUMBER(TO_CHAR(SYSDATE,'J'))\nAND   (EXISTS (SELECT NULL\n               FROM   table2        a\n               WHERE  a.empid = t.personid)\n    OR EXISTS (SELECT NULL\n               FROM   table3        c\n               WHERE  c.col5  = t.personid2))\n;\n","2055":"postgresqlExecStatement(con, \"DELETE FROM foos WHERE id = $1 AND baz = $2\", list(1, \"bar\"))\n","2056":"WHERE FREETEXT(k.Keyword, @SearchQ) \n  AND d.IsSearch=1 \n  AND d.IsApproved=1 \n  AND ((@CategoryId NOT IN (1,2,3)) OR (d.CategoryId = @CategoryId))\n) AS Search_Data\n","2057":"public class AppContext : DbContext\n{\n    public DbSet<Instrument> Instruments { get; set; }\n    public DbSet<Order> Orders { get; set; }\n}\npublic class Instrument\n{\n    public int Id { get; set; }\n    public string Book { get; set; }\n    public string Page { get; set; }\n    public virtual ICollection<MatchedInstrument> MatchedInstruments { get; set; }\n}\npublic class Order\n{\n    public int Id { get; set; }\n    public string OrderName { get; set; }\n    public virtual ICollection<MatchedInstrument> MatchedInstruments { get; set; }\n}\npublic class MatchedInstrument\n{\n    public int Id { get; set; }\n    public int InstrumentId { get; set; }\n    public Instrument Instrument { get; set; }\n    public int OrderId { get; set; }\n    public Order Order { get; set; }\n    public bool IsFavorite { get; set; }\n    public string Notes { get; set; }\n}\n","2058":"SELECT  ID,\n        Value1,\n        CASE WHEN Value1 = 1 THEN 0 ELSE Value2 END Value2\nFROM (  SELECT  ID,\n                MAX(CASE WHEN Value1 = 1 THEN 1 ELSE 0 END) Value1,\n                MAX(Value2) Value2\n        FROM YourTable\n        GROUP BY ID) A\n","2059":"    SELECT fieldId, COUNT(Id) AS count FROM tag GROUP BY fieldId\n","2060":"mysql> SELECT 'abc' LIKE 'ABC';\n    -> 1\nmysql> SELECT 'abc' LIKE BINARY 'ABC';\n    -> 0\n","2061":"delete viewed_product where id in\n( select id from\n  ( select id, row_number() over (order by created_at desc) rn\n    from viewed_product\n    where my_id = :bindvar\n  )\n  where rn > 20\n)\n","2062":"CREATE TABLE #Test (ID int, LOC int, RNK char(1), NBR1 int, NBR2 char(1) )\n\nINSERT INTO #Test VALUES\n    (1, 2, 'A', 10, 'b'),\n    (3, 4, 'A', 10, 'b'),\n    (5, 6, 'A', 11, 'C'),\n    (8, 2, 'A', 12, 'D'),\n    (6, 3, 'A', 10, 'b')\n\nSELECT *\nFROM #Test t1\nWHERE EXISTS\n    (SELECT 1\n     FROM #Test t2\n     WHERE t1.NBR1 = t2.NBR1\n       AND t1.NBR2 = t2.NBR2\n     GROUP BY NBR1, NBR2\n     HAVING COUNT(1) > 1)\n","2063":"SELECT owner, name, type\n  FROM dba_dependencies\n WHERE referenced_name = 'SEND_MAIL'\n   AND referenced_owner = <<owner of procedure>>\n","2064":"declare @tmpGuid uniqueidentifier\nselect @tmpGuid = CLIENT_GUID from #mapping where NEW_CLIENT_GUID is null \nwhile @@ROWCOUNT > 0\nbegin   \n  --Set the first unset guid to itself\n  update #mapping\n  set NEW_CLIENT_GUID = @tmpGuid\n  where CLIENT_GUID = @tmpGuid\n\n  --set all other duplicates to the guid we just used.\n  update #mapping\n  set NEW_CLIENT_GUID = @tmpGuid\n  where CLIENT_GUID in (select CLIENT_GUID from FindDuplicateClientsByClient(@tmpGuid))\n       and NEW_CLIENT_GUID is null\n\n  --get next guid\n  select @tmpGuid = CLIENT_GUID from #mapping where NEW_CLIENT_GUID is null \nend\nset nocount off\ngo\n","2065":"SELECT B.Var1, A.Var2\nFROM A LEFT OUTER JOIN B ON A.Var1 = B.Var1\n","2066":"SELECT t1.Name, t1.BirthDate, t1.OrderNumber\n    FROM Table1 t1\n    WHERE NOT EXISTS(SELECT NULL\n                         FROM Table2 t2\n                         WHERE t2.Name = t1.Name\n                             AND t2.BirthDate = t1.BirthDate\n                             AND t2.OrderNumber = t1.OrderNumber)\n","2067":"SELECT TRUNC(SYSDATE) - TRUNC(SYSDATE,'MONTH') + 1 FROM DUAL\n","2068":"UPDATE\n      (SELECT\n            T3.SOME_VALUE1 TARGET1,\n            T3.OTHER_VALUE1 TARGET2,\n            T3.SOME_VALUE2 TARGET3,\n            T3.OTHER_VALUE2 TARGET4,\n            T1.SOME_VALUE1 SOURCE1,\n            T1.OTHER_VALUE1 SOURCE2,\n            T2.SOME_VALUE2 SOURCE3,\n            T2.OTHER_VALUE2 SOURCE4\n       FROM\n            TABLE1 T1\n            JOIN TABLE2 T2\n                ON T1.ID = T2.ID\n            JOIN T3\n                ON T3.FK = T1.ID)\nSET\n      TARGET1   = SOURCE1,\n      TARGET2   = SOURCE2,\n      TARGET3   = SOURCE3,\n      TARGET4   = SOURCE4;\n","2069":"CREATE TABLE employees (\n employee_id INT UNSIGNED NOT NULL AUTO_INCREMENT,\n family_name VARCHAR(100) NOT NULL,\n first_name VARCHAR(100) NOT NULL,\n birth_date DATETIME NULL DEFAULT NULL,\n PRIMARY KEY(employee_id)\n) ENGINE=INNODB;\n\nCREATE TABLE employee_bonus (\n bonus_id INT UNSIGNED NOT NULL AUTO_INCREMENT, \n employee_id INT UNSIGNED NOT NULL,\n bonus_value DECIMAL(10,2) DEFAULT 0.00,\n PRIMARY KEY(bonus_id),\n KEY fk_employee_id (employee_id),\n CONSTRAINT fk_employee_constraint FOREIGN KEY fk_employee_id(employee_id) \n    REFERENCES employees(employee_id) ON DELETE CASCADE ON UPDATE CASCADE \n) ENGINE=INNODB;\n","2070":"SELECT DISTINCT(BINARY name) AS Name FROM X;\n","2071":"DELETE * FROM contacts WHERE value='x'\n","2072":"where DATEDIFF(MM, OrderDate, GETDATE()) < 4\n","2073":"push-location\nimport-module sqlps -disablenamechecking\npop-location\n","2074":"@Offset = ((DATEDIFF(day, @BaseDate, GETDATE()) % @DayCount)\n","2075":"        -- CTE to the rescue!!!\nWITH cal AS (\n        SELECT generate_series('2012-02-02 00:00:00'::timestamp , '2012-03-02 05:00:00'::timestamp , '1 hour'::interval) AS stamp\n        )\n, qqq AS (\n        SELECT date_trunc('hour', executiontime) AS stamp\n        , count(*) AS zcount\n        FROM mytable\n        GROUP BY date_trunc('hour', executiontime)\n        )\nSELECT cal.stamp\n        , COALESCE (qqq.zcount, 0) AS zcount\nFROM cal\nLEFT JOIN qqq ON cal.stamp = qqq.stamp\nORDER BY stamp ASC\n        ;\n","2076":"select * from table1 t1\ncross apply ( select * from (select top 1 * from table2 t2 where t1.rn = t2.rn order by t2.id desc) t where t.name <> t1.name) c\n","2077":"select * \nfrom table\nwhere trunc(es_date) = TO_DATE('27-APR-12','dd-MON-yy')\n","2078":"SELECT  USERNAME, \n        COUNT(USERNAME) AS TotalCount, \n        MAX(logindate) AS LastLoginDate\nFROM    LOGINTABLE \nGROUP   BY USERNAME\n","2079":"WITH CTE AS (\n    SELECT\n      PeriodStart,\n      PeriodEnd,\n      SUM(TotalActive) As TotalActive,\n      SUM(TotalAdded) As TotalAdded,\n      SUM(TotalRemoved) As TotalRemoved\n    FROM (\n      SELECT\n        PeriodStart = CASE @Frequency\n          WHEN 'day'     THEN DATEADD(hour, 0, DATEDIFF(DAY, 0, [Date]))\n          WHEN 'week'    THEN DATEADD(hour, 0, DATEDIFF(DAY, 0, DATEADD(DAY, 1 - DATEPART(WEEKDAY, [Date]), [Date])))\n          WHEN 'month'   THEN DATEADD(hour, 0, DATEDIFF(DAY, 0, DATEADD(MONTH,   DATEDIFF(MONTH,   0, [Date]), 0)))\n          WHEN 'quarter' THEN DATEADD(hour, 0, DATEDIFF(DAY, 0, DATEADD(QUARTER, DATEDIFF(QUARTER, 0, [Date]), 0)))\n          WHEN 'year'    THEN DATEADD(hour, 0, DATEDIFF(DAY, 0, DATEADD(YEAR,    DATEDIFF(YEAR,    0, [Date]), 0)))\n        END,\n        PeriodEnd   = CASE @Frequency\n          WHEN 'day'     THEN DATEADD(s, -1, DATEADD(day, 1, DATEDIFF(DAY, 0, [Date])))\n          WHEN 'week'    THEN DATEADD(s, -1, DATEADD(hour, 0, DATEDIFF(DAY, -1, DATEADD(DAY, 7 - DATEPART(WEEKDAY, [Date]), [Date]))))\n          WHEN 'month'   THEN DATEADD(s, -1, DATEADD(hour, 0, DATEDIFF(DAY, -1, DATEADD(DAY, -1, DATEADD(MONTH,   DATEDIFF(MONTH,   0, [Date]) + 1, 0)))))\n          WHEN 'quarter' THEN DATEADD(s, -1, DATEADD(hour, 0, DATEDIFF(DAY, -1, DATEADD(DAY, -1, DATEADD(QUARTER, DATEDIFF(QUARTER, 0, [Date]) + 1, 0)))))\n          WHEN 'year'    THEN DATEADD(s, -1, DATEADD(hour, 0, DATEDIFF(DAY, -1, DATEADD(DAY, -1, DATEADD(YEAR,    DATEDIFF(YEAR,    0, [Date]) + 1, 0)))))\n        END,\n        TotalActive,\n        TotalAdded,\n        TotalRemoved\n      FROM TrendReport P\n      WHERE [Date] BETWEEN @DateStart AND @DateEnd\n    ) s\n    GROUP BY\n      PeriodStart,\n      PeriodEnd\n    ORDER BY PeriodStart\n\n), U AS (\n    SELECT qty_type, PeriodStart, qty\n    FROM CTE\n    UNPIVOT(qty FOR qty_type IN([TotalActive], [TotalAdded], [TotalRemoved]))Q\n)     \nSELECT * FROM U \nPIVOT (SUM(Qty) FOR PeriodStart IN([03\/01\/2011], [03\/08\/2011], [03\/15\/2011])) AS P\n","2080":"SELECT \n    [RowKey],\n    x.y.value('(.)[1]', 'INT') AS ItemKey\nFROM\n    dbo.[tbl_MyDataTable] AS t\nCROSS APPLY\n    t.[Format].nodes('\/MultiSelect\/ItemKey') x(y)\n","2081":"SELECT MAX(score), MAX(whenadded) FROM scores\n","2082":"CAST (FLAGS  AS NUMBER(19))\n","2083":"SELECT\n    M1.city AS iCity\n,   M2.city AS jCity\n,   M1.month\n,   M1.temperature - M2.temperature AS final_temperature\nFROM\n    MASTER M1\n    CROSS APPLY\n    MASTER M2\n    ON M2.month = M1.month\n","2084":"SELECT CAT_NO, PROD_CODE, DESCRIPTION, COLOR \nFROM (\n  SELECT *, ROW_NUMBER() OVER (PARTITION BY PROD_CODE ORDER BY CAT_NO) AS row_num\n  FROM TABLE\n) t\nWHERE t.row_num = 1\n","2085":"   SELECT b.id,\n          COUNT(i.id) AS num_inspections,\n          COUNT(v.id) AS num_violations\n     FROM BUSINESS b\nLEFT JOIN INSPECTION i ON i.business_id = b.id\nLEFT JOIN VIOLATION v ON v.inspection_id = i.id\n GROUP BY b.id\n","2086":"select top 1 with ties\n    MessageID, \n    MessageSent, \n    MessageSenderUserID, \n    MessageRecipientUserID\nfrom [Messaging_Message]\norder by row_number() over (partition by MessageSenderUserID \n                            order by MessageSent desc)\n","2087":"SELECT sum(case when Stat='1' then 1 else 0 end) as Counted, \n       sum(case when Stat='2' then 1 else 0 end) as Counted2 \nfrom dbo.Batch\n","2088":"Where Status = 0 or (Department = 100 And Status = 1)\n","2089":"SELECT  l.BuildingID, l.ApartmentID, l.LeaseID, l.ApplicantID,\n            ROW_NUMBER() OVER (PARTITION BY l.ApartmentID ORDER BY s.Importance DESC, MovedOut, MovedIN DESC, LLSigned DESC, Approved DESC, Applied DESC) AS 'RowNumber'\nFROM    dbo.NPleaseapplicant AS l INNER JOIN\n        dbo.NPappstatus AS s ON l.BuildingID = s.BuildingID AND l.AppStatus = s.Code\nWHERE  (l.BuildingID = @BuildingID)\n","2090":"SELECT b.id\nFROM big_table b\nWHERE EXISTS (SELECT 1\n              FROM small_table s\n              WHERE s.name LIKE 'something%' AND s.id = b.small_id\n             )\nORDER BY b.name;\n","2091":"select a.*, b.*\nfrom tablea a outer apply\n     (select top 1 b.*\n      from tableb b\n      where b.id = a.id and\n            b.date <= a.date\n      order by b.date desc\n     ) b;\n","2092":"RETURN(LPAD(_RESTRICTEDROUTE, 4, \"0\"))\n","2093":"select DATEADD(s, dateTimeInMilliseconds, '19700101')\n","2094":"SELECT * FROM mytable WHERE name LIKE 'a%' OR name like 'A%'\n","2095":"SELECT client, email, alt_email\nFROM (\n select 'user.CustomAttribute.Client' client \n         ,'user.Email' email\n         ,'user.customAttribute.alternateEmail' alt_email\n          -- here we add an aid to ordering, 1 comes first\n         , 1 displayorder\n  from dual \n  UNION ALL \n  Select c.client \n         ,c.email\n         ,c.alt_email\n          -- here we add an aid to ordering, 2 comes after our header\n         , 2 displayorder\n  from contact    )\norder by displayorder, client;\n","2096":"ALTER TABLE `TableAB` DROP FOREIGN KEY FK_KEY_Test;\nALTER TABLE `TableAB` ADD CONSTRAINT FK_KEY_Test FOREIGN KEY ('some_column') \nREFERENCES `TableA` ('Test_column1') ON UPDATE CASCADE ON DELETE CASCADE;\n","2097":"  IF OBJECT_ID('TempDB.dbo.#DuplicateAssignments') IS NOT NULL \n  BEGIN \n  DROP TABLE #DuplicateAssignments \n  END  \n","2098":"SELECT DISTINCT\n        contact.id,\n        contact.`Contact group`,\n        contact.Media,\n        contact.E-mail,\n        contact.Nationality,\n        contact.Country,\n        contact.City,\n        contact.Area,\n        contact.Gender,\n        contact.Married,\n        contact.Children,\n        contact.`Drivers license`\nFROM contact\nINNER JOIN contactlanguage ON contact.id = contactlanguage.contactid\nINNER JOIN language ON contactlanguage.languageid = language.id\nWHERE isdeleted = 0 AND language.language in ('English', 'Hindi', '');\n","2099":"select * from\n(select \n   *,\n   ROW_NUMBER() OVER (PARTITION BY tkid order by DateTimeStamp desc) as rn\nfrom Prog_Timer\n)\nT\nwhere \nT.rn = 1 -- the latest status for each tkid \nand T.Status = 'Start' -- returns only started and not stopped timers\n-- if timer is stopped, t.Status will be 'Stop' in the latest row\n","2100":"SELECT\n    ST_AsText (centroid),\n    ST_SRID   (centroid)\nFROM (SELECT ST_Centroid(ST_GeomFromText(geom, srid)) as centroid) as t;\n","2101":"  SELECT e.event_name,\n         SUM(invited.contact_id) 'total_invited',\n         SUM(confirmed.contact_id) 'total_invitations_confirmed'\n    FROM EVENT e\n    JOIN INVITATIONS invited ON invited.event_id = e.event_id\n    JOIN INVITATIONS confirmed ON confirmed.event_id = e.event_id\n                            AND confirmed.responded = 'Y'\nGROUP BY e.event_id, e.event_name\n","2102":"CREATE TABLE emp(ename varchar(100),DOB date,  Age varchar(100))\nINSERT INTO emp\nVALUES('d','06\/02\/2011',NULL)--,('b','07\/10\/1947',NULL),('c','12\/21\/1982',NULL)\n\n\n\n;WITH CTE(ename,DOB,years,months,days) \nAS \n(\nSELECT \n    ename,DOB,DATEDIFF(yy,DOB,getdate()),DATEDIFF(mm,DOB,getdate()),DATEDIFF(dd,DOB,getdate()) \nFROM \n    emp\n)\nSELECT \n    ename,DOB,CAST(months\/12 as varchar(5))+' Years'+\n    CAST((months % 12) as varchar(5))+' month\/s '+\n    CAST(CASE WHEN DATEADD(MM,(months % 12),DATEADD(YY,(months\/12),DOB)) <= GETDATE() then \n            DATEDIFF(dd,DATEADD(MM,(months % 12),DATEADD(YY,(months\/12),DOB)),GETDATE()) \n        ELSE DAY(getdate())   \n        END \n        as varchar(5))+' days' as Age\nFROM CTE\n","2103":"SELECT t.*,\n       CASE WHEN s.quantity is null then null \n           ELSE CASE WHEN s.quantity > 0 and t.quantity - s.quantity > 0 then s.quantity\n               ELSE CASE WHEN s.quantity > 0 and t.quantity - s.quantity < 0 then t.quantity end end end as 'UPGRADE'\nfrom YourTable t\nLEFT OUTER JOIN YourTable s ON(t.group = s.group and t.year = s.year-1 \n                               AND t.type = 't2' and s.type = 't1')\n","2104":"declare @ds  nvarchar(22);\ndeclare @qry  nvarchar(max);\nset @ds = 'KaamKaaj';\n\nset @qry = N' SELECT '''+ @ds + ''' as DBName , T.name AS [TABLE NAME], \n       I.rows AS [ROWCOUNT] \nFROM   @ds.sys.tables AS T \n       INNER JOIN @ds.sys.sysindexes AS I \n               ON T.object_id = I.id \n                  AND I.indid < 2 \nORDER  BY I.rows DESC';\n\nSET @qry    =   REPLACE(@qry, '@ds', @ds)\nprint @qry;\n\ndeclare @TableList TABLE(Id int IDENTITY(1,1),DataBaseName VARCHAR(100),TableName VARCHAR(100),RecordCount INT,NameOfIndex VARCHAR(100),TypeOfIndex VARCHAR(100))\n\nINSERT INTO @TableList(DataBaseName,TableName,RecordCount)\nexec(@qry\n);\n\ndeclare @qry2  nvarchar(max);\n\nset @qry2 =  N'SELECT \n     '''+ @ds + ''' as DBName,\n     t.name,\n     ind.name,\n     ind.type_desc\nFROM \n     @ds.sys.indexes ind \nINNER JOIN \n     @ds.sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id \nINNER JOIN \n     @ds.sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id \nINNER JOIN \n     @ds.sys.tables t ON ind.object_id = t.object_id \nWHERE \n     ind.is_primary_key = 0 \n     AND ind.is_unique = 0 \n     AND ind.is_unique_constraint = 0 \n     AND t.is_ms_shipped = 0 \nORDER BY \n     t.name, ind.name, ind.index_id, ic.index_column_id \n\n     ';\nSET @qry2   =   REPLACE(@qry2, '@ds', @ds)\n\ndeclare @TableListWithIndex TABLE(Id int IDENTITY(1,1),DataBaseName VARCHAR(100),TableName VARCHAR(100),NameOfIndex VARCHAR(100),TypeOfIndex VARCHAR(100))\nINSERT INTO @TableListWithIndex(DataBaseName,TableName,NameOfIndex,TypeOfIndex)\nexec(@qry2\n);\n\n\nselect * from @TableList\nselect * from @TableListWithIndex\n","2105":"int sumAlias = 0;\n\n_dataAccessor.QueryOver<Player>()\n    .Inner.JoinQueryOver<PlayerPerformance>(player => player.Performances)\n    .Inner.JoinQueryOver<Achievement>(perf => perf.Achievements, () => achievementAlias)\n    .Where(a => a.Descriptor == \"Goals Scored\")\n    .SelectList(list => list.SelectGroup(player => player.Id).SelectSum(() => achievementAlias.Value).WithAlias(() => sumAlias)\n    .OrderByAlias(() => sumAlias).Desc\n    .List<object[]>()\n    ;\n","2106":"select {fn timestampdiff(SQL_TSI_MINUTE, startdate, enddate)}\/60 as diff \n","2107":"Select CP.ProductName,sum(Cp.ProductQuantity) \nFROM VendorTrading VT inner join CustomerProducts CP \nON VT.Id = CP.VendorTradingId\nWHERE  CP.ProductName = ISNULL('XYZ', CP.ProductName)\nAND VT.Tradedate = isnull('2015-01-20',VT.Tradedate)\nAND CP.ProductName in ('xyz','abc')\nGROUP BY CP.ProductName\n","2108":"SELECT redCount, COUNT(*)\nFROM (SELECT user_id, COUNT(color) as redCount\n      FROM cars\n      WHERE color = 'red'\n      GROUP BY user_id\n     ) uc\nGROUP BY redCount;\n","2109":"select \n  stuff((\n        select ' ' + cast(product as char(10))\n        from datainformation\n        for XML path('')),1,1,'') as products,\n stuff((\n        select ' ' + cast(quantity as char(10))\n        from datainformation\n        for XML path('')),1,1,'') as quantity\n","2110":"SELECT date_trunc(...)::date;\n","2111":"DECLARE @mindate DATETIME\nDECLARE @maxdate DATETIME\nDECLARE @diff INT\nSET @maxdate = '2014-02-15'\nSET @mindate = '2014-01-15'\n\nSET @diff = DATEDIFF(DAY,  @mindate,@maxdate)\n;WITH cte(dt,level)\nAS\n(\n    SELECT  @mindate AS dt, 0 AS level \n    UNION ALL\n    SELECT DATEADD(day,1,cte.dt),level + 1 from cte WHERE level < @diff\n)\nSELECT dt FROM cte\noption (maxrecursion 32767)\n","2112":"SELECT t2.a,t2.b,t2.c \nFROM (SELECT a, b, max(d) as max_d\nFROM TABLE_NAME\nGROUP BY a,b) t1 \ninner join TABLE_NAME t2 on(t1.a=t2.a AND t1.b=t2.b AND t1.max_d=t2.d)\n","2113":"AddHandler myConnection.InfoMessage, New SqlInfoMessageEventHandler(AddressOf OnInfoMessage)\n\nPrivate Sub OnInfoMessage(ByVal sender As Object, ByVal e As System.Data.SqlClient.SqlInfoMessageEventArgs)\n        mySB.AppendLine(e.Message)\nEnd Sub\n","2114":"create table search_thread (\n   thread_id int,\n   date_entered datetime,\n   PRIMARY KEY (thread_id)\n   FOREIGN KEY (thread_id) REFERENCES thread(thread_id));\n\ncreate table search_results (\n   thread_id int,\n   result_id int,\n   PRIMARY KEY (thread_id, result_id),\n   FOREIGN KEY (thread_id) REFERENCES search_thread(thread_id),\n   FOREIGN KEY (thread_id) REFERENCES thread(thread_id).\n   FOREIGN KEY (result_id) REFERENCES thread(thread_id));\n","2115":"select EMPID, EMPNAME, COMPANY1\n  from EMPLOYEE\n where COMPANY1 is not null\nunion\nselect EMPID, EMPNAME, COMPANY2\n  from EMPLOYEE\n where COMPANY2 is not null\nunion\nselect EMPID, EMPNAME, COMPANY3\n  from EMPLOYEE\n where COMPANY3 is not null\nunion\nselect EMPID, EMPNAME, COMPANY4\n  from EMPLOYEE\n where COMPANY4 is not null\n","2116":"SELECT c.id, t.line_id, t.date, u.name, a.name,\n       sum(case when t.adjustment_no IS NOT NULL then t.sale_amount else 0 end) as adjustment,\n       sum(case when t.adjustment_no IS NULL then t.sale_amount else 0 end) as sales\nFROM invoice i JOIN\n     contract c\n     on c.contract_no = i.contract_no JOIN\n     transaction t\n     on t.invoice_no = i.invoice_no JOIN\n     unit u\n     on u.unit_no = t.unit_no JOIN\n     agency a\n     on a.agency_no = i.agency_no\nWHERE t.unit_no in (44) AND\n      i.hard_invoice = 'Y' AND\n      t.code in ('New', 'Edit')\nGROUP BY c.id, t.date, u.name, a.name, t.line_id;\n","2117":"   SELECT name , create_date, modify_date ,sm.definition FROM sys.procedures sp\n   Inner join sys.sql_modules sm  ON sp.object_id = sm.object_id \n   WHERE CONVERT(DATE,sp.modify_date)    = CONVERT(DATE, '02\/19\/2013')\n","2118":"SELECT b.BOOKINGID,\n       b.GUESTID,\n       d.DEPENDANTID,\n       d.FORENAME AS firstname,\n       d.SURNAME AS lastname,\n       br.FLOORNO,\n       br.ROOMNO\nFROM  BOOKING b\n      LEFT JOIN BOOKINGDEPENDANT bd\n      ON b.BOOKINGID = bd.BOOKINGID\n      LEFT JOIN DEPENDANT d\n      ON d.DEPENDANTID = bd.DEPENDANTID\n      LEFT JOIN BOOKINGROOM br \n      ON br.ID = bd.ROOMID and ON br.BOOKINGID = b.BOOKINGID\nWHERE b.BOOKINGID = &BOOKINGID; \n","2119":"insert into table1\n(\n    col1,\n    col2,\n    col3,\n    col4\n)\nselect\n    col1,\n    col2,\n    col3,\n    'foo'\n\nfrom table2\n\nwhere something = 'foo'\n","2120":"declare @t table ([Date] date, Clockin time, CLockout time, Trip1 int, Trip2 int)\ninsert into @t  \n\n    select '01\/01\/2013', '13:00', '17:00', 3, 3 union all\n    select '01\/01\/2013', '13:00', '17:00', 0, 3 union all\n    select '01\/01\/2013', '13:00', '17:00', 0, 0 union all\n    select '01\/01\/2013', '13:00', '17:00', 3, null;\n\nselect  [minutes]=datediff(mi, Clockin, Clockout), \n        [trips] = ((isnull(Trip1, 0)+isnull(Trip2,0))),\n        [calc] = datediff(mi, Clockin, Clockout)\/ (nullif((isnull(Trip1, 0)+isnull(Trip2,0)), 0)),\n        [calc2] = datediff(mi, Clockin, Clockout)\/ isnull((nullif((isnull(Trip1, 0)+isnull(Trip2,0)), 0)), 1)\nfrom @t\n","2121":"declare\n  v_pk   my_pk_arr;\n  v_cur  t_cursor;\nbegin\n\n  v_pk := MY_PK_ARR(MY_PK(1, 'a'), MY_PK(2, 'b')); -- or build in a loop etc.\n  get_data(v_pk, v_cur);\n\nend;\n\/\n","2122":"SELECT SubjectID, DepartmentID, SubjectName, SubjectDescription, SubjectShortCode\nFROM BS_Subject \nWHERE NOT EXISTS \n(SELECT SubjectToClassID FROM BS_SubjectToClass WHERE \nBS_Subject.SubjectID = BS_SubjectToClass.SubjectID\nAND BS_SubjectToClass.ClassID =2)\n","2123":"select ps.*\nfrom @ProductSub ps\ninner join (\n    select     \n      CASE \n        WHEN c.ClientID is null THEN m.ClientID\n        WHEN m.ClientID is null THEN c.ClientID\n        WHEN m.ExpiryDate is not null and c.ExpiryDate is not null THEN\n          CASE \n            WHEN c.ExpiryDate > m.ExpiryDate THEN c.ClientID\n            ELSE m.ClientID\n          END\n        WHEN m.ExpiryDate is null THEN m.ClientID\n        WHEN c.ExpiryDate is null THEN c.ClientID\n        ELSE m.ClientID\n      END as ClientId,\n      COALESCE(m.ProductId, c.ProductId) as ProductId\n    from       @ProductSub m\n    full outer join  @ProductSub c\n    on         m.ProductID = c.ProductID\n    and        m.ClientID <> c.ClientID\n    where      IsNull(m.clientid,@MasterClient) = @MasterClient\n    and        IsNull(c.clientid,@ConsolClient) = @ConsolClient\n) filter\non filter.clientid = ps.clientid\nand filter.productid = ps.productid\norder by ps.ProductId\n","2124":"SELECT       m.*\nFROM         messages m\n  INNER JOIN users u\n  ON         m.userId = u.userId\nWHERE        u.username = 'UsernameHere';\n","2125":"Sub Reformat()\n\n    Dim arr, d1, d2, arrOut(), r As Long, ub As Long\n    Dim r2 As Long, c As Long\n\n    arr = Selection.Value 'select the source data first\n    ub = UBound(arr, 1)\n    Set d1 = distinct(arr, 1)\n    Set d2 = distinct(arr, 2)\n    ReDim arrOut(1 To d1.Count, 1 To 1 + (d2.Count * 2))\n\n    For r = 1 To ub\n        r2 = d1(arr(r, 1))\n        c = 2 + (d2(arr(r, 2)) - 1) * 2\n        arrOut(r2, 1) = arr(r, 1)\n        arrOut(r2, c) = arr(r, 2)\n        arrOut(r2, c + 1) = arr(r, 3)\n    Next r\n\n    With ThisWorkbook.Sheets(\"out\")\n        .Range(\"A2\").Resize(UBound(arrOut, 1), UBound(arrOut, 2)).Value = arrOut\n    End With\n\nEnd Sub\n\n'get all distinct values in a \"column\" of a 2-d array\nFunction distinct(arr As Variant, colNum) As Object\n    Dim r As Long, ub As Long, i As Long, d\n    Set d = CreateObject(\"scripting.dictionary\")\n    ub = UBound(arr, 1)\n    i = 1\n    For r = 1 To ub\n        If Not d.exists(arr(r, colNum)) Then\n            d.Add arr(r, colNum), i\n            i = i + 1\n        End If\n    Next r\n    Set distinct = d\nEnd Function\n","2126":"select name\n  from tbl\n where movid in (select movid from tbl where name = 'me')\n   and name <> 'me'\n group by name\nhaving count(*) = (select count(*) from tbl where name = 'me')\n","2127":"DECLARE @SQL varchar(500)\n\nSELECT @SQL = 'osql -S' +@@servername +' -E -q \"exec dbName..sprocName \"'\n\nEXEC master..xp_cmdshell @SQL\n","2128":"DECLARE @xmlTest xml;\nSET @xmlTest = '<Mapping>\n    <Element name=\"FirstTable\">\n        <Column>\n            <Source>SourceColumn1<\/Source>\n            <Destination>DestinationColumn1<\/Destination>\n        <\/Column>\n        <Column>\n            <Source>SourceColumn2<\/Source>\n            <Destination>DestinationColumn2<\/Destination>\n        <\/Column>\n        <Column>\n            <Source>SourceColumn3<\/Source>\n            <Destination>DestinationColumn3<\/Destination>\n        <\/Column>           \n    <\/Element>\n    <Element name=\"SecondTable\">\n        <Column>\n            <Source>SourceColumn4<\/Source>\n            <Destination>DestinationColumn4<\/Destination>\n        <\/Column>\n        <Column>\n            <Source>SourceColumn5<\/Source>\n            <Destination>DestinationColumn5<\/Destination>\n        <\/Column>\n    <\/Element>\n<\/Mapping>'\n\n;With Map\nAs\n(\n    SELECT\n         x.value('..\/@name', 'nvarchar(50)') TableName\n        ,x.value('Source[1]', 'nvarchar(50)') SourceColumn\n        ,x.value('Destination[1]', 'nvarchar(50)') DestinationColumn\n    from\n        @xmlTest.nodes('\/Mapping\/Element\/Column') T(x)\n)\nselect distinct 'INSERT INTO [' + M.TableName + '] (' + Left(DC.DestinationColumns, Len(DC.DestinationColumns) - 1) + ') SELECT (' + Left(SC.SourceColumns, Len(SC.SourceColumns) - 1) + ') FROM [RawDataTable]' as SQLs\nfrom Map M\ncross apply (\n    select\n        CONVERT(VARCHAR(255), SourceColumn) + ',' AS [text()]\n    from\n        Map M2\n    where\n        M.TableName = M2.TableName\n    FOR XML PATH('')\n) SC(SourceColumns)\ncross apply (\n    select\n        CONVERT(VARCHAR(255), DestinationColumn) + ',' AS [text()]\n    from\n        Map M2\n    where\n        M.TableName = M2.TableName\n    FOR XML PATH('')\n) DC(DestinationColumns)\n","2129":"SELECT SUM(tfspm.PaymentOn) AS Amount,\n       tfsp.campaignID,\n       cc.Name\nFROM   tbl_FormSubmissions_PaymentsMade tfspm\n       INNER JOIN tbl_FormSubmissions_Payment tfsp\n         ON tfspm.SubmissionID = tfsp.SubmissionID\n       INNER JOIN tbl_CurrentCampaigns cc\n         ON tfsp.CampaignID = cc.ID\nWHERE  tfspm.isApproved = 'True'\n       AND ( tfspm.PaymentOn BETWEEN '2013-05-01 12:00:00.000' \n                                 AND '2013-05-07 12:00:00.000'\n              OR tfspm.PaymentOn BETWEEN '2013-05-08 12:00:00.000' \n                                     AND '2013-05-14 12:00:00.000' )\nGROUP  BY tfsp.campaignID,\n          cc.Name \n","2130":"SELECT \n      id,\n      name,\n      [begin],\n      [end]\nFROM \n      orders o\nWHERE EXISTS(\n            SELECT  *   \n            FROM access         \n            WHERE orderId = o.id AND [user] = @user AND role >= 1\n           )\n","2131":"SELECT\n  Contact.Email,\n  Contact.FirstName,\n  Contact.Surname,\n  recent.HotlineID,\n  Hotline.Action\nFROM\n  (SELECT HotlineID, MAX([Date]) as maxDate\n    FROM Hotline\n    GROUP BY HotlineID) recent\n  INNER JOIN Hotline\n    ON recent.HotlineId = Hotline.HotlineId\n  LEFT JOIN Contact\n    ON Hotline.HotlineId = Contact.HotlineId\nWHERE\n  datediff(hour, recent.maxDate, GetDate()) < 48\n  AND Hotline.Flag = 1\n","2132":"WITH example AS (\n  SELECT ad.applicantdetailid,\n         ad.applicantmasterid, \n         ad.dateeffective,\n         ROW_NUMBER() OVER(PARTITION BY ad.applicantmasterid\n                               ORDER BY ad.dateeffective DESC) AS rank\n    FROM #APPLICANTDETAIL ad)\n  SELECT e.applicantdetailid\n    FROM example e\n   WHERE e.rank = 1\nORDER BY e.applicantmasterid, e.dateeffective\n","2133":"SELECT \n    sub.name AS ARName,\n    sub.desc AS ARDescription,\n    m.name AS MessageName,\n    m.subj AS MessageDescription,\n    clk.type AS EventType,\n    COUNT(DISTINCT clk.eid) AS CountAdmins,\n    COUNT(DISTINCT CASE WHEN my.my_id = 3347 THEN clk.eid END) AS CountUpgradeAdmins,\n    COUNT(DISTINCT CASE WHEN my.my_id = 2765 THEN my.data END) AS CountAccounts,\n    COUNT(DISTINCT  my2.data ) AS CountUpgradedAccounts \nFROM\n    bata.sseq seq \nINNER JOIN bata.messages m \n    ON m.id = seq.mid \nINNER JOIN bm_arc.clicks208 clk \n    ON clk.camp = seq.camp \nINNER JOIN bemails.cid cid \n    ON cid.id = clk.eid \nINNER JOIN bonfig.sub\n    ON sub.id = seq.sid\nLEFT JOIN bemails.my208 my \n    ON cid.id = my.eid AND (my.my_id = 3347 OR my.my_id = 2765) # only return people who upgraded and     \n\nLEFT JOIN bemails.my208 my2 \n    ON  my2.my_id = 2765 and my2.userID = my.userID and my.my_id=3347 #get the accounts that the user belongs to\nWHERE \n    seq.cid = 208\n    AND\n    sub.desc REGEXP '^Home pg free trail (A|B)' \nGROUP BY\n    ARName,\n    ARDescription,\n    MessageName,\n    MessageDescription,\n    EventType\n","2134":"SELECT  *\nFROM    mytable\nWHERE   %%LOCKRES%% = '{0000ABCDEFAB}'\n","2135":"insert into table1 (_id)\nselect _id from table2;\n","2136":"select object_name as view_name,\n       to_number(extractvalue(xmltype(dbms_xmlgen.getxml('select count(*) c from \"'||owner||'\".\"'||object_name||'\"')),'\/ROWSET\/ROW\/C')) as row_count\nfrom dba_objects\nwhere object_type = 'VIEW'\n  and owner = 'ADMIN'\norder by 1;\n","2137":"INSERT INTO #Temp (id, id2, a, b)\nSELECT TABLE_A.ID, TABLE_B.ID2, TABLE_A.A, TABLE_B.B\nFROM TABLE_A INNER JOIN TABLE_B ON TABLE_A.[primary_key] = TABLE_B.[foreign_key]\n","2138":"BEGIN TRAN 'tran1'\n       INSERT INTO Whatever table...\n      IF(... check for null)\n      BEGIN \n        ROLLBACK TRAN 'tran1'\n        RETURN 0\n      END\nCOMMIT TRAN 'tran1'\n","2139":"CREATE TABLE DATA_TABLE(VALUE NUMBER,\n                        REJECT_COUNT NUMBER DEFAULT 1,\n                        A NUMBER,\n                        B NUMBER,\n                        C NUMBER,\n                        CONSTRAINT DAT_PK PRIMARY KEY (VALUE));\n\nCREATE OR REPLACE TRIGGER DATA_TABLE_TRIGGER BEFORE UPDATE ON DATA_TABLE\n  FOR EACH ROW\n\nDECLARE\n\nBEGIN\n\n  :NEW.REJECT_COUNT := :OLD.REJECT_COUNT + 1;\n\nEND;\n","2140":"SET @the_list = myStoredProc();\nSET @the_query = CONCAT('SELECT * FROM myTable WHERE columnName IN (' , @the_list , ')');\nPREPARE the_statement FROM @the_query;\nEXECUTE the_statement;\n","2141":"SELECT COUNT(*)\nFROM (\n  SELECT p.prod_id,  p.prod_list_price, avg(c.unit_cost) avg_cost\n  FROM products p inner join costs c\n   ON c.prod_id = p.prod_id\n  GROUP BY p.prod_id, p.prod_list_price\n) \nWHERE prod_list_price < 1.15 * avg_cost\n","2142":"SELECT\nrep.RPT_ID\n,tech.TECH_ID\n,proc.PROC_ID\nFROM REPORT rep\nLEFT JOIN TECHNICIAN tech ON tech.RPT_ID = rep.RPT_ID\nLEFT JOIN PROCEDURE proc ON proc.RPT_ID = rep.RPT_ID AND proc.PROC_ID = tech.PROC_ID\nWHERE rep.LAB_ID in ('test_lab');\n","2143":"SELECT [1 Cut Wire & Cable Only].Element\n  FROM [1 Cut Wire & Cable Only]\n WHERE  (\n           [1 Cut Wire & Cable Only].Product_ID = [Forms]![New Report]![cbProduct_ID]\n        );\n","2144":"SELECT events.event_id, COALESCE(attendance.status, 0) status\nFROM events LEFT JOIN attendance\n     ON events.event_id = attendance.event_id AND\n        attendance.user_id='someoutsideinput'\nORDER BY events.event_date ASC\n","2145":";WITH x AS\n(\n    SELECT col1, col2, ROW_NUMBER() OVER(ORDER BY id DESC) rn\n    FROM Table1\n)\nSELECT col1, col2\nFROM x x1\nWHERE NOT EXISTS\n(\n    SELECT 1\n    FROM x x2\n    WHERE x2.rn <= x1.rn\n    AND x2.col2 = 'b'\n)\n","2146":"  SELECT t.userid\n         MAX(CASE WHEN t.fieldname = 'Username' THEN t.fieldvalue ELSE NULL END) AS Username,\n         MAX(CASE WHEN t.fieldname = 'Password' THEN t.fieldvalue ELSE NULL END) AS Password,\n         MAX(CASE WHEN t.fieldname = 'Email Address' THEN t.fieldvalue ELSE NULL END) AS Email\n    FROM TABLE t\nGROUP BY t.userid\n","2147":"<cfscript>\nq = queryNew(\"LTM,LTM_1,LTM_2,LTM_3,LTM_4\");\n\nqueryAddRow(q);\nQuerySetCell(q, \"LTM\", \"OSTAPOWER\");\nQuerySetCell(q, \"LTM_1\", \"VENKAT\");\nQuerySetCell(q, \"LTM_2\", \"LYNN\");\nQuerySetCell(q, \"LTM_3\", \"SMITH\");\nQuerySetCell(q, \"LTM_4\", \"HARTLEY\");\n\nqueryAddRow(q);\nQuerySetCell(q, \"LTM\", \"OSTAPOWER\");\nQuerySetCell(q, \"LTM_1\", \"VENKAT\");\nQuerySetCell(q, \"LTM_2\", \"LYNN\");\nQuerySetCell(q, \"LTM_3\", \"SMITH\");\nQuerySetCell(q, \"LTM_4\", \"SHREVE\");\n\nfunction collect(q) {\n    var data = {};\n    for (var row in q)\n    {\n        var varName = \"data\";\n        for (var i = 0; i <= 4; i++)\n        {\n            var col = i == 0 ? \"LTM\" : \"LTM_#i#\";\n            var name = row[col];\n            if (len(name))\n                varName = listAppend(varName, name, \".\");\n            else\n                break;\n        }\n        setVariable(varName, {});\n    }\n\n    return data;\n}\n\nfunction transform(tree, nodeName, level=0, parent=\"\") \n{\n    if (structIsEmpty(tree))\n        return \"\";\n\n    var node = {\n        'name': nodeName,\n        'parent': len(parent) ? parent : javacast(\"null\",\"\"),\n        'level': javacast(\"int\", level),\n        'groups': []\n    };\n\n    var branch = tree[nodeName];\n\n    for (var child in branch)\n        arrayAppend(node.groups, transform(branch, child, level+1, nodeName));\n\n    return node;\n}\n\nc=collect(q);\n\nwriteDump(transform(c,'OSTAPOWER'));\n<\/cfscript>\n","2148":"with minRow(ID) as \n    (select min(ID)\n    from    Table_1\n    group by data1, data2, data3)\nselect  t1.*\nfrom    Table_1 t1 join minRow m1 on t1.ID = m1.ID\n","2149":"SELECT product, condition1 FROM table_name\nUNION SELECT product, condition2 FROM table_name\nUNION SELECT product, condition3 FROM table_name\nUNION ORDER BY product\n","2150":"JOIN [cubing].[dbo].[WCA_export_RanksAverage] AS RanksAverage\nON RanksAverage.personId = RanksSingle.personId\nAND RanksAverage.eventId = RanksSingle.eventId\n","2151":"SELECT * FROM sys.views\n","2152":"select column1,column2,1 as column3 from mytable\n","2153":"SELECT a.pk_FamilyID, a.Salutation, e.Title, e.Forename, e.Surname, c.Title, c.Forename, c.Surname\nFROM Family a\nINNER JOIN PersonFamily b ON a.pk_FamilyID = b.fk_FamilyID\nINNER JOIN Person c ON b.fk_PersonID = c.pk_PersonID\nINNER JOIN Relation d ON c.pk_PersonID = d.fk_RelatedPersonID\nINNER JOIN Person e ON d.fk_PersonID = e.pk_PersonID\nWHERE (d.Relationship LIKE '%Father' OR d.Relationship LIKE '%Mother')\nAND e.pk_PersonID IN('\" & Substitute ( ListOfPersonUUID ; \u00b6 ; \"','\" ) & \"')\nORDER BY e.SurnameForename ASC\n","2154":"UPDATE ltm_op_risk_event ltm\nSET ltm.sent_into_wf_by_id =\n  (SELECT ltmRev.adm_user_id\n   FROM ltm_op_risk_event_rev ltmRev\n   WHERE ltmRev.ltm_op_risk_event_id = ltm.ltm_op_risk_event_id\n     AND ltmRev.status !=\n       (SELECT ltmRev2.status\n        FROM LTM_OP_RISK_EVENT_REV ltmRev2\n        WHERE valid_from IS NOT NULL\n          AND ltmRev.ltm_op_risk_event_id = ltmRev2.ltm_op_risk_event_id\n        ORDER BY valid_from ASC LIMIT 1)\n   ORDER BY ltmRev.valid_to ASC LIMIT 1)\nWHERE ltm.sent_into_wf_by_id IS NULL;\n","2155":"where completeddate <= dateadd(hour, 4, createddate)\n","2156":"SELECT o.official_name Official, p.official_name Supervisor\nFROM official o\nLEFT JOIN officialsupervisor s ON o.official_id = s.official_id\nLEFT JOIN official p ON p.official_id = s.supervisor_official_id\n","2157":"select id, sum, sum_amount, pair,\n       (case when max(sum_amount) over (partition by pair) = sum_amount\n             then sum_amount \/ min(sum_amount) over (partition by pair)\n             else sum_amount \/ max(sum_amount) over (partition by pair)\n        end) as div\nfrom t;\n","2158":"select \n StepID, \n cast(sum(case when Rating > 9 then 100.0 else 0 end)\n \/count(*) as decimal(5,2)) pct\nfrom yourtable\ngroup by StepID\n","2159":"  SELECT\n    E.Visitor Toilet_Type,\n    SUM(case when SE.SemiEnragedPotty_ID is not null and\n        M.Toilet_ID is not null then 1 else 0 end) MANUAL_PORTA_POTTY,\n    SUM(case when R.Toilet_ID is not null then 1 else 0 end) REGULAR_PORTA_POTTY\n  FROM \n    BORE.EnragedPotty E,\n    BORE.SemiEnragedPotty SE,\n    BORE.ManualPotty M,\n    BORE.RegularPotty R\n  WHERE\n    E.SemiEnragedPotty_ID = SE.SemiEnragedPotty_ID (+) AND\n    E.Toilet_ID = M.Toilet_ID (+)\n    E.Toilet_ID = R.Toilet_ID (+)\n  GROUP BY Visitor\n  ORDER BY Visitor ASC\n","2160":"select * from `owners`\njoin `records` ON (`records`.`pa_no` = `owners`.`contact_no`)\nWHERE email <> \"\"\nand not exists (select reg_no from `buyers` \n                where `buyers`.reg_no = `records`.reg_no)\n","2161":"SELECT status\nFROM all_objects\nWHERE object_name = 'MYFUNCTIONNAME'\nAND object_type = 'FUNCTION';\n","2162":"SELECT\n    modify_date\n        ,type_desc\n        ,name\n    FROM sys.objects\n    WHERE is_ms_shipped=0\n        --AND modify_date>='yyyy\/mm\/dd'  <--optionally put in your date here\n    ORDER BY 1 DESC\n","2163":"    $id = 5;$parent_id = 5; \/* set default to values you want*\/\n\n    while($parent_id != 0)\n    {\n\n       $sql = 'SELECT id,parent_id from sub_table where id = $parent_id ';\n       $rs= $mysqli->query($sql);  \/* fetch details *\/\n       $old_id = $id; \/* this will save the last id in current iteration *\/\n       $parent_id = $rs['parent_id'];\n       $id = $rs['id'];\n\n    }\n","2164":"SELECT (CASE WHEN postedDate IS NULL THEN '0' ELSE CAST(postedDate AS VARCHAR(MAX))) postedDate ...\n","2165":"$file = \"D:\\PostDeployment.sql\"\n\n  $SQLCommandText = @(Get-Content -Path $file) # loads content\n    foreach($SQLString in  $SQLCommandText) \n    { \n\n        if($SQLString -ne \"go\") # if string is not equal to go then add it to existing string\n        { \n            #Preparation of SQL packet \n            $SQLPacket += $SQLString + \"`n\" \n        } \n        else \n        { \n            Write-Host \"---------------------------------------------\" \n            Write-Host \"Executed SQL packet:\" \n            Write-Host $SQLPacket \n\n            $SQLPacket = \"\"  # clear up sql string\n        } \n    } \n","2166":"--get rid of the sparsely used commas\n--get rid of the duplicate spaces\nupdate MyTable set\n    CityStZip= \n        replace(\n            replace(\n                replace(CityStZip,'   ',' '),\n                '  ',' '),\n            ',','')\n\nselect\n    --check if state and zip are there and then grab the city\n    case when isNumeric(right(CityStZip,1))=1\n            then left(CityStZip,len(CityStZip)-charindex(' ',reverse(CityStZip),\n                                        charindex(' ',reverse(CityStZip))+1)+1)\n        --no zip. check for state\n        when left(right(CityStZip,3),1) = ' '\n            then left(CityStZip,len(CityStZip)-charIndex(' ',reverse(CityStZip)))\n        else CityStZip\n        end as City,\n    --check if zip is there and then grab the city\n    case when isNumeric(right(CityStZip,1))=1\n            then substring(CityStZip,\n                    len(CityStZip)-charindex(' ',reverse(CityStZip),\n                                                charindex(' ',reverse(CityStZip))+1)+2,\n                    2)\n        --no zip. check if 3rd to last char is a space and grab the last two chars\n        when left(right(CityStZip,3),1) = ' '\n            then right(CityStZip,2)\n        end as [State],\n    --grab everything after the last space if the last character is numeric\n    case when isNumeric(right(CityStZip,1))=1\n            then substring(CityStZip,\n                    len(CityStZip)-charindex(' ',reverse(CityStZip))+1,\n                    charindex(' ',reverse(CityStZip)))\n        end as Zip\nfrom MyTable\n","2167":"SELECT generate_series, COUNT(\"timeStarted\") \nFROM generate_series('2015-04-07 00:00:00+01', '2015-04-07 23:59:00+01', '1 hour'::interval)\nLEFT JOIN session s ON date_trunc('hour', \"timeStarted\"::timestamp) = generate_series\n    AND \"timeStarted\" BETWEEN timestamp with time zone '2015-04-07 00:00:00+01' AND timestamp with time zone '2015-04-07 23:59:00+01'\n    GROUP BY generate_series\nORDER BY generate_series;\n","2168":"select firstname, lastname, scheduled, posted, eventadded\nfrom (select rs.*,\n             row_number() over (partition by firstname, lastname\n                                order by (case when eventadded is not null then 1 else 2 end)\n                               ) as seqnum\n      from ResultSet rs\n     ) rs\nwhere seqnum = 1;\n","2169":"select t1.id, \n       t1.name,\n       case when t2.id is null \n            then 'False' \n            else 'True' \n        end DoesExist\n  from Table1 t1\n  left join Table2 t2\n    on t1.ID = t2.ID\n","2170":"INSERT INTO `test_data` \n(`product_id`, `meta_key`, `meta_value`)  \nSELECT \n    td.`product_id`, \n    wp2.`meta_key`, \n    wp2.`meta_value` \nFROM `test_data` td\nINNER JOIN `wp_postmeta` wp1 ON \n    wp1.`meta_value` = td.`meta_value` AND wp1.`meta_key`= '_wpsc_sku' \nINNER JOIN `wp_postmeta` wp2 ON \n    wp2.`post_id` = wp1.`post_id` AND wp2.`meta_key`= '_wpsc_smaak' \n","2171":"array_length(array[[1, 2], [3, 4], [5, 6]], 1) ---> 3\narray_length(array[[1, 2], [3, 4], [5, 6]], 2) ---> 2\n","2172":"SELECT table1.user_id, schools.value AS school, languages.value AS language\nFROM table1  \nLEFT JOIN table2 AS schools ON schools.user_id = table1.user_id\n    AND schools.key = 'school'\nLEFT JOIN table2 AS languages ON languages.user_id = table1.user_id\n    AND languages.key = 'language'\n","2173":"Select FFE.form_entry_id\n    , Min( Case When FF.name = 'Foo' Then FFE.value End ) As `Foo`\n    , Min( Case When FF.name = 'Bar' Then FFE.value End ) As `Bar`\n    , ...\nFrom FormFieldEntry As FFE\n    Join FormField As FF\n        On FF.id = FFE.form_field_id\nGroup By FFE.form_entry_id\n","2174":"SELECT * FROM table t1\nJOIN table t2\nON t1.Title = t2.Title\nWHERE t1.Codes = '020'\nAND t2.Codes = '021'\n","2175":"select count(distinct l1.leadId) as accepted from leads l1\nleft join leads l2\non l1.leadId = l2.leadId and l1.date < l2.date\nwhere l2.date is null and l1.`change` like '%OK%'\n","2176":"select sum(case when col1 in ('a','b') then col2 end) as ab_sum,\n       sum(case when col1 in ('c','d') then col2 end) as cd_sum\nfrom your_table\n","2177":"CREATE transaction_vw AS\nSELECT t.*\n      ,CASE WHEN date_returned is null\n             and (sysdate - date_returned_out)\n               > DECODE(rental_code\n                       ,'R101', 1\n                       ,'R103', 3\n                       ,'R105', 5)\n       THEN trunc(sysdate - date_returned_out) * 2\n       END AS fine_due\nFROM transaction t;\n","2178":"DELETE FROM table WHERE primary_key NOT IN (SELECT MIN(primary_key) FROM table GROUP BY secondID)\n","2179":"SELECT user_id,GROUP_CONCAT(id separator \",\") as sets \nFROM my_table \nGROUP BY user_id;\n","2180":"Select Count(*) as CountRecord from Account\n","2181":" SELECT t.*, m.*\n FROM topic t\n LEFT JOIN\n   (SELECT id_topic, MAX(created) AS created\n    FROM message\n    GROUP BY id_topic\n   ) T2 ON t.id = T2.id_topic\n LEFT JOIN message m ON m.id_topic = T2.id_topic AND m.created = T2.created\n","2182":" SELECT Initialdate, OriginalTime, Gate1, \n      Destindate, DestinationTime, Gate2, \n      COUNT(1) as Freq\n FROM TABLE1\n GROUP BY Initialdate, OriginalTime, Gate1, \n      Destindate, DestinationTime, Gate2\n","2183":"Select EmailAddress,Birthday From table1 Where Birthday Between to_date('01-01-1946','MM-DD-YYYY') AND to_date('01-01-1988','MM-DD-YYYY');\n","2184":"SQL> select\n  2      translate(\n  3            initcap('newyork is a BEAUTIFUL city')\n  4               , 'ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'\n  5               , 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  6              )\n  7  from dual\n  8  \/\n\nTRANS\n-----\nNIABC\n\nSQL>\n","2185":"if($sql = $db->prepare('select zip from _zipcode where zip like ?'))\n{\n    $sql->bind_param(\"s\", $consulta);\n    $sql->execute();\n    $sql->bind_result($zip);\n\n    while ($sql->fetch()) {\n        echo \"Zip: $zip\\n\";\n    }\n\n    $sql->close();\n}\n","2186":"DECLARE @liststr VARCHAR(MAX);\nSET @liststr = '';\n","2187":"DELETE a.*\nFROM Aliases_Table a\nWHERE a.Aliase_ID IN ( \n                       SELECT\n                       c.Aliase_ID \n                       FROM CI_Aliases c\n                       WHERE c.CI_Ref = 3\n                      )\n","2188":"SELECT n.id\nFROM news INNER JOIN\n     news_tag_cross ntc \n     ON ntc.newsid = n.id INNER JOIN\n     tags t \n     ON t.id = ntc.tagid\nGROUP BY n.id\nHAVING SUM(t.name = 'Dealer') > 0 AND\n       SUM(t.name = 'Client') > 0;\n","2189":"$query = \"INSERT INTO `user`\n    (`fname`,\n    `lname`,\n    `email`,\n    `password`,\n    `permission`,\n    `idcustomer`)\n     select\n    '\" . $firstname . \"',\n    '\" . $lastname . \"',\n    '\" . $email . \"',            \n    '\" . $password . \"',\n    'admin',\n    \" . $idcustomer . \"\n    from customer\n    where idcustomer = 2\n          and (number_of_users - (select count(*) from user where idcustomer=2)) > 0\n    );\";\n","2190":"Update Table_A\nSet A.ColX = B.Colx\nFrom Table_A A\n Join Table_B B on B.col1 = A.col1\n    and (B.col2 = A.col2 OR or B.col2 is null)\n","2191":"UPDATE test_t t\n   SET t.complete_flag =\n       (SELECT tt.complete_flag\n          FROM test_t tt\n         WHERE tt.component_id = 30101\n           AND tt.form_id = t.form_id)\n WHERE t.component_id = 30162;\n","2192":"id             int   auto_increment & primary key\ntitle          varchar(*)\ncontent        text or big varchar according to your needs\nposted_on      datetime or timestamp\nposted_by      int key representing the authors id\n","2193":"UPDATE my_table\nSET    column_1 = COALESCE(column_1,'')\n     , column_2 = COALESCE(column_2,'')\n     ...\nWHERE  column_1 IS NULL OR\n       column_2 IS NULL OR\n       ...                  -- avoid empty updates\n;\n","2194":"Create Table admin.dupes( col1, col2, col3 )\nAS\nselect col1, col2,right(rtrim(col3),1) as col3 \nFROM table\nGROUP BY col1, col2,right(rtrim(col3),1)\nhaving COUNT(NULLIF(ltrim(col4), '')) =1 and COUNT(*)=2\n\ndelete from table\nwhere \ntable.col4 is not  null and LTRIM(table.col4)<>''\nand exists (select 1 from dupes d where table.col1 = d.col1 and table.col2= d.col2 and right(rtrim(table.col3),1) = d.col3\n)\n\nDrop Table admin.dupes\n","2195":"     SELECT  wp_posts.post_title as name, \naddress.meta_value as address,\n latitude.meta_value as lat,\n longitude.meta_value as lng,\n telephone.meta_value as telephone,\n\n   ( 3959 * acos(\n    cos( radians( '%s' ) ) *\n    cos( radians( CONVERT( latitude.meta_value, DECIMAL( 10, 6 ) ) ) ) *\n    cos( radians( CONVERT( longitude.meta_value, DECIMAL( 10, 6 ) ) ) - radians( '%s' ) ) +\n    sin( radians( '%s' ) ) * sin( radians( CONVERT( latitude.meta_value, DECIMAL( 10, 6 ) ) ) )\n     ) ) AS distance\n\nFROM wp_posts\nLEFT JOIN wp_postmeta AS address ON(\nwp_posts.ID = address.post_id\nAND address.meta_key = '_dealer_address'\n)\nLEFT JOIN wp_postmeta AS latitude ON(\nwp_posts.ID = latitude.post_id\nAND latitude.meta_key = '_dealer_latitude'\n)\nLEFT JOIN wp_postmeta AS longitude ON(\nwp_posts.ID = longitude.post_id\nAND longitude.meta_key = '_dealer_longitude'\n)\nLEFT JOIN wp_postmeta AS telephone ON(\nwp_posts.ID = telephone.post_id\nAND telephone.meta_key = '_dealer_telephone'\n)\nWHERE wp_posts.post_type = 'dealers' HAVING distance < '%s' ORDER BY distance LIMIT 0 ,         20\n","2196":"SELECT p.*\nFROM person p\nJOIN person_availability pa ON p.id = pa.person_id\nJOIN availability a ON a.id = pa.availability_id\nWHERE p.id = 1 AND a.day IN (1,2,3)\nGROUP BY p.id\nHAVING COUNT(a.day) = 3;\n","2197":"SET @sql = NULL;\n\nSELECT GROUP_CONCAT(DISTINCT\n  CONCAT('MAX(CASE WHEN job_id = ''',\n         job_id, \n         ''' THEN start_time END) `',\n         job_id,\n         '_start`',\n         ',',\n         'MAX(CASE WHEN job_id = ''',\n         job_id,\n         ''' THEN end_time END) `',\n         job_id,\n         '_end`' \n         )\n          ORDER BY start_time ASC        \n )\n  INTO @sql\n  FROM t;\n\nSET @sql = CONCAT('SELECT exec_id, ', @sql, ' \n                     FROM t \n                    GROUP BY exec_id');\n\nPREPARE stmt FROM @sql;\nEXECUTE stmt;\nDEALLOCATE PREPARE stmt;\n","2198":"CREATE TABLE t1 (a integer PRIMARY KEY);\n\nCREATE FUNCTION test_exception() RETURNS boolean LANGUAGE plpgsql AS\n$$BEGIN\n   INSERT INTO t1 (a) VALUES (1);\n   INSERT INTO t1 (a) VALUES (2);\n   INSERT INTO t1 (a) VALUES (1);\n   INSERT INTO t1 (a) VALUES (3);\n   RETURN TRUE;\nEXCEPTION\n   WHEN integrity_constraint_violation THEN\n      RAISE NOTICE 'Rollback to savepoint';\n      RETURN FALSE;\nEND;$$;\n\nBEGIN;\n\nSELECT test_exception();\nNOTICE:  Rollback to savepoint\n test_exception \n----------------\n f\n(1 row)\n\nCOMMIT;\n\nSELECT count(*) FROM t1;\n count \n-------\n     0\n(1 row)\n","2199":"SELECT user.name, photo_a.url AS profile_photo_url, photo_b.url as background_photo_url FROM user LEFT JOIN photo as photo_a ON user.profile_photo_uuid = photo_a.uuid LEFT JOIN photo as photo_b ON user.background_photo_uuid = photo_b.uuid WHERE user.uuid = SOME_ID\n","2200":"select min(category_id) as min_cat, \n       group_concat(distinct category_id order by category_id) as category_list, \n       bookmark_id\nfrom your_table\ngroup by bookmark_id\n","2201":"SELECT COUNT(C1), COUNT(C2), COUNT(C3) FROM table WHERE uid=2\n","2202":"Update statement\nUpdate `table_name`\nSet `field_name` = '{\"notifyEmailSystem\":1,\"privacyProfileView\":0,\"privacyPhotoView\":0,\"privacyFriendsView\":0,\"privacyGroupsView\":\"\",\"privacyVideoView\":0,\"notifyEmailMessage\":1,\"notifyEmailApps\":1,\"notifyWallComment\":0}'\n","2203":"SELECT ...\n       (SELECT ... ) AS 'Current - 1',\n       (SELECT ... ) AS 'Current - 2',\n       ...\n  FROM ...\n","2204":"declare @searchvalue varchar(100)\n\nset nocount off\n\nset @searchvalue = 'Hello world'\n\n\ncreate table #tt (table_name varchar(64), column_name varchar(64), count int)\nselect * into #t from \n(\nselect 'select ''' + a.table_name + ''' ''table_name'',''' + a.column_name + ''' ''column_name'', count(*) count from [' + a.table_name +'] where [' +a.column_name+']='''+@searchvalue +'''' + ' group by ['+ a.column_name+']' sqlstring\nfrom INFORMATION_SCHEMA.COLUMNS a\njoin \nINFORMATION_SCHEMA.TABLES b\non a.table_name = b.table_name\nand b.table_type = 'base table'\n where data_type = 'varchar'\n) a\n\n--loop cursor\nDeclare @sqlstring as nvarchar(500)\nDeclare SqlCursor CURSOR FAST_FORWARD FOR\nSELECT sqlstring FROM #t\nOPEN SqlCursor\nFETCH NEXT FROM SqlCursor\nINTO @sqlstring\nWHILE @@FETCH_STATUS = 0\nBEGIN\ninsert #tt\nexec(@sqlstring)\n     FETCH NEXT FROM SqlCursor\n     INTO @sqlstring\nEND\nCLOSE SqlCursor\nDEALLOCATE SqlCursor\nselect * from #tt\ndrop table #tt\ndrop table #t\n","2205":"update orders\nset shipname = replace(replace(shipname, '[',''),']','')\n","2206":"select userId from myTable group by userId having count(*) = 91\n","2207":"Public Sub SaveAnswer(ByVal answer As String)\n    Dim sql As String = \"INSERT INTO [table1] (ans) VALUES (@Answer)\"\n\n    Using cn As New SqlConnection(getConnectionString()), _\n          cmd As New SqlCommand(sql)\n\n        cmd.Parameters.Add(\"@Answer\", SqlDbType.VarChar, 50).Value = answer\n\n        cn.Open()\n        cmd.ExecuteNonQuery()\n    End Using\nEnd Sub\n\nPrivate Function getConnectionString() As String\n    ''\/\/normally read from a config file for this\n\n    Return \"Server=(local)\\SQLEXPRESS;Database=testdb;Trusted_Connection=True;\"\nEnd Function\n","2208":"select *\nfrom (\n  select addresses.phone, addresses.name, orders.order_number, \n         count(orders.order_number) over (partition by addresses.phone) as cnt\n  from orders \n     inner join carts on orders.order_number = carts.id \n     inner join address on carts.address_id = addresses.id \n) t \nwhere cnt = 1;\n","2209":"SELECT \n  u.id AS user_id,\n  SUM(CASE WHEN p.`case` = 1 THEN p.amount ELSE 0 END) AS total_amount_case_1,\n  SUM(CASE WHEN p.`case` = 2 THEN p.amount ELSE 0 END) AS total_amount_case_2 \nFROM\n  users u\n  LEFT JOIN payments p ON u.id = p.user_id \nGROUP BY u.user_id \nORDER BY u.user_id ;\n","2210":"select userid,\n       state,\n       ctime as start_time, \n       lead(ctime) over (partition by userid order by ctime) as end_time\nfrom userstate;\n","2211":"if not exists (select ID from where name = @...)\n   insert into ...\n   select SCOPE_IDENTITY()\nelse \n   (select ID from where name = @...)\n","2212":"Update app_chatmessage set seen='FALSE' where\nactivity_id in \n(\nSELECT\n    app_activity.id\n FROM\n     app_chatmessage\n JOIN\n      app_activity ON app_chatmessage.activity_id = app_activity.id\n GROUP BY\n     app_activity.name\n HAVING\n     COUNT(app_chatmessage.owner_id) = 1\n);\n","2213":"mysql> create table city (\n  id int not null auto_increment, \n  name varchar(45), \n  active tinyint, \n  primary key (id),\n  unique key (id, active));\n\nmysql> create table person (\n  id int not null auto_increment, \n  city_id int,\n  active tinyint, \n  primary key (id), \n  foreign key (city_id, active) references city (id, active) on update cascade);\n\nmysql> insert into city (name, active) values ('New York', 1);\n\nmysql> insert into person (city_id, active) values (1, 1);\n\nmysql> select * from person;\n+----+---------+--------+\n| id | city_id | active |\n+----+---------+--------+\n|  1 |       1 |      1 |\n+----+---------+--------+\n\nmysql> update city set active = 0 where id = 1;\n\nmysql> select * from person;\n+----+---------+--------+\n| id | city_id | active |\n+----+---------+--------+\n|  1 |       1 |      0 |\n+----+---------+--------+\n","2214":"SELECT COLUMN_NAME, DATA_TYPE, IS_NULLABLE, COLUMN_DEFAULT\n  FROM INFORMATION_SCHEMA.COLUMNS\n WHERE table_name = 'tbl_name'\n  [AND table_schema = 'db_name']\n  [AND column_name LIKE 'wild']\nORDER BY COLUMN_NAME\n","2215":"select * \nfrom (SELECT a, b, a+b as TOTAL FROM ( \n           select 7 as a, 8 as b FROM DUAL \n           UNION ALL \n           select 8 as a, 8 as b FROM DUAL \n           UNION ALL \n           select 0 as a, 0 as b FROM DUAL) \n    )\nWHERE TOTAL <> 0 \n; \n","2216":"SELECT t.Name, t.Street, t.City, t.State\nFROM table t \nINNER JOIN (\n     SELECT m.Name, MIN(m.Street + ';' + m.City  + ';' + m.State) AS comb\n     FROM table m\n     GROUP BY m.Name\n) x\n   ON  x.Name = t.Name\n   AND x.comb = t.Street + ';' + t.City  + ';' + t.State\n","2217":"INSERT INTO SASH1.VALIDOSES\n    (col1, col2, ... ,coln)\nSELECT SWOSNAME, 'IBM', SWOSNAME, 'Y', SWPLATFORM \nFROM SASH1.LISTOSNAMES\n","2218":"\n\/\/ Generate random value for use as the 'state'.  Mitigates\n\/\/ risk of CSRF attacks when this value is verified against the\n\/\/ value returned from the OAuth provider with the authorization\n\/\/ code.\n$_SESSION['state'] = rand(0,999999999);\n\n$authorizationUrlBase = 'https:\/\/accounts.google.com\/o\/oauth2\/auth';\n$redirectUriPath = '\/oauth2callback.php';\n\n\/\/ For example only.  A valid value for client_id needs to be obtained \n\/\/ for your environment from the Google APIs Console at \n\/\/ http:\/\/code.google.com\/apis\/console.\n$queryParams = array(\n  'client_id' => '240195362.apps.googleusercontent.com',\n  'redirect_uri' => (isset($_SERVER['HTTPS'])?'https:\/\/':'http:\/\/') .\n                   $_SERVER['HTTP_HOST'] . $redirectUriPath,\n  'scope' => 'https:\/\/www.googleapis.com\/auth\/tasks',\n  'response_type' => 'code',\n  'state' => $_SESSION['state'],\n  'approval_prompt' => 'force', \/\/ always request user consent\n  'access_type' => 'offline' \/\/ obtain a refresh token\n);\n\n$goToUrl = $authorizationUrlBase . '?' . http_build_query($queryParams);\n\n\/\/ Output a webpage directing users to the $goToUrl after \n\/\/ they click a \"Let's Go\" button\ninclude 'access_request_template.php';\n","2219":"DECLARE @Source table\n(\n    SourceUrl varchar(200)\n)\nINSERT INTO @Source\n(SourceUrl)\nVALUES\n('<a href=\"\/publications\/gss2007\/gss2007_6879.ppt\">Presentation (PowerPoint File)<\/a><br>  <a href=\"http:\/\/xxx.xx.xxx.xx:xxxx\/ramgen\/Ipam\/2007\/smil\/7-09-am1.smil\">Presentation (Webcast)<\/a>');\n\n-- INSPECT THIS, IF APPROPRIATE THEN\nSELECT\n    S.SourceUrl AS Before\n,   CHARINDEX('<a href=\"http:\/\/', S.SourceUrl) AS WhereFound\n,   LEFT(S.SourceUrl, CHARINDEX('<a href=\"http:\/\/', S.SourceUrl) -1) AS After\nFROM\n    @Source AS S\nWHERE\n    S.SourceUrl LIKE '%smil%';\n\n-- Only run this if you like the results of the above\nUPDATE\n    S\nSET\n    SourceUrl = LEFT(S.SourceUrl, CHARINDEX('<a href=\"http:\/\/', S.SourceUrl) -1)\nFROM\n    @Source AS S\nWHERE\n    S.SourceUrl LIKE '%smil%';\n","2220":"create trigger LimitTable\non YourTableToLimit\nafter insert\nas\n    declare @tableCount int\n    select @tableCount = Count(*)\n    from YourTableToLimit\n\n    if @tableCount > 50\n    begin\n        rollback\n    end\ngo\n","2221":" CREATE VIEW MRClockByEmployee (ece_employee_ID, ece_most_recent_datetime) AS\n    AS SELECT ece_employee_ID, MAX(ece_datetime) \n    FROM employee_clock_events\n    GROUP BY ece_employee_id;\n\n CREATE VIEW MRClockInfoByEmployee \n     (ece_id, ece_employee_ID, ece_type, ece_datetime, ece_active) AS\n SELECT CE.* FROM employee_clock_events CE JOIN MRClockByEmployee MR\n    ON CE.ece_employee_ID = MR.ece_employee_id AND\n       CE.ece_datetime = MR.ece_most_recent_datetime\n\n SELECT ece_employee_id FROM MRClockInfoByEmployee\n    WHERE type IN ('shift_start', 'shift_resume')\n","2222":"update X \nset data.modify('delete \/date\/entry[@insertedTime < sql:column(\"M.I\")]')\nfrom xmltemp as X\n  cross apply (\n              select dateadd(day, -2, max(E.X.value('@insertedTime', 'datetime')))\n              from X.data.nodes('\/date\/entry') as E(X)\n              ) as M(I)\n","2223":"SELECT\n   u.firstname, u.lastname, t.*\nFROM\n   #users AS u\n   CROSS APPLY\n   (SELECT TOP 1 * \n    FROM OtherTable AS ot \n    WHERE u.userid = ot.userid\n   ORDER BY something) t\n","2224":"MATCH (u)-[:VIEW]->(v)\nRETURN u.username,v.title\n","2225":"Update SomeTable\nset MyField = case when LEFT(MyField, 1) = '|' then '' else '|' end + MyField + case when Right(MyField, 1) = '|' then '' else '|' end\n","2226":"where (($P{parameter1} is null) or (user.id = $P{parameter1}))\n","2227":"update table t\n    set pin = lpad(pin, 3, '0')\n    where length(pin) < 3;\n","2228":"; with transponded as \n(\n  select ID, Type, Value\n    from \n    (\n      select ID, \n             Name, \n             cast (Cost as varchar(100)) Cost, \n             cast (case when Included = 1 then 'Yes' else 'No' end as varchar(100)) Included\n        from ProductInfo\n    ) p\n      unpivot (Value for Type in (Name, Cost, Included) ) a\n)\nselect t1.Type, \n       t1.Value Product1, \n       t2.Value Product2, \n       t3.Value Product3\n  from transponded t1\n  left join transponded t2\n         on t1.Type = t2.Type\n        and t2.id = 2\n   left join transponded t3\n     on t1.Type = t3.Type\n    and t3.id = 3\n  where t1.id = 1\n","2229":"SELECT MIN([PrimaryCompensationBasis-Amount(USD))\nFROM (SELECT TOP 50 PERCENT [PrimaryCompensationBasis-Amount(USD)] FROM qryEEGroup ORDER BY [PrimaryCompensationBasis-Amount(USD)]) tab;\n","2230":"SELECT NOBLOC, SUP_HA,\n       AVG(TigehaBOP) AS NOM_BOP,\n       AVG(TigehaPET) AS NOM_PET,\n       AVG(TigehaSEP) AS NOM_SEP,\n       AVG(VolhaBOP) AS VOL_BOP,\n       AVG(VolhaPET) AS VOL_PET,\n       AVG(VolhaSEP) AS VOL_SEP\nFROM Table\nGROUP BY NOBLOC, SUP_HA\n","2231":"SELECT SERVERPROPERTY ('InstanceName')\n","2232":"SELECT state, max(orderamount) AS amount FROM table GROUP BY state HAVING amount > 15;\n","2233":"SELECT *\nFROM\n    Reps\n    CROSS APPLY\n    (\n        SELECT *\n        FROM Invoices\n        WHERE\n            Invoices.RepID = Reps.ID\n            AND Invoices.InvoiceID < Reps.MaxInvoiceID\n    ) AS CA\n;\n","2234":"CommandText = \"Insert into FileMaster(Subject,FileID) Values('\" & obj.Subject & \"','\" & obj.FileID & \"')\n","2235":"select sum(case when ws.ID_WorkflowType = 1 then 1 else 0 end) as cntCM_PRWK\n     , sum(case when ws.ID_WorkflowType = 3 then 1 else 0 end) as cntCM_CMQ\nfrom dbo.CaseWorkflow cw \njoin vew_CasePersonnelSystemIDs vcps on cw.ID_Case = vcps.ID_Case\njoin dbo.WorkflowStates ws on ws.ID_WorkflowState = cw.ID_WorkflowState\nwhere CMSUID = @nSUID\n","2236":"DoCmd.SetWarnings = False\nDoCmd.RunSQL ...\nDoCmd.SetWarnings = True\n","2237":"select * from table1 where key not in (select tab1 from table2)\n","2238":"select\n    tid\nfrom\n    teacher t\nwhere\n    not exists (\n        select\n            'x'\n        from\n            course_score cs\n                inner join\n            course c\n                on cs.cid = c.cid\n        where\n            c.tid = t.tid\n        group by\n            c.cid\n        having\n            avg(score) <= 80\n    );\n","2239":"CREATE PROCEDURE GetData(@key int = null)\nBEGIN\n  SELECT * FROM Table WHERE (@Key Is NULL or id = @Key)\nEND\n","2240":"select lPE.Person, Sum(lpe.ethnicity) as SumOfIDs,\n       Ethnicity = stuff((select ', ' + E.Name as [text()]\n                          from _linkPersonEthnicity lPE2 join\n                               _Ethnicities e\n                               on lpe2.Ethnicity = e.id\n                          where lpe2.Person = lPE.Person\n                          for xml path('')\n                         ), 1, 2, '')\nfrom _linkPersonEthnicity lPE \ngroup by lPE.Person;\n","2241":"CREATE OR REPLACE TRIGGER trigger_name  \nBEFORE UPDATE of unique_id_to_match\nON table\nFOR EACH ROW\nAS\nBEGIN\n  select \n    NVL(\n      (SELECT b.unique_to_update_from\n      FROM table b\n      WHERE B.other_unique_id = :new.unique_id_to_match\n      ), 0)\n   into :new.unique_to_update \n   FROM dual;\nEND;\n","2242":"WITH    q AS\n        (\n        SELECT  CAST('<root><node>1<\/node><\/root>' AS XML) AS doc\n        )\nSELECT  doc.value('(\/root\/node)[1]', 'INT'),\n        doc.value(N'(\/root\/node)[1]', 'INT')\nFROM    q\n","2243":"select \n    c1, c2, c3  \n    from form_name\n    where data_created >'1273446000' and data_creazione<'1274569200'\n    group by c1,c2, c3 \n    having count(c3)>1\nINTERSECT\nselect \n    c1, c2, c3\n    from form_name \n    where data_created>'1272236400' and data_creazione<'1274569200'\n    group by c1,c2, c3 \n    having count(c3)>2\n","2244":"ObjectQuery<Article> articles = (db as IObjectContextAdapter).ObjectContext.CreateObjectSet<Article>();\narticles = articles.OrderBy(\"it.\" + orderBy + ((bool)desc ? \" desc\" : \"\"));\n\nIQueryable<Article> iArticles = articles;\n\nif(!String.IsNullOrEmpty(search))\n    iArticles = iArticles.Where(a => a.Title.Contains(search) ||\n                                                  a.FullArticle.Contains(search));\n\nResponse.AppendHeader(\"X-Total-Row-Count\", iArticles.Count().ToString());\n\nreturn PartialView(iArticles.Skip(start).Take((int)itemsPerPage));\n","2245":"WITH cte2 AS (SELECT        TOP (100) PERCENT ContractServices_1.ContractServiceID, ContractServices_1.ContractID, ContractServices_1.ServiceType, ContractServices_1.QuoteID, ContractParts_1.PartDescription, \n                                                         ServiceCallCharges_1.ChargeDescription, ServiceCalls_1.ServiceCallID, ServiceCallCharges_1.ShowOnFieldTicket, ContractServices_1.Renewed\n                                FROM            dbo.ContractServices AS ContractServices_1 INNER JOIN\n                                                         dbo.ContractParts AS ContractParts_1 ON ContractServices_1.ContractServiceID = ContractParts_1.ContractServiceID INNER JOIN\n                                                         dbo.ServiceCallCharges AS ServiceCallCharges_1 ON ServiceCallCharges_1.ChargeDescription LIKE '%' + ContractParts_1.PartDescription + '%' INNER JOIN\n                                                         dbo.ServiceCalls AS ServiceCalls_1 ON ServiceCallCharges_1.ServiceCallID = ServiceCalls_1.ServiceCallID AND ContractServices_1.ContractID = ServiceCalls_1.ContractID AND \n                                                         ContractParts_1.ContractID = ServiceCalls_1.ContractID\n                                WHERE        (ServiceCallCharges_1.ChargeDescription LIKE '   -%' OR\n                                                         ServiceCallCharges_1.ChargeDescription LIKE '%') AND (ServiceCallCharges_1.ShowOnFieldTicket = 'True') AND (ContractServices_1.Renewed = 'True')\n                                GROUP BY ContractServices_1.ContractServiceID, ContractServices_1.ContractID, ContractServices_1.ServiceType, ContractServices_1.QuoteID, ContractParts_1.PartDescription, \n                                                         ServiceCallCharges_1.ChargeDescription, ServiceCalls_1.ServiceCallID, ContractServices_1.Renewed, ServiceCallCharges_1.ShowOnFieldTicket\n                                ORDER BY ContractServices_1.ContractID), cte1 AS\n    (SELECT        TOP (100) PERCENT dbo.ContractServices.ContractServiceID, dbo.ContractServices.ContractID, dbo.ContractServices.ServiceType, dbo.ContractServices.QuoteID, dbo.ContractParts.PartDescription, \n                                dbo.ServiceCallCharges.ChargeDescription, dbo.ServiceCalls.ServiceCallID, dbo.ServiceCallCharges.ShowOnFieldTicket, dbo.ContractServices.Renewed\n      FROM            dbo.ContractServices INNER JOIN\n                                dbo.ContractParts ON dbo.ContractServices.ContractServiceID = dbo.ContractParts.ContractServiceID INNER JOIN\n                                dbo.ServiceCallCharges ON dbo.ServiceCallCharges.ChargeDescription LIKE '%' + dbo.ContractParts.PartDescription + '%' INNER JOIN\n                                dbo.ServiceCalls ON dbo.ServiceCallCharges.ServiceCallID = dbo.ServiceCalls.ServiceCallID AND dbo.ContractServices.ContractID = dbo.ServiceCalls.ContractID AND \n                                dbo.ContractParts.ContractID = dbo.ServiceCalls.ContractID\n      WHERE        (dbo.ServiceCallCharges.ChargeDescription LIKE '   -%' OR\n                                dbo.ServiceCallCharges.ChargeDescription LIKE '%') AND (dbo.ServiceCallCharges.ShowOnFieldTicket = 'False') AND (dbo.ContractServices.Renewed = 'True')\n      GROUP BY dbo.ContractServices.ContractServiceID, dbo.ContractServices.ContractID, dbo.ContractServices.ServiceType, dbo.ContractServices.QuoteID, dbo.ContractParts.PartDescription, \n                                dbo.ServiceCallCharges.ChargeDescription, dbo.ServiceCalls.ServiceCallID, dbo.ContractServices.Renewed, dbo.ServiceCallCharges.ShowOnFieldTicket\n      ORDER BY dbo.ContractServices.ContractID)\n    SELECT        TOP (100) PERCENT cte1_1.ContractServiceID, cte1_1.ContractID, cte1_1.ServiceType, cte1_1.QuoteID, cte1_1.PartDescription, cte1_1.ChargeDescription, cte1_1.ServiceCallID, cte1_1.ShowOnFieldTicket, \n                              cte1_1.Renewed\n     FROM            cte1 AS cte1_1 LEFT OUTER JOIN\n                              cte2 AS cte2_1 ON cte1_1.PartDescription = cte2_1.PartDescription AND cte1_1.ContractID = cte2_1.ContractID\n     WHERE        (cte2_1.ShowOnFieldTicket IS NULL)\n     GROUP BY cte1_1.ContractServiceID, cte1_1.ContractID, cte1_1.ServiceType, cte1_1.QuoteID, cte1_1.PartDescription, cte1_1.ChargeDescription, cte1_1.ServiceCallID, cte1_1.ShowOnFieldTicket, cte1_1.Renewed, \n                              cte2_1.ShowOnFieldTicket\n     ORDER BY cte1_1.ContractID\n","2246":"select t.*\nfrom (select t.*,\n             row_number() over (partition by ordernum order by createdon desc) as seqnum\n      from table t\n     ) t\nwhere seqnum = 1;\n","2247":"SELECT user.id, campaign_id, user_id\nFROM user\nLEFT JOIN email_solus\nON email_solus.user_id=user.id\nWHERE user.id NOT IN\n(\n    SELECT user_id\n    FROM email_solus\n    WHERE campaign_id = 3\n)\n","2248":"update\ntable1 inner join table2 on (\/\/join condition)\n\nset table1.column1=table2.column2\n\nwhere \/\/ the clause\n","2249":"SELECT A.*\nFROM YourTable A\nINNER JOIN SPLIT(@Status,',') B\nON A.Status = B.Value\n","2250":"SELECT c.[id_Cust]\n      ,[Name]\n      ,[Omset]\n      ,[Colour]\n      ,[seq]\n      ,(SELECT a.[Address],a.[no1],a.[no2] FROM address_BSM a\n      WHERE a.id_cust = c.id_cust\n  FOR XML PATH ('address_bsm'), TYPE)\n  FROM [dbo].[Customer_BSM] c\n  FOR XML PATH ('customer_bsm')\n","2251":"If coalesce( expr1, expr2, ... expr_n ) is not null then do something end if;\n","2252":"select user_id, req_time, item, v[1] as value1, v[2] as value2\nfrom (\n    select t.*,\n        (\n            select array[\n                coalesce(sum(is_active::integer), 0),\n                count(*)\n                ] as v\n            from t s\n            where\n                user_id = t.user_id\n                and item = t.item\n                and req_time <= t.req_time - interval '1 hour'\n        ) as v\n    from t\n) s\norder by req_time, user_id, item\n","2253":";WITH emps AS (\n    SELECT \n        [EmpName] AS 'EmployeeName',\n        [EndYear] - [Begin Year] AS 'TotalYears'\n    FROM    \n        [dbo].[Employee]\n)\n\nSELECT * FROM emps WHERE TotalYears = (SELECT MAX(TotalYears) FROM emps)\n","2254":"$like_city = preg_replace('\/\/', '%', $search_city); \/\/ Hyderbad => %H%y%d%e%r%b%a%d%\n$sql = \"SELECT * FROM jobs_tbl WHERE job_city LIKE '$like_city' \"\n","2255":"$ java -jar path\/to\/gerrit.war reindex -d path\/to\/gerrit-site-dir\n","2256":"SELECT T1.Animal_ID, \n       T1.TestDate,\n       (SELECT min(TestDate)\n        FROM Exams\n        WHERE Animal_ID = T1.Animal_ID\n          AND TestDate > T1.TestDate\n        GROUP BY Animal_ID\n        ) AS Next_TestDate, \n        datediff((SELECT min(TestDate)\n                  FROM Exams\n                  WHERE Animal_ID = T1.Animal_ID\n                    AND TestDate > T1.TestDate\n                  GROUP BY Animal_ID\n                  ), T1.TestDate) AS Elapsed_Days\nFROM Exams T1\nORDER BY Animal_ID, TestDate;\n","2257":"   SELECT WMSYS.WM_CONCAT('PARTITION TABLE_NAME_'\n  || TO_CHAR(sysdate + (level-1)\/24, 'yyyymmddHH24')\n  || ' VALUES LESS THAN (TIMESTAMP'''\n  || TO_CHAR(sysdate + (level)\/24, 'yyyy-mm-dd HH24')\n  || ':00:00'') ') OUTPUT\nFROM DUAL\n  CONNECT BY level <= 24\n\n    -----------------------------OUTPUT----------------------------------------\n OUTPUT\nPARTITION TABLE_NAME_2016041907 VALUES LESS THAN (TIMESTAMP'2016-04-19 08:00:00') ,PARTITION TABLE_NAME_2016041908 VALUES LESS THAN (TIMESTAMP'2016-04-19 09:00:00') ,PARTITION TABLE_NAME_2016041909 VALUES LESS THAN (TIMESTAMP'2016-04-19 10:00:00') ,PARTITION TABLE_NAME_2016041910 VALUES LESS THAN (TIMESTAMP'2016-04-19 11:00:00') ,PARTITION TABLE_NAME_2016041911 VALUES LESS THAN (TIMESTAMP'2016-04-19 12:00:00') ,PARTITION TABLE_NAME_2016041912 VALUES LESS THAN (TIMESTAMP'2016-04-19 13:00:00') ,PARTITION TABLE_NAME_2016041913 VALUES LESS THAN (TIMESTAMP'2016-04-19 14:00:00') ,PARTITION TABLE_NAME_2016041914 VALUES LESS THAN (TIMESTAMP'2016-04-19 15:00:00') ,PARTITION TABLE_NAME_2016041915 VALUES LESS THAN (TIMESTAMP'2016-04-19 16:00:00') ,PARTITION TABLE_NAME_2016041916 VALUES LESS THAN (TIMESTAMP'2016-04-19 17:00:00') ,PARTITION TABLE_NAME_2016041917 VALUES LESS THAN (TIMESTAMP'2016-04-19 18:00:00') ,PARTITION TABLE_NAME_2016041918 VALUES LESS THAN (TIMESTAMP'2016-04-19 19:00:00') ,PARTITION TABLE_NAME_2016041919 VALUES LESS THAN (TIMESTAMP'2016-04-19 20:00:00') ,PARTITION TABLE_NAME_2016041920 VALUES LESS THAN (TIMESTAMP'2016-04-19 21:00:00') ,PARTITION TABLE_NAME_2016041921 VALUES LESS THAN (TIMESTAMP'2016-04-19 22:00:00') ,PARTITION TABLE_NAME_2016041922 VALUES LESS THAN (TIMESTAMP'2016-04-19 23:00:00') ,PARTITION TABLE_NAME_2016041923 VALUES LESS THAN (TIMESTAMP'2016-04-20 00:00:00') ,PARTITION TABLE_NAME_2016042000 VALUES LESS THAN (TIMESTAMP'2016-04-20 01:00:00') ,PARTITION TABLE_NAME_2016042001 VALUES LESS THAN (TIMESTAMP'2016-04-20 02:00:00') ,PARTITION TABLE_NAME_2016042002 VALUES LESS THAN (TIMESTAMP'2016-04-20 03:00:00') ,PARTITION TABLE_NAME_2016042003 VALUES LESS THAN (TIMESTAMP'2016-04-20 04:00:00') ,PARTITION TABLE_NAME_2016042004 VALUES LESS THAN (TIMESTAMP'2016-04-20 05:00:00') ,PARTITION TABLE_NAME_2016042005 VALUES LESS THAN (TIMESTAMP'2016-04-20 06:00:00') ,PARTITION TABLE_NAME_2016042006 VALUES LESS THAN (TIMESTAMP'2016-04-20 07:00:00') -----------------------------------------------------------------------------\n","2258":"select field1\n      , f2\n      , f3\n      , 'FLOW'||trim(to_char(rnk))\nfrom \n     (select field1\n      , f2\n      , f3\n      , sum(case when f3 = 1 then 1 else 0 end)\n     over (order by field1, f3 range between unbounded preceding and current row) rnk\n    from your_table )\n","2259":"bcp \"SELECT * FROM CustomerTable\" queryout \"c:\\temp\\CustomerTable.bcp\" -N -S SOURCESERVERNAME -T \n\nbcp TargetDatabaseTable in \"c:\\temp\\CustomerTable.bcp\" -N -S TARGETSERVERNAME -T -E\n","2260":"SELECT display_order AS CurrentDisplayOrder, \n    ROW_NUMBER() OVER (ORDER BY display_order) AS NewDisplayOrder\nFROM YourTable\nORDER BY display_order\n","2261":"DECLARE @PersonID INT\n\nINSERT INTO dbo.Person (Name, Address)\nVALUES (@Name, @Address)\n\nSET @PersonID = SCOPE_IDENTITY()\n\nINSERT INTO dbo.Product_Data (PersonID, Product, Quantity, DueDate)\nVALUES (@PersonID, @Product, @Quantity, @DueDate)\n","2262":"update mytable\n   set a = first_part(gen.id),\n       b = second_part(gen.id),\n       c = third_path(gen.id)\n  from (\n          select genid() as genid, id\n          from mytable \n          where package_id = 10\n       ) gen\n where mytable.id = gen.id;\n --and package_id = 10 -- This predicate is no longer necessary as the subquery\n                       -- already filters on package_id, as Erwin mentioned\n","2263":"delete \nfrom posts \nwhere timestampdiff(hour, current_timestamp, time_published)>=4\n","2264":"SELECT * FROM COM\nWHERE DateofPurchase between trunc((trunc(sysdate,'MM')-1),'MM')  and trunc(sysdate,'MM')-1\n\ntrunc((trunc(sysdate,'MM')-1),'MM') -->  last_month_fist_day\ntrunc(sysdate,'MM')-1               -->  last_month_last_day\n","2265":"SELECT M.ConversationID, \nMAX(CASE WHEN M.DateTime = X.FirstRow THEN M.Subject END) AS Subject,\nCAST(COALESCE(MAX(CASE WHEN M.DateTime = X.LastRowSentByOtherUser \n                       THEN M.DateTime END),X.LastRow) AS DateTime)AS LastTime,\nMAX(CASE WHEN M.DateTime = X.LastRow THEN M.Message END) AS Message,\nMAX(CASE WHEN FromID = 1 THEN ToID ELSE FromID END) AS OtherParticipantId\nFROM messages M\nJOIN (\n    SELECT ConversationID, MIN(DateTime) AS FirstRow, MAX(DateTime) AS LastRow,\n    MAX(CASE WHEN FromID<>1 THEN DateTime END) AS LastRowSentByOtherUser\n    FROM messages\n    WHERE FromID=1 OR ToID=1\n    GROUP BY ConversationID\n) X ON X.ConversationID = M.ConversationID\nAND (M.DateTime IN (X.FirstRow, X.LastRow, X.LastRowSentByOtherUser))\nGROUP BY M.ConversationID\nHAVING MAX(CASE WHEN M.DateTime = X.LastRowSentByOtherUser \n                   THEN M.DateTime END) IS NOT NULL\n","2266":"SELECT DISTINCT LOWER(SUBSTR(firstName,1,1)) firstChars\nFROM your_table\nWHERE LOWER(SUBSTR(firstName,1,1)) IN\n ('a','b','c','d','e','f','g','h','i','j',\n  'k','l','m','n','o','p','q','r','s','t',\n  'u','v','w','x','y','z')\nORDER BY firstChars\n","2267":"SELECT strftime('%s','now','localtime')-strftime('%s','2011-08-18 22:49:00') as date;\n","2268":"UPDATE T_Example  \n    SET MT_Lang_DE = upper(substring(MT_Lang_DE, 1, 1)) + substring(lower(MT_Lang_DE), 2, length(MT_Lang_DE)-1)\n","2269":"DROP TABLE dbo.Report\nCREATE TABLE dbo.Report (\nPatientID varchar(10) NOT NULL,\nReviewId int NOT NULL\n)\n\nDECLARE c_patients CURSOR\nREAD_ONLY\nFOR SELECT DISTINCT PatientID, ReviewId FROM dbo.BloodSampleData ORDER BY PatientID ASC\n\nDECLARE @patient_id varchar(10), @review_id int\nOPEN c_patients\nFETCH NEXT FROM c_patients INTO @patient_id, @review_id\nWHILE (@@fetch_status <> -1)\nBEGIN\n    IF (@@fetch_status <> -2)\n    BEGIN\n        INSERT INTO dbo.Report (PatientID, ReviewId) VALUES (@patient_id, @review_id)\n\n        DECLARE c_reviews CURSOR\n        READ_ONLY\n        FOR SELECT [Date], [BloodSampleID] FROM dbo.BloodSampleData WHERE PatientID = @patient_id AND ReviewId = @review_id ORDER BY [Date] ASC\n\n        DECLARE @date DATE, @blood_sample_id INT, @review_num int\n        OPEN c_reviews\n        SET @review_num = 0\n        FETCH NEXT FROM c_reviews INTO @date, @blood_sample_id\n        WHILE (@@fetch_status <> -1)\n        BEGIN\n            IF (@@fetch_status <> -2)\n            BEGIN\n\n                IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Report' AND COLUMN_NAME LIKE '%' + CAST(@review_num AS VARCHAR))\n                    EXEC ('ALTER TABLE dbo.Report ADD [Date' + @review_num + '] date, [BloodSampleID' + @review_num + '] int')\n                DECLARE @update_sql VARCHAR(MAX) \n                SET @update_sql  ='UPDATE dbo.Report SET [Date' + CAST(@review_num AS VARCHAR) + '] =  CONVERT(date, ''' + CONVERT(varchar, @date, 120) + ''', 120), [BloodSampleID' + CAST(@review_num AS VARCHAR) + '] = ' + CAST(@blood_sample_id AS VARCHAR) + ' WHERE PatientID = ''' + @patient_id + ''' AND ReviewId = ' + CAST(@review_id AS varchar)\n                PRINT @update_sql\n                EXEC (@update_sql) \n\n                SET @review_num = @review_num + 1    \n            END\n            FETCH NEXT FROM c_reviews INTO @date, @blood_sample_id\n        END\n\n        CLOSE c_reviews\n        DEALLOCATE c_reviews\n\n    END\n    FETCH NEXT FROM c_patients INTO  @patient_id, @review_id\nEND\n\nCLOSE c_patients\nDEALLOCATE c_patients\nGO\n\nSELECT * FROM dbo.Report\n","2270":"1, 1, 1\n1, 6, 2\n","2271":"select s.*, f.firma_adi,\n       (select SUM(sd.fiyat)\n        from fuar_sozlesme1_detay fd\n        where sd.sozlesme_id = s.id\n       ) as konak,\n       (select SUM(ss.fiyat)\n        from fuar_sozlesme1_sponsor ss\n        where (ss.sozlesme_id = s.id)\n       ) as sponsor\nfrom fuar_sozlesme1 s inner join\n     fuar_firma_2012 f\n     on (s.cari = f.cari)\norder by s.id DESC\n","2272":"create table numbers (\n    number int not null\n        check(number >= 1234 and number <= 4523),\n    ...\n)\n\ncreate table numbers (\n    number int not null,\n    check(number >= 1234 and number <= 4523),\n    ...\n)\n\ncreate table numbers (\n    number int not null,\n    constraint number_range_check\n        check(number >= 1234 and number <= 4523),\n    ...\n)\n","2273":"SELECT Widget, to_char(timestamp_,'YYYY-MM-DD'), Count(Widget)\nFROM Widget\nWHERE timestamp_ BETWEEN to_date('YYYY-MM-DD HH24:MI:SS','%date1%') AND to_date('YYYY-MM-DD HH24:MI:SS','%date2%')\nAND action LIKE 'reject'\nGROUP BY Widget, to_char(timestamp_,'YYYY-MM-DD')\nHAVING Count(Widget) > 1;\n","2274":"INSERT INTO basic_data (customer,total_value)\nSELECT customer, total_value\nFROM\n(\n    SELECT customer, SUM(sales) total_value\n    FROM   sales a\n    GROUP  BY customer\n) c\nON DUPLICATE KEY UPDATE total_value = c.total_value\n","2275":"SELECT DATE_FORMAT(dateadded, '%y-%m-%d') \nFROM my_table\n","2276":"select datediff(second, date1, date2) \/ 60.0 as diff_in_minutes\n","2277":"BEGIN\n    if (@ANSI_Attachment = 1) \n    begin\n        --Copy temp attachments to sysmail_attachments      \n        INSERT INTO sysmail_attachments(mailitem_id, filename, filesize, attachment)\n        SELECT @mailitem_id, filename, filesize, \n                convert(varbinary(max), \n                    substring( -- remove BOM mark from unicode\n                        convert(varchar(max), CONVERT (nvarchar(max), attachment)), \n                        2, DATALENGTH(attachment)\/2\n                    )\n                )\n        FROM sysmail_attachments_transfer\n        WHERE uid = @temp_table_uid\n    end else begin\n        --Copy temp attachments to sysmail_attachments      \n        INSERT INTO sysmail_attachments(mailitem_id, filename, filesize, attachment)\n        SELECT @mailitem_id, filename, filesize, attachment\n        FROM sysmail_attachments_transfer\n        WHERE uid = @temp_table_uid\n    end\nEND `\n","2278":"SELECT a.Id,a.Value,a.Year,MAX(b.Value)\nFROM tableA A\nJOIN tableB B ON A.Year = b.Year AND b.Value < A.Value\nGROUP BY a.Id,a.Value,a.Year\n","2279":"SELECT \nm.match_id\nFROM match m\nWHERE \nm.match_id NOT IN\n(\n    SELECT\n    ml.match_id \n    FROM message_log ml\n)\n","2280":"SELECT MAX(ID)\nFROM YourTable\nWHERE Result = 'PASS'\nGROUP BY `GROUP`;\n","2281":"  SELECT t.inv,\n         MAX(CASE WHEN t.description = 'CHARGES' THEN t.amount ELSE NULL END) AS charges,\n         MAX(CASE WHEN t.description = 'FREIGHT' THEN t.amount ELSE NULL END) AS freight,\n         MAX(CASE WHEN t.description = 'INSURANCE' THEN t.amount ELSE NULL END) AS insurance\n    FROM YOUR_TABLE t\nGROUP BY t.inv\nORDER BY t.inv\n","2282":"-- declare a helper table variable\nDECLARE @TableOfID TABLE (OldID INT, NewID INT)  \n\n-- insert rows into the \"newtable\" - OUTPUT the inserted ID (assuming it's INT IDENTITY)\n-- and the \"old ID\" into the table variable\nINSERT INTO dbo.newTable(OldID, Col1, Col2, ..., ColN)\nOUTPUT Inserted.ID, Inserted.OldID INTO @TableOfID(NewID, OldID)\n   SELECT \n       ID, Col1, Col2, .., ColN\n   FROM \n       dbo.oldtable\n   WHERE \n      ..... (some WHERE conditions here)\n\n-- update the \"oldtable\"\nUPDATE \n    dbo.oldtable\nSET \n    NewID = t.NewID\nFROM \n    @TableOfID t\nWHERE\n    dbo.oldtable.ID = t.OldID\n","2283":"CREATE OR REPLACE FUNCTION dwh.dim_table_notification()\n  RETURNS void LANGUAGE plpgsql AS\n$func$\nDECLARE\n   myschema text;\nBEGIN\n\n-- truncate simply goes here:\nTRUNCATE dwh.prod_table_notify;\n\nFOR myschema IN\n   SELECT quote_ident(table_schema)\n   FROM   information_schema.tables\n   WHERE  table_name IN ('dim_loan_type', 'dim_acct_type')\n   AND    table_schema NOT LIKE 'pg_%'\n   AND    table_schema NOT IN\n          ('information_schema', 'ad_delivery', 'dwh', 'users', 'wand', 'ttd')\n   ORDER  BY table_schema\nLOOP\n   EXECUTE '\n   INSERT INTO dwh.prod_table_notify\n              (userid, acct_type_id, acct_type, acct_type_desc, loan_type)\n   SELECT '''|| myschema ||''', loan_type_id, loan_type::varchar(10)\n        , loan_type_desc::varchar(50), term_code, 1 AS loan_type\n   FROM   '|| myschema || '.dim_loan_type\n   WHERE  term_code IS NULL\n   UNION ALL\n   SELECT '''|| myschema ||''' AS userid, acct_type_id, acct_type::varchar(10)\n       , acct_type_desc::varchar(50), term_code, 0 AS loan_type\n   FROM   '|| myschema || '.dim_acct_type\n   WHERE term_code IS NULL';\nEND LOOP;\nEND\n$func$\n","2284":"Date mmsDate = new Date(dateVal * 1000);\n","2285":";with FundCounts As\n(\n    Select FundID, Count(*) * 0.2 As TopTwentyCount\n    From Finance\n    Group By FundID\n)\nselect F.FundID, Sum(Value) as TopTwentyValueSum\nfrom Finance F\ninner join FundCounts FC on F.FundID = FC.FundID\nwhere F.[Rank] <= FC.TopTwentyCount \ngroup by F.FundID\n","2286":"SELECT rec.id, title.name\nFROM Records rec\nLEFT JOIN Titles title ON title.record_id = rec.id and title.language='de';\n\nSELECT rec.id, title.name\nFROM Records rec\nLEFT JOIN Titles title ON title.record_id = rec.id and title.language='en';\n\n\nID  NAME\n1   ACHTUNG\n2   (null)\n\nID  NAME\n1   Warning\n2   Ambulance\n","2287":"Sub LoadSheet()\nDim accappl As Access.Application\nDim strpathdb As String\nDim strpathxls As String\nDim myrange As String, myrow1 As String, myrow2 As String\n\nmyrow1 = Range(\"a1\").End(xlDown).End(xlDown).Row\nmyrow2 = Range(\"a1\").End(xlDown).End(xlDown).End(xlDown).Row\n\nmyrange = ActiveSheet.Name & \"!A\" & myrow1 & \":H\" & myrow2\n\n'path to the database\nstrpathdb = \"X:\\cre\\dep\\STRAT_PLAN\\StratPlan.mdb\"\n'path to the upload file\nstrpathxls = ActiveWorkbook.FullName\nSet accappl = New Access.Application\n\naccappl.OpenCurrentDatabase strpathdb\n\naccappl.DoCmd.TransferSpreadsheet transfertype:=acImport, _\n            tablename:=\"Tbl_Growth_Metric\", _\n            Filename:=strpathxls, Hasfieldnames:=True, _\n            Range:=myrange, SpreadsheetType:=5\n            'The Spreadsheet type = 5 specifies an Excel 5.0\/7.0 file\n            'format\n\nMsgBox \"All records are loaded\"\n\naccappl.Quit\n\nEnd Sub\n","2288":"select \n    utl_raw.cast_to_number(low_value), \n    utl_raw.cast_to_number(high_value)\nfrom cols\nwhere column_name = '<column_name>' and table_name = '<table_name>'\n","2289":"--Create table of dummy data\ncreate table #person (\npersonID integer IDENTITY(1,1) NOT NULL,\nname      varchar(255) not null,\ndob       date,\nfather    integer\n);\n\nINSERT INTO #person(name,dob,father)Values('Pops','1900\/1\/1',NULL);  \nINSERT INTO #person(name,dob,father)Values('Grandma','1903\/2\/4',null);\nINSERT INTO #person(name,dob,father)Values('Dad','1925\/4\/2',1);\nINSERT INTO #person(name,dob,father)Values('Uncle Kev','1927\/3\/3',1);\nINSERT INTO #person(name,dob,father)Values('Cuz Dave','1953\/7\/8',4);\nINSERT INTO #person(name,dob,father)Values('Billy','1954\/8\/1',3);\n\nDECLARE @OldestPerson INT; \nSET @OldestPerson = 1; -- Set this value to the ID of the oldest person in the family\n\nWITH PersonHierarchy (personID,Name,dob,father, HierarchyLevel) AS\n(\n   SELECT\n      personID\n      ,Name\n      ,dob\n      ,father,\n      1 as HierarchyLevel\n   FROM #person\n   WHERE personID = @OldestPerson\n\n   UNION ALL\n\n   SELECT\n    e.personID,\n      e.Name,\n      e.dob,\n      e.father,\n      eh.HierarchyLevel + 1 AS HierarchyLevel\n   FROM #person e\n      INNER JOIN PersonHierarchy eh ON\n         e.father = eh.personID\n)\n\nSELECT *\nFROM PersonHierarchy\nORDER BY HierarchyLevel, father;\n\nDROP TABLE #person;\n","2290":"select column_name\nfrom information_schema.columns\nwhere table_name = 'yourTableName'\nand data_type like '%date%'\n","2291":";WITH Payments AS\n(   SELECT  CARHARTAR,\n            CARHARREFNO,\n            CARHARCARKOD,\n            CARHARCARUNVAN,\n            CARHARACIKLAMA,\n            CARHARTUTAR,\n            ROW_NUMBER() OVER(PARTITION BY CARHARCARKOD ORDER BY CARHARTAR DESC) [RowNumber]\n    FROM    CARHAR\n    WHERE   CARHARTIPI IN (2, 4)\n    AND     CARHARISTIPNO IN (2, 6)\n    AND     CARHARCARKOD NOT LIKE 'W%'\n    AND     CARHARCARKOD NOT LIKE 'Z%'\n    AND     CARHARGCFLAG = 2\n    AND     CARHARIADEFLAG = 0\n)\nSELECT  CARHARTAR,\n        CARHARREFNO,\n        CARHARCARKOD,\n        CARHARCARUNVAN,\n        CARHARACIKLAMA,\n        CARHARTUTAR\nFROM    Payments\nWHERE   RowNumber = 1\nORDER BY CARHARTAR \n","2292":"select movie.name\nfrom movie\njoin moviehascast mc on mc.movieid = movie.id\njoin cast on cast.id = mc.castid\nwhere cast.name in (@actor1, @actor2)\ngroup by movie.name\nhaving count(1) = @numberOfActorsSearched\n","2293":"UPDATE [rs_DEVICES]\nSET [device] = dbo.pad_zero(12,[device])\nWHERE LEN([device]) < 12 AND NOT EXISTS (\n    SELECT 1 FROM rs_DEVICES r1 WHERE r1.device = dbo.pad_zero(12,[device])\n)\n","2294":"SELECT\n  Place.*,\n  IF(IFNULL(MIN(place_discount.idDiscount),0)>0,1,0) AS hasDiscount\nFROM place\nLEFT JOIN place_discount ON Place.id=place_discount.idPlace\nGROUP BY Place.id\n","2295":"SELECT fruits FROM tblEatables WHERE EatID \n NOT IN\n (SELECT Eatbles_Id WHERE  Edible_Status = 1)\n","2296":"select t1.ID1\n     , t2.grade\n     , t1.ID2\n     , t3.grade\nfrom Friends t1 \njoin Highschooler t2 on t1.ID1 = t2.ID \njoin Highschooler t3 on t1.ID2 = t3.ID\n","2297":"IF @DefaultID IS NULL\n","2298":"CREATE FUNCTION getDescription1 (@code varchar(32))\nRETURNS  nvarchar(1000)\nAS\n  DECLARE @p_str NVARCHAR(1000)\n    SET @p_str = ''      \n SELECT @p_str = @p_str +  (specName+': '+specStr+', ')\n     FROM productSpecs \nwhere specStr<>'' and visibility=1 and productCode=@code\n RETURN LEFT(@p_str, len(@p_str) -1)\n","2299":"Map(x => x.BirthDate)\n    .Column(\"dtBirthDate\")\n    .Not.Nullable()\n    .CustomSqlType(\"smalldatetime\")\n    .CustomType(\"datetime\")\n","2300":"select \n    *\nfrom \n    releases,\n    (select \n        min(id) as x, \n        max(id) as y\n     from\n        releases\n     where released > \"2011-12-01\"\n     ) as D   \nwhere\n    id between D.x and D.y\nlimit 0,30\n","2301":"SELECT\n  * \nFROM \n  test_table\nWHERE \n  test_column != ASCIISTR(test_column)\n","2302":"select p.*\nfrom person p\nwhere p.datetime = (select max(p2.datetime) from person p2 where p2.name = p.name);\n","2303":"select \ntime_decimal\n,cast(cast(cast(time_decimal as int) as varchar)+\n':'+cast(cast((time_decimal - cast(time_decimal as int)) * 60 as int) as varchar)+\n':'+cast(cast(((time_decimal - cast(time_decimal as int)) * 60-\n    cast((time_decimal - cast(time_decimal as int)) * 60 as int)) * 60 as int) as varchar) as time) as real_time\nfrom time1\n","2304":"select * from UserLog l1\nwhere Operation = 'Enter' and \n      not exists(select * from UserLog l2 \n                 where l1.user = l2.user and \n                       l2.Operation = 'Exit' and \n                       l2.Time > l1.Time)\n","2305":"SELECT * \nFROM data \nRIGHT JOIN \n( \n   select 2 as o, 2 as p\n   union all\n   select 4, 6\n) as t ON p = set1_value AND o = set2_value \nwhere id is null;\n","2306":"SELECT\n     [item_id],\n     STUFF(\n         (SELECT ',' + [item]\n          FROM TableName\n          WHERE [item_id] = a.[item_id] AND item_id = 82\n          FOR XML PATH (''))\n          , 1, 1, '')  AS NamesList\nFROM TableName AS a\nWHERE item_id = 82\nGROUP BY [item_id]\n","2307":"<cfset sortable_column_list = \"age,height,weight,first_name\">\n<cfquery ...>\n  SELECT first_name, age, height, weight\n  FROM people\n  ORDER BY <cfif ListFindNoCase(sortable_column_list, url.sort_column)>#url.sort_column#<cfelse>first_name<\/cfif>\n<\/cfquery>\n","2308":"CREATE TRIGGER dbo.uniqueUserQuestion \nON dbo.submit_Answer\nINSTEAD OF INSERT\nAS\nBEGIN\n    SET NOCOUNT ON\n    IF EXISTS \n    (\n        SELECT 1 \n        FROM dbo.submit_Answer T \n        INNER JOIN INSERTED I \n        ON T.user_name = I.user_name \n            AND T.question_id = I.question_id\n    )\n    BEGIN\n        -- Do dupe handling here\n        PRINT 'duplicate'\n        raiserror('cant submit answer to same question twice')\n        return\n    END\n\n    -- actually add it in\n    INSERT INTO\n        dbo.submit_Answer\n    SELECT\n        *\n    FROM\n        INSERTED I\nEND\nGO\n","2309":"INSERT INTO [dbo].[Users]\n(\n  [Name]\n  ,[Surname]\n  ,[Email]\n  ,[Password]\n  ,[Status]\n  ,[DepartmentId]\n  ,[Guid]\n)\nVALUES\n(\n  'david'\n  ,'van staden'\n  ,'ds@ik.io'\n  ,123123  \n  ,0\n  ,8\n  ,newid()\n)\n","2310":"select\n  m.name,\n  count (distinct m2.name)\nfrom\n  Membership m join \n  Membership m2 on m.clubName = m2.clubName \ngroup\n  by m.name \norder by\n  count (distinct m2.name) desc\n","2311":"DECLARE\n\nTYPE table1 IS TABLE OF NUMBER \n  INDEX BY PLS_INTEGER;\n\nTYPE table2 IS TABLE OF table1\n  INDEX BY PLS_INTEGER;\nvar_i table2\n\nBEGIN\n\nvar_i (1) (1) := 1;\nvar_i (1) (2) := 12;\n\nEND;\n","2312":"    select t1.* from table1 t1\n    left join table2 t2 on \n        substring_index(t2.path, '\/', -1) =  substring_index(t1.path, '\/', -1) \n        and t2.frn = t1.frn \n        and t2.byte = t1.byte\n    where t2.path is null or t2.frn is null or t2.byte is null\n","2313":"select t.*,\n       (case when expiry_date > @somdate and\n                  row_number() over (partition by cod_suc, cod_ramo,\n                                                  (case when expiry_date > @somdate then 1 else 0 end)\n                                     order by id_pv desc) as col1\n              then 1 else 0\n         end)\nfrom table t;\n","2314":"EXEC xp_cmdshell 'bcp \"EXEC DatabaseName.dbo.pn_FlatProductXML ''KA-0009'' \" queryout \"C:\\test.txt\" -T -c '\n","2315":"SELECT `age` FROM `users` WHERE `userid`=\n  (SELECT `id` FROM `second`  \n   WHERE `second`.`name` = 'Berna')\n","2316":"DECLARE i INT DEFAULT 1;\nDECLARE count DEFAULT ExtractValue(xml, 'count(\/\/child)');\n\nWHILE i <= count DO\nSELECT ExtractValue(xml, '\/\/child[$i]');\nSET i = i+1;\nEND WHILE\n","2317":"CREATE FUNCTION [dbo].[ufn_test]\n(\n  @deptid INT\n)        \nRETURNS TABLE\nAS\nRETURN\n      (SELECT * \n      FROM workorder\n      WHERE deptid = @deptid);\n","2318":"$sql = \"INSERT INTO table(column1, column2) VALUES(:value1, :value2)\";\n$result = DB::query(Database::INSERT, $sql)->bind(':value1', $val1)->bind(':value2', $val2)->execute();\necho $result[0]; \/\/ last_insert_id\necho $result[1]; \/\/ total rows inserted\n","2319":"SELECT MIN(value_0-value) as MinDiff\nFROM TableName\nWHERE value_0>=value\n","2320":"DECLARE @test TABLE (\n  SampleCol varchar(50)\n)\n\nINSERT INTO @Test\n  VALUES ('Test')\nINSERT INTO @Test\n  VALUES ('Test 1')\nINSERT INTO @Test\n  VALUES ('Test 2')\nINSERT INTO @Test\n  VALUES ('Test 3')\nINSERT INTO @Test\n  VALUES ('Test 4')\n\nDECLARE @aa varchar(200)\nSET @aa = ''\n\nSELECT\n  @aa =\n  COALESCE(CASE\n    WHEN @aa = '' THEN SampleCol\n    ELSE @aa + ',' + SampleCol\n  END\n  , '')\nFROM @test\n\nSELECT\n  @aa\n","2321":"CREATE OR REPLACE FUNCTION trigA()\n  RETURNS trigger AS\n$BODY$\nbegin\n    new.modify=LOCALTIMESTAMP;\n    return new;\nend;\n$BODY$\n  LANGUAGE plpgsql VOLATILE\n","2322":"$this->Student->find('all', array('conditions' => array('Human.first_name' => 'AnyFirstNameYouWant')));\n","2323":"select \n    name, \n    sum(col1*weighting) as weightedCol1, \n    sum(col2*weighting) as weightedCol2,\n    n.date, \n    [hour]\nfrom\n    nodes n\n    inner join weights w\n        on w.nodeid = n.nodeid\n        and w.date = n.date\ngroup by \n    name, n.date, [hour]\n","2324":"SELECT USERID, OTHER,\n       (SELECT TOP 1 c.CLASS\n        FROM DBCLASSTABLE c\n        WHERE c.USERID = u.USERID AND c.EFFECTIVEDATE < '2015-01-01'\n        ORDER BY A.EFFECTIVEDATE DESC\n       ) as Class\nFROM @USERS u;\n","2325":"create table #tmp (c1 int, c2 int, dt datetime default(getdate()) )\n\ninsert into #tmp\n(c1, c2)\nexec mysproc\n","2326":"foreach (var deleteMe in deleteThese)\n{ \n   \/\/ Delete validation\n   if(CanDeleteItem(deleteMe.ItemId))\n   {\n      \/\/\/\n      deleteMe.Prices.ToList().ForEach(p => db.ItemPrices.Remove(p));\n      \/\/\/\n\n      db.Entry(deleteMe).State = EntityState.Deleted;\n   }\n}\ndb.SaveChanges();\n","2327":" select case substring(mystring,1,1)\n        when 'G' then 'Green'\n        when 'R' then 'Red'\n        else '?'\n    end as mycolumn from test;\n","2328":"-- Setup a test table\n\nDECLARE @tbl AS TABLE(R1 NVARCHAR(10), R2 NVARCHAR(10), R3 NVARCHAR(10), R4 NVARCHAR(10), PC NVARCHAR(10));\n\nINSERT INTO @tbl(R1,R2,R3,R4,PC) VALUES ('a','x','i',NULL,'1');\nINSERT INTO @tbl(R1,R2,R3,R4,PC) VALUES ('a','y','i',NULL,'2');\nINSERT INTO @tbl(R1,R2,R3,R4,PC) VALUES ('a','y','j',NULL,'2');\nINSERT INTO @tbl(R1,R2,R3,R4,PC) VALUES ('a','z','k',NULL,'3');\nINSERT INTO @tbl(R1,R2,R3,R4,PC) VALUES ('b','u','m',NULL,'4');\nINSERT INTO @tbl(R1,R2,R3,R4,PC) VALUES ('b',NULL,'n',NULL,'4');\nINSERT INTO @tbl(R1,R2,R3,R4,PC) VALUES ('c',NULL,NULL,NULL,'5');\nINSERT INTO @tbl(R1,R2,R3,R4,PC) VALUES ('c','q',NULL,NULL,'6');\n\n-- Calculate the result:\n\nSELECT \n    PC,\n    CASE WHEN LVL1 = 1 THEN R1 ELSE NULL END AS R1,\n    CASE WHEN LVL2 = 1 THEN R2 ELSE NULL END AS R2,\n    CASE WHEN LVL3 = 1 THEN R3 ELSE NULL END AS R3,\n    CASE WHEN LVL4 = 1 THEN R4 ELSE NULL END AS R4\nFROM\n(\n    SELECT\n      PC,\n      MAX(R1) AS R1, \n      MAX(R2) AS R2,\n      MAX(R3) AS R3, \n      MAX(R4) AS R4,\n      COUNT(DISTINCT ISNULL(R1,'.')) AS LVL1, \n      COUNT(DISTINCT ISNULL(R1,'.') + ISNULL(R2,'.')) AS LVL2, \n      COUNT(DISTINCT ISNULL(R1,'.') + ISNULL(R2,'.') + ISNULL(R3,'.')) AS LVL3,\n      COUNT(DISTINCT ISNULL(R1,'.') + ISNULL(R2,'.') + ISNULL(R3,'.') + ISNULL(R4,'.')) AS LVL4\n    FROM @tbl\n    GROUP BY PC\n) A\n","2329":"CREATE TRIGGER SetReason BEFORE UPDATE ON <table1>\nFOR EACH ROW BEGIN\n    SET NEW.event_id = \n        (CASE WHEN OLD.name != NEW.name THEN 1 ELSE 0 END) + \n        (CASE WHEN OLD.oid != NEW.oid THEN 2 ELSE 0 END) + \n        (CASE WHEN OLD.state != NEW.state THEN 4 ELSE 0 END) +  \n        (CASE WHEN OLD.ctrl != NEW.ctrl THEN 8 ELSE 0 END)    \nEND;\n","2330":"ALTER TABLE points ADD xy POINT;\n\nUPDATE  points\nSET     xy = Point(x, y);\n\nALTER TABLE points MODIFY xy POINT NOT NULL;\n\n\nCREATE SPATIAL INDEX sx_points_xy ON points (xy);\n\nSELECT  *\nFROM    points\nWHERE   MBRContains(LineString(Point(100, 100), Point(200, 200), xy)\n        AND z BETWEEN 100 and 200\n        AND otherParameter > 10;\n","2331":"select tt.trainingCode\nfrom TotalTraining tt left join\n     SelectedTraining st\n     on tt.trainingCode = st.trainingCode and\n        st.EmpCode = 7190 and\n        st.appraisalId = 12\nwhere st.trainingCode is null ;\n","2332":"SELECT Package, SUM(Licences) as TotalLicences\n  FROM (\n        SELECT Package, Licences FROM Table1\n         UNION ALL\n        SELECT Package, Licences FROM Table2\n         UNION ALL\n        SELECT Package, Licences FROM Table3\n       ) AS AllLicences\n GROUP BY Package\n","2333":"        connection.open();\n        foreach (DictionaryEntry myInfo in myOrderInfo){\/\/contain 183 times\n\n        foreach (DictionaryEntry myBi in myInfo.value){\/\/loop 13 times\n        ...\/\/some code\n        cmd2.Parameters.AddWithValue(\"@\" + myBi.Key, myBi.Value + \"\");\n        ....\n        cmd2.ExecuteNonQuery();\n\n        }\n        .....\/\/some conditions\n\n        cmd.Parameters.AddWithValue(\"@\" + myInfo.Key, myInfo.Value + \"\");\n        .....\/\/some conditions\n\n        cmd.ExecuteNonQuery();\n        }\n        connection.close();\n","2334":"create table posts (\nid int not null auto_increment primary key,\nuser_id int,\npost_date date\n) engine = myisam;\n\n\ninsert into posts (user_id,post_date)\nvalues \n(1,'2011-03-02'),\n(1,'2011-04-10'),\n(1,'2011-11-13'),\n(2,'2011-03-02'),\n(2,'2011-03-02'),\n(3,'2011-01-01'),\n(3,'2011-01-02'),\n(3,'2011-01-03');\n\n\nselect * from (\nselect posts.*,\n   @num := if(@user_id = user_id, @num + 1, 1) as rownum,\n   @user_id:=user_id as uid\nfrom posts,(select @user_id := 0, @num := 1) as t\norder by user_id asc, post_date asc) \nas tab \nwhere rownum = 3\norder by post_date limit 1\n","2335":"UPDATE [tablename] SET lab_no = REPLACE(lab_no, 'EPI8', 'EPI80');\n","2336":"GROUP BY categories.name, color_variant.pcode, color_variant.price \n","2337":"where concat(a.name, a.surname) like . . .\n","2338":"CREATE TYPE num_tbl AS TABLE OF NUMBER;\n\nCREATE FUNCTION has_kw( p_k IN VARCHAR2 )\n  RETURN num_tbl\n  PIPELINED\nIS\nBEGIN\n  FOR i IN (SELECT DISTINCT id FROM kw WHERE k = p_k)\n  LOOP\n    PIPE ROW( i.id );\n  END LOOP;\n  RETURN;\nEND;\n","2339":"-- {0} is your table name\n-- {1} is your identity value of the reset\n\nIF EXISTS (SELECT null FROM sys.identity_columns WHERE OBJECT_NAME(OBJECT_ID) = '{0}' AND           last_value IS NOT NULL) \n    DBCC CHECKIDENT ({0}, RESEED, {1});\n","2340":"select \n    pair_1, pair_2\nfrom \n    (select distinct name as pair_1 from TABLE_NAME),\n    (select distinct name as pair_2 from TABLE_NAME)\nwhere\n    pair_1 <> pair_2\n","2341":"Select \n    *,\n    (Select Count(*) From YourTable As T \n    Where T.well_name = W.well_name And T.rpt_date <= W.rpt_date) As [Normalized Time]\nFrom\n    YourTable As W\nOrder By\n    well_name,\n    rpt_date\n","2342":"select date_part('second',date1) - date_part('second',date2)\n","2343":"ALTER TABLE foo ADD COLUMN tempbar text;\nUPDATE foo SET tempbar = cast(cast(bar as varchar) as text);\nALTER TABLE foo DROP COLUMN bar;\nALTER TABLE foo ADD COLUMN bar text;\nUPDATE foo SET bar = tempbar;\nALTER TABLE foo DROP COLUMN tempbar;\n","2344":"declare @T table\n(\n  [key] char(4),\n  code int,\n  primary key([key], code)\n)\n\ninsert into @T values\n('key1',    220),\n('key1',    221),\n('key2',    220),\n('key2',    221),\n('key2',    222),\n('key3',    220),\n('key3',    333),\n('key4',    255),\n('key5',    220),\n('key5',    221)\n\ndeclare @Match table (code int)\ninsert into @Match values (220),(221)\n\nselect T.[key]\nfrom @T as T\n  left outer join @Match as M\n    on T.code = M.code\ngroup by T.[key]\nhaving count(*) = (select count(*) from @Match) and\n       count(M.code) = (select count(*) from @Match)\n","2345":"select (id\/1000)+((id%1000)\/100)+((id%100)\/10)+(id%10)\n","2346":"SELECT orig_loc, COUNT(*) order_ct, COUNT(DISTINCT dest_loc) dest_ct\nFROM order_table\nGROUP BY orig_loc\n","2347":"CREATE TRIGGER trigger_Insert_TableB\nON TableB\nFOR INSERT\nAS\nBegin\n    Select * FROM Inserted \/\/This will give you the inserted data\nEnd\n","2348":"SELECT COUNT(*) FROM\n(SELECT values \n FROM table \n GROUP BY values \n HAVING COUNT(*) > 1) t\n","2349":"select count(distinct username) as TotalUserCountOnTheDay\nfrom dbo.LoginHistory\nwhere datediff(day,LoginDate, '2014-11-19') = 0;\n","2350":"declare @str1 varchar(1024) = 'and hello w w w search how are you',\n        @str2 varchar(1024) = 'and hello w w search how are you',\n        @likeStr varchar(512),\n        @pos int,\n        @maxMatch int;\n\nset @maxMatch = 2;\nset @pos = 0;\n\nset @likeStr = '%hello';\n\nwhile (@pos < @maxMatch)\nbegin\n    set @likeStr += ' [^ ]';\n\n    set @pos += 1;\nend\n\nset @likeStr += ' search%';\n\nselect @likeStr, (case when @str1 like @likeStr then 1 else 0 end), (case when @str2 like @likeStr then 1 else 0 end)\n","2351":"SELECT  c.ROW_ID\n,       p.NAME\n,       p.DATE\nFROM    Cust c\nJOIN    (\n        SELECT  row_number() over (partition by pc.CUST_ID order by p.DATE) rn\n        ,       pc.CUST_ID\n        ,       p.NAME\n        ,       p.DATE\n        FROM    Prod p\n        JOIN    ProdCust pc \n        ON      pc.PROD_ID = p.ROW_ID\n        ) p\nON      c.ROW_ID = p.CUST_ID\n        AND p.rn = 1 -- First row only \n","2352":"dev> create table dctest (x number);\n\nTable created.\n\ndev> insert into dctest VALUES (0.98692326671601283);\n\n1 row created.\n\ndev> select * from dctest;\n\n         X\n----------\n.986923267\n\ndev> column x format 0.000000000000000000000000000\ndev> \/\n\n                             X\n------------------------------\n 0.986923266716012830000000000\n","2353":"if v_type IN ('ABC','DEF','ASD') then\n  do things;\nend if;\n","2354":"SELECT *\nFROM produit\nWHERE date_format(date_commande, '%Y-%m-%d) BETWEEN $filtre_Date1 AND $filtre_Date2;\n","2355":"   select column1, column2 \n    from table1 \n    where \n    (@filtertype=1 AND (column3 in (select columnb from table2)))\n    OR\n    (@filtertype=2 AND (column2 in (select columnb from table2)))\n","2356":"DECLARE   @temp      YOURTYPE \nDECLARE   c          CURSOR\nFOR       SELECT     CodeDesc \n          FROM       authors\nOPEN      c\nFETCH     NEXT FROM c \nINTO      @temp\nWHILE     @@FETCH_STATUS = 0\nBEGIN\n         -do something with temp\n         FETCH NEXT INTO @temp\nEND\nCLOSE      c\nDEALLOCATE c\n","2357":"UPDATE  a\nSET     a.fieldA = b.fieldA,\n        a.fieldB = b.fieldB\nFROM    TableA a\n        INNER JOIN TableB b\n            ON  a.keyA = b.keyA AND\n                a.keyB = b.keyB\n","2358":"select name, DOB, \ntruncate(datediff(sysdate(),DOB)\/365.25,0) as 'age'\nfrom animal\nwhere colour = 'Brown' and truncate(datediff(sysdate(),DOB)\/365.25,0) <=2;\n","2359":"  SELECT TO_CHAR(DATE_OF_BIRTH,'fm MONTH')\"Month\", COUNT(TO_CHAR(DATE_OF_BIRTH,'fm MONTH'))\"NoS\"\n    FROM EMP\n   WHERE DATE_OF_BIRTH <= TO_DATE('31-12-1990','DD-MM-YYYY') AND DATE_OF_BIRTH >= TO_DATE('01-01-1990','DD-MM-YYYY')\nGROUP BY TO_CHAR(DATE_OF_BIRTH,'fm MONTH') \n  HAVING COUNT(TO_CHAR(DATE_OF_BIRTH,'fm MONTH')) >= 2\n","2360":"ALTER TABLE emp ADD listOfSalaries salaryList NESTED TABLE listOfSalaries STORE AS salaryList_tab;\n","2361":"SELECT ss.softwareId AS 'Software ID',\n    s.softwareDescription AS 'Software Description',\n    sv.vendorName AS 'Vendor Name',\n    c.cityName AS 'City Name'\nFROM software AS s\nleft outer JOIN systemSoftware AS ss\nON s.softwareId = ss.softwareId\nleft outer JOIN softwareVendor AS sv\nON s.vendorId = sv.vendorId\nleft outer JOIN city AS c\nON sv.zipCode = c.zipCode\nWHERE ss.softwareId is NULL\nORDER BY s.softwareId\n","2362":"SELECT        R1.id, \n              R1.way_id, \n              R1.node_id, \n              R1.sort\nFROM          Relations R1\nWHERE        R1.way_id = 107187465\nAND R1.id = (SELECT MAX(R2.id) FROM Relations R2\n             WHERE R1.node_id = R2.node_id)\n","2363":"Proc SurveySelect data=Have out=Want noprint\n    Method = urs\n    N = 1\n    outhits\n    rep = 1;\n    Strata Id ;\nrun;\n","2364":"drop table if exists users;\ncreate table users (  \n   _id bigint unsigned auto_increment primary key,   \n   name varchar(50) not null, \n   number_of_posts integer not null default 0\n);\n\ndrop table if exists posts;\ncreate table posts (  \n   _id bigint unsigned auto_increment primary key,   \n   user_id bigint unsigned not null, \n   post_text text\n);\n\n-- Populate with dummy data\ninsert into users (name) values ('Bob'), ('Sally');\ninsert into posts (user_id, post_text) \n    values (1, 'First!!'), (1, 'Second...'), \n           (2, 'Post 1'), (2, 'another post'), (2, 'more posts');\n\n-- One-time update of users table\nupdate users u\nset u.number_of_posts = (      \n  select count(0) from posts p\n  where u._id = p.user_id      \n);\n\n-- trigger to keep post count up to date when future posts are made\ndrop trigger if exists trg_post_count;\ndelimiter $$\n\ncreate trigger trg_post_count\nafter insert on posts\nfor each row \nbegin\n    select count(0) into @post_count \n    from posts\n    where user_id = NEW.user_id;\n\n    update users\n    set number_of_posts = @post_count\n    where _id = NEW.user_id;\nend;\n$$\n\ndelimiter ;\n\n-- test trigger\ninsert into posts (user_id) values (2);\nselect * from users;\n","2365":"...\n\nUPDATE dbo.system_numbers\nSET @return_value = current_number = current_number + auto_increment,\n    last_updated_on = GETDATE()\nWHERE [type] = @parmtype\n  AND auto_increment = 1\n;\nIF @@ROWCOUNT = 0\n  SELECT @return_value = current_number\n  FROM dbo.system_numbers\n  WHERE [type] = @parmtype\n;\n","2366":"select  *\nfrom    tbl t\nwhere   name =  (  select   name\n                   from     tbl\n                   where    billnumber = 100756 -- can be any of his\n                )\n    and date =  (  select   max(date)\n                   from     tbl x\n                   where    x.name = t.name\n                )\n","2367":"-- First you have to enable SB for your database\nUSE master\nALTER DATABASE Playground\nSET ENABLE_BROKER\nGO\n\nUSE Playground\nGO\n\n-- Then create a message type; usually it will be XML\n-- because it's very easy to serialize\/deserialize it\nCREATE MESSAGE TYPE [\/\/Playground\/YourMessageType]\nVALIDATION = WELL_FORMED_XML\nGO\n\n-- Then create a contract to have a rule for communication\n-- Specifies who sends which message type\nCREATE CONTRACT [\/\/Playground\/YourContract] (\n    [\/\/Playground\/YourMessageType] SENT BY ANY)\nGO\n\n--Creates queues, one for initiator (1) and one for target (2)\nCREATE QUEUE MyQueue1\nGO\nCREATE QUEUE MyQueue2\nGO\n\n-- Finally, configure services that 'consume' queues\nCREATE SERVICE [\/\/Playground\/YourService1]\nON QUEUE MyQueue1 ([\/\/Playground\/YourContract])\nGO\n\nCREATE SERVICE [\/\/Playground\/YourService2] \nON QUEUE MyQueue2 ([\/\/Playground\/YourContract])\nGO\n\n-- Now you can send a message from service to service using contract\nDECLARE \n    @dHandle uniqueidentifier,\n    @Msg nvarchar(max) \n\nBEGIN DIALOG @dHandle\n    FROM SERVICE [\/\/Playground\/YourService1]\n    TO SERVICE '\/\/Playground\/YourService2'\n    ON CONTRACT [\/\/Playground\/YourContract]\nWITH ENCRYPTION = OFF\n\nSELECT @Msg = (\n    SELECT TOP 3 *\n    FROM Table1\n    FOR XML PATH('row'), ROOT('Table1'))\n\n;SEND ON CONVERSATION @dHandle \nMESSAGE TYPE [\/\/Playground\/YourMessageType] (@Msg)\n\nPRINT @Msg\nGO\n\n-- To get the message on the other end, use RECEIVE\n-- Execute this in another query window\nDECLARE @dHandle uniqueidentifier\nDECLARE @MsgType nvarchar(128)\nDECLARE @Msg nvarchar(max)\n\n;RECEIVE TOP(1)\n    @dHandle = conversation_handle,\n    @Msg = message_body,\n    @MsgType = message_type_name\nFROM MyQueue2\n\nSELECT @MsgType \nSELECT @Msg\n\nEND CONVERSATION @dHandle \nGO\n","2368":"WITH sumQuart AS\n (\n   SELECT *,\n      CASE\n        WHEN ROW_NUMBER() -- for the 1st month in a quarter\n             OVER (PARTITION BY CCP, Years, Quart\n                   ORDER BY months) = 1\n                  -- return the sum of all GTS of this quarter\n        THEN SUM(GTS) OVER (PARTITION BY CCP, Years, Quart)\n        ELSE NULL -- other months\n      END AS sumGTS\n   FROM gts\n )\n,cte AS\n (\n   SELECT \n      sq.*,\n      COALESCE(b.Baseline, -- 1st quarter\n               -- product of all previous quarters\n               CASE\n                 WHEN MIN(ABS(sumGTS)) -- any zeros?\n                      OVER (PARTITION BY sq.CCP ORDER BY sq.Years, sq.Quart, sq.Months \n                            ROWS BETWEEN UNBOUNDED PRECEDING AND 3 PRECEDING) = 0 \n                   THEN 0  \n                 ELSE -- product\n                      EXP(SUM(LOG(NULLIF(ABS(COALESCE(b.Baseline,1) * sumGTS),0)))\n                          OVER (PARTITION BY sq.CCP ORDER BY sq.Years, sq.Quart, sq.Months \n                                ROWS BETWEEN UNBOUNDED PRECEDING AND 3 PRECEDING)) -- product\n                      -- odd number of negative values -> negative result\n                    * CASE WHEN COUNT(CASE WHEN sumGTS < 0 THEN 1 END) \n                                OVER (PARTITION BY sq.CCP ORDER BY sq.Years, sq.Quart, sq.Months \n                                      ROWS BETWEEN UNBOUNDED PRECEDING AND 3 PRECEDING) % 2 = 0 THEN 1 ELSE -1 END\n               END) AS newBaseline\n   FROM sumQuart AS sq\n   LEFT JOIN BASELINE AS b\n          ON B.CCP = sq.CCP\n          AND b.Quart = sq.Quart\n          AND b.Years = sq.Years\n )\nSELECT \n   CCP, months, Quart, Years, GTS,\n   round(newBaseline * GTS,2),\n   round(newBaseline,2)\nFROM cte\n","2369":"SELECT CONCAT('http:\/\/site.com\/uni-', number, '-uni') as url FROM table\n","2370":"1,\"a string\",100.20\n2,\"a string containing a , comma\",102.20\n3,\"a string containing a \\\" quote\",102.20\n4,\"a string containing a \\\", quote and comma\",102.20\n","2371":"DATE_FORMAT(my_date, '%Y-%m-%d') \n","2372":"with cte_dates as (\n    select distinct [Date] from MyTable\n), cte_vals as (\n    select distinct ColA from MyTable\n)\nselect\n    d.[Date],\n    v.ColA,\n    T1.ColB as ColB_Today,\n    T2.ColB as ColB_Prev_Day\nfrom cte_dates as d\n    cross join cte_vals as v\n    left outer join MyTable as T1 on T1.ColA = v.ColA and T1.[Date] = d.[Date]\n    outer apply (\n        select top 1 TT.ColB\n        from MyTable as TT\n        where TT.ColA = v.ColA and TT.[Date] < d.[Date]\n        order by TT.[Date] desc\n    ) as T2\n","2373":"SELECT @sSQL = 'SELECT @xCount = COUNT(ID) FROM Authors' \nEXEC sp_ExecuteSQL @sSQL, N'@xCount int output', @count = @xCount output\n","2374":"SELECT MONTH(user_lastlogin) AS Month,\n       YEAR(user_lastlogin) AS Year,\n       COUNT(*) AS 'Total Reg',\n       SUM(CASE WHEN user_regtype = 'LR' THEN 1 ELSE 0 END) AS 'LR Reg',\n       SUM(CASE WHEN IS NULL OR user_regtype = 'BBR' THEN 1 ELSE 0 END) AS 'BBR Reg'\n  FROM bb_user \nGROUP BY MONTH(user_lastlogin), YEAR(user_lastlogin)\nORDER BY Year DESC, Month DESC\n","2375":"WITH Pivoted AS\n(\n  SELECT person_ID, eye, hair, teeth\n  FROM SourceBodyPartColors\n    PIVOT\n    (\n    MAX (color) FOR body_part_name IN ( [eye], [hair], [teeth] )\n    ) AS pvt\n  )  \nMERGE TargetBodyPartColors AS target\nUSING  Pivoted AS source\nON (target.person_ID = source.person_ID)\nWHEN MATCHED THEN \nUPDATE SET eye_color = source.eye,  \n           hair_color = source.hair,  \n           teeth_color = source.teeth ;\n","2376":"CREATE TEMPORARY TABLE IF NOT EXISTS people_hours (\n    people_id INTEGER NOT NULL,\n    society_id INTEGER NOT NULL,\n    year INTEGER NOT NULL,\n    month INTEGER NOT NULL,\n    hours DOUBLE NOT NULL,\n    PRIMARY KEY(people_id, society_id, year, month)\n);\n\nCREATE TEMPORARY TABLE IF NOT EXISTS people_cost (\n    people_id INTEGER NOT NULL,\n    year INTEGER NOT NULL,\n    month INTEGER NOT NULL,\n    cost DOUBLE NOT NULL,\n    PRIMARY KEY(people_id, year, month)\n);\n\nTRUNCATE people_hours;\nTRUNCATE people_cost;\n\nINSERT INTO people_hours (people_id, society_id, year, month, hours)\nSELECT\n    p.id as people_id,\n    s.id as society_id,\n    YEAR(t.assigndate) as year,\n    MONTH(t.assigndate) as month,\n    SUM(t.timeunits)\/60 as hours\nFROM people p, society s, timesheet t\nWHERE\n    t.society_id = s.id AND\n    t.people_id = p.id\nGROUP BY year, month, people_id, society_id;\n\nINSERT INTO people_cost (people_id, year, month, cost)\nSELECT\n    p.id as people_id,\n    YEAR(o.date) as cost_year,\n    MONTH(o.date) as cost_month,\n    SUM(o.hourtarif + s.hourtarif) as cost\nFROM people p, salarystate s, overhead o\nWHERE\n    s.people_id = p.id AND\n    CONVERT(SUBSTRING(s.month FROM 1 FOR 4), UNSIGNED) = YEAR(o.date) AND\n    CONVERT(SUBSTRING(s.month, -2), UNSIGNED) = MONTH(o.date)\nGROUP BY cost_year, cost_month, people_id;\n\nSELECT \n    h.year,\n    h.month,\n    h.society_id,\n    h.hours,\n    c.cost,\n    (h.hours * c.cost) AS total_cost,\n    CONCAT(p.name, ' ', p.firstname) AS employee,\n    CONCAT(ps.name, ' ', ps.firstname) AS society\nFROM people_hours h, people_cost c, people p, people ps, society s\nWHERE\n    h.society_id = s.id AND\n    h.people_id = p.id AND\n    h.people_id = c.people_id AND\n    s.people_id = ps.id AND\n    h.year = c.year AND\n    h.month = c.month\nORDER BY h.year, h.month, h.people_id, h.society_id;\n","2377":"select min(A),B\n  from table\n group by B\n","2378":"SELECT DATEADD(hour, -DATEPART(hour, TimeToLive), GETDATE());\n","2379":"WITH CTE as (\n  SELECT\n    RN = ROW_NUMBER() OVER (ORDER BY id),\n    *\n  FROM tablename\n)\nSELECT\n  [Current Row].*\nFROM CTE [Current Row]\nLEFT JOIN CTE [Previous Row] ON\n  [Previous Row].RN = [Current Row].RN - 1\nLEFT JOIN CTE [Next Row] ON\n  [Next Row].RN = [Current Row].RN + 1\nWHERE\n  not([Current Row].value = 0 AND [Next Row].value = 0) AND  \n     \/\/ this deletes the row where value is zero and the next rows value is zero\n  not([Previous Row].value = 0 AND [Current Row].value = 0) \n     \/\/ this deletes the row where value is zero and the previous rows value is zero\n","2380":"select t.Id\nfrom Tent as t\nleft join (\n    select p.tentId, count(*) as occupiedSpots\n    from person as p\n    group by p.tentId) as i ON i.tentId = z.id\nwhere t.numberOfSpots > IFNULL(i.occupiedSpots,0)\n","2381":"    SELECT *, match(project_title) against('sample project 55') as similarity\n    FROM projects\n    WHERE status IN(1, 2, 3, 4, 5, 6) AND id != ? AND match('sample project 55') against(?)\n    ORDER BY similarity DESC\n","2382":"DECLARE\n  rec_count integer default 0;\n  str varchar(100);\nBEGIN\n    str := 'select count(*) from emp_table';\n    EXECUTE IMMEDIATE str into rec_count;\n    dbms_output.put_line(rec_count);\nEND;\n","2383":"create or replace function split_xmcuser_groups_to_tuples() RETURNS SETOF RECORD AS $$\nDECLARE\n    r a%rowtype;\n    strLen integer;\n    curIdx integer;\n    commaCnt integer;\n    curCSV varchar;\nBEGIN\n    curIdx := 1;\n    commaCnt := 1;\n    FOR r IN SELECT * FROM a\n    LOOP\n        strLen := char_length(r.csv);\n        while curIdx <= strLen LOOP\n            curIdx := curIdx + 1;\n            if substr(r.csv, curIdx, 1) = ',' THEN\n                commaCnt := commaCnt + 1;\n            END IF;\n        END LOOP;\n        curIdx := 1;\n        while curIdx <= commaCnt LOOP\n            curCSV := split_part(r.csv, ',', curIdx);\n            if curCSV != '' THEN\n                RETURN QUERY select r.a,curCSV;\n            END IF;\n            curIdx := curIdx + 1;\n        END LOOP;\n    END LOOP;\n    RETURN;\nEND\n$$ LANGUAGE 'plpgsql';\n","2384":"SELECT GROUP_CONCAT(product,',' ,quantity) FROM ORDERS;\n","2385":"min(timestamp) as first_interaction format = datetime.\n","2386":"SELECT id, header, text, ... \n  FROM CONTENT\n WHERE online_at < current_timestamp\n MINUS\nSELECT id, header, text, ... \n  FROM CONTENT\n WHERE offline_at < current_timestamp\n","2387":"How to reset the root password for mysql:\nStop mysql:\n1. service mysql stop\n\nRun mysql with skip grants to be able to login without any password\n2. mysqld_safe --skip-grant-tables &\n\nLogin as root\n3. mysql -u root\n\n4. mysql commands:\nmysql> use mysql;\nmysql> update user set password=PASSWORD(\"YourPWHere\") where User='root';\nmysql> flush privileges;\nmysql> quit\n\nStop mysql\n5. service mysql stop\n\nStart mysql normally:\n6. service mysql start\n\nTry to login using your new password:\n7. mysql -u root -p\n","2388":"Select * From (\nSelect \nTransacion_ID,\nCase When C.lvl = 1 Then 'GROSS'\n     When C.lvl = 2 Then 'DISC'\nEnd TYPE,\nCase When C.lvl = 1 Then GROSS_AMOUNT\n     When C.lvl = 2 Then DISCOUNT_AMOUNT\nEnd AMOUNT\nFrom T\ncross join (select level lvl from dual connect by level<=2) c     \n) where amount is not null\norder by 1\n","2389":"Create PROCEDURE  [dbo].[SCN_SP_SCE_Weekly_Report]\n@startdate as datetime\n\nAS\nBEGIN\nSET NOCOUNT ON;\n\n\ndeclare @date datetime\ndeclare @LastWeekStart datetime\ndeclare @LastWeekEnd datetime\ndeclare @ThisWeekStart datetime\ndeclare @ThisWeekEnd datetime\n\nset @date=(select dateadd(w, -7, @startdate))\n\nset @LastWeekStart=(SELECT  DATEADD(DAY, 1 - DATEPART(WEEKDAY, @date), CAST(@date AS DateTime)))\nset @LastWeekEnd=(DATEADD(DAY, 7 - DATEPART(WEEKDAY, @date), CAST(@date AS DateTime)))\n\nset @ThisWeekStart=(SELECT  DATEADD(DAY, 1 - DATEPART(WEEKDAY, @startdate), CAST(@startdate AS DateTime)))\nset @ThisWeekEnd=(DATEADD(DAY, 7 - DATEPART(WEEKDAY, @startdate), CAST(@startdate AS DateTime)))\n\nselect * into #a from(\nselect BU.bu_desc as [BU], prod.Product_Desc as [Product Name], NULL as [SC-ID], \n'OVERALL PROJECT STATUS' as [Project Name],'' as [Requestor], NULL as [Request Date],\ncase\nwhen BU.bu_desc in ('DSM','Synexis','ALD') then 'GW'\nwhen BU.bu_desc in ('Etch','SRP','FEP') then 'MS'\nwhen BU.bu_desc in ('CMP','MDP') then 'RS'\nelse 'PT'\nend as [PM],\n'' as [SCE],\n(count(parts.part_id_num)-count(parts.cancelled_date)) as [Total Parts Requested],\nnull as [No. Of Parts Completed Last Week],\nnull as [No. Of Parts Completed This Week],\ncount(parts.analysis_Complete_date) as [Total No.Of Parts Completed], \ncase \nwhen (((count(parts.part_id_num)-count(parts.cancelled_date))-(count(parts.analysis_Complete_date)))=0) then 100\nwhen ((count(parts.analysis_Complete_date))=0) then 0\nelse\n((count(parts.analysis_Complete_date)*100)\/(count(parts.part_id_num)-count(parts.cancelled_date)))\nend as [SC Analysis Completed (%)],NULL as [Requested Completion Date],\nNULL as [Committed Date],NULL as Notes,'' as sc_id\nfrom scn_project_details as proj \nleft join scn_part_details as parts on proj.project_id=parts.project_id \nleft join SCN_BU bu on bu.bu_id=proj.bu_id \nleft join dbo.SCN_Product_Name prod on prod.Product_Id=proj.Product_Id \nwhere proj.status_id<>12 and (proj.analysis_complete_date between @startdate and getdate()\nor (proj.status_id >= 4 and proj.status_id < 8)) and parts.sc_id is not null\ngroup by BU.bu_desc,prod.Product_Desc\n\nunion\n\nselect BU.bu_desc as [BU], prod.Product_Desc as [Product Name], proj.project_id as [SC-ID], \nproj.project_name as [Project Name],usr1.fname+' '+usr1.lname as [Requestor], \nproj.created_date as [Request Date],left(proj.pm_id,2) as [PM],usr2.fname+' '+usr2.lname as     [SCE],\n(count(parts.part_id_num)-count(parts.cancelled_date)) as [Total Parts Requested],\nnull as [No. Of Parts Completed Last Week],\nnull as [No. Of Parts Completed This Week],\ncount(parts.analysis_Complete_date) as [Total No.Of Parts Completed], \ncase \nwhen (((count(parts.part_id_num)-count(parts.cancelled_date))-(count(parts.analysis_Complete_date)))=0) then 100\nwhen ((count(parts.analysis_Complete_date))=0) then 0\nelse\n((count(parts.analysis_Complete_date)*100)\/(count(parts.part_id_num)-count(parts.cancelled_date)))\nend as [SC Analysis Completed (%)],\nproj.project_completition_date as [Requested Completion Date],\nproj.original_commit_date as [Committed Date],\nNULL as Notes,parts.sc_id as sc_id\nfrom scn_project_details as proj \njoin scn_part_details as parts on proj.project_id=parts.project_id  and parts.sc_id is not null\nleft join SCN_users usr1 on proj.created_by=usr1.[user_id] \nleft join SCN_users usr2 on parts.sc_id=usr2.[user_id] \nleft join SCN_BU bu on bu.bu_id=proj.bu_id \nleft join dbo.SCN_Product_Name prod on prod.Product_Id=proj.Product_Id \nwhere proj.status_id<>12 and (proj.analysis_complete_date between @startdate and getdate()\nor (proj.status_id >= 4 and proj.status_id < 8)) and parts.sc_id is not null\ngroup by BU.bu_desc,prod.Product_Desc,proj.project_id,proj.project_name,usr1.fname+'     '+usr1.lname,\nproj.created_date,proj.project_completition_date,proj.original_commit_date,\nproj.pm_id,usr2.fname+' '+usr2.lname,proj.analysis_complete_date,parts.sc_id ) as t\n\n\nupdate a\nset a.[No. Of Parts Completed Last Week]=c.cnt\nfrom #a a, (\nselect count(b.sc_id) as cnt,b.project_id,b.sc_id\nfrom scn_part_details as b\nwhere b.analysis_complete_date between @LastWeekStart and @LastWeekEnd\ngroup by b.project_id,b.sc_id) as c\nwhere a.[SC-ID]=c.project_id\nand a.sc_id=c.sc_id\n\nupdate a\nset a.[No. Of Parts Completed This Week]=c.cnt\nfrom #a a, (\nselect count(b.sc_id) as cnt,b.project_id,b.sc_id\nfrom scn_part_details as b\nwhere b.analysis_complete_date between @ThisWeekStart and @ThisWeekEnd\ngroup by b.project_id,b.sc_id) as c\nwhere a.[SC-ID]=c.project_id\nand a.sc_id=c.sc_id\n\nselect BU,[Product Name],[SC-ID],[Project Name],Requestor,[Request Date],PM,SCE,\n[Total Parts Requested],[No. Of Parts Completed Last Week],[No. Of Parts Completed This Week],\n[Total No.Of Parts Completed], [SC Analysis Completed (%)],[Requested Completion Date],\n[Committed Date],Notes\nfrom #a\n\nEnd \n\nGO\n","2390":"SELECT r.name AS radio_name,Pod.*,Sh.* \nFROM podcasts Pod INNER JOIN\n     radios r\n     ON r.id = Pod.radio_id INNER JOIN\n     shows Sh\n     ON Sh.podcast_id = Pod.id \nWHERE NOT EXISTS (select 1\n                  from shows sh2\n                  where sh2.podcast_id = sh.podcast_id.id and\n                        sh2.publication_date > sh.publication_date\n                 )\nORDER BY sh.publication_date DESC\nLIMIT 5;\n","2391":"BEGIN AUTONOMOUS TRANSACTION\n   INSERT INTO LogTable () VALUES ();\n   COMMIT;\n   RESIGNAL;\nEND;\n","2392":"UPDATE targetTable t, sourceTable s \nSET t.y1 = s.y1, t.y2 = s.y2 -- (and so on...)\nWHERE t.member = s.member AND t.year = m.year;\n","2393":"  SELECT `company_name`, \n         `employee_name`, \n         COUNT(`cid`) \n    FROM `tbl_reports` \nGROUP BY `company_name`,\n         `employee_name`;\n","2394":"SELECT\n  MD.*,\n  P.City,\n  P.State,\n  P.Areacode\nFROM MemberDetails AS MD\n   LEFT JOIN PostcodeData  P ON MD.Postcode = P.Postcode\n","2395":"declare\n  o anydata;\nbegin\n  o := anydata.convertobject(myclass('hi ancestor'));\nend;\n\/\n","2396":"SELECT name \nFROM groups \nWHERE id = (\n    SELECT DISTINCT immediateparentid \n    FROM cachedgroupmembers \n    WHERE groupid = (\n        SELECT g.id \n        FROM Tickets t, groups g\n        WHERE t.Id = 124 AND t.id = g.instance AND g.type = 'AdminCc'\n    ) AND immediateparentid != groupid\n)\n","2397":" SELECT \n    count(local_doc.providerno) NumberofReferals, \n    LOCAL_DOC.FULLNAME FULLNAME, \n    LOCAL_DOC.TELNUMBER TELNUMBER, \n    LOCAL_DOC.STREET STREET, \n    LOCAL_DOC.SUBURB SUBURB, \n    LOCAL_DOC.STATE STATE, \n    LOCAL_DOC.POSTCODE POSTCODE,\n    LOCAL_DOC.PROVIDERNO\nFROM \n    LOCAL_DOC, \n    PATIENT \nWHERE \n    PATIENT.PROVIDERNO = LOCAL_DOC.PROVIDERNO AND PATIENT.REFERALDATE <= sysdate AND PATIENT.REFERALDATE >= ADD_MONTHS(sysdate, -6)\nGROUP BY\n    LOCAL_DOC.FULLNAME , \n    LOCAL_DOC.TELNUMBER , \n    LOCAL_DOC.STREET , \n    LOCAL_DOC.SUBURB , \n    LOCAL_DOC.STATE , \n    LOCAL_DOC.POSTCODE ,\n    LOCAL_DOC.PROVIDERNO\n","2398":"select *\nfrom ls_comments c\nwhere c.itemID = 9 or\n      c.parentID in (select c2.commentId from ls_comments c2 where c2.itemId = 9)\n","2399":"SELECT t.tag_name, i.image_name FROM image_tags it\n    INNER JOIN images i on it.image_id = i.id\n    INNER JOIN tags t on it.tag_id = t.id\nWHERE t.tag_name in ('beach', 'palms')\n","2400":"SELECT v.id as venue, COUNT(a.id) as visits\nFROM users AS u\nCROSS JOIN venues as v --<-- CROSS JOIN for Cartesian product between users and venues\nLEFT JOIN activities AS a ON u.id = a.user_id AND a.venue_id = v.id\nWHERE u.id = 1234\nGROUP BY v.id\nORDER BY v.id\n","2401":"SELECT DATE(JULIANDAY('NOW', 'START OF MONTH')+d1*9+d2*3+d3) AS Days FROM (\n    SELECT 0 AS d1 UNION SELECT 1 UNION SELECT 2 UNION SELECT 3\n) JOIN (\n    SELECT 0 AS d2 UNION SELECT 1 UNION SELECT 2\n) JOIN (\n    SELECT 0 AS d3 UNION SELECT 1 UNION SELECT 2\n) WHERE STRFTIME('%m', Days)=STRFTIME('%m', 'NOW') ORDER BY Days;\n","2402":"select distinct fk_col from table1\nminus\n(select distinct fk_col from table1 where col_entry='ab3'\nintersect\nselect distinct fk_col from table1 where col_entry='ab4')\n","2403":"CREATE TABLE name ( id int , UNIQUE (col_name1 type , col_name2 type) ON CONFLICT IGNORE )\n","2404":"SELECT `performers`.`hash`, `performers`.`alias`, \n  `performers`.`date_updated`, `performers`.`status`,\n  IF(`performers`.`status` = 'active', 'deleted','active') AS `statususe`,\n  `images`.`image_hash_file`\nFROM `performers`\nLEFT JOIN `images` ON `images`.`asset_id` = `performers`.`id` AND `images`.`asset_type` = 'performer'\nORDER BY `alias` ASC\nLIMIT 12\n","2405":"create dbo.MyProc (\n    @Param int = 30;\n)\n. . . \n","2406":"WITH cte\n     AS\n     (\n         SELECT CatId    AS ParentCatId,\n                CatName,\n                CatName  AS ParentName,\n                HigherCatId,\n                CatId,\n                CAST(CatName AS VARCHAR(255)) AS PATH\n         FROM   Categories\n         UNION ALL \n         SELECT c.CatId    AS ParentCatId,\n                cte.CatName,\n                c.CatName  AS ParentName,\n                c.HigherCatId,\n                cte.CatId,\n                CAST(cte.path + ', ' + c.CatName AS VARCHAR(255)) AS PATH\n         FROM   cte\n                INNER JOIN Categories c\n                     ON  c.CatId = cte.HigherCatId\n     )\n\nSELECT c.parentName,\n       COUNT(p.ProductId) AS ProductsCount\nFROM   cte c\n       LEFT OUTER JOIN products p\n            ON  c.CatId = p.CatId\nGROUP BY\n       c.ParentCatId,\n       c.ParentName\nORDER BY\n       c.ParentCatId\n","2407":"create table abc_new as select *,sysdate as someDate from abc\n","2408":"bool overlap = db.Records.Any(x=>(x.TerminationDate >= givenRecord.StartDate \n                  && x.StartDate <= givenRecord.TerminationDate) ||\n                  (x.TerminationDate <= givenRecord.TerminationDate \n                  && x.StartDate >= givenRecord.StartDate));\n","2409":"  select A, max(B) \n  from tbl\n  group by A\n  having count(A) > 1\n","2410":"select k.id, k.title\nfrom knowledge k\ninner join\n(\n  select kID\n  from sorting\n  group by kID\n  having count(kID) < 2\n) s\n  on k.id = s.kid\nLIMIT 0,8;\n","2411":"SELECT links.*, users.user_name\nFROM links \nINNER JOIN terms \n  ON links.link_id = terms.terms_link_id AND terms.terms_tag_id = $tag_id\nINNER JOIN users \n  ON links.link_user = users.user_id;\n","2412":"SET @total = 0, @lasttime = 0, @laststatus = 0;\nSELECT IF(`status`=0,\n          @total := IF(@lasttime=0,\n                       0,\n                       @total+TIMEDIFF(`datetime`,@lasttime)\n          ),\n          @lasttime := `datetime`\n       ), (@laststatus := `status`) FROM `table`;\nSET @total = @total + IF(@laststatus=1,TIMEDIFF(NOW(),@lasttime),0);\nSELECT @total AS `result`\n","2413":"SELECT images.image_id, COUNT(votes.vote_id) AS cote_count\nFROM votes \nJOIN images ON images.image_id=votes.image_id\nGROUP BY images.image_id\n","2414":"SELECT *\nFROM weapons\nLEFT OUTER JOIN weapon_powers ON weapons.ID = weapon_powers.WEAPONTYPE\nWHERE weapons.ID = @somevariable\n","2415":"SELECT convert(date, column1) as date\nfrom table1\nwhere convert(date, column1) < '01\/25\/2011'\nand date is not null and date <> ''\n","2416":"SELECT *\nFROM cars\nLEFT JOIN carLog\n  ON cars.id=carLog.car\n     AND carLog.username='Juddling'\n","2417":"SELECT \np.*, \nu.firstname, \nu.lastname, \nl.post_id AS liked \nFROM `posts` p \nLEFT JOIN `users` u ON u.id = p.author_id \nLEFT JOIN `likes` l ON l.user_id = p.author_id \n  AND l.post_id = p.id \nWHERE p.author_id=1 \nAND p.published = 1 \nORDER BY p.post_date DESC LIMIT 0, 10 \n","2418":"select bill.bill_no,bill.total,bill.discount,bill.to_be_paid,\n       isnull(Service_bill.total_amt,0) as ServiceCharge,\n       isnull(Damage_cost.total_amt,0) as DamageCost,\n       isnull(Extraperson_cost.total_amt,0) as ExtraCost,\n       isnull(Advance_cost.total_amount,0) as Advance \nfrom   bill \nleft join Advance_cost           on bill.bill_no=Advance_cost.room_bill_no \nleft outer join Service_bill     on bill.bill_no=Service_bill.room_bill_no \nleft outer join Damage_cost      on bill.bill_no=Damage_cost.room_bill_no \nleft outer join Extraperson_cost on bill.bill_no=Extraperson_cost.room_bill_no\nwhere  bill.bill_no='57'\n","2419":"CREATE TABLE TEAM (\n    TEAM_ID INT PRIMARY KEY\n    -- Other fields...\n);\n\nCREATE TABLE SCORE (\n    TEAM1_ID INT,\n    TEAM2_ID INT,\n    -- Other field(s) that descibe the score...\n    PRIMARY KEY (TEAM1_ID, TEAM2_ID),\n    FOREIGN KEY (TEAM1_ID) REFERENCES TEAM (TEAM_ID),\n    FOREIGN KEY (TEAM2_ID) REFERENCES TEAM (TEAM_ID)\n);\n","2420":" Select * from table1 where my_id in (\n   Select Max(My_Id) from table1 where phase='Close' group by your_id)\n","2421":"SELECT event_id, event_name,\n   LAG (event_end_date ) OVER (ORDER BY event_end_date ASC )+1\n                                                         event_start_date,\n   event_end_date\n FROM event\n","2422":"select STD_ID from SCHOOL order by STD_ID+0\n","2423":" SELECT * FROM ps_product WHERE id_product=44 OR id_product=29\n","2424":"SELECT a_case.Id,      \n    ISNULL(R1.Type, 'ND') AS Referred_by_1,     \n    ISNULL(R2.Type, 'ND') AS Referred_by_2,     \n    ISNULL(R3.Type, 'ND') AS Referred_by_3 \nFROM ...\n","2425":"select distinct substring(convert(varchar(20),RunDateTime, 9), 13, 5) +' '\n+ substring(convert(varchar(30),RunDateTime, 9), 25, 2) from\nTestDates;\n","2426":"ALTER TABLE table1 ADD INDEX (fk_id);\n","2427":"management.call_command('flush')\n","2428":"position('\\xefbbbf'::bytea IN convert_to(your_text_column,'UTF-8'))=1\n","2429":"SELECT COUNT(*) FROM table_name\nWHERE DATEPART(HOUR, date_created) BETWEEN 9 AND 21\n","2430":"with cte as (\n  select *, \n    row_number() over (partition by report_id order by timestamp desc) as RowNum\n  from report_status_log\n)\n\nselect * \nfrom report r\ninner join cte c\non r.report_id = c.report_id\nwhere c.code = 'finished' and RowNum = 1\n","2431":"SELECT DISTINCT item FROM myTable WHERE something = 3\n","2432":"SQL> with tbl(str) as (\n      select 'SERO02~~~NA_@ERO5' from dual\n    )\n    select regexp_substr(str, '(.*?)(~~~|$)', 1, level, null, 1) element\n    from tbl\n    connect by  level <= regexp_count(str, '~~~') + 1;\n\nELEMENT\n-----------------\nSERO02\nNA_@ERO5\n\nSQL>\n","2433":"UPDATE some_table\n    SET some_column = some_column || '_more_data';\n","2434":"WITH \"Period\" (PeriodM, PeriodName) AS (\n    -- \/\/ I would store it as another table basically, but having it as part of the view would do\n                SELECT  01, '1 mo'\n    UNION ALL   SELECT  02, '2 mo' -- \/\/ data not stored\n    UNION ALL   SELECT  03, '3 mo'\n    UNION ALL   SELECT  06, '6 mo'\n    UNION ALL   SELECT  12, '1 yr'\n    UNION ALL   SELECT  24, '2 yr'\n    UNION ALL   SELECT  36, '3 yr'\n    UNION ALL   SELECT  48, '4 yr' -- \/\/ data not stored\n    UNION ALL   SELECT  60, '5 yr'\n    UNION ALL   SELECT  72, '6 yr' -- \/\/ data not stored\n    UNION ALL   SELECT  84, '7 yr'\n    UNION ALL   SELECT  96, '8 yr' -- \/\/ data not stored\n    UNION ALL   SELECT 108, '9 yr' -- \/\/ data not stored\n    UNION ALL   SELECT 120, '10 yr'\n    -- ... \/\/ add more\n    UNION ALL   SELECT 240, '20 yr'\n    -- ... \/\/ add more\n    UNION ALL   SELECT 360, '30 yr'\n)\n, \"Yield\" (ID, PeriodM, Date, Value) AS (\n    -- \/\/ ** This is the TABLE your data is stored in **\n    -- \/\/ \n    -- \/\/ value of ID column is not important, but it must be unique (you may have your PK)\n    -- \/\/ ... it is used for a Tie-Breaker type of JOIN in the view\n    -- \/\/\n    -- \/\/ This is just a test data:\n                SELECT 101, 01 \/* '1 mo'*\/, '2009-05-01', 0.06\n    UNION ALL   SELECT 102, 03 \/* '3 mo'*\/, '2009-05-01', 0.16\n    UNION ALL   SELECT 103, 06 \/* '6 mo'*\/, '2009-05-01', 0.31\n    UNION ALL   SELECT 104, 12 \/* '1 yr'*\/, '2009-05-01', 0.49\n    UNION ALL   SELECT 105, 24 \/* '2 yr'*\/, '2009-05-01', 0.92\n    UNION ALL   SELECT 346, 36 \/* '3 yr'*\/, '2009-05-01', 1.39\n    UNION ALL   SELECT 237, 60 \/* '5 yr'*\/, '2009-05-01', 2.03\n    UNION ALL   SELECT 238, 84 \/* '7 yr'*\/, '2009-05-01', 2.72\n    UNION ALL   SELECT 239,120 \/*'10 yr'*\/, '2009-05-01', 3.21\n    UNION ALL   SELECT 240,240 \/*'20 yr'*\/, '2009-05-01', 4.14\n    UNION ALL   SELECT 250,360 \/*'30 yr'*\/, '2009-05-01', 4.09\n)\n, \"ReportingDate\" (\"Date\") AS (\n    -- \/\/ this should be a part of the view (or a separate table)\n    SELECT DISTINCT Date FROM \"Yield\"\n)\n\n-- \/\/ This is the Final VIEW that you want given the data structure as above\nSELECT      d.Date, p.PeriodName, --\/\/p.PeriodM,\n            CAST(\n                COALESCE(y_curr.Value,\n                    (   (p.PeriodM - y_prev.PeriodM) * y_prev.Value\n                    +   (y_next.PeriodM - p.PeriodM) * y_next.Value\n                    ) \/ (y_next.PeriodM - y_prev.PeriodM)\n                ) AS DECIMAL(9,4) -- \/\/ TODO: cast to your type if not FLOAT\n            )  AS Value\nFROM        \"Period\" p\nCROSS JOIN  \"ReportingDate\" d\nLEFT JOIN   \"Yield\" y_curr\n        ON  y_curr.Date = d.Date\n        AND y_curr.PeriodM = p.PeriodM\nLEFT JOIN   \"Yield\" y_prev\n        ON  y_prev.ID = (SELECT TOP 1 y.ID FROM Yield y WHERE y.Date = d.Date AND y.PeriodM <= p.PeriodM ORDER BY y.PeriodM DESC)\nLEFT JOIN   \"Yield\" y_next\n        ON  y_next.ID = (SELECT TOP 1 y.ID FROM Yield y WHERE y.Date = d.Date AND y.PeriodM >= p.PeriodM ORDER BY y.PeriodM ASC)\n\n--\/\/WHERE       d.Date = '2009-05-01'\n","2435":";with T(f) as (\n    select '' union \n    select 'xxx' union \n    select 'xxx (yyy)' union \n    select 'xxx (yyy) (zzz)'\n)\nselect \n    right(f, patindex('%(%', reverse(f) + '('))\nfrom T\n\n>>\n\n(No column name)\n\nxxx\n(yyy)\n(zzz)\n","2436":"UPDATE `table` SET `current` = `max` WHERE `id` = 1\n","2437":"UPDATE t1 \nSET t1.codeA = t2_1.codeB\nFROM table1 t1\nJOIN table2 t2_1      \n  ON CHARINDEX(t2_1.colB, t1.colA) > 0\nLEFT JOIN table2 t2_2 \n  ON CHARINDEX(t2_2.colB, t1.colA) > 0\n AND t2_1.codeB <> t2_2.codeB \n AND LEN(t2_2.colB) > LEN(t2_1.colB)\nWHERE t2_2.colB IS NULL;\n","2438":"SELECT \n    'ALTER TABLE ' + OBJECT_NAME(so.parent_obj) + ' DROP CONSTRAINT ' + so.name\nFROM sysobjects so\nWHERE so.xtype = 'UQ'\n","2439":"CreateDocumentAsync(coll_link, \n    new {foo: \"bar\"}, \n    new RequestOptions {IncludePreTrigger = \"TriggerName\"}); \n","2440":"select client_name, count(*) as transactions\nfrom TableA\ngroup by client_name\norder by count(*) DESC\n","2441":"SELECT t.name, c.name, COUNT(item.id)\nFROM typelookup t\nCROSS JOIN codelookup c\nLEFT JOIN itemCodePivot icp ON icp.codeId = c.codeId\nLEFT JOIN item i ON i.itemId = icp.itemId AND i.TypeId = t.TypeId\nGROUP BY t.name, c.name\n","2442":"SELECT pd.saleid,\n       pd.firstpaymentdate                               AS FirstPaymentDate,\n       (SELECT amountdue\n        FROM   repaymentschedule\n        WHERE  saleid = pd.saleid\n               AND paymentduedate = pd.firstpaymentdate) AS FirstPaymentValue,\n       (SELECT TOP 1 amountdue\n        FROM   repaymentschedule\n        WHERE  saleid = pd.saleid\n               AND paymentduedate <> pd.firstpaymentdate\n               AND paymentduedate <> pd.lastpaymentdate) AS RegularPaymentValue,\n       (SELECT amountdue\n        FROM   repaymentschedule\n        WHERE  saleid = pd.saleid\n               AND paymentduedate = pd.lastpaymentdate)  AS FinalPaymentValue\nFROM   (SELECT saleid,\n               Min(paymentduedate) AS FirstPaymentDate,\n               Max(paymentduedate) AS LastPaymentDate\n        FROM   repaymentschedule\n        GROUP  BY saleid) pd \n","2443":"SELECT  u.* \nFROM    Users u\n        INNER JOIN \n        (   SELECT  ur.UserID\n            FROM    Users_Roles ur\n                    INNER JOIN Roles r\n                        ON r.RoleID = ur.RoleID\n            WHERE   r.PermissionLevel > 100 \n            GROUP BY ur.UserID\n        ) ur\n            ON u.UserId = ur.UserId\nWHERE   u.Active = 1  \nORDER BY u.LastName\n","2444":"SELECT d.ID, GROUP_CONCAT(m.Field) AS ConcatFields\nFROM d JOIN m ON d.ID = m.dID\nGROUP BY d.ID\n","2445":"SELECT   SUM(`quant`), MONTH(`date`) AS month, `id` \nFROM     ((SELECT `date`, `id`, count(`hit`) AS `quant` \n           FROM   `stat_2014_07` \n           WHERE  `k_id` = '123') t1\n          UNION ALL \n          (SELECT `date`, `id`, count(`hit`) AS `quant` \n           FROM   `stat_2014_08` \n           WHERE  `k_id ` = '123') t2\n         ) t_union\nGROUP BY id, month\n","2446":"select count(case tipo_sangre when 'apositivo' then 1 end) as apositivo,\n       count(case tipo_sangre when 'anegativo' then 1 end) as anegativo, \n       .....\n       count(case tipo_sangre when 'onegativo' then 1 end) as onegativo\nfrom donate\n","2447":"Select  \n    NULLIF(Column1, '') as [Column1],\n    NULLIF(Column2, '') as [Column2]\nFrom TableA\n\nUNION\n\nSelect \n    NULLIF(Column1, '') as [Column1],\n    NULLIF(Column2, '') as [Column2]\nFrom TableB\n","2448":"STUDENT_CHOICES=(\n    ('None', 'None'),\n)\n","2449":"CREATE TEMP TABLE items AS SELECT rowid FROM tblEvent_basic WHERE sguid=11\n\nDELETE FROM tblEvent_type WHERE eguid in  (select rowid from items)\nDELETE FROM tblEvent_group WHERE eguid in (select rowid from items)\n\nDROP TABLE items\n","2450":"SELECT Name , MemberNumber\nFROM (\n    SELECT members.Name, friends.MemberNumber1 as MemberNumber\n    FROM friends\n    INNER JOIN members ON friends.MemberNumber1= members.MemNo\n    WHERE friends.MemberNumber2 LIKE 1\n\n    UNION ALL\n\n    SELECT members.Name, friends.MemberNumber2 as MemberNumber\n    FROM friends\n    INNER JOIN members ON friends.MemberNumber2= members.MemNo\n    WHERE friends.MemberNumber1 LIKE 1) AS derived1\nORDER BY derived1.Name\n","2451":"select id,version, team, date, time, oppo \nfrom fixtures A where id in\n(\n    select max(id)from fixtures \n    where date = \"2012-06-01\" \n    group by team\n)\n","2452":"  select * from faculty F\n     JOIN course C\n          on CHARINDEX((','+CAST(c.id as varchar(10))+','), (','+f.courseid+',')) > 0\n     JOIN subject s\n          on CHARINDEX((','+CAST(s.id as varchar(10))+','), (','+f.subjectid+',')) > 0\n","2453":"SELECT CONCAT(city , ', ', country) AS x_axis, COUNT(*) as y_axis\nFROM beer\nGROUP BY city, country\nHAVING COUNT(*) > 100\nORDER BY country, city;\n","2454":"SELECT * FROM TABLE WHERE COLUMN BETWEEN '1' AND '9' and LEN(COLUMN) = 1;\n","2455":"add_library(sql_cpp_target EXCLUDE_FROM_ALL myfile.sql.in.c)\n","2456":"UPDATE my_table\nSET my_field =\n    CASE\n          WHEN position('a' in my_field) = 0 THEN my_field\n          WHEN position('a' in my_field) = 1 THEN substring(my_field from 1 for 5)\n          WHEN position('a' in my_field) > 1 THEN substring(my_field from 2 for 5)\n    END\n","2457":"SELECT  a.STATE , \n        COALESCE(b.count, 0) AS Count\nFROM \n    (\n        SELECT 'done' AS STATE\n        UNION\n        SELECT 'open' AS STATE\n        UNION\n        SELECT 'pending' AS STATE\n        UNION\n        SELECT 'draft' AS STATE\n        UNION\n        SELECT 'cancel' AS STATE\n    ) a LEFT JOIN \n    (\n        SELECT  STATE , \n                count(*) AS count\n        FROM    crm_lead\n        GROUP BY STATE\n    ) b ON a.STATE = b.STATE\n","2458":"select a1.acnumber, a1.opening_balance + coalesce(sum(a2.transaction_amount), 0)\nfrom account a1 left join\n     trandetails a2\n     on a1.acnumber = a2.acnumber and\n        a2.transaction_type like 'Deposit'\ngroup by a1.acnumber, a1.opening_balance;\n","2459":"SELECT ID\nFROM TableA\nWHERE ID NOT IN(SELECT ID\n            FROM TableA\n            WHERE CODE='AAA')\n","2460":";WITH CTE\nAS\n( \n   SELECT EmployeeID, EmployeeName, Department,\n     ROW_NUMBER() OVER(PARTITION BY Department ORDER BY(SELECT 1)) rownum\n  FROM table1\n)\nSELECT\n  EmployeeId,\n  EmployeeName,\n  CASE rownum\n    WHEN 1 THEN Department\n    ELSE ''\n  END AS Department\nFROM CTE\nORDER BY EmployeeID;\n","2461":"Cursor cursor = db.rawQuery(\"Select * from tbl_name\",SelectionArgs[]);\n","2462":"SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()), '03:30:00')\n","2463":"CREATE TABLE Swap (\n  a CHAR(1),\n  b CHAR(1)\n);\n\nINSERT INTO Swap (a, b) VALUES ('a', 'b');\n\nUPDATE Swap SET a = b, b = a;\n\nSELECT * FROM Swap;\n","2464":"select s.StudentName, a.AssignmentName, a.PointsPossible, g.PointsReceived\nfrom students s cross join\n     assignments a left outer join\n     grades g\n     on g.StudentId = a.StudentId and g.AssignmentId = a.AssignmentId;\norder by s.StudentName;\n","2465":"  SELECT x.col1, x.col2,\n         MAX(CASE WHEN x.rk = 1 THEN x.col3 END) AS Res1,\n         MAX(CASE WHEN x.rk = 2 THEN x.col3 END) AS Res2,\n         MAX(CASE WHEN x.rk = 3 THEN x.col3 END) AS Res3\n    FROM (SELECT yt.col1,\n                 yt.col2,\n                 yt.col3,\n                 ROW_NUMBER() OVER(PARTITION BY yt.col1, yt.col2\n                                       ORDER BY yt.col3) AS rk\n            FROM YOUR_TABLE yt) x\nGROUP BY x.col1, x.col2\n","2466":"SELECT SUM(rl.paxon)\n    ,r.id AS port_id\n    ,rl.[date]\nFROM runlogs rl\n    INNER JOIN runs r\n        ON r.code = rl.runsegment\n    INNER JOIN runsegments rs\n        ON rs.code = rl.runsegment\nWHERE rl.[date] BETWEEN '20120709' AND '20120716'  \n    AND rl.account in ('311','312','313')\n    AND rs.org_id = 13\nGROUP BY rl.[date], r.id\n","2467":"SELECT   Employee.Name      \n, Employee.ID       \n, Sum(Sales.Money)\n, Year(Sales.Date)           \n, Month(Sales.Date)\nFROM Database.Sales.Sales       \nINNER JOIN Database.Employee.Employee        \nON Sales.ID=Employee.ID        \nWHERE Sales.Date BETWEEN '2000-01-01' AND '2001-01-01'            \ngroup by \n    Employee.Name      \n    , Employee.ID\n    , Year(Sales.Date)           \n    , Month(Sales.Date)\nORDER BY Employee.Name,  Year(Sales.Date), Month(Sales.Date)\n","2468":"SELECT TOP 1 a.logtime, a.BL1_data_SS_ST, a.BL2_data_SS_ST, a.BL3_data_SS_ST, \na.BL4_data_SS_ST, a.BL5_data_SS_ST, a.BL6_data_SS_ST, a.BL7_data_SS_ST, \na.BL8_data_SS_ST, a.BL9_data_SS_ST, a.BL10_data_SS_ST, a.BL11_data_SS_ST,\na.BL12_data_SS_ST, a.BL13_data_SS_ST, a.BL14_data_SS_ST, a.BL15_data_SS_ST,\na.BL16_data_SS_ST, a.BL17_data_SS_ST, a.BL18_data_SS_ST, a.BL19_data_SS_ST,\na.BL20_data_SS_ST, a.BL21_data_SS_ST, a.BL22_data_SS_ST, a.BL23_data_SS_ST, \na.BL24_data_SS_ST, a.BL25_data_SS_ST, a.BL26_data_SS_ST, a.BL27_data_SS_ST,\nb.st1_prmt_status_p45,c.beam_current, c.beam_energy\nFROM INDUS2_BLFE.dbo.main_BLFE_status a \nINNER JOIN INDUS2_MSIS.dbo.main_MSIS_status b on a.logtime = b.logtime \nINNER JOIN INDUS2_BDS.dbo.DCCT c on b.logtime = c.logtime ''\nORDER BY a.logtime DESC\n","2469":";WITH MaxPricePerCategory\nAS\n    (\n    SELECT MAX(Price) AS [Price]\n        -- You can remove category if you just need the maximum price\n        , Category\n    FROM Table1\n    WHERE VendorID = 69041\n    AND Table1.Category IN (49,50,45)\n    GROUP BY Category\n    )\nSELECT DISTINCT Table2.name\n    , Table2.city\n    , Table2.state\nFROM Table1 \nJOIN Table2 \n    ON Table1.VendorID = Table2.VendorID\nJOIN MaxPricePerCategory MPPC\n    ON Table1.Category = MPPC.Category\n        AND Table1.price > MPPC.Price\n","2470":"select coalesce(t.SalesOrderID, 0) SalesOrderID\n,      coalesce(t.OrderDate, d.OrderDate) OrderDate\n,      coalesce(t.ItemID, 0) ItemID\n,      coalesce(t.Quantity, 0) Quantity\n,      coalesce(t.PromotionCode, 0) PromotionCode\nfrom   (select @dateParameter OrderDate) d\nleft\nouter\njoin   ( SELECT SalesOrderID, OrderDate, ItemID, Quantity, PromotionCode\n         FROM tblSalesOrder\n       ) t\non     t.OrderDate = d.OrderDate\n","2471":"$sql = \"DELETE adjectives.*, declensions.* \nFROM adjectives adj\nJOIN declensions decl ON \n   (adj.decl_m_id = decl.id OR\n   adj.decl_f_id = decl.id OR\n   adj.decl_n_id = decl.id OR\n   adj.decl_pl_id = decl.id)\nWHERE adj.word_id IN ?\";\n","2472":"        Plan Hash           Total Elapsed                 1st Capture   Last Capture\n     Value                    Time(ms)    Executions       Snap ID        Snap ID\n    --- ---------------- ---------------- ------------- ------------- --------------\n     54069910                   81,459           256         19864          19864\n","2473":"CREATE OR REPLACE PROCEDURE SP_EMPLOYEE_LOOKUP_BY_EMP_ID\n(\n      IN_USER_ID IN NUMBER, \n      IN_EMPLOYEE_ID NUMBER,\n      IN_HC_AS_ON_DATE VARCHAR2,\n      emp_cursor OUT SYS_REFCURSOR\n) \nIS \n\n is_found_rec boolean := false;    \n\n CURSOR employees IS \n    SELECT  * FROM EMPLOYEE e; \n\nBEGIN    \n\n FOR employee IN employees\n  LOOP  \n\n    is_found_rec := true;\n\n        \/\/ do something  \n\n  END LOOP; \n\n if not is_found_rec then \n     \/\/ do something else \n end if;\n\nEND;\n","2474":"SELECT \n    ban_id,\n    ban_url,\n    IFNULL(SUM(bansta_event = 'C'), 0) as num_impressions,\n    IFNULL(SUM(bansta_event = 'I'), 0) as num_clicks\nFROM banner\nLEFT JOIN banner_statistics\n    ON bansta_ban_id = ban_id\n        AND bansta_event IN ('I', 'C') \nWHERE ban_id = 1\n","2475":"SELECT count(DISTINCT wp_postmeta.`post_id`) \n  FROM wp_posts\n       LEFT JOIN wp_postmeta ON (wp_posts.ID = wp_postmeta.post_id)\n       LEFT JOIN wp_term_relationships ON (wp_posts.ID = wp_term_relationships.object_id)\n       LEFT JOIN wp_term_taxonomy ON (wp_term_relationships.term_taxonomy_id = wp_term_taxonomy.term_taxonomy_id) \n WHERE wp_postmeta.meta_key       = 'betting_status'\n    AND wp_postmeta.meta_value    = 'yes'\n    AND wp_posts.post_status      = 'publish'\n    AND wp_term_taxonomy.taxonomy = 'category'\n    AND wp_term_taxonomy.term_id  = 106;\n","2476":"Select * from Page where Page.page_title = 'AccessibleComputing'\n","2477":"WITH times as (\nSELECT    t3.EmplID\n        , t3.EmplName\n        , min(t1.RecTime) AS InTime\n        , max(t2.RecTime) AS [TimeOut]\n        , cast(min(t1.RecTime) as datetime) AS InTimeSub\n        , cast(max(t2.RecTime) as datetime) AS TimeOutSub\n        , xx.RecDate AS [DateVisited]\n        , CASE WHEN max(t1.EmplID) is null and max(t2.EmplID) is NULL \n                      then 'Yes' else 'No' END IsAbsent\nFROM  HrEmployee t3 \nCROSS JOIN\n(SELECT DISTINCT RecDate FROM AtdRecord) xx\nLEFT JOIN  AtdRecord t1 \nON    t3.EmplID = t1.EmplID \n      and t1.RecDate = xx.RecDate\nLEFT JOIN\n      AtdRecord t2 \nON    t3.EmplID = t2.EmplID \nAND   t1.RecDate = t2.RecDate\nAND   t1.RecTime < t2.RecTime\nAND   t2.RecDate = xx.RecDate\ngroup by \n          t3.EmplID\n        , t3.EmplName\n        , xx.RecDate\n)\nSELECT EmplID\n,EmplName\n,InTime\n,[TimeOut]\n,[DateVisited]\n,convert(char(5),cast([TimeOutSub] - InTimeSub as time), 108) totaltime\n,convert(char(5), case when TimeOutSub - InTimeSub >= '08:01' then \ncast(TimeOutSub - dateadd(hour, 8, InTimeSub) as time) else '00:00' end, 108) as overtime,\nisAbsent\nFROM times\n","2478":"for rec in (\n    SELECT T.ID ID1,\n           U.ID ID2,\n           V.EQ\n           FROM T \n           FULL OUTER JOIN U ON T.ID = U.ID\n           FULL OUTER JOIN (SELECT ID, 1 EQ FROM T NATURAL JOIN U) V ON U.ID = V.ID)\nloop\n    if rec.id1 is null\n    then\n        -- row in U but not in T\n    elsif rec.id2 is null\n    then\n        -- row in T but not in U\n    elsif rec.eq is null\n        -- row present in both tables\n        -- but content mismatch\n    end if\nend loop\n","2479":"DECLARE @RAOID INT, @ORGID INT\n\nSET @ORGID = 28\nSET @RAOID = (SELECT RAOID FROM tblOrganisation WHERE ORGID = @ORGID)\n\nPRINT @RAOID\n\nIF @RAOID IS NOT NULL\nBEGIN\n  SELECT \n    CASE \n      WHEN tblOrganisation.ORGID IS NOT NULL THEN tblOrganisation.ORGID \n      ELSE 'No ORGID' \n    END AS ORGID,\n    **CASE isnull(tblOrganisation.Name,'')\n      WHEN '' THEN 'No SubSource for this RAO'\n      ELSE  tblOrganisation.Name**\n    END as SUBSOURCENAME\n  FROM tblOrganisation \n  LEFT OUTER JOIN tblSubGroup ON tblOrganisation.SubGroupID = tblSubGroup.SubGroupID\n  WHERE\n    tblSubGroup.RAOID = @RAOID\nEND\n","2480":"declare @table_that_changes varchar(100) \ndeclare @linked_server1 varchar(20)\ndeclare @linked_server2 varchar(20)\ndeclare @DB_onserver1 varchar(100) \ndeclare @DB_onserver2 varchar(100)\nselect @linked_server1 = '[server109]',\n       @linked_server2 = '[server104]',\n       @DB_onserver1 = '[database203434]',\n       @DB_onserver2= '[database416541]',\n       @table_that_changes = 'LossTable_2191'\n\ndeclare @sql varchar(1000)\n\nset @sql = 'create view linked1.table1 as select * from ' +\n           @linked_server2 + '.' + @DB_onserver1  + '.table1'\n\nexec( @sql)\n","2481":"SELECT \n  SUM(comission), \n  token, \n  DATE(transdate) \nFROM\n  t \nGROUP BY \n  token, \n  DATE(transdate)\n","2482":"WHERE UPDATE_TIME \nBETWEEN TIMESTAMP(CHAR(CURRENT DATE,ISO) || ' 06:00:00') - 1 DAY\nAND TIMESTAMP(CHAR(CURRENT DATE,ISO) || ' 06:00:00')\n","2483":"select a.mjor, a.course, b.grade \nfrom degree_plan as a\nleft join student_record as b on a.course_no=b.course_no and b.id=4455\nwhere a.major='COE'\n","2484":"select t.table_name, p.object_name, count(*)\nfrom user_tables t\ncross join user_objects p\njoin user_source s on s.name = p.object_name\n         and s.type = 'PACKAGE BODY'\n         and upper(s.text) like '%' || upper(t.table_name) || '%'\nwhere p.object_type = 'PACKAGE BODY'\ngroup by t.table_name, p.object_name\nhaving count(*) > 5;\n","2485":"select * from foo\norder by coalesce(created_at, scheduled_at)\n","2486":"SELECT\n[Pre].[pfPrefix],\n[Pro].[prId],\n[Pro].[prName],\n(CASE\n   WHEN [EnP].[enNumber] IS NULL THEN [EnT].[enNumber]\n   ELSE\n     (SELECT TOP 1\n        [iET].[enNumber]\n      FROM\n        [SerialsDB].[dbo].[Entries] AS [iET]\n        LEFT OUTER JOIN [SerialsDB].[dbo].[Entries] AS [iEP]\n        ON (([iEP].[enProduct] IS NULL AND [iET].[enProduct] IS NULL) OR\n            ([iEP].[enProduct] = [iET].[enProduct])) AND\n           (([iEP].[enOrder] IS NULL AND [iET].[enOrder] IS NULL) OR\n            ([iEP].[enOrder] = [iET].[enOrder])) AND\n           (([iEP].[enClient] IS NULL AND [iET].[enClient] IS NULL) OR\n            ([iEP].[enClient] = [iET].[enClient])) AND\n           (([iEP].[enNfe] IS NULL AND [iET].[enNfe] IS NULL) OR\n            ([iEP].[enNfe] = [iET].[enNfe])) AND\n           (([iEP].[enDate] IS NULL AND [iET].[enDate] IS NULL) OR\n            ([iEP].[enDate] = [iET].[enDate])) AND\n           (([iEP].[enAuth] IS NULL AND [iET].[enAuth] IS NULL) OR\n            ([iEP].[enAuth] = [iET].[enAuth])) AND\n           (([iEP].[enStatus] IS NULL AND [iET].[enStatus] IS NULL) OR\n            ([iEP].[enStatus] = [iET].[enStatus])) AND\n           ([iEP].[enNumber] = ([iET].[enNumber] - 1))\n      WHERE\n        (([iET].[enProduct] IS NULL AND [EnT].[enProduct] IS NULL) OR\n         ([iET].[enProduct] = [EnT].[enProduct])) AND\n        (([iET].[enOrder] IS NULL AND [EnT].[enOrder] IS NULL) OR\n         ([iET].[enOrder] = [EnT].[enOrder])) AND\n        (([iET].[enDate] IS NULL AND [EnT].[enDate] IS NULL) OR\n         ([iET].[enDate] = [EnT].[enDate])) AND\n        (([iET].[enClient] IS NULL AND [EnT].[enClient] IS NULL) OR\n         ([iET].[enClient] = [EnT].[enClient])) AND\n        (([iET].[enNfe] IS NULL AND [EnT].[enNfe] IS NULL) OR\n         ([iET].[enNfe] = [EnT].[enNfe])) AND\n        (([iET].[enAuth] IS NULL AND [EnT].[enAuth] IS NULL) OR\n         ([iET].[enAuth] = [EnT].[enAuth])) AND\n        (([iET].[enStatus] IS NULL AND [EnT].[enStatus] IS NULL) OR\n         ([iET].[enStatus] = [EnT].[enStatus])) AND\n        ([iET].[enNumber] <= [EnP].[enNumber]) AND\n        ([iEP].[enNumber] IS NULL)\n      ORDER BY\n        [iET].[enNumber] DESC)\n END) AS [Initial],\n[EnT].[enNumber] AS [Final],\n[EnT].[enOrder],\n[EnT].[enDate],\n[EnT].[enNfe],\n[EnT].[enClient],\n[Cli].[clGroup],\n[EnT].[enAuth]\nFROM\n[SerialsDB].[dbo].Entries AS [EnT]\n  LEFT OUTER JOIN [SerialsDB].[dbo].[Entries] AS [EnN]\n  ON ([EnN].[enProduct] = [EnT].[enProduct]) AND\n     ([EnN].[enOrder] = [EnT].[enOrder]) AND\n     ([EnN].[enClient] = [EnT].[enClient]) AND\n     (([EnN].[enNfe] IS NULL AND [EnT].[enNfe] IS NULL) OR\n      ([EnN].[enNfe] = [EnT].[enNfe])) AND\n     ([EnN].[enDate] = [EnT].[enDate]) AND\n     ([EnN].[enStatus] = [EnT].[enStatus]) AND\n ([EnN].[enAuth] = [EnT].[enAuth]) AND\n ([EnN].[enNumber] = ([EnT].[enNumber] + 1))\n  LEFT OUTER JOIN [SerialsDB].[dbo].[Entries] AS [EnP]\n  ON ([EnP].[enProduct] = [EnT].[enProduct]) AND\n     ([EnP].[enOrder] = [EnT].[enOrder]) AND\n     ([EnP].[enClient] = [EnT].[enClient]) AND\n     (([EnP].[enNfe] IS NULL AND [EnT].[enNfe] IS NULL) OR\n      ([EnP].[enNfe] = [EnT].[enNfe])) AND\n     ([EnP].[enDate] = [EnT].[enDate]) AND\n     ([EnP].[enStatus] = [EnT].[enStatus]) AND\n ([EnP].[enAuth] = [EnT].[enAuth]) AND\n     ([EnP].[enNumber] = ([EnT].[enNumber] - 1))\n  LEFT OUTER JOIN [SerialsDB].[dbo].[Prefixes] AS [Pre]\n  ON ([EnT].[enPrefix] = [Pre].[pfId])\n  LEFT OUTER JOIN [SerialsDB].[dbo].[Products] AS [Pro]\n  ON ([EnT].[enProduct] = [Pro].[prId])\n  LEFT OUTER JOIN [SerialsDB].[dbo].[Clients] AS [Cli]\n  ON ([EnT].[enClient] = [Cli].[clId])\nWHERE\n([EnT].[enOrder] IS NOT NULL) AND\n([EnT].[enClient] IS NOT NULL) AND\n([EnN].[enNumber] IS NULL) AND\n([EnT].[enStatus] = 4) AND\n([EnT].[enAuth] IS NOT NULL)\n","2487":"SELECT * FROM OpenQuery(PGEXAMPLE, 'select * from yourtable');\n","2488":"WHERE two = 2 AND three = 3 -- no one\n","2489":"R1 <(E M), {E \u2192 M}>\n\nR2 <(E L T), {L T \u2192 E, E T \u2192 L}>\n","2490":"whereString = \"LabDate Between #\" & myStartDate & \"# AND #\" & myEndDate & \"#\"\n","2491":"SELECT \n    t.NAME AS TableName,\n    p.rows AS RowCounts\nFROM \n    sys.tables t\nINNER JOIN \n    sys.partitions p ON t.object_id = p.OBJECT_ID \nWHERE \n    t.NAME NOT LIKE 'dt%' \n    AND t.is_ms_shipped = 0\n    AND p.rows = 0\nGROUP BY \n    t.Name, p.Rows\nORDER BY \n    t.Name\n","2492":"\/*Set up test table*\/\nDECLARE @T TABLE (\n  RowID       INT,\n  Employee    CHAR(7),\n  [Server]    CHAR(6),\n  [timestamp] DATETIME );\n\nINSERT INTO @T\nSELECT 5,'E000001','Serv-B',  '20010501' UNION ALL\nSELECT 4,'E000001','Serv-A',  '20010401' UNION ALL\nSELECT 3,'E000001','Serv-B',  '20010301' UNION ALL\nSELECT 2,'E000001','Serv-A',  '20010201' UNION ALL\nSELECT 1,'E000001','Serv-A',  '20010101';\n\nWITH cte\n     As (SELECT ROW_NUMBER() OVER (PARTITION BY Employee ORDER BY RowID) -\n                ROW_NUMBER() OVER (PARTITION BY Employee, Server\n                                       ORDER BY RowID) AS Grp,\n                *\n         FROM   @T),\n     cte2\n     AS (SELECT *,\n                ROW_NUMBER() OVER (PARTITION BY Employee, Grp ORDER BY RowID) AS\n                Rn\n         FROM   cte)\n\n\/* Edit: Actually - You want a SELECT not a DELETE I think?\nDELETE FROM cte2 WHERE  Rn > 1*\/\n\nSELECT   RowID, Employee, [Server], [timestamp]\nFROM cte2\nWHERE  Rn = 1\n","2493":"Function GetAccessRecordset(sDatabase As String, sSQL As String) As Variant\n    Dim oAccess As Object\n    Set oAccess = CreateObject(\"Access.Application\")\n    oAccess.OpenCurrentDatabase (sDatabase)\n    oAccess.Visible = False\n    Dim dbs As Object\n    Set dbs = oAccess.CurrentDb.OpenRecordSet(sSQL)\n    GetAccessRecordset = dbs.GetRows(dbs.RecordCount)\n    dbs.Close\n    oAccess.Quit\nEnd Function\n","2494":"UPDATE the_table\nSET lastname = (SELECT lastname FROM the_table ORDER BY RAND())\n","2495":"mysql -uroot -p database_name < backup.sql\n","2496":"SELECT\n      e.*\nFROM employee e\n      LEFT JOIN class c\n            ON e.emp_id = c.emp_id\nWHERE (c.timing <> '3-4'\n      OR c.timing IS NULL)\n;\n\nSELECT\n      *\nFROM employee\nWHERE NOT EXISTS (\n            SELECT 1\n            FROM class\n            WHERE timing = '3-4'\n                  AND class.emp_id = employee.emp_id\n      )\n;\n","2497":"DECLARE  @Table1 TABLE \n    (id int, text varchar(8), sender varchar(4), datetime varchar(25), hour int)\n;\n\nINSERT INTO @Table1\n    (id, text, sender, datetime, hour)\nVALUES\n    (1, 'Hi, John', 'Amy', '2015-12-10 13:37:25 +0000', 13),\n    (2, 'Yup', 'Mike', '2015-12-10 15:49:11 +0000', 15)\n;\n\nDECLARE @Table2  TABLE \n    (hour int)\n;\n\nINSERT INTO @Table2\n    (hour)\nVALUES\n    (0),\n    (1),\n    (2),\n    (3),\n    (4),\n    (6),\n    (7),\n    (8),\n    (9),\n    (13),\n    (15),\n    (16),\n    (23)\n;\n\n   Select T.hour,\nCASE WHEN cnt <> 0 THEN \nROW_NUMBER()OVER(PARTITION BY T.cnt \n    ORDER BY (SELECT NULL)) \nELSE CNT END cnt from (\nselect TT.hour,\nCASE WHEN ISNULL(T.hour,0)<> 0 \nTHEN 1 ELSE ISNULL(T.hour,0) \n    END cnt  \n        from @Table1  T\n    FULL JOIN @Table2 TT\n    ON TT.hour = T.hour\n\n)T\nORDER BY T.hour\n","2498":"SELECT asset_id, entered_date, max(modified_date)\nFROM price_data\nGROUP BY asset_id, entered_date\n","2499":"select  row_number() over (partition by Meal order by Time)\n,       *\nfrom    YourTable\n"}}