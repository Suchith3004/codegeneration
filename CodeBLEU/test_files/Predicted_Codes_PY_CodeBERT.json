{"predicted_codes":{"0":["import","import",">>>","In","from","def","#","class","for","df"],"1":["import","import","from","class","def",">>>","#"," ","In","for"],"2":[">>>",">>>","import","def","from","In","#","class","for"," "],"3":[">>>",">>>","import","In","def","from","class","#","for"," "],"4":[">>>",">>>","class","def","from","import","In","#"," ","for"],"5":[">>>",">>>","import","In","def","from","#","class","for","df"],"6":["import","import",">>>","from","class","def","#","In"," ","for"],"7":["import","import","from","class","def",">>>","#","In"," ","for"],"8":[">>>",">>>","import","def","from","class","#","In"," ","for"],"9":[">>>",">>>","import","class","def","from","#","In"," ","print"],"10":[">>>",">>>","def","import","from","In","class","#","for"," "],"11":["class","class",">>>","import","def","from","#","In"," ","print"],"12":["In","In",">>>","import","def","from","df","#","class"," "],"13":[">>>",">>>","import","def","from","In","#","if","print","class"],"14":[">>>",">>>","def","import","In","from","class","#","if"," "],"15":["from","from","import","class","def",">>>","#"," ","@","In"],"16":[">>>",">>>","import","def","from","In","#","class","for"," "],"17":["class","class","def","from",">>>","import","#","In"," ","for"],"18":["import","import",">>>","def","In","from","class","#","for"," "],"19":["import","import","from",">>>","In","def","#","class","for","df"],"20":["import","import",">>>","In","from","def","#","class","df","for"],"21":[">>>",">>>","class","def","import","from","#","In"," ","print"],"22":["class","class","from","def","import",">>>","#","In"," ","@"],"23":[">>>",">>>","def","In","import","class","from","#","if","for"],"24":["import","import","class","from",">>>","def","#"," ","@","In"],"25":[">>>",">>>","import","def","In","from","#","class","for"," "],"26":[">>>",">>>","import","def","from","In","#","class","for","print"],"27":[">>>",">>>","In","import","def","from","#","df","class"," "],"28":["import","import","from","class","def",">>>","In","#"," ","for"],"29":[">>>",">>>","def","import","class","from","In","#","if","for"],"30":[">>>",">>>","import","def","class","from","In","#","for"," "],"31":["import","import",">>>","from","class","def","#","In"," ","$"],"32":["import","import","from","class",">>>","def","#","In"," ","for"],"33":["import","import","from","def",">>>","class","#","In","for","if"],"34":["import","import",">>>","In","from","def","class","#"," ","for"],"35":[">>>",">>>","import","def","from","In","#","class","for","print"],"36":[">>>",">>>","import","def","from","In","#","with","for","class"],"37":[">>>",">>>","import","def","from","class","In","#","for"," "],"38":["import","import",">>>","from","def","#","class","In","for","if"],"39":[">>>",">>>","def","import","class","from","#","In","for","print"],"40":[">>>",">>>","import","def","from","In","#","class","for","print"],"41":[">>>",">>>","import","def","from","class","In","#"," ","for"],"42":[">>>",">>>","import","def","from","class","In","#","for"," "],"43":[">>>",">>>","import","def","from","class","#","In","for"," "],"44":[">>>",">>>","import","from","def","#","class","In"," ","for"],"45":[">>>",">>>","In","import","def","from","#","df","class","print"],"46":["import","import","from",">>>","In","def","class","#","for"," "],"47":[">>>",">>>","import","def","from","class","In","#","for"," "],"48":[">>>",">>>","In","import","def","from","#","class","df","for"],"49":["import","import","from",">>>","class","def","#","In"," ","for"],"50":["import","import","from",">>>","In","def","#","class","df","for"],"51":[">>>",">>>","In","import","def","from","#","class","df"," "],"52":["class","class","import",">>>","def","from","#","In","@"," "],"53":["import","import",">>>","from","def","In","#","class","for"," "],"54":["class","class","def","from","import",">>>","#","In"," ","@"],"55":[">>>",">>>","def","import","class","from","#","In"," ","for"],"56":["import","import","from",">>>","class","def","In","#"," ","for"],"57":["In","In",">>>","import","def","from","df","#","class"," "],"58":[">>>",">>>","import","def","from","class","In","#","for"," "],"59":["import","import","from","class","def",">>>","In","#"," ","for"],"60":["import","import","from",">>>","def","class","#","In"," ","for"],"61":["class","class","from","import",">>>","def","#"," ","In","for"],"62":[">>>",">>>","import","def","from","In","class","#","for"," "],"63":["import","import",">>>","from","def","In","class","#","for"," "],"64":[">>>",">>>","import","def","from","In","#","class","for"," "],"65":[">>>",">>>","import","from","def","class","#","In"," ","for"],"66":["import","import","class","def","from",">>>","#","In"," ","for"],"67":["import","import",">>>","class","from","def","In","#"," ","for"],"68":[">>>",">>>","import","def","from","#","In","class"," ","for"],"69":["class","class","import",">>>","from","def","#","In"," ","for"],"70":[">>>",">>>","def","class","import","from","In","#","print","for"],"71":[">>>",">>>","import","def","from","In","#","class","for"," "],"72":["import","import",">>>","from","def","#","class","In"," ","for"],"73":[">>>",">>>","import","def","#","from","class","In"," ","for"],"74":[">>>",">>>","import","from","In","def","#","class","for"," "],"75":[">>>",">>>","def","class","import","from","#","In"," ","@"],"76":[">>>",">>>","import","def","from","In","#","class","for"," "],"77":["import","import","from",">>>","def","class","#","In"," ","for"],"78":[">>>",">>>","import","from","def","class","In","#","for"," "],"79":["import","import","from",">>>","class","def","#","In"," ","for"],"80":["import","import",">>>","def","from","class","In","#","for"," "],"81":["class","class","from","import","def",">>>","In","#"," ","@"],"82":[">>>",">>>","import","from","In","def","#","class","for","print"],"83":[">>>",">>>","import","def","from","In","#","class","for"," "],"84":[">>>",">>>","import","In","def","from","#","class","for","print"],"85":[">>>",">>>","def","import","class","from","In","#","for"," "],"86":[">>>",">>>","def","import","In","from","class","#"," ","for"],"87":["import","import",">>>","from","In","def","#","class","for","with"],"88":[">>>",">>>","import","from","def","In","class","#","for"," "],"89":[">>>",">>>","def","import","In","from","class","#","for"," "],"90":[">>>",">>>","import","def","from","#","In","class","for"," "],"91":["class","class","from","def","import",">>>","#"," ","@","In"],"92":["class","class","import","from",">>>","def","In","#"," ","for"],"93":[">>>",">>>","import","In","def","from","#","class","for"," "],"94":["import","import","from",">>>","class","def","#","In"," ","if"],"95":["import","import",">>>","from","def","#","class","In"," ","for"],"96":[">>>",">>>","import","def","from","class","In","#"," ","for"],"97":["import","import",">>>","from","def","class","#","In"," ","for"],"98":[">>>",">>>","import","def","In","from","#","class","for"," "],"99":[">>>",">>>","import","def","In","class","from","#","for","print"],"100":["class","class","from",">>>","def","import","In","#"," ","for"],"101":["import","import",">>>","def","from","class","#","In"," ","for"],"102":["import","import","from","class",">>>","#","def","In"," ","for"],"103":["import","import",">>>","from","def","class","In","#","for"," "],"104":["import","import","from",">>>","def","In","#","class","for"," "],"105":["class","class","import","def",">>>","from","#","In"," ","@"],"106":[">>>",">>>","import","def","In","from","#","class","for"," "],"107":[">>>",">>>","import","def","from","In","class","#","for"," "],"108":["import","import","In",">>>","from","def","#","class","df","for"],"109":["class","class","import","from","def",">>>","#","@"," ","In"],"110":["import","import","from",">>>","def","#","In","class","for"," "],"111":[">>>",">>>","import","def","from","In","class","#","for"," "],"112":["class","class","def",">>>","from","import","#","In"," ","if"],"113":["import","import",">>>","class","from","def","#","In"," ","for"],"114":[">>>",">>>","import","def","from","In","#","class","for"," "],"115":["import","import",">>>","from","def","In","class","#"," ","for"],"116":[">>>",">>>","import","def","In","from","#","for","class","print"],"117":[">>>",">>>","import","from","def","class","In","#"," ","for"],"118":["class","class",">>>","import","def","from","#","In"," ","@"],"119":[">>>",">>>","import","def","from","In","#","class","for"," "],"120":["import","import",">>>","from","def","class","#","In","for"," "],"121":["class","class","from","def","import",">>>","In","#"," ","@"],"122":["import","import","class",">>>","from","def","#","In"," ","@"],"123":["import","import",">>>","from","def","class","#","In","for"," "],"124":["import","import","def",">>>","class","from","#","In"," ","for"],"125":["In","In",">>>","import","def","df","from","#","class"," "],"126":[">>>",">>>","import","def","In","from","class","#","for"," "],"127":[">>>",">>>","import","from","def","class","#","In"," ","for"],"128":["import","import","from","def","class",">>>","#"," ","In","if"],"129":[">>>",">>>","import","from","def","In","#","class"," ","for"],"130":["import","import","from",">>>","class","def","#","In"," ","for"],"131":[">>>",">>>","import","def","In","from","#","class","for"," "],"132":["import","import",">>>","from","class","def","In","#"," ","for"],"133":["import","import",">>>","from","def","class","#","In","for"," "],"134":[">>>",">>>","def","import","In","from","class","#","if"," "],"135":[">>>",">>>","import","def","In","class","from","#","for","print"],"136":[">>>",">>>","def","In","import","from","class","#","for"," "],"137":[">>>",">>>","def","import","In","from","#","class","for"," "],"138":[">>>",">>>","def","import","class","from","#","In"," ","print"],"139":["import","import",">>>","from","In","def","#","class","for"," "],"140":["import","import",">>>","from","def","In","#","class","for","with"],"141":["import","import",">>>","from","class","def","#","In"," ","for"],"142":[">>>",">>>","In","import","def","from","df","#","class"," "],"143":[">>>",">>>","import","def","#","from","In","for"," ","if"],"144":[">>>",">>>","import","def","from","#","In","class","for","with"],"145":[">>>",">>>","import","In","from","def","#","class","for","df"],"146":["class","class","def","from",">>>","import","#"," ","In","@"],"147":["class","class",">>>","import","def","from","#","In"," ","for"],"148":[">>>",">>>","def","import","class","In","from","#","for","print"],"149":["import","import",">>>","In","from","def","class","#","for"," "],"150":["import","import",">>>","from","def","class","#","In"," ","for"],"151":[">>>",">>>","import","In","def","from","#","class","for","print"],"152":["import","import","from","class",">>>","def","#","In"," ","for"],"153":["import","import",">>>","class","from","def","#","In"," ","for"],"154":["import","import","from",">>>","class","def","#","In"," ","for"],"155":["import","import",">>>","def","from","#","class","In","for","print"],"156":["import","import","from",">>>","class","def","#","In"," ","for"],"157":["import","import",">>>","from","def","#","class","In"," ","for"],"158":["In","In",">>>","import","def","from","df","#","class","for"],"159":["class","class","def","from","import",">>>"," ","#","@","In"],"160":[">>>",">>>","def","import","from","In","#","class","for"," "],"161":[">>>",">>>","def","import","In","from","#","class","for"," "],"162":["import","import",">>>","from","def","class","#","In","for"," "],"163":[">>>",">>>","import","def","class","from","#","In","print"," "],"164":["import","import",">>>","def","from","#","In","class","for"," "],"165":["class","class","from","import","def",">>>","#","In"," ","@"],"166":[">>>",">>>","import","In","def","from","#","class","for","print"],"167":[">>>",">>>","import","In","def","from","class","#","for"," "],"168":["import","import",">>>","from","class","def","#","In"," ","for"],"169":["import","import","from",">>>","In","def","class","#","for"," "],"170":[">>>",">>>","import","from","class","def","#","In"," ","for"],"171":[">>>",">>>","def","import","In","from","class","#","print","for"],"172":[">>>",">>>","import","def","from","In","#","class","for","print"],"173":["import","import","from","class",">>>","def","#","In"," ","$"],"174":["import","import","from",">>>","def","class","#","In"," ","for"],"175":["import","import",">>>","from","class","def","#","In"," ","for"],"176":["class","class",">>>","def","import","from","In","#","for"," "],"177":[">>>",">>>","import","from","def","class","In","#"," ","for"],"178":[">>>",">>>","import","In","def","from","class","#","df"," "],"179":["import","import",">>>","def","from","#","class","In","for","with"],"180":[">>>",">>>","import","from","def","#","class","In"," ","for"],"181":[">>>",">>>","def","import","from","class","In","#","for","print"],"182":[">>>",">>>","import","def","from","In","#","for","class"," "],"183":["import","import",">>>","In","from","def","#","class","for","with"],"184":[">>>",">>>","import","from","class","def","In","#"," ","for"],"185":[">>>",">>>","import","from","def","In","#","class"," ","for"],"186":["In","In",">>>","import","def","df","from","#","class","for"],"187":["import","import",">>>","from","class","def","#","In"," ","for"],"188":[">>>",">>>","import","from","def","#","class","In"," ","for"],"189":[">>>",">>>","import","def","from","class","#","In","for","print"],"190":["import","import",">>>","from","def","In","#","class","for"," "],"191":[">>>",">>>","import","def","from","In","#","class","for"," "],"192":["import","import",">>>","from","def","#","In","class","for","with"],"193":["import","import","from",">>>","In","#","def","class"," ","for"],"194":[">>>",">>>","import","In","def","from","class","#","print","for"],"195":["class","class","import","from","def",">>>","#"," ","In","<"],"196":["import","import",">>>","def","from","class","In","#","for"," "],"197":[">>>",">>>","def","import","from","In","class","#"," ","for"],"198":["import","import",">>>","from","In","def","#","class","for"," "],"199":["In","In","import",">>>","from","def","#","df","class","for"],"200":[">>>",">>>","In","def","import","from","#","class","for","print"],"201":[">>>",">>>","import","def","class","In","from","#"," ","for"],"202":[">>>",">>>","import","def","from","In","class","#","for"," "],"203":["import","import",">>>","def","from","class","#","In"," ","for"],"204":["import","import",">>>","In","from","def","#","class","for","df"],"205":[">>>",">>>","import","from","def","In","class","#"," ","for"],"206":["import","import",">>>","In","from","def","#","class","df","for"],"207":[">>>",">>>","import","from","def","class","In","#","for"," "],"208":["import","import",">>>","In","from","def","#","class","df","for"],"209":["import","import","from",">>>","class","def","#","In"," ","for"],"210":["class","class","from","import",">>>","def","#","In"," ","@"],"211":["import","import","from",">>>","class","def","In","#","for"," "],"212":[">>>",">>>","import","def","from","In","#","class","for"," "],"213":["import","import","class","from","def",">>>","#","In"," ","for"],"214":["class","class","def","from","import",">>>","#"," ","In","@"],"215":["import","import",">>>","from","def","class","#","In"," ","for"],"216":["class","class","from","import",">>>","def","#"," ","In","<"],"217":["class","class","from","import","def",">>>","In","#"," ","@"],"218":["import","import","from","class",">>>","def","#","In"," ","for"],"219":[">>>",">>>","In","import","def","from","#","df","class","for"],"220":["class","class","def","from",">>>","import","#","In"," ","@"],"221":[">>>",">>>","import","def","from","class","#","In","for"," "],"222":["import","import",">>>","from","In","def","#","class","for"," "],"223":["import","import",">>>","class","from","def","#","In"," ","for"],"224":[">>>",">>>","import","from","def","#","In","print","class","if"],"225":["import","import","class","from",">>>","def","#","In"," ","@"],"226":["class","class","from","def","import",">>>","#","In"," ","@"],"227":[">>>",">>>","import","from","def","class","#","In"," ","for"],"228":[">>>",">>>","In","import","def","from","#","class","df"," "],"229":["import","import","from","class","def",">>>","#","In","for"," "],"230":[">>>",">>>","import","from","def","class","#","In","for"," "],"231":["from","from","import","class","def",">>>","#"," ","@","In"],"232":["import","import",">>>","from","def","In","class","#"," ","for"],"233":["class","class","def","from",">>>","import","#","In"," ","for"],"234":[">>>",">>>","import","from","def","In","class","#"," ","for"],"235":["import","import",">>>","def","from","#","class","In","for"," "],"236":[">>>",">>>","import","def","In","from","class","#","for"," "],"237":["import","import","class",">>>","def","from","#","In"," ","for"],"238":[">>>",">>>","import","def","from","#","In","class"," ","for"],"239":["import","import","from","In",">>>","def","#","class","df","for"],"240":[">>>",">>>","import","def","In","from","class","#","for"," "],"241":["from","from","import","class",">>>","def","In","#"," ","for"],"242":[">>>",">>>","import","from","def","class","#","In"," ","for"],"243":["import","import","class","from",">>>","def","#"," ","In","@"],"244":[">>>",">>>","import","from","def","class","#","In"," ","for"],"245":["class","class","from",">>>","def","import","In","#"," ","for"],"246":[">>>",">>>","In","import","def","from","#","df","class"," "],"247":[">>>",">>>","def","import","class","from","In","#","for"," "],"248":["import","import","from","class",">>>","def","#","In"," ","if"],"249":["import","import",">>>","from","def","class","In","#"," ","for"],"250":[">>>",">>>","import","def","from","In","class","#","for"," "],"251":["import","import",">>>","In","from","def","#","class","for","df"],"252":[">>>",">>>","def","import","In","from","class","#","for","print"],"253":["import","import","from",">>>","class","def","#","In"," ","for"],"254":["class","class","def",">>>","import","from","#","@"," ","In"],"255":[">>>",">>>","import","def","from","In","class","#","for"," "],"256":[">>>",">>>","import","class","from","def","#","In"," ","for"],"257":["import","import",">>>","from","def","In","#","class","for","with"],"258":[">>>",">>>","class","import","def","from","In","#"," ","for"],"259":["import","import","from","class",">>>","def","#","In"," ","for"],"260":["import","import","from","def","class","#",">>>"," ","In","@"],"261":["import","import","from","class","def",">>>","#","In"," ","for"],"262":["import","import",">>>","def","from","#","In","class","for","with"],"263":[">>>",">>>","def","import","class","In","from","#"," ","print"],"264":[">>>",">>>","def","import","class","from","In","#"," ","for"],"265":["import","import",">>>","In","from","def","#","class","for"," "],"266":["import","import","from",">>>","def","#","class","In"," ","for"],"267":[">>>",">>>","import","In","def","from","#","class","for"," "],"268":["import","import","from",">>>","class","def","In","#"," ","for"],"269":["import","import","from",">>>","In","#","def","class"," ","for"],"270":["import","import","from",">>>","In","def","#","class","for","df"],"271":["import","import","from","In",">>>","def","#","class","for","df"],"272":[">>>",">>>","In","import","def","from","#","df","class"," "],"273":["import","import",">>>","def","from","class","#","In","for"," "],"274":["import","import",">>>","In","from","def","#","class","df","for"],"275":[">>>",">>>","import","def","from","#","In","class","print","for"],"276":[">>>",">>>","import","def","class","from","#","In"," ","print"],"277":[">>>",">>>","In","import","def","from","#","class","df","print"],"278":[">>>",">>>","import","def","from","class","#","In","for"," "],"279":[">>>",">>>","import","def","from","#","In","class","for"," "],"280":["import","import",">>>","from","class","def","#","In"," ","for"],"281":[">>>",">>>","import","def","class","from","In","#"," ","print"],"282":["class","class","def","from","import",">>>","#"," ","In","@"],"283":["import","import","from",">>>","class","#","def","In"," ","for"],"284":["class","class","from","def","import",">>>","#","In"," ","@"],"285":["import","import","from",">>>","def","class","#","In"," ","for"],"286":["import","import","class","from","def",">>>","#","In"," ","for"],"287":["class","class","def","from",">>>","import","#"," ","@","In"],"288":[">>>",">>>","import","def","from","In","class","#","for"," "],"289":[">>>",">>>","def","import","from","In","class","#","if","for"],"290":["class","class","import","def",">>>","from","#"," ","@","In"],"291":["class","class",">>>","import","def","from","#","In"," ","for"],"292":[">>>",">>>","class","def","import","from","In","#","for"," "],"293":["import","import","from",">>>","def","class","#"," ","In","for"],"294":["import","import","from",">>>","class","def","#"," ","In","@"],"295":["import","import",">>>","In","from","def","#","class","for","df"],"296":[">>>",">>>","import","class","from","def","In","#"," ","for"],"297":[">>>",">>>","def","import","In","from","#","for","class"," "],"298":["import","import","from","def","class",">>>","#","In"," ","for"],"299":[">>>",">>>","import","from","def","#","In","class"," ","for"],"300":["import","import",">>>","from","def","#","In","for","class","with"],"301":["import","import","from","def",">>>","class","#","In","for"," "],"302":[">>>",">>>","import","def","from","In","class","#","for"," "],"303":[">>>",">>>","def","import","class","from","In","#","for"," "],"304":[">>>",">>>","import","In","from","def","class","#"," ","for"],"305":[">>>",">>>","class","def","import","In","from","#"," ","for"],"306":[">>>",">>>","def","import","class","from","In","#"," ","for"],"307":[">>>",">>>","In","import","from","def","#","df","class","for"],"308":[">>>",">>>","import","from","class","def","#","In"," ","for"],"309":["import","import",">>>","from","class","def","#","In"," ","for"],"310":["import","import","from",">>>","def","class","#","In"," ","for"],"311":["import","import","from",">>>","class","def","#","In"," ","for"],"312":[">>>",">>>","import","def","from","class","In","#"," ","for"],"313":["import","import",">>>","class","def","from","#","In"," ","for"],"314":[">>>",">>>","import","In","def","from","#","class","for","print"],"315":[">>>",">>>","In","import","def","from","df","#","class"," "],"316":["import","import",">>>","from","class","def","#","In","$"," "],"317":["class","class",">>>","def","import","from","#","In"," ","@"],"318":["import","import","from","class","def",">>>","#","In"," ","for"],"319":[">>>",">>>","import","def","class","from","In","#"," ","for"],"320":[">>>",">>>","def","import","class","from","In","#","print","for"],"321":["In","In",">>>","import","from","def","df","#","class","for"],"322":["import","import",">>>","from","def","class","#","In"," ","for"],"323":[">>>",">>>","import","In","def","from","class","#","for"," "],"324":["import","import","from",">>>","def","class","#"," ","In","for"],"325":["import","import",">>>","from","def","class","In","#","for"," "],"326":["import","import","from",">>>","def","#","class","In"," ","for"],"327":["import","import","from",">>>","class","def","#","In"," ","for"],"328":["class","class","from","def","import",">>>","#"," ","@","In"],"329":[">>>",">>>","import","def","In","from","class","#"," ","for"],"330":["import","import",">>>","from","class","def","In","#","for"," "],"331":["import","import",">>>","from","class","def","In","#"," ","for"],"332":["class","class",">>>","import","def","from","#","In"," ","print"],"333":["import","import","from",">>>","class","def","#","In"," ","for"],"334":["import","import",">>>","class","from","def","#"," ","In","@"],"335":["class","class","from","def","import",">>>","#"," ","In","@"],"336":["import","import",">>>","from","def","class","#","In","for"," "],"337":["import","import",">>>","from","def","#","class","In"," ","for"],"338":["import","import","from",">>>","In","#","def","class","for"," "],"339":["import","import","from",">>>","class","def","#","In"," ","for"],"340":[">>>",">>>","class","import","def","from","In","#","for"," "],"341":[">>>",">>>","import","def","class","In","from","#","print"," "],"342":["class","class","from","import","def",">>>","#"," ","In","@"],"343":[">>>",">>>","def","import","In","from","class","#","for"," "],"344":[">>>",">>>","In","import","def","from","#","class","for","print"],"345":["import","import","from","class","def",">>>","#","In"," ","for"],"346":["class","class","from","def",">>>","import","In","#"," ","for"],"347":[">>>",">>>","import","def","from","class","In","#","for"," "],"348":["import","import",">>>","def","from","In","class","#","for"," "],"349":[">>>",">>>","import","def","from","In","class","#","for"," "],"350":[">>>",">>>","import","def","from","In","#","class"," ","for"],"351":["class","class","from","def","import",">>>","#","In"," ","for"],"352":[">>>",">>>","import","def","#","from","In","class"," ","for"],"353":["import","import",">>>","from","def","In","#","class","for","with"],"354":["import","import","from","class",">>>","def","#","In"," ","for"],"355":["import","import",">>>","def","from","class","#","In"," ","for"],"356":[">>>",">>>","import","def","In","from","#","for","class"," "],"357":["import","import","from","class","def",">>>","#"," ","for","In"],"358":["import","import","from","class",">>>","def","#","In"," ","for"],"359":[">>>",">>>","import","def","from","In","class","#","for"," "],"360":[">>>",">>>","import","def","from","In","#","class","for"," "],"361":[">>>",">>>","import","def","from","In","#","class","for","with"],"362":["import","import","from",">>>","In","def","#","class","for","df"],"363":[">>>",">>>","import","def","In","from","#","for","class"," "],"364":[">>>",">>>","import","def","In","from","class","#","for"," "],"365":[">>>",">>>","def","import","from","In","#","class","for"," "],"366":[">>>",">>>","import","def","from","In","#","class","for"," "],"367":[">>>",">>>","import","def","from","class","In","#"," ","for"],"368":[">>>",">>>","import","def","from","In","#","class","for","with"],"369":[">>>",">>>","def","import","In","from","#","class","for","if"],"370":[">>>",">>>","In","import","def","from","class","#","df"," "],"371":["import","import",">>>","from","def","In","#","class","for"," "],"372":["class","class","import","from",">>>","def","#","In"," ","<"],"373":[">>>",">>>","In","import","def","from","class","#","df"," "],"374":["class","class","from","def","import",">>>","#"," ","@","In"],"375":[">>>",">>>","import","def","from","class","In","#","for"," "],"376":["In","In",">>>","import","def","from","df","#","class"," "],"377":[">>>",">>>","import","def","In","from","class","#"," ","for"],"378":["import","import",">>>","from","def","#","In","class","for","with"],"379":["class","class",">>>","def","import","from","In","#"," ","@"],"380":["import","import",">>>","from","class","def","#","In"," ","for"],"381":[">>>",">>>","import","def","from","In","#","class","for","print"],"382":["import","import",">>>","from","def","#","In","class","for","with"],"383":["import","import",">>>","def","from","class","#","In","for"," "],"384":[">>>",">>>","import","def","In","from","class","#","for","print"],"385":[">>>",">>>","def","import","In","from","#","class","for","print"],"386":["class","class","from","import","def",">>>","In","#"," ","@"],"387":["import","import","class","from","def",">>>","#"," ","In","@"],"388":[">>>",">>>","import","from","def","In","class","#","for","if"],"389":[">>>",">>>","import","def","from","In","#","class","for"," "],"390":[">>>",">>>","import","def","from","In","#","class"," ","if"],"391":[">>>",">>>","import","def","from","In","class","#"," ","for"],"392":["from","from","class","import","def",">>>","In","#"," ","for"],"393":[">>>",">>>","In","import","def","class","from","#","print","for"],"394":[">>>",">>>","import","def","from","In","#","class","for","print"],"395":["class","class","from",">>>","def","import","In","#"," ","for"],"396":[">>>",">>>","def","import","class","from","#","In"," ","for"],"397":["import","import","from","class",">>>","def","#","In"," ","for"],"398":["In","In",">>>","import","def","from","df","#","class"," "],"399":["class","class","import","from",">>>","def","#","In"," ","for"],"400":["import","import",">>>","from","def","#","class","In"," ","for"],"401":["import","import",">>>","from","def","#","class","In"," ","for"],"402":[">>>",">>>","import","from","def","#","class","In"," ","for"],"403":["import","import","class","from","def",">>>","#","In"," ","if"],"404":["class","class","import","def","from",">>>","#"," ","@","In"],"405":["class","class","from","def","import",">>>","#"," ","@","In"],"406":["import","import",">>>","from","def","class","#","In"," ","for"],"407":[">>>",">>>","import","In","from","def","#","class","for","df"],"408":["import","import","from",">>>","def","class","#","In"," ","for"],"409":["import","import",">>>","from","def","class","#","In","for"," "],"410":["import","import",">>>","from","class","def","In","#"," ","for"],"411":[">>>",">>>","import","def","In","from","#","for","class","print"],"412":["import","import",">>>","from","In","def","class","#"," ","for"],"413":["import","import","from","class","def",">>>","#","In"," ","for"],"414":[">>>",">>>","import","def","In","from","#","class","for","print"],"415":[">>>",">>>","import","def","In","from","#","for","class","print"],"416":["import","import",">>>","from","def","#","class","In"," ","for"],"417":[">>>",">>>","import","def","In","from","#","for","class","print"],"418":[">>>",">>>","import","def","from","#","In","class","for"," "],"419":[">>>",">>>","import","from","def","#","class","In"," ","for"],"420":["import","import","class","from","def",">>>","#","In"," ","for"],"421":[">>>",">>>","import","def","from","In","#","class","for"," "],"422":["import","import","from","class","def",">>>","#","In"," ","for"],"423":["import","import","from",">>>","class","def","In","#"," ","for"],"424":[">>>",">>>","import","def","from","class","In","#","for"," "],"425":["import","import",">>>","from","def","In","#","class","for"," "],"426":["import","import","from","class","def",">>>","#","In"," ","for"],"427":["import","import","from","def",">>>","class","#","In"," ","for"],"428":[">>>",">>>","import","In","from","def","class","#","for"," "],"429":[">>>",">>>","import","def","In","from","class","#","for"," "],"430":[">>>",">>>","import","def","from","class","In","#","for"," "],"431":["import","import","from",">>>","def","class","#","In"," ","for"],"432":[">>>",">>>","def","import","In","from","class","#","for"," "],"433":["import","import","class","from","def",">>>","#"," ","@","In"],"434":[">>>",">>>","import","def","In","class","from","#","for","print"],"435":[">>>",">>>","import","def","class","from","In","#","for"," "],"436":[">>>",">>>","import","def","from","In","#","class","for"," "],"437":["import","import",">>>","def","from","class","In","#"," ","for"],"438":["class","class","from","import",">>>","def","In","#"," ","for"],"439":["import","import",">>>","def","from","In","#","class","for","if"],"440":["import","import",">>>","def","from","class","In","#"," ","for"],"441":[">>>",">>>","import","def","from","#","In","with","class","for"],"442":["class","class","def",">>>","import","from","#","In","@"," "],"443":[">>>",">>>","import","def","from","In","#","class","for"," "],"444":[">>>",">>>","def","import","class","from","In","#"," ","for"],"445":[">>>",">>>","import","def","from","In","class","#","for"," "],"446":["import","import",">>>","def","from","class","In","#","for"," "],"447":[">>>",">>>","def","import","class","from","In","#","for"," "],"448":["import","import","from",">>>","class","def","#","In"," ","for"],"449":["class","class","def","from","import",">>>","#"," ","In","@"],"450":["import","import","from","class","def",">>>","#","In","for"," "],"451":["class","class","from","import","def",">>>","#"," ","@","In"],"452":["import","import",">>>","from","def","In","#","class","for"," "],"453":["import","import","from","class","def",">>>","In","#"," ","for"],"454":["import","import",">>>","def","from","#","In","for","class","with"],"455":[">>>",">>>","def","import","class","from","In","#","for","if"],"456":["import","import","from","class",">>>","def","#","In"," ","for"],"457":[">>>",">>>","import","def","from","#","class","In","for"," "],"458":[">>>",">>>","import","def","from","class","In","#","for"," "],"459":[">>>",">>>","import","from","class","def","In","#","for"," "],"460":[">>>",">>>","import","class","def","from","#","In","for"," "],"461":[">>>",">>>","import","def","from","In","#","class","for"," "],"462":["class","class","def","from","import",">>>","#","In"," ","@"],"463":[">>>",">>>","import","def","In","from","#","class","for","print"],"464":[">>>",">>>","class","import","def","from","In","#"," ","for"],"465":[">>>",">>>","import","def","In","from","class","#","for"," "],"466":["import","import",">>>","class","from","def","#","In"," ","$"],"467":[">>>",">>>","import","def","class","from","In","#"," ","for"],"468":["In","In",">>>","import","def","from","df","#","class","for"],"469":[">>>",">>>","import","from","def","class","#","In"," ","for"],"470":["class","class","from","import",">>>","def","In","#"," ","@"],"471":["class","class",">>>","import","def","from","#","In"," ","@"],"472":["class","class","import","from","def",">>>","#","In"," ","@"],"473":[">>>",">>>","import","def","In","from","#","class","for"," "],"474":[">>>",">>>","def","import","from","class","In","#","for"," "],"475":["import","import","from",">>>","def","In","#","class","for"," "],"476":["import","import","from",">>>","def","#","class","In","for"," "],"477":["import","import","from","class","def",">>>","#","In"," ","if"],"478":[">>>",">>>","import","def","from","#","In","class","for","with"],"479":[">>>",">>>","import","def","from","class","In","#","for"," "],"480":["import","import","from","def",">>>","class","#","In"," ","for"],"481":["import","import",">>>","def","class","from","In","#"," ","for"],"482":["import","import","from","class","def",">>>","#","In"," ","for"],"483":["class","class","def","from","import",">>>","#"," ","In","@"],"484":[">>>",">>>","import","In","def","from","#","for","class","print"],"485":[">>>",">>>","import","from","def","class","In","#","for"," "],"486":["import","import","from","class",">>>","def","#","In"," ","for"],"487":[">>>",">>>","import","def","from","In","#","for","class"," "],"488":[">>>",">>>","import","In","def","from","#","class","for","print"],"489":["import","import","from","class",">>>","def","#"," ","In","@"],"490":[">>>",">>>","import","In","def","from","#","class","for","print"],"491":["import","import","from",">>>","class","def","#","In"," ","for"],"492":[">>>",">>>","import","def","In","#","from","for"," ","print"],"493":["import","import",">>>","In","from","def","#","class","for","df"],"494":["import","import","class","from","def",">>>","#"," ","@","In"],"495":[">>>",">>>","In","def","import","from","#","class","print","for"],"496":["class","class",">>>","def","from","In","import","#"," ","for"],"497":["class","class",">>>","def","import","from","#","In"," ","if"],"498":["In","In",">>>","import","from","def","df","#","class","for"],"499":[">>>",">>>","def","import","In","from","#","class","for","if"],"500":["import","import",">>>","def","from","class","#","In","for","with"],"501":[">>>",">>>","import","In","def","from","#","class","for","print"],"502":[">>>",">>>","import","def","from","In","#","class","for"," "],"503":[">>>",">>>","import","def","from","#","In","class","for"," "],"504":["import","import","from","class",">>>","def","#"," ","In","for"],"505":[">>>",">>>","In","import","def","from","#","class","df","print"],"506":["from","from","class","import",">>>","def","#","In"," ","for"],"507":[">>>",">>>","import","def","In","from","#","class","for","print"],"508":["import","import",">>>","In","from","def","#","class","for","df"],"509":[">>>",">>>","import","def","from","class","#","In"," ","for"],"510":[">>>",">>>","import","from","def","class","#","In","for"," "],"511":[">>>",">>>","def","import","from","class","In","#","for"," "],"512":["import","import",">>>","from","class","def","#","In"," ","for"],"513":[">>>",">>>","def","import","class","from","In","#","for"," "],"514":["class","class","import",">>>","def","from","#","In"," ","for"],"515":["class","class",">>>","def","import","from","#","In"," ","print"],"516":[">>>",">>>","import","def","from","In","class","for","#","print"],"517":["import","import",">>>","def","from","#","In","class","for","with"],"518":["import","import","from","class",">>>","def","#","In"," ","for"],"519":[">>>",">>>","In","import","def","from","#","df","class"," "],"520":["import","import","from","class","def",">>>","#","In","for"," "],"521":[">>>",">>>","import","def","In","from","#","class","for"," "],"522":[">>>",">>>","import","def","class","from","In","#"," ","for"],"523":["import","import","from",">>>","def","class","#","In"," ","for"],"524":["class","class","import","from",">>>","def","In","#"," ","@"],"525":[">>>",">>>","import","def","from","#","In","with","for","class"],"526":[">>>",">>>","class","def","import","from","In","#","for"," "],"527":["import","import",">>>","from","In","def","#","class","for","df"],"528":["import","import","from",">>>","def","class","#","In"," ","for"],"529":[">>>",">>>","import","def","In","from","#","class","for"," "],"530":["class","class","from","import",">>>","def","#"," ","In","@"],"531":["class","class","import","from","def",">>>","In","#"," ","for"],"532":["import","import",">>>","def","from","class","#","In"," ","for"],"533":[">>>",">>>","import","def","In","from","#","for","class"," "],"534":[">>>",">>>","In","import","def","from","#","df","class","for"],"535":["class","class",">>>","def","import","from","#","In"," ","for"],"536":[">>>",">>>","import","def","In","from","#","for","class","print"],"537":["class","class",">>>","import","def","from","In","#"," ","for"],"538":["import","import","class",">>>","def","from","#","In"," ","if"],"539":[">>>",">>>","import","from","def","class","In","#"," ","for"],"540":[">>>",">>>","import","def","In","from","class","#","for"," "],"541":["import","import","from",">>>","def","#","In","class","for"," "],"542":["import","import","from",">>>","def","class","#","In"," ","for"],"543":["class","class","import","from",">>>","def","In","#"," ","@"],"544":[">>>",">>>","import","def","from","In","class","#","for"," "],"545":[">>>",">>>","import","def","from","class","#","In"," ","for"],"546":[">>>",">>>","import","def","from","In","class","#","for"," "],"547":["import","import",">>>","class","from","def","#","In"," ","for"],"548":["import","import",">>>","from","def","#","In","class","for","with"],"549":[">>>",">>>","class","from","def","import","#"," ","In","for"],"550":["class","class","from","import",">>>","def","In","#"," ","@"],"551":["import","import",">>>","from","In","def","#","class","for"," "],"552":["import","import",">>>","from","class","def","#","In"," ","$"],"553":[">>>",">>>","import","def","class","from","#","In"," ","for"],"554":[">>>",">>>","import","In","def","from","class","#","for","print"],"555":["import","import",">>>","from","class","def","#","In"," ","for"],"556":[">>>",">>>","import","def","from","class","In","#","for"," "],"557":[">>>",">>>","import","def","from","In","#","class","for"," "],"558":["import","import","from",">>>","def","class","#","In","for"," "],"559":["import","import",">>>","In","from","def","#","class","df","for"],"560":["class","class","def","from",">>>","import","#","In"," ","for"],"561":["import","import",">>>","def","from","class","#","In"," ","for"],"562":["import","import","class","from","def",">>>","#","In"," ","for"],"563":["import","import","from",">>>","class","def","#","In"," ","for"],"564":["class","class",">>>","def","from","import","In","#"," ","for"],"565":["import","import",">>>","def","from","#","In","with","class","for"],"566":["import","import",">>>","from","def","#","class","In","for"," "],"567":["import","import","class",">>>","from","def","#","In"," ","@"],"568":["import","import","class",">>>","from","def","#","In"," ","for"],"569":[">>>",">>>","def","class","import","from","#","In","for"," "],"570":[">>>",">>>","def","import","class","from","In","#"," ","for"],"571":["import","import","class","from",">>>","def","#"," ","In","@"],"572":["class","class","import",">>>","def","from","#","In"," ","@"],"573":["import","import","from",">>>","class","def","#","In"," ","@"],"574":["import","import","from",">>>","class","def","#","In"," ","@"],"575":["import","import","from",">>>","In","class","def","#"," ","for"],"576":[">>>",">>>","import","from","In","def","#","class","for"," "],"577":["import","import",">>>","from","In","def","#","class","for"," "],"578":["import","import",">>>","from","def","In","class","#","for"," "],"579":["import","import",">>>","def","from","#","class","In","for","with"],"580":["import","import","from","def","class",">>>","#"," ","In","@"],"581":["import","import",">>>","from","def","class","#","In"," ","print"],"582":["import","import","from","class",">>>","def","In","#"," ","for"],"583":["import","import",">>>","from","In","def","#","class","for"," "],"584":[">>>",">>>","import","def","In","from","class","#","for","print"],"585":["class","class","from","def",">>>","import","In","#"," ","{"],"586":["import","import",">>>","class","def","from","#","In"," ","for"],"587":[">>>",">>>","import","class","def","from","#","In"," ","print"],"588":[">>>",">>>","import","from","def","In","#","class","for"," "],"589":[">>>",">>>","def","import","from","In","class","#","for"," "],"590":[">>>",">>>","In","import","def","from","#","df","class","for"],"591":[">>>",">>>","def","import","class","from","In","#","for"," "],"592":["import","import","from",">>>","def","In","#","class","for"," "],"593":[">>>",">>>","def","import","from","class","In","#","for"," "],"594":[">>>",">>>","def","class","import","from","In","#","for","if"],"595":["import","import","from","class","def",">>>","#","In"," ","for"],"596":[">>>",">>>","import","def","class","from","In","#","for","print"],"597":["class","class","from","import",">>>","def","In","#"," ","@"],"598":[">>>",">>>","import","def","class","from","In","#","for"," "],"599":[">>>",">>>","import","def","from","class","#","In"," ","for"],"600":[">>>",">>>","def","import","class","from","In","#","for"," "],"601":[">>>",">>>","def","import","from","class","In","#","for"," "],"602":["from","from","import","class","def",">>>","#","In"," ","for"],"603":["from","from","import",">>>","class","In","def","#"," ","for"],"604":[">>>",">>>","import","from","In","def","class","#"," ","for"],"605":["import","import",">>>","In","from","def","class","#","for"," "],"606":[">>>",">>>","import","from","def","#","In","class","for"," "],"607":[">>>",">>>","import","def","from","In","class","#","for"," "],"608":[">>>",">>>","import","def","from","class","#","In"," ","for"],"609":["import","import",">>>","def","from","In","#","class","for","with"],"610":["import","import",">>>","def","from","class","#","In","for"," "],"611":["import","import","from",">>>","class","def","#","In"," ","for"],"612":[">>>",">>>","In","import","from","def","class","#","df"," "],"613":[">>>",">>>","def","import","from","In","class","#","for"," "],"614":[">>>",">>>","import","In","from","def","#","class","df","for"],"615":[">>>",">>>","def","import","from","In","#","class","if"," "],"616":["class","class","from","def","import",">>>","#","In"," ","@"],"617":[">>>",">>>","def","import","class","from","In","#","for"," "],"618":["class","class",">>>","def","import","from","#","In"," ","for"],"619":[">>>",">>>","import","from","def","class","#","In","for","print"],"620":["import","import",">>>","from","def","In","#","for","class","with"],"621":["import","import","class","from",">>>","def"," ","#","In","@"],"622":["import","import","from","class",">>>","def","#","In"," ","if"],"623":["import","import","class","def","from",">>>","#","In"," ","for"],"624":["In","In",">>>","import","def","df","from","#","class"," "],"625":[">>>",">>>","import","def","from","In","class","#","for"," "],"626":[">>>",">>>","import","from","def","#","In","class"," ","for"],"627":[">>>",">>>","def","import","In","from","#","class","for"," "],"628":["import","import","from",">>>","def","class","#","In"," ","for"],"629":["class","class","from",">>>","import","def","#"," ","In","@"],"630":[">>>",">>>","def","import","from","class","In","#","for"," "],"631":["import","import","In",">>>","from","def","#","class","df","for"],"632":["import","import","from","class","def",">>>","#","In","for"," "],"633":[">>>",">>>","In","import","def","from","#","class","for","print"],"634":["class","class","from",">>>","def","import","In","#"," ","if"],"635":["class","class","from","import","def",">>>","In","#"," ","@"],"636":[">>>",">>>","import","from","def","#","In","class","for"," "],"637":["class","class",">>>","import","def","from","#","In"," ","@"],"638":["import","import","from",">>>","def","class","#","In","for"," "],"639":[">>>",">>>","import","def","from","In","#","class","for"," "],"640":[">>>",">>>","def","import","In","from","class","#","for"," "],"641":["import","import","from","class",">>>","#","def","In"," ","for"],"642":["import","import","from",">>>","class","def","In","#"," ","for"],"643":["import","import","from","class",">>>","#","def","In"," ","for"],"644":["import","import","from",">>>","def","class","#","In"," ","if"],"645":["import","import",">>>","from","def","class","#","In","for"," "],"646":[">>>",">>>","import","def","class","from","In","#"," ","print"],"647":[">>>",">>>","In","import","def","df","from","#","class"," "],"648":[">>>",">>>","import","from","class","def","In","#","for"," "],"649":[">>>",">>>","import","def","from","#","In","class"," ","for"],"650":[">>>",">>>","import","from","def","#","In","class","for"," "],"651":["class","class",">>>","import","from","def","#","In"," ","for"],"652":["import","import",">>>","def","from","In","#","class","for","with"],"653":["import","import","from","class","def",">>>","#","In"," ","for"],"654":["import","import",">>>","from","def","class","#","In"," ","for"],"655":[">>>",">>>","def","import","class","from","#","In"," ","print"],"656":[">>>",">>>","import","def","from","In","#","class","for"," "],"657":["import","import","from",">>>","def","#","class","In"," ","for"],"658":["import","import",">>>","from","class","def","#","In"," ","for"],"659":["class","class","from","import","def",">>>","In","#"," ","@"],"660":["import","import","class","from","def",">>>","#","In"," ","for"],"661":["import","import","from","class","def",">>>","#","In"," ","@"],"662":["import","import","from","class","def",">>>","#","In"," ","for"],"663":[">>>",">>>","def","import","class","from","In","#","for"," "],"664":["import","import","from",">>>","class","def","#","In"," ","for"],"665":["import","import","from","class",">>>","def","#","In"," ","for"],"666":["class","class","import","from","def",">>>","#","@"," ","In"],"667":["import","import",">>>","from","class","def","#","In","for"," "],"668":["import","import","from","class","def",">>>","#","In"," ","if"],"669":[">>>",">>>","def","import","class","from","In","#","for"," "],"670":[">>>",">>>","In","import","def","from","#","class","for","print"],"671":[">>>",">>>","import","def","In","from","#","class","for"," "],"672":["class","class","def","from",">>>","import","In","#"," ","for"],"673":["import","import","from","In",">>>","def","#","class","for","df"],"674":["import","import","def",">>>","from","class","#","In"," ","for"],"675":["import","import",">>>","from","class","def","#","In","$"," "],"676":["import","import",">>>","from","def","In","#","class"," ","for"],"677":[">>>",">>>","import","def","from","In","#","class","for"," "],"678":["import","import",">>>","from","def","#","class","In"," ","for"],"679":["import","import",">>>","from","class","def","#","In"," ","for"],"680":["import","import",">>>","from","In","def","#","class","for","with"],"681":[">>>",">>>","import","In","def","from","class","#","for","print"],"682":[">>>",">>>","import","def","from","class","In","#","for"," "],"683":["import","import","class","from","def",">>>","#","In"," ","for"],"684":[">>>",">>>","import","def","from","class","In","#","for"," "],"685":["import","import",">>>","def","from","#","class","In","for","with"],"686":[">>>",">>>","import","from","def","#","In","for","class"," "],"687":["import","import",">>>","from","def","class","#"," ","In","for"],"688":[">>>",">>>","import","def","class","from","#","In"," ","print"],"689":[">>>",">>>","import","def","from","#","In","for","class","with"],"690":["import","import",">>>","class","def","from","#","In"," ","print"],"691":["class","class","import","from","def",">>>","#"," ","@","In"],"692":[">>>",">>>","import","def","In","from","#","for","class"," "],"693":[">>>",">>>","import","from","def","In","class","#","for"," "],"694":["import","import",">>>","from","def","class","#","In"," ","for"],"695":[">>>",">>>","import","def","class","from","#","In"," ","for"],"696":["class","class","from",">>>","import","def","In","#"," ","for"],"697":["import","import",">>>","In","from","def","#","class","for"," "],"698":[">>>",">>>","class","def","import","from","In","#"," ","for"],"699":[">>>",">>>","import","def","In","from","#","class","for"," "],"700":[">>>",">>>","In","import","def","from","#","class","print","for"],"701":["In","In",">>>","import","def","df","from","#","class"," "],"702":[">>>",">>>","import","In","def","from","class","#","for","print"],"703":[">>>",">>>","import","def","from","#","In","class"," ","for"],"704":["import","import",">>>","from","In","def","#","class"," ","for"],"705":[">>>",">>>","In","import","from","def","#","df","class","for"],"706":["import","import",">>>","from","def","#","In","class","for","with"],"707":["import","import",">>>","from","def","class","#","In"," ","for"],"708":["import","import","from","class",">>>","def","#","In"," ","for"],"709":["import","import",">>>","from","class","def","#","In"," ","for"],"710":[">>>",">>>","import","def","from","#","In","class","with","for"],"711":[">>>",">>>","import","def","from","#","In","class"," ","for"],"712":["import","import",">>>","def","from","class","#","In"," ","for"],"713":[">>>",">>>","import","def","In","from","#","class","for"," "],"714":["class","class",">>>","import","def","from","#","In"," ","for"],"715":[">>>",">>>","import","def","from","#","class","In"," ","for"],"716":["import","import","class","from",">>>","def","#"," ","In","@"],"717":[">>>",">>>","import","def","from","class","#","In","for"," "],"718":["import","import","from",">>>","class","#","def","In"," ","$"],"719":["import","import",">>>","from","def","#","class","In"," ","for"],"720":["import","import",">>>","from","In","def","#","class","for"," "],"721":[">>>",">>>","import","In","def","from","#","class","df"," "],"722":["import","import",">>>","class","from","def","#","In","$"," "],"723":[">>>",">>>","In","import","def","from","#","class","print","df"],"724":["import","import","class","from","def",">>>","#","In"," ","for"],"725":["import","import",">>>","In","from","def","#","class","for","df"],"726":[">>>",">>>","def","import","In","from","#","class","for","print"],"727":["import","import",">>>","class","from","def","In","#"," ","for"],"728":["import","import",">>>","from","def","class","#"," ","In","for"],"729":["import","import","class",">>>","from","def","#","In"," ","for"],"730":["class","class","def","from","import",">>>","#"," ","In","@"],"731":["import","import","from",">>>","def","class","In","#"," ","for"],"732":[">>>",">>>","import","def","from","In","class","#","for"," "],"733":[">>>",">>>","import","def","from","In","#","class","for"," "],"734":["import","import",">>>","from","In","#","def","class"," ","for"],"735":[">>>",">>>","import","def","In","#","from","for","class"," "],"736":["import","import","from",">>>","In","def","#","class","for"," "],"737":["import","import","from",">>>","def","#","In","class"," ","for"],"738":[">>>",">>>","import","def","from","#","class","In"," ","for"],"739":["class","class",">>>","import","def","from","In","#"," ","for"],"740":[">>>",">>>","import","class","def","from","#","In"," ","@"],"741":["class","class","import","from","def",">>>","In","#"," ","@"],"742":["import","import",">>>","from","class","def","#","In"," ","for"],"743":[">>>",">>>","import","In","from","def","#","class","for","print"],"744":[">>>",">>>","import","In","def","from","#","class","for","print"],"745":[">>>",">>>","In","import","def","from","#","print","for","class"],"746":["import","import","from","class",">>>","def","#","In"," ","for"],"747":["import","import","from","class",">>>","def","#","In"," ","for"],"748":["import","import",">>>","from","def","In","#","class","for"," "],"749":["class","class","from","def",">>>","import","#","In"," ","for"],"750":["import","import","from","class","def",">>>","#"," ","In","@"],"751":[">>>",">>>","import","def","from","In","class","#","for","with"],"752":[">>>",">>>","import","def","from","#","In","class","for","with"],"753":[">>>",">>>","import","def","class","from","#","In"," ","for"],"754":["import","import",">>>","from","def","class","#","In"," ","for"],"755":["import","import","from","class","def",">>>","#","In"," ","for"],"756":["import","import","class","def",">>>","from","#","In"," ","for"],"757":[">>>",">>>","import","In","def","from","#","for","class","print"],"758":[">>>",">>>","import","def","In","from","#","class","for"," "],"759":[">>>",">>>","def","import","class","from","#","In","if","for"],"760":[">>>",">>>","import","def","from","class","In","#"," ","for"],"761":["import","import",">>>","from","def","In","class","#","for","with"],"762":["import","import",">>>","def","from","class","#","In","for"," "],"763":[">>>",">>>","def","from","class","In","import","#"," ","for"],"764":["import","import",">>>","from","def","class","In","#"," ","for"],"765":[">>>",">>>","import","def","In","from","#","class","for","print"],"766":[">>>",">>>","import","from","def","In","#","class","for"," "],"767":["import","import",">>>","def","from","In","class","#","for"," "],"768":["class","class",">>>","def","import","from","In","#"," ","print"],"769":[">>>",">>>","import","def","from","#","In","class"," ","for"],"770":["class","class","import",">>>","def","from","#","In"," ","print"],"771":["import","import",">>>","def","from","#","In","class","for","with"],"772":["import","import","from",">>>","In","def","#","class","for","df"],"773":[">>>",">>>","import","In","def","from","#","class","for"," "],"774":["import","import","from","class",">>>","def","#","In"," ","for"],"775":["class","class","from","import","def",">>>","#"," ","In","@"],"776":[">>>",">>>","import","def","class","from","#","In"," ","if"],"777":[">>>",">>>","In","import","def","from","class","#","df"," "],"778":["import","import",">>>","from","def","class","#","In"," ","for"],"779":[">>>",">>>","import","def","from","#","class","In","for"," "],"780":[">>>",">>>","import","def","from","In","class","#","for"," "],"781":[">>>",">>>","class","from","import","def","In","#"," ","for"],"782":["class","class","import",">>>","def","from","#","In"," ","@"],"783":["import","import",">>>","from","In","def","class","#","for"," "],"784":["import","import","class","from","def",">>>","#","In"," ","for"],"785":["import","import",">>>","class","def","from","In","#","for"," "],"786":[">>>",">>>","import","def","from","In","#","class","for","with"],"787":[">>>",">>>","In","import","def","from","df","#","class"," "],"788":["import","import","from",">>>","In","def","#","class","for"," "],"789":["import","import",">>>","from","def","#","class","In","for"," "],"790":[">>>",">>>","import","def","from","In","#","class","for"," "],"791":[">>>",">>>","import","def","from","class","In","#","for"," "],"792":[">>>",">>>","import","from","def","In","#","class","for"," "],"793":["import","import",">>>","def","In","from","class","#","for"," "],"794":["import","import","from",">>>","In","def","#","class","for","df"],"795":["class","class",">>>","import","def","from","#","In","print"," "],"796":["class","class","def","from","import",">>>","#"," ","In","@"],"797":["import","import","from",">>>","In","def","#","class","for"," "],"798":["import","import",">>>","class","from","def","#","In"," ","for"],"799":["import","import","from","In",">>>","def","#","class","df","for"],"800":["class","class","import","from","def",">>>","#"," ","@","In"],"801":["import","import","from",">>>","In","def","#","class","for","df"],"802":[">>>",">>>","import","def","from","In","class","#","for"," "],"803":[">>>",">>>","import","def","In","from","#","for","print"," "],"804":[">>>",">>>","import","def","In","from","class","#","for","print"],"805":[">>>",">>>","def","import","from","class","In","#","print","for"],"806":[">>>",">>>","import","def","In","from","#","class","for","print"],"807":["import","import","from",">>>","In","def","#","class","for"," "],"808":["import","import","from","class","def",">>>","#","In"," ","for"],"809":[">>>",">>>","import","In","def","from","#","df","for","class"],"810":[">>>",">>>","import","from","def","#","class","In"," ","for"],"811":[">>>",">>>","import","def","from","#","In","for","class","with"],"812":["import","import",">>>","from","class","def","#","In"," ","$"],"813":["import","import","from","class","def",">>>","#"," ","In","for"],"814":["import","import","from",">>>","def","class","#","In"," ","for"],"815":[">>>",">>>","import","def","from","In","class","#","for"," "],"816":["class","class",">>>","def","import","from","In","#"," ","for"],"817":["import","import",">>>","from","def","#","In","class","for","with"],"818":["import","import","class","from","def",">>>","#","In"," ","@"],"819":["import","import",">>>","from","def","class","#","In"," ","for"],"820":["import","import","def","from",">>>","class","#","In","for"," "],"821":["import","import","from",">>>","def","class","#","In"," ","for"],"822":["import","import","from","class","def",">>>","#","In"," ","for"],"823":[">>>",">>>","import","In","def","from","#","class","for","print"],"824":[">>>",">>>","import","def","from","class","In","#","for"," "],"825":["class","class","import",">>>","def","from","#","In"," ","print"],"826":[">>>",">>>","In","import","def","from","class","#"," ","df"],"827":["class","class","def",">>>","import","from","#","@","In"," "],"828":[">>>",">>>","import","def","class","from","#","In","for"," "],"829":[">>>",">>>","import","def","from","In","class","#","for"," "],"830":["class","class","from","import",">>>","def","In","#"," ","for"],"831":[">>>",">>>","import","def","from","In","class","#","for"," "],"832":["import","import","from","def",">>>","class","#","In"," ","for"],"833":["class","class",">>>","def","import","from","#","In"," ","@"],"834":["import","import","from","def","class",">>>","#"," ","In","if"],"835":["import","import",">>>","from","def","class","#","In"," ","$"],"836":[">>>",">>>","import","def","#","In","from","for"," ","print"],"837":[">>>",">>>","import","def","from","class","In","#","for"," "],"838":[">>>",">>>","import","def","In","from","#","class","for"," "],"839":["import","import",">>>","from","def","class","#","In","for"," "],"840":["import","import","from","class","def",">>>","#","In"," ","for"],"841":["class","class","from","def","import",">>>","#"," ","@","In"],"842":[">>>",">>>","In","import","from","def","class","#"," ","for"],"843":[">>>",">>>","import","def","In","from","#","for","class"," "],"844":["import","import",">>>","from","def","#","class","In","for","with"],"845":[">>>",">>>","def","import","from","In","class","#","for"," "],"846":["class","class","from","import","def",">>>","#"," ","@","In"],"847":[">>>",">>>","def","import","from","class","In","#","for"," "],"848":["import","import","from",">>>","class","def","#","In"," ","for"],"849":[">>>",">>>","import","def","In","from","#","class","for","print"],"850":["import","import",">>>","class","from","def","#","In"," ","for"],"851":["import","import","from",">>>","class","def","#","In"," ","for"],"852":[">>>",">>>","import","def","from","#","class","In","for"," "],"853":[">>>",">>>","import","def","from","#","class","In","for"," "],"854":["import","import","from","class","def",">>>","In","#"," ","for"],"855":["import","import",">>>","from","def","#","class","In"," ","for"],"856":["import","import","class","from",">>>","def","#","In"," ","@"],"857":[">>>",">>>","def","import","from","class","In","#","for"," "],"858":[">>>",">>>","import","def","In","from","#","class","for"," "],"859":["import","import","from",">>>","In","def","class","#","for"," "],"860":["import","import",">>>","from","def","class","#","In"," ","for"],"861":["import","import",">>>","In","def","from","#","class","df"," "],"862":["import","import","from",">>>","class","def","#","In"," ","for"],"863":["class","class","import","from",">>>","def","#","In"," ","for"],"864":[">>>",">>>","In","import","def","from","df","#","class"," "],"865":["class","class","from","def",">>>","import","In","#"," ","for"],"866":[">>>",">>>","def","import","class","from","In","#","for"," "],"867":[">>>",">>>","import","from","def","In","#","class","for"," "],"868":["class","class","from","import","def",">>>","#"," ","In","@"],"869":["class","class",">>>","def","import","from","#","In"," ","@"],"870":[">>>",">>>","In","import","def","from","#","class","df","for"],"871":[">>>",">>>","def","import","In","from","#","class","if","for"],"872":[">>>",">>>","def","import","from","class","In","#","for"," "],"873":[">>>",">>>","In","import","def","from","df","#","class"," "],"874":["import","import","from","def","class",">>>","#","In"," ","for"],"875":["import","import","from","class",">>>","def","#","In"," ","for"],"876":[">>>",">>>","def","import","from","In","class","#","for"," "],"877":[">>>",">>>","In","import","def","from","df","#","class"," "],"878":[">>>",">>>","def","import","from","In","class","#","for"," "],"879":["import","import",">>>","def","from","In","#","class","for","with"],"880":[">>>",">>>","def","import","In","from","#","class","for"," "],"881":[">>>",">>>","import","def","In","from","#","class","for"," "],"882":["class","class","import",">>>","def","from","#","In"," ","for"],"883":[">>>",">>>","import","from","In","def","#","class","for"," "],"884":["class","class","def","from",">>>","import","#","@"," ","In"],"885":[">>>",">>>","In","import","def","from","#","class","df","for"],"886":["import","import",">>>","from","class","def","#","In"," ","@"],"887":[">>>",">>>","In","import","def","from","df","#","class"," "],"888":["import","import",">>>","from","def","class","#","In","for"," "],"889":[">>>",">>>","In","import","def","from","df","#","class"," "],"890":[">>>",">>>","import","def","In","from","class","#","for"," "],"891":["import","import",">>>","from","class","def","#","In"," ","$"],"892":[">>>",">>>","import","from","def","In","#","class","for","print"],"893":[">>>",">>>","def","import","In","from","class","#","for","print"],"894":["import","import","from",">>>","def","#","class","In","for"," "],"895":[">>>",">>>","import","def","from","In","#","class","for"," "],"896":[">>>",">>>","import","In","def","from","#","class"," ","for"],"897":["import","import",">>>","from","class","def","#","In"," ","for"],"898":[">>>",">>>","import","def","class","from","#","In","for"," "],"899":[">>>",">>>","def","import","In","from","class","#","for","print"],"900":["import","import",">>>","from","class","def","#","In"," ","$"],"901":["import","import",">>>","from","def","class","#","In"," ","for"],"902":["import","import",">>>","def","from","#","In","class","for","if"],"903":["import","import","from",">>>","class","In","def","#"," ","for"],"904":["import","import","from",">>>","def","class","#"," ","In","for"],"905":["import","import","from","class",">>>","def","#","In"," ","if"],"906":["import","import","from","class",">>>","def","#"," ","In","for"],"907":["import","import",">>>","from","class","def","#","In"," ","for"],"908":[">>>",">>>","import","def","In","from","class","#"," ","for"],"909":[">>>",">>>","import","def","from","In","class","#","for"," "],"910":[">>>",">>>","import","def","from","#","In","class","for"," "],"911":["class","class","import",">>>","def","from","#","In"," ","print"],"912":["import","import","class","from","def",">>>","#"," ","In","@"],"913":[">>>",">>>","import","def","from","#","In","for","class","with"],"914":["import","import","class",">>>","def","from","#","In"," ","for"],"915":["import","import",">>>","In","from","def","#","class","df","for"],"916":["class","class","from",">>>","import","def","In","#"," ","for"],"917":["import","import",">>>","In","from","def","#","class","for","df"],"918":["class","class","def","from","import",">>>","#"," ","@","In"],"919":[">>>",">>>","import","def","In","from","#","class","for"," "],"920":[">>>",">>>","import","def","from","#","In","class","for"," "],"921":["import","import","from","class",">>>","def","#","In"," ","if"],"922":[">>>",">>>","import","def","In","from","#","for","print","class"],"923":["import","import",">>>","In","from","def","#","class","for","df"],"924":[">>>",">>>","import","def","from","In","#","class","for","print"],"925":["class","class",">>>","def","import","from","In","#"," ","for"],"926":["import","import",">>>","from","In","def","#","class","for"," "],"927":["import","import","from",">>>","class","def","#","In"," ","for"],"928":[">>>",">>>","import","def","In","from","class","#","for"," "],"929":["import","import",">>>","def","from","In","#","class","for","with"],"930":["class","class","from","import","def",">>>","In","#"," ","for"],"931":["import","import","from","class","def",">>>","#"," ","In","if"],"932":["import","import",">>>","from","def","#","class","In","for"," "],"933":["import","import","from",">>>","In","def","#","class","for"," "],"934":["import","import","from",">>>","class","def","#","In"," ","for"],"935":["import","import","from","In",">>>","def","#","class","for","df"],"936":[">>>",">>>","import","from","def","class","#","In","for"," "],"937":["import","import","from","def","class",">>>","#","In"," ","for"],"938":[">>>",">>>","import","def","from","#","In","class","for","with"],"939":[">>>",">>>","def","import","In","from","class","#","for","print"],"940":["import","import","from",">>>","In","def","class","#","for"," "],"941":[">>>",">>>","import","def","class","from","#","In"," ","print"],"942":["import","import","from",">>>","In","def","#","class","for","df"],"943":["class","class","from",">>>","import","def","In","#"," ","for"],"944":["import","import",">>>","from","def","#","class","In"," ","for"],"945":["import","import","from","class",">>>","def","In","#"," ","for"],"946":[">>>",">>>","In","import","def","from","#","df","class"," "],"947":[">>>",">>>","import","def","from","class","In","#","for"," "],"948":["import","import",">>>","def","from","#","class","In","print","for"],"949":["import","import","from",">>>","In","def","#","class","df","for"],"950":["import","import",">>>","class","from","def","#","In"," ","for"],"951":[">>>",">>>","import","from","def","#","In","class"," ","for"],"952":[">>>",">>>","def","import","class","from","In","#","for"," "],"953":[">>>",">>>","import","def","class","from","In","#","for"," "],"954":[">>>",">>>","import","def","from","#","In","print","class","for"],"955":["class","class","from","def",">>>","import","In","#"," ","@"],"956":[">>>",">>>","def","import","In","from","#","class","for","print"],"957":["import","import","In",">>>","from","def","#","class","df","for"],"958":["import","import","class",">>>","from","def","#","In"," ","for"],"959":["import","import",">>>","from","class","def","#","In"," ","for"],"960":["import","import",">>>","from","def","class","#","In","for"," "],"961":[">>>",">>>","import","def","class","from","#","In","for"," "],"962":["class","class","from","def",">>>","import","In","#"," ","@"],"963":[">>>",">>>","import","def","#","In","from","for","class","print"],"964":[">>>",">>>","import","def","from","In","#","class","for","with"],"965":[">>>",">>>","import","def","from","class","#","In"," ","for"],"966":["class","class","import","from","def",">>>","#"," ","@","In"],"967":["def","def","class",">>>","import","from","In","#"," ","for"],"968":["In","In",">>>","import","def","from","#","df","class"," "],"969":["import","import","from",">>>","class","#","def","In"," ","$"],"970":[">>>",">>>","import","from","def","class","In","#","for"," "],"971":["import","import",">>>","In","from","def","class","#","for","df"],"972":["import","import",">>>","def","from","#","In","class","for","with"],"973":[">>>",">>>","import","def","class","from","#","In"," ","for"],"974":["import","import","from","class",">>>","def","#","In"," ","for"],"975":["import","import",">>>","from","In","def","#","class","for","with"],"976":["class","class","from","def","import",">>>","#","In"," ","@"],"977":["import","import","class",">>>","from","def","#"," ","In","@"],"978":[">>>",">>>","In","import","def","from","#","df","class"," "],"979":["class","class","from","import",">>>","def","In","#"," ","@"],"980":[">>>",">>>","import","from","def","In","class","#","for"," "],"981":["import","import",">>>","def","from","In","#","class","for"," "],"982":["import","import",">>>","from","def","#","class","In"," ","for"],"983":["import","import",">>>","from","def","class","#","In","for"," "],"984":[">>>",">>>","import","class","def","from","In","#"," ","for"],"985":["class","class","from","import","def",">>>","#"," ","@","<"],"986":[">>>",">>>","import","def","from","class","#","In","for","print"],"987":["import","import","from",">>>","class","def","#","In"," ","for"],"988":["import","import","from",">>>","def","class","#","In"," ","@"],"989":["import","import","from","def","class",">>>","#","In"," ","for"],"990":[">>>",">>>","def","import","In","from","class","#","for"," "],"991":[">>>",">>>","import","def","from","#","In","class"," ","for"],"992":[">>>",">>>","import","from","def","class","#","In"," ","for"],"993":["class","class","def",">>>","import","from","#","@"," ","In"],"994":["class","class",">>>","from","def","import"," ","#","In","@"],"995":["class","class","import","from","def",">>>","#"," ","@","In"],"996":["import","import","from",">>>","def","class","#","In"," ","for"],"997":[">>>",">>>","def","import","In","from","class","#","for","print"],"998":["class","class","import",">>>","def","from","#","In"," ","for"],"999":[">>>",">>>","import","def","class","from","In","#"," ","for"],"1000":[">>>",">>>","def","import","from","In","class","#","for"," "],"1001":[">>>",">>>","import","from","def","In","#","class"," ","for"],"1002":["class","class","from","def",">>>","import","In","#"," ","for"],"1003":["import","import",">>>","from","def","In","#","class","for","with"],"1004":[">>>",">>>","import","def","from","In","#","for","class"," "],"1005":["import","import","class","from","def",">>>","#"," ","@","In"],"1006":["class","class","from","import","def",">>>","#"," ","@","<"],"1007":["import","import","from",">>>","In","def","#","class","for"," "],"1008":["import","import",">>>","def","class","from","#","In","if"," "],"1009":[">>>",">>>","import","def","from","class","In","#","for"," "],"1010":["import","import",">>>","from","def","class","#","In"," ","@"],"1011":[">>>",">>>","import","def","#","from","In","for","class","with"],"1012":["import","import",">>>","from","def","class","#","In"," ","for"],"1013":[">>>",">>>","def","import","from","#","if","class","In","for"],"1014":["class","class","from","import","def",">>>","#","In"," ","@"],"1015":[">>>",">>>","import","def","class","from","In","#","print"," "],"1016":[">>>",">>>","import","from","In","def","#","class","for","print"],"1017":[">>>",">>>","import","def","from","In","#","print","class","for"],"1018":["import","import",">>>","In","from","def","#","class","for","df"],"1019":[">>>",">>>","def","import","In","from","#","class","for","print"],"1020":[">>>",">>>","In","import","def","from","class","#","print","for"],"1021":["import","import",">>>","from","def","In","class","#"," ","for"],"1022":["class","class","from","def","import",">>>","#","In"," ","@"],"1023":["import","import",">>>","from","def","class","#","In"," ","for"],"1024":["import","import",">>>","from","def","In","class","#"," ","for"],"1025":[">>>",">>>","import","def","In","from","#","class","for","print"],"1026":["class","class","from","import","def",">>>","#","In"," ","@"],"1027":["import","import",">>>","In","def","from","#","for","class","with"],"1028":["import","import",">>>","from","def","class","In","#","for"," "],"1029":[">>>",">>>","import","from","class","def","#","In"," ","for"],"1030":[">>>",">>>","import","def","from","class","#","In"," ","for"],"1031":["import","import",">>>","from","In","class","def","#"," ","for"],"1032":["class","class","from","def","import",">>>","#","In"," ","@"],"1033":["import","import","from","class","def",">>>","#","In"," ","for"],"1034":["import","import","from",">>>","In","def","#","class","for"," "],"1035":["import","import",">>>","from","def","class","#","In","for"," "],"1036":[">>>",">>>","import","from","def","#","class","In"," ","for"],"1037":[">>>",">>>","In","import","def","from","#","class","df"," "],"1038":[">>>",">>>","def","class","import","from","In","#","for"," "],"1039":["class","class",">>>","import","def","from","#","In","for","print"],"1040":["import","import","from",">>>","def","class","#","In","for"," "],"1041":["import","import",">>>","from","In","def","class","#"," ","for"],"1042":[">>>",">>>","import","from","def","#","class","In"," ","for"],"1043":["import","import",">>>","In","from","def","#","class","for","df"],"1044":[">>>",">>>","def","import","In","from","#","class","if","for"],"1045":[">>>",">>>","def","import","class","from","#","In","print"," "],"1046":[">>>",">>>","In","import","from","def","class","#","df","for"],"1047":["import","import",">>>","from","def","class","#","In","for"," "],"1048":["import","import",">>>","def","class","from","#","In"," ","for"],"1049":["class","class","def",">>>","import","from","#","In"," ","@"],"1050":[">>>",">>>","import","In","from","def","#","class","for"," "],"1051":[">>>",">>>","import","def","In","from","class","#","for","print"],"1052":[">>>",">>>","In","import","def","from","#","class","df"," "],"1053":["import","import",">>>","def","class","from","#","In"," ","print"],"1054":[">>>",">>>","In","import","def","from","df","#","class"," "],"1055":["In","In",">>>","import","def","from","df","#","class"," "],"1056":["import","import",">>>","from","def","#","class","In","for"," "],"1057":["import","import",">>>","from","class","def","#","In"," ","$"],"1058":["class","class","from","import",">>>","def","In","#"," ","@"],"1059":["import","import","class","from","def",">>>","#","In"," ","for"],"1060":["import","import",">>>","def","from","class","#","In"," ","for"],"1061":[">>>",">>>","import","def","from","class","#","In","for"," "],"1062":["from","from","import","class",">>>","def","In","#"," ","for"],"1063":["import","import",">>>","class","from","def","#","In"," ","for"],"1064":["class","class",">>>","def","import","from","#","In"," ","for"],"1065":[">>>",">>>","import","def","from","#","In","class"," ","for"],"1066":["import","import","from","class","def",">>>","#","In"," ","for"],"1067":["import","import",">>>","from","def","In","#","class","for","with"],"1068":["import","import",">>>","from","def","class","#","In"," ","for"],"1069":[">>>",">>>","import","from","def","class","In","#","for"," "],"1070":["import","import",">>>","class","from","def","In","#"," ","for"],"1071":["import","import",">>>","def","from","class","In","#"," ","for"],"1072":["import","import","from","class","def",">>>","#"," ","@","In"],"1073":["import","import","from",">>>","class","In","def","#"," ","for"],"1074":["import","import",">>>","from","def","class","#","In","for"," "],"1075":[">>>",">>>","import","def","from","#","In","class","for"," "],"1076":[">>>",">>>","def","import","In","from","#","class","print","for"],"1077":[">>>",">>>","import","In","def","from","class","#","df","for"],"1078":["import","import",">>>","from","def","#","class","In","for","with"],"1079":["import","import",">>>","from","def","#","In","class","for","with"],"1080":["import","import","from","class",">>>","#","def","In"," ","for"],"1081":[">>>",">>>","import","def","from","#","In","class"," ","for"],"1082":[">>>",">>>","def","import","class","from","In","#","for"," "],"1083":["import","import",">>>","from","def","In","#","class","for","with"],"1084":[">>>",">>>","import","def","from","#","In","class"," ","for"],"1085":["import","import","from","class","def",">>>","#","In"," ","for"],"1086":["import","import","from","class",">>>","In","def","#"," ","for"],"1087":["In","In",">>>","import","def","from","df","#","class","for"],"1088":[">>>",">>>","import","def","from","In","#","class","for"," "],"1089":["from","from","import","class",">>>","def","#"," ","@","In"],"1090":["import","import",">>>","class","from","def","#","In"," ","for"],"1091":[">>>",">>>","def","import","In","class","from","#","for"," "],"1092":["import","import","from",">>>","def","In","#","class","for"," "],"1093":["import","import",">>>","In","def","from","#","class","df","for"],"1094":[">>>",">>>","import","def","In","from","class","#","for","print"],"1095":["from","from","class","import","def",">>>","#"," ","@","In"],"1096":[">>>",">>>","import","from","def","#","In","class","for"," "],"1097":["import","import",">>>","from","def","class","#","In"," ","for"],"1098":["import","import",">>>","from","def","#","class","In"," ","for"],"1099":["import","import","from","class","def",">>>","#","In"," ","for"],"1100":["import","import","from","class",">>>","def","#","In"," ","for"],"1101":["import","import","from","class",">>>","def","#","In"," ","for"],"1102":["import","import",">>>","In","def","from","#","class","df"," "],"1103":["import","import","from",">>>","In","def","#","class","for"," "],"1104":["import","import","from",">>>","def","In","#","class","for"," "],"1105":[">>>",">>>","import","from","In","def","#","class","for"," "],"1106":[">>>",">>>","In","import","def","from","#","df","class","for"],"1107":["import","import","from","class",">>>","def","#","In"," ","for"],"1108":[">>>",">>>","def","import","In","from","#","for","class","print"],"1109":[">>>",">>>","def","import","from","In","class","#","for"," "],"1110":["import","import",">>>","from","class","def","In","#","for"," "],"1111":["class","class","from","def","import",">>>","#"," ","@","In"],"1112":["import","import","from",">>>","def","class","#","In"," ","for"],"1113":["import","import",">>>","from","In","def","#","class","for"," "],"1114":["import","import",">>>","from","def","class","#","In"," ","for"],"1115":[">>>",">>>","import","def","from","class","In","#","for"," "],"1116":[">>>",">>>","import","def","In","from","#","class","for"," "],"1117":["import","import","from",">>>","def","class","#","In"," ","for"],"1118":["import","import","from",">>>","class","def","#","In"," ","for"],"1119":[">>>",">>>","import","class","def","from","In","#","for"," "],"1120":[">>>",">>>","import","def","In","from","#","class","for"," "],"1121":[">>>",">>>","import","def","from","class","In","#","for","with"],"1122":["import","import",">>>","from","def","In","#","class","for"," "],"1123":["import","import",">>>","from","def","#","class","In","for","with"],"1124":["import","import","from",">>>","def","In","class","#","for"," "],"1125":[">>>",">>>","In","import","def","from","#","class","df","for"],"1126":["import","import","from","class","def",">>>","#","In"," ","for"],"1127":[">>>",">>>","def","import","In","from","#","class","for","print"],"1128":["class","class","def","import",">>>","from","#","In","@"," "],"1129":["import","import",">>>","from","def","class","#","In"," ","for"],"1130":[">>>",">>>","import","def","from","class","#","In","for"," "],"1131":[">>>",">>>","import","from","def","In","#","class","if","print"],"1132":["import","import","from","def","class",">>>","In","#"," ","for"],"1133":[">>>",">>>","def","class","import","from","#","In","print"," "],"1134":[">>>",">>>","def","import","class","In","from","#","if","for"],"1135":[">>>",">>>","def","import","class","from","In","#","for"," "],"1136":["import","import",">>>","from","class","def","#","In"," ","for"],"1137":["class","class","from","def",">>>","import","#"," ","In","<"],"1138":[">>>",">>>","import","def","In","from","#","class","for"," "],"1139":[">>>",">>>","import","class","def","from","In","#"," ","for"],"1140":[">>>",">>>","In","import","def","from","df","#","class"," "],"1141":[">>>",">>>","import","def","In","from","#","class","for","print"],"1142":["import","import",">>>","from","def","class","#","In"," ","for"],"1143":["import","import",">>>","from","def","In","#","class","for","with"],"1144":["import","import","from",">>>","def","class","In","#","for"," "],"1145":["import","import",">>>","In","from","def","#","class","df","for"],"1146":["import","import","from",">>>","def","In","#","class","for"," "],"1147":[">>>",">>>","import","def","from","In","class","#","for"," "],"1148":[">>>",">>>","class","def","import","from","In","#"," ","for"],"1149":[">>>",">>>","import","from","def","class","#","In"," ","for"],"1150":["import","import","class","from","def",">>>","#","In"," ","if"],"1151":["class","class",">>>","def","import","from","#","In"," ","print"],"1152":["import","import","from","class",">>>","def","#","In"," ","@"],"1153":["from","from","import","class","#","def",">>>","In"," ","for"],"1154":["In","In",">>>","import","def","df","from","#","class","for"],"1155":["In","In",">>>","import","def","df","from","#","class"," "],"1156":["class","class",">>>","def","import","from","#","In"," ","for"],"1157":["import","import",">>>","def","from","class","#","In"," ","for"],"1158":[">>>",">>>","import","from","def","In","#","class","for","print"],"1159":[">>>",">>>","import","from","def","class","#","In","for"," "],"1160":[">>>",">>>","import","def","from","In","#","class","for"," "],"1161":[">>>",">>>","import","class","def","from","#","In"," ","for"],"1162":[">>>",">>>","import","def","In","from","#","class","for","print"],"1163":["import","import",">>>","from","def","class","In","#","for"," "],"1164":[">>>",">>>","import","def","from","In","#","class"," ","for"],"1165":[">>>",">>>","import","def","In","from","class","#","for"," "],"1166":[">>>",">>>","import","def","In","from","#","class","for"," "],"1167":[">>>",">>>","import","def","from","#","In","class"," ","for"],"1168":["import","import","from","class","def",">>>","#","In"," ","for"],"1169":[">>>",">>>","import","def","from","In","#","class","for","with"],"1170":["class","class","import",">>>","from","def","#","In"," ","{"],"1171":["import","import","from",">>>","class","def","#","In"," ","for"],"1172":[">>>",">>>","class","import","def","from","#","In","print"," "],"1173":["class","class","from","def","import",">>>","#","@"," ","In"],"1174":["import","import",">>>","from","class","def","#","In"," ","for"],"1175":["class","class","from","import","def",">>>","In","#"," ","@"],"1176":[">>>",">>>","class","def","import","from","In","#","if"," "],"1177":["class","class",">>>","import","def","from","#","In"," ","for"],"1178":["import","import",">>>","from","def","#","class","In"," ","for"],"1179":[">>>",">>>","import","from","In","def","#","class","for","if"],"1180":[">>>",">>>","import","def","from","#","In","class"," ","for"],"1181":[">>>",">>>","import","def","In","from","#","class","for"," "],"1182":[">>>",">>>","In","import","def","from","#","df","class"," "],"1183":[">>>",">>>","def","import","class","from","In","#","for"," "],"1184":[">>>",">>>","In","import","def","from","#","class","print","for"],"1185":[">>>",">>>","class","def","import","from","In","#"," ","for"],"1186":["import","import",">>>","from","def","#","In","class","for"," "],"1187":["import","import",">>>","def","from","In","class","#"," ","for"],"1188":["import","import",">>>","from","def","In","class","#"," ","for"],"1189":[">>>",">>>","In","import","def","from","df","#","class"," "],"1190":[">>>",">>>","def","import","In","from","#","class","for","print"],"1191":[">>>",">>>","class","def","import","from","In","#"," ","for"],"1192":[">>>",">>>","import","def","In","from","#","class","for"," "],"1193":["class","class","def","import",">>>","from","#","In"," ","@"],"1194":[">>>",">>>","def","import","class","from","In","#","for","print"],"1195":[">>>",">>>","def","import","In","from","class","#","for"," "],"1196":["import","import",">>>","def","from","#","In","class","for"," "],"1197":[">>>",">>>","import","from","def","class","In","#","for"," "],"1198":["import","import","from",">>>","def","class","#","In"," ","for"],"1199":[">>>",">>>","import","def","In","from","class","#","for"," "],"1200":["class","class",">>>","def","import","from","In","#"," ","print"],"1201":["import","import",">>>","def","from","In","class","#"," ","if"],"1202":[">>>",">>>","import","def","In","from","#","for","class"," "],"1203":[">>>",">>>","import","def","In","from","class","#","for"," "],"1204":["import","import","from",">>>","class","def","#","In"," ","for"],"1205":["import","import",">>>","from","def","class","#","In"," ","for"],"1206":[">>>",">>>","def","import","In","from","class","#","for"," "],"1207":[">>>",">>>","import","def","In","from","class","#","for"," "],"1208":["import","import",">>>","from","class","def","In","#"," ","for"],"1209":[">>>",">>>","import","def","In","from","#","class","for"," "],"1210":[">>>",">>>","def","from","class","In","import","#","if"," "],"1211":["import","import",">>>","from","class","def","#","In"," ","$"],"1212":["import","import","from",">>>","class","def","In","#","for"," "],"1213":["import","import","class",">>>","def","from","#","In"," ","for"],"1214":["import","import","class","from","def",">>>","#"," ","In","if"],"1215":["class","class",">>>","from","def","import","In","#"," ","for"],"1216":[">>>",">>>","import","def","from","class","#","In","for","with"],"1217":[">>>",">>>","import","def","In","from","#","class","for"," "],"1218":[">>>",">>>","import","from","def","class","In","#","for"," "],"1219":[">>>",">>>","import","def","class","from","#","In","for"," "],"1220":[">>>",">>>","import","def","from","In","class","#","for"," "],"1221":[">>>",">>>","In","import","def","from","df","#","class"," "],"1222":[">>>",">>>","import","from","def","class","In","#","for"," "],"1223":["import","import",">>>","from","def","class","#","In"," ","for"],"1224":["import","import","from","class",">>>","def","#","In"," ","for"],"1225":[">>>",">>>","import","def","from","class","In","#","for"," "],"1226":["import","import","from","class","def",">>>","In","#"," ","for"],"1227":["import","import","def",">>>","class","from","#","In","for"," "],"1228":[">>>",">>>","import","def","class","from","#","In","for","print"],"1229":[">>>",">>>","import","In","def","from","#","class","for","with"],"1230":[">>>",">>>","import","def","from","#","In","class","for","if"],"1231":[">>>",">>>","In","import","def","from","class","#","df"," "],"1232":[">>>",">>>","import","def","from","class","In","#","for"," "],"1233":[">>>",">>>","import","def","In","from","#","class","for","print"],"1234":[">>>",">>>","def","import","class","from","In","#","for"," "],"1235":["import","import","from","class","def",">>>","#"," ","@","In"],"1236":["import","import","from",">>>","def","class","#","In"," ","for"],"1237":["import","import","from","class",">>>","def","#","In"," ","for"],"1238":["import","import",">>>","from","class","#","def","In"," ","$"],"1239":[">>>",">>>","import","In","def","from","#","class","for","print"],"1240":["import","import",">>>","from","In","def","class","#","for"," "],"1241":["import","import",">>>","from","In","def","#","class","for","with"],"1242":["import","import",">>>","from","def","#","In","class","for"," "],"1243":["import","import","from",">>>","def","class","#"," ","In","for"],"1244":[">>>",">>>","def","import","In","from","class","#","for"," "],"1245":["import","import",">>>","from","def","#","In","class","for","with"],"1246":["import","import","from","class",">>>","def","#","In"," ","for"],"1247":["import","import",">>>","from","class","def","#"," ","In","@"],"1248":["import","import",">>>","from","def","In","#","class","for","with"],"1249":["import","import",">>>","from","In","def","#","class","for","df"],"1250":["import","import","from",">>>","def","class","In","#","for"," "],"1251":[">>>",">>>","In","import","def","df","from","#","class"," "],"1252":["class","class",">>>","def","import","from","In","#"," ","for"],"1253":["import","import",">>>","class","def","from","#","In"," ","with"],"1254":[">>>",">>>","import","def","from","In","class","#","for"," "],"1255":["import","import","from","class","def",">>>","#","In","for"," "],"1256":["class","class",">>>","import","def","from","#","In"," ","for"],"1257":[">>>",">>>","def","import","from","In","class","#","for"," "],"1258":[">>>",">>>","import","def","from","In","#","class","for"," "],"1259":["import","import",">>>","from","def","In","#","class","for"," "],"1260":["import","import","from",">>>","class","def","#","In"," ","for"],"1261":["class","class","from","def","import",">>>","#","In"," ","@"],"1262":["class","class",">>>","def","import","from","#","In"," ","@"],"1263":["class","class",">>>","def","import","from","#","In"," ","for"],"1264":[">>>",">>>","import","def","from","#","class","In"," ","for"],"1265":[">>>",">>>","import","def","In","from","#","class","for"," "],"1266":["import","import",">>>","In","from","def","#","class","df","for"],"1267":["import","import","from","class","def",">>>","#","In"," ","for"],"1268":["import","import",">>>","from","def","#","In","class"," ","for"],"1269":["class","class","def",">>>","import","from","#","In","@"," "],"1270":["import","import",">>>","from","class","def","#","In"," ","for"],"1271":[">>>",">>>","def","class","import","In","from","#"," ","print"],"1272":[">>>",">>>","In","import","def","from","df","#","class"," "],"1273":[">>>",">>>","In","import","def","from","#","df","class","for"],"1274":[">>>",">>>","import","def","from","class","In","#"," ","for"],"1275":[">>>",">>>","import","def","from","In","#","class","for"," "],"1276":[">>>",">>>","import","def","from","#","In","class"," ","for"],"1277":["import","import","from","class","def",">>>","#","In"," ","for"],"1278":["import","import",">>>","from","def","In","#","class","for"," "],"1279":[">>>",">>>","class","def","import","from","In","#"," ","for"],"1280":["import","import",">>>","from","def","class","In","#"," ","for"],"1281":["class","class","from","def","import",">>>","In","#"," ","@"],"1282":[">>>",">>>","import","def","from","class","In","#","for"," "],"1283":["import","import",">>>","In","from","def","#","class","df","for"],"1284":[">>>",">>>","import","def","from","class","In","#"," ","for"],"1285":[">>>",">>>","class","import","def","from","#","In"," ","for"],"1286":["import","import",">>>","from","def","#","class","In"," ","print"],"1287":["class","class","from","def",">>>","import","In","#"," ","for"],"1288":[">>>",">>>","import","def","from","#","class","In","for"," "],"1289":["class","class","def",">>>","import","from","#","@"," ","In"],"1290":["import","import",">>>","from","def","#","class","In","for","with"],"1291":["class","class","from","def","import",">>>","#"," ","@","In"],"1292":[">>>",">>>","import","def","from","In","class","#","for"," "],"1293":["In","In",">>>","import","def","from","df","#","class"," "],"1294":["class","class","from","import","def",">>>","#"," ","@","In"],"1295":[">>>",">>>","In","import","def","from","#","df","class"," "],"1296":["class","class",">>>","def","import","from","In","#"," ","for"],"1297":[">>>",">>>","import","def","from","In","class","#","for"," "],"1298":["import","import",">>>","from","def","#","In","class","for"," "],"1299":[">>>",">>>","import","def","from","In","#","class","for","print"],"1300":["class","class","from","import","def",">>>","#","In"," ","for"],"1301":[">>>",">>>","def","import","In","class","from","#","for"," "],"1302":["import","import","from",">>>","In","def","#","class","for"," "],"1303":["from","from","class","import","def",">>>","#","In"," ","<"],"1304":[">>>",">>>","import","def","from","In","class","#","for"," "],"1305":["import","import","class",">>>","from","def","#","In"," ","<"],"1306":[">>>",">>>","import","def","from","#","class","In"," ","for"],"1307":[">>>",">>>","import","from","def","class","In","#"," ","for"],"1308":[">>>",">>>","import","def","from","In","class","#","for"," "],"1309":[">>>",">>>","import","from","In","def","#","class","for","if"],"1310":[">>>",">>>","import","from","def","In","#","class","for"," "],"1311":[">>>",">>>","import","from","def","class","#","In"," ","for"],"1312":["class","class","import","from","def",">>>","#"," ","In","for"],"1313":["import","import","from",">>>","In","def","#","class","df","for"],"1314":["import","import","class","def","from",">>>","#","In"," ","for"],"1315":["class","class","from","def",">>>","import","In","#"," ","for"],"1316":["import","import",">>>","from","def","In","#","class","for"," "],"1317":["In","In",">>>","import","def","from","df","#","class","for"],"1318":[">>>",">>>","import","def","class","from","In","#","for"," "],"1319":["import","import",">>>","In","from","def","#","class","df","for"],"1320":["import","import",">>>","from","class","def","#","In"," ","for"],"1321":["import","import",">>>","from","def","#","In","class","for"," "],"1322":["class","class","def","from",">>>","import","#"," ","In","@"],"1323":[">>>",">>>","from","import","class","def","In","#"," ","for"],"1324":[">>>",">>>","import","def","from","#","class","In"," ","for"],"1325":[">>>",">>>","import","def","In","from","#","class","for"," "],"1326":["class","class","from","import","def",">>>","In","#"," ","@"],"1327":[">>>",">>>","import","def","from","#","In","class"," ","for"],"1328":["class","class","from","def","import",">>>","#","In"," ","@"],"1329":[">>>",">>>","import","def","from","In","#","class","for"," "],"1330":[">>>",">>>","In","def","import","from","#","class","for","print"],"1331":["import","import",">>>","from","def","class","#","In"," ","print"],"1332":[">>>",">>>","import","from","def","#","In","class","for","print"],"1333":[">>>",">>>","import","def","from","In","class","#","for"," "],"1334":["import","import",">>>","from","class","def","#","In"," ","for"],"1335":["import","import","from","class",">>>","def","#","In"," ","for"],"1336":["import","import",">>>","from","class","def","In","#"," ","for"],"1337":["import","import","from",">>>","class","def","In","#"," ","for"],"1338":["from","from","import","class",">>>","def","#"," ","In","<"],"1339":["import","import","from","class","def",">>>","#","In","for"," "],"1340":["import","import","from",">>>","def","class","In","#","for"," "],"1341":["import","import",">>>","from","def","#","In","class","for","with"],"1342":[">>>",">>>","import","from","def","class","In","#","for"," "],"1343":[">>>",">>>","import","def","from","In","class","#","for"," "],"1344":[">>>",">>>","import","class","from","def","#","In"," ","print"],"1345":["import","import","from","class","def",">>>","#"," ","In","@"],"1346":["class","class","import","from","def",">>>","#","In"," ","for"],"1347":[">>>",">>>","import","def","from","In","class","#","for"," "],"1348":[">>>",">>>","import","def","In","from","#","class","for"," "],"1349":["import","import","from","class","def",">>>","#","In","for"," "],"1350":[">>>",">>>","def","import","from","In","class","#","for"," "],"1351":["import","import",">>>","from","def","#","In","class","for"," "],"1352":["import","import","from",">>>","class","#","def","In"," ","$"],"1353":["import","import","from",">>>","class","def","#"," ","@","$"],"1354":[">>>",">>>","import","from","class","def","In","#"," ","for"],"1355":[">>>",">>>","import","def","class","from","In","#","for"," "],"1356":["import","import","from","class","def",">>>","#","In"," ","for"],"1357":["import","import",">>>","from","def","#","class","In"," ","for"],"1358":["import","import","from","class",">>>","#","def","In"," ","for"],"1359":["import","import",">>>","from","def","class","#"," ","In","for"],"1360":[">>>",">>>","def","import","In","from","#","class","for"," "],"1361":["import","import",">>>","def","from","#","In","for","class"," "],"1362":["import","import",">>>","from","def","class","#","In","for"," "],"1363":[">>>",">>>","import","def","from","class","In","#"," ","for"],"1364":["import","import","from",">>>","class","def","#","In"," ","for"],"1365":["import","import","from",">>>","class","def","#","In"," ","for"],"1366":["import","import",">>>","def","from","In","#","for","with","class"],"1367":[">>>",">>>","def","import","class","from","In","#","for"," "],"1368":[">>>",">>>","def","import","from","In","class","#","for"," "],"1369":[">>>",">>>","import","def","In","from","class","#","for"," "],"1370":[">>>",">>>","import","from","def","#","In","class","for"," "],"1371":["import","import",">>>","from","def","class","In","#","for","with"],"1372":[">>>",">>>","import","from","def","#","In","class","for","with"],"1373":[">>>",">>>","import","def","from","#","In","class","for"," "],"1374":["import","import",">>>","from","def","class","#","In"," ","for"],"1375":[">>>",">>>","import","from","def","#","In","class","for"," "],"1376":["import","import","from","class","def","#",">>>","In"," ","@"],"1377":[">>>",">>>","def","import","In","from","#","class","for"," "],"1378":["import","import",">>>","from","def","In","#","class","for","with"],"1379":["class","class","from","import","def",">>>","In","#"," ","@"],"1380":[">>>",">>>","import","from","def","In","class","#"," ","for"],"1381":["import","import",">>>","class","from","def","#","In"," ","for"],"1382":["import","import",">>>","from","def","class","#","In"," ","for"],"1383":["import","import",">>>","from","def","class","In","#"," ","for"],"1384":[">>>",">>>","import","def","from","class","#","In","for"," "],"1385":["import","import","class","from",">>>","def","#","In"," ","@"],"1386":["import","import",">>>","from","def","class","#","In","for","with"],"1387":["import","import",">>>","class","from","def","#","In","for","with"],"1388":["In","In",">>>","import","def","df","from","#","class"," "],"1389":["class","class","from","def",">>>","import","In","#"," ","for"],"1390":["import","import",">>>","class","from","def","#","In"," ","for"],"1391":["class","class","from","import","def",">>>","In","#"," ","@"],"1392":[">>>",">>>","import","def","In","from","class","#","for","print"],"1393":["from","from","import",">>>","def","class","In","#"," ","for"],"1394":[">>>",">>>","def","import","In","from","#","class","for"," "],"1395":["import","import",">>>","class","from","def","#","In"," ","if"],"1396":[">>>",">>>","def","import","from","In","class","#","for"," "],"1397":["import","import",">>>","from","In","def","class","#","for"," "],"1398":["import","import","class",">>>","def","from","#","In"," ","if"],"1399":["import","import","from","class",">>>","def","#","In"," ","for"],"1400":["import","import",">>>","from","def","#","In","class"," ","for"],"1401":[">>>",">>>","import","from","def","class","#","In","for"," "],"1402":[">>>",">>>","import","def","from","class","In","#","for"," "],"1403":[">>>",">>>","In","import","def","from","#","df","class"," "],"1404":["class","class","def","import",">>>","from","#","@"," ","In"],"1405":["def","def",">>>","import","class","from","#","In"," ","for"],"1406":["import","import",">>>","def","from","class","In","#","for"," "],"1407":[">>>",">>>","import","def","In","from","#","class","for"," "],"1408":[">>>",">>>","import","def","#","from","In"," ","class","for"],"1409":[">>>",">>>","In","import","def","from","df","#","class","for"],"1410":["import","import","from",">>>","def","class","#","In"," ","for"],"1411":[">>>",">>>","import","from","def","class","In","#","for"," "],"1412":["import","import",">>>","def","from","In","#","for","class","with"],"1413":[">>>",">>>","def","import","In","from","#","class","for"," "],"1414":[">>>",">>>","import","from","def","#","class","In"," ","for"],"1415":["import","import","from","class","def",">>>","#","In"," ","for"],"1416":["import","import","from",">>>","def","#","class","In","for"," "],"1417":["import","import","from",">>>","def","class","#","In","for"," "],"1418":["import","import",">>>","def","from","#","In","class","for","with"],"1419":["import","import",">>>","from","In","def","class","#","for"," "],"1420":["import","import","class","from","def",">>>","#"," ","@","In"],"1421":[">>>",">>>","import","def","from","In","#","class","for"," "],"1422":["class","class","from","import","def",">>>","#"," ","@","In"],"1423":["class","class","import",">>>","from","def","In","#"," ","for"],"1424":["import","import",">>>","from","def","class","In","#","for"," "],"1425":["import","import",">>>","from","def","In","#","class","for","with"],"1426":[">>>",">>>","import","In","def","from","class","#","for"," "],"1427":[">>>",">>>","def","import","class","from","#","In","for"," "],"1428":[">>>",">>>","import","def","class","from","In","#","for"," "],"1429":[">>>",">>>","In","import","def","from","#","class","for","print"],"1430":["import","import","from",">>>","class","def","#","In"," ","for"],"1431":[">>>",">>>","In","import","def","from","class","#","print","for"],"1432":["import","import","from","class",">>>","def","#","In"," ","for"],"1433":["import","import",">>>","from","class","def","#","In"," ","for"],"1434":["import","import","from","class","def",">>>","#","In"," ","@"],"1435":["import","import","from",">>>","In","def","#","class","for"," "],"1436":[">>>",">>>","def","import","from","class","In","#","for"," "],"1437":["import","import","from","class",">>>","def","#","In"," ","for"],"1438":[">>>",">>>","def","import","class","from","In","#","for","print"],"1439":["import","import",">>>","from","In","def","#","class","for","df"],"1440":["import","import",">>>","from","def","class","#","In"," ","for"],"1441":[">>>",">>>","import","def","from","In","#","class"," ","for"],"1442":["import","import",">>>","from","def","#","In","class","for","with"],"1443":["import","import","from",">>>","class","def","#","In"," ","for"],"1444":[">>>",">>>","import","from","def","In","class","#","for"," "],"1445":["class","class",">>>","def","import","from","In","#"," ","@"],"1446":[">>>",">>>","import","In","def","from","#","class","for"," "],"1447":["import","import","from",">>>","In","#","def","class"," ","for"],"1448":[">>>",">>>","import","def","from","class","In","#"," ","for"],"1449":[">>>",">>>","import","from","def","class","In","#"," ","for"],"1450":[">>>",">>>","import","In","def","from","#","class","for","print"],"1451":["class","class","import","def",">>>","from","#","In"," ","@"],"1452":["import","import","from","class","def",">>>","#","In","for"," "],"1453":[">>>",">>>","import","def","from","#","In","class","for"," "],"1454":["class","class","def","from","import",">>>","#","In"," ","@"],"1455":[">>>",">>>","def","import","from","class","In","#","for","if"],"1456":["class","class",">>>","def","import","from","#","In"," ","for"],"1457":["class","class","def",">>>","import","from","#","In","@"," "],"1458":[">>>",">>>","import","def","from","In","class","#","for"," "],"1459":["import","import",">>>","from","def","In","#","class","for"," "],"1460":[">>>",">>>","import","def","from","class","In","#","for"," "],"1461":["import","import","from",">>>","def","#","class","In","for"," "],"1462":["import","import","from",">>>","#","def","class","In"," ","for"],"1463":[">>>",">>>","import","def","from","In","class","#","for","if"],"1464":["import","import",">>>","from","def","class","In","#"," ","for"],"1465":["import","import",">>>","from","def","class","#","In"," ","for"],"1466":["class","class","from","import","def",">>>","In","#"," ","@"],"1467":["class","class",">>>","def","import","from","#","In"," ","@"],"1468":[">>>",">>>","import","def","from","In","#","class","for"," "],"1469":["import","import","class","def","from",">>>","#","In"," ","for"],"1470":["import","import","from","class","def",">>>","#"," ","@","In"],"1471":[">>>",">>>","In","import","def","from","#","class","df"," "],"1472":["import","import",">>>","In","from","def","#","class","for","with"],"1473":["class","class",">>>","def","import","from","#","In"," ","for"],"1474":[">>>",">>>","import","def","from","In","class","#"," ","for"],"1475":[">>>",">>>","In","def","import","from","#","class","print","for"],"1476":[">>>",">>>","def","import","In","from","class","#","for","if"],"1477":[">>>",">>>","import","def","from","#","In","class"," ","for"],"1478":[">>>",">>>","import","def","In","from","#","class","for"," "],"1479":["import","import","from",">>>","#","def","class","In"," ","for"],"1480":[">>>",">>>","In","import","def","from","#","class","for","print"],"1481":["class","class",">>>","def","import","from","#","In"," ","@"],"1482":["class","class","import","from","def",">>>","#"," ","@","In"],"1483":[">>>",">>>","import","def","from","class","#","In","for"," "],"1484":["class","class","from","def",">>>","import","In","#"," ","for"],"1485":["class","class","from","import","def",">>>","#"," ","<","In"],"1486":["import","import",">>>","from","def","class","#","In","for"," "],"1487":["class","class","from","import",">>>","def","In","#"," ","for"],"1488":["import","import",">>>","from","class","def","#","In"," ","$"],"1489":["import","import","from","class",">>>","def","#","In"," ","for"],"1490":[">>>",">>>","import","def","from","#","In","class","for"," "],"1491":[">>>",">>>","class","def","from","import","In","#"," ","for"],"1492":["In","In",">>>","import","def","from","df","#","class"," "],"1493":[">>>",">>>","import","from","def","class","In","#"," ","for"],"1494":[">>>",">>>","import","from","class","def","#","In"," ","for"],"1495":[">>>",">>>","import","def","from","#","In","class","for","with"],"1496":[">>>",">>>","import","def","from","#","In","class","for","with"],"1497":[">>>",">>>","import","def","class","from","#","In"," ","for"],"1498":[">>>",">>>","def","import","In","from","class","#","print","for"],"1499":["import","import","class",">>>","from","def","#","In"," ","@"],"1500":[">>>",">>>","def","import","In","from","#","class","for","print"],"1501":["import","import","class",">>>","from","def","#","In"," ","for"],"1502":["class","class",">>>","def","import","from","In","#"," ","for"],"1503":[">>>",">>>","import","def","from","class","In","#","for"," "],"1504":[">>>",">>>","import","In","def","from","#","class","for"," "],"1505":["import","import","from",">>>","def","In","#","class","for"," "],"1506":[">>>",">>>","class","def","import","from","In","#","for"," "],"1507":["import","import",">>>","def","class","from","#","In"," ","for"],"1508":[">>>",">>>","import","def","from","In","#","class","for","print"],"1509":["import","import","from","class",">>>","def","#"," ","In","@"],"1510":["class","class","import","from","def",">>>","#"," ","@","In"],"1511":["import","import","from","class","def",">>>","#"," ","In","@"],"1512":[">>>",">>>","def","import","class","from","In","#","for"," "],"1513":[">>>",">>>","import","def","from","In","class","#","for"," "],"1514":["from","from","import","class",">>>","def","#","In"," ","for"],"1515":[">>>",">>>","import","In","def","from","#","class","for","print"],"1516":[">>>",">>>","import","from","In","def","#","class","for"," "],"1517":["import","import","from","In",">>>","class","#","def"," ","for"],"1518":[">>>",">>>","import","def","from","class","In","#","for"," "],"1519":[">>>",">>>","import","class","def","from","#","In"," ","print"],"1520":[">>>",">>>","import","def","from","#","class","In"," ","for"],"1521":["class","class","import","from","def",">>>","#"," ","In","@"],"1522":[">>>",">>>","def","In","import","from","#","class","for","print"],"1523":["class","class","from","import","def",">>>","In","#"," ","@"],"1524":[">>>",">>>","def","import","In","from","class","#","for","if"],"1525":["import","import",">>>","from","def","#","In","class","for","with"],"1526":[">>>",">>>","import","from","def","class","In","#","for"," "],"1527":["import","import","from",">>>","class","def","In","#"," ","for"],"1528":[">>>",">>>","import","def","from","#","In","class","with","for"],"1529":["import","import",">>>","class","from","def","#","In"," ","for"],"1530":["import","import","class","from",">>>","def","#","In"," ","@"],"1531":[">>>",">>>","import","def","In","from","#","class","for"," "],"1532":["class","class","from","import","def",">>>","In","#"," ","@"],"1533":[">>>",">>>","import","def","from","class","#","In"," ","for"],"1534":[">>>",">>>","In","import","def","class","from","#","df"," "],"1535":[">>>",">>>","def","import","In","from","class","#","if","for"],"1536":["import","import","from","class","def",">>>","#","In"," ","@"],"1537":[">>>",">>>","import","def","from","class","#","In","for"," "],"1538":["import","import",">>>","from","def","class","#","In"," ","for"],"1539":[">>>",">>>","In","import","def","from","#","class","df"," "],"1540":["import","import",">>>","from","def","class","#","In"," ","for"],"1541":["import","import","from","class","def",">>>","#","In","for"," "],"1542":[">>>",">>>","import","from","def","class","In","#","for"," "],"1543":[">>>",">>>","import","def","from","In","#","class","for","print"],"1544":[">>>",">>>","import","In","def","from","#","class","for","print"],"1545":[">>>",">>>","import","def","from","In","#","class","for","if"],"1546":["import","import","from",">>>","#","In","def","class"," ","for"],"1547":["import","import","from",">>>","def","#","In","class"," ","for"],"1548":["import","import",">>>","from","def","#","class","In","for"," "],"1549":["import","import",">>>","from","In","def","#","class","for","df"],"1550":[">>>",">>>","import","def","from","In","#","class"," ","for"],"1551":["from","from","import","class",">>>","def","#","In"," ","for"],"1552":["import","import","from",">>>","#","def","class","In"," ","for"],"1553":["import","import","class","from","def",">>>","#","In"," ","for"],"1554":[">>>",">>>","from","import","def","class","In","#"," ","for"],"1555":[">>>",">>>","import","def","In","from","#","for","class","print"],"1556":["import","import",">>>","def","class","from","In","#","for"," "],"1557":["class","class","from","import","def",">>>","#"," ","In","@"],"1558":[">>>",">>>","def","import","In","from","class","#","print","if"],"1559":[">>>",">>>","def","import","In","class","from","#","if","print"],"1560":["import","import","from",">>>","def","class","In","#","for"," "],"1561":[">>>",">>>","import","class","def","from","In","#","for"," "],"1562":[">>>",">>>","import","In","def","from","#","class","for","df"],"1563":["import","import",">>>","class","def","from","#","In"," ","@"],"1564":["import","import",">>>","def","class","from","#","In"," ","for"],"1565":["import","import","class","def","from",">>>","#","In"," ","for"],"1566":["import","import","from",">>>","def","#","class","In"," ","for"],"1567":["class","class","from","import","def",">>>","#"," ","In","@"],"1568":["import","import","from","def",">>>","class","#","In","for"," "],"1569":[">>>",">>>","import","from","def","In","class","#","for"," "],"1570":["import","import",">>>","from","class","def","#","In"," ","$"],"1571":["import","import",">>>","In","from","def","class","#","for","df"],"1572":[">>>",">>>","import","In","def","from","#","class","for","print"],"1573":[">>>",">>>","import","class","from","def","In","#"," ","print"],"1574":[">>>",">>>","def","import","In","from","class","#","for"," "],"1575":["class","class","from","def","import",">>>","#","@"," ","In"],"1576":["class","class","import",">>>","from","def","#","In"," ","for"],"1577":[">>>",">>>","import","class","from","def","#","In"," ","$"],"1578":["import","import","from",">>>","In","#","def","class"," ","for"],"1579":[">>>",">>>","import","def","from","In","#","class","for"," "],"1580":[">>>",">>>","import","class","def","from","#","In","for"," "],"1581":["import","import","from","class","def",">>>","#","In"," ","if"],"1582":[">>>",">>>","def","class","import","from","In","#"," ","for"],"1583":[">>>",">>>","import","def","from","class","#","In","for"," "],"1584":["import","import",">>>","from","def","In","class","#","for"," "],"1585":["import","import","from",">>>","def","#","class","In"," ","with"],"1586":["import","import","from",">>>","def","#","class","In"," ","for"],"1587":["import","import",">>>","In","from","def","#","class","for","df"],"1588":["import","import","from","class","def",">>>","#"," ","In","@"],"1589":[">>>",">>>","import","def","from","#","In","class"," ","for"],"1590":["import","import","from","class",">>>","def","#","In"," ","for"],"1591":[">>>",">>>","import","In","def","from","class","#","for","print"],"1592":[">>>",">>>","def","import","In","from","#","class","for","if"],"1593":[">>>",">>>","import","def","from","In","#","class","for","with"],"1594":["class","class","import","from","def",">>>","#","In"," ","<"],"1595":[">>>",">>>","import","def","In","from","#","for","class"," "],"1596":[">>>",">>>","import","from","def","#","class","In"," ","for"],"1597":["class","class","from","def","import",">>>","#","In"," ","@"],"1598":["import","import",">>>","from","In","def","#","class","for"," "],"1599":["import","import",">>>","def","from","#","In","class","for","with"],"1600":["class","class","import","def","from",">>>","#","In"," ","for"],"1601":["import","import",">>>","from","In","def","#","class","for","df"],"1602":[">>>",">>>","import","def","from","In","class","#","for"," "],"1603":["import","import",">>>","class","from","def","#","In"," ","for"],"1604":["import","import","from","class","def",">>>","#","In"," ","@"],"1605":["import","import","from","class",">>>","def","In","#"," ","for"],"1606":["import","import",">>>","def","from","class","#","In"," ","print"],"1607":["import","import","from","class","def",">>>","#"," ","In","@"],"1608":[">>>",">>>","def","import","In","from","#","class","for","print"],"1609":[">>>",">>>","import","class","def","from","#","In"," ","for"],"1610":["class","class",">>>","from","def","import","#"," ","In","{"],"1611":["import","import",">>>","from","def","#","class","In","for"," "],"1612":["class","class","from","def","import",">>>","#","In"," ","@"],"1613":[">>>",">>>","def","import","from","In","#","class","for","print"],"1614":["import","import",">>>","from","def","In","class","#"," ","for"],"1615":[">>>",">>>","import","def","from","#","class","In"," ","for"],"1616":["import","import","from",">>>","def","#","In","class","for"," "],"1617":["import","import",">>>","from","def","class","#","In"," ","for"],"1618":[">>>",">>>","import","def","from","In","class","#","for"," "],"1619":[">>>",">>>","import","from","class","In","def","#"," ","for"],"1620":[">>>",">>>","import","def","from","#","class","In","if","for"],"1621":["import","import","from",">>>","class","def","#","In"," ","for"],"1622":["import","import","from",">>>","class","def","#"," ","In","for"],"1623":["import","import",">>>","from","def","class","#","In"," ","for"],"1624":["import","import",">>>","class","def","from","#","In","for"," "],"1625":[">>>",">>>","import","from","def","class","#","In"," ","for"],"1626":["import","import","from",">>>","class","def","#","In"," ","for"],"1627":["import","import",">>>","from","def","class","#","In"," ","with"],"1628":["class","class","import","from","def",">>>","#"," ","@","In"],"1629":[">>>",">>>","def","import","class","from","In","#","for"," "],"1630":[">>>",">>>","import","def","class","from","#","In","for"," "],"1631":[">>>",">>>","import","def","from","class","In","#","for"," "],"1632":[">>>",">>>","import","def","from","#","In","class"," ","for"],"1633":["In","In",">>>","import","def","from","#","df","class"," "],"1634":["import","import","from",">>>","def","class","In","#"," ","for"],"1635":["import","import","from",">>>","def","class","#","In"," ","for"],"1636":["import","import",">>>","from","class","def","#","In"," ","$"],"1637":[">>>",">>>","import","def","class","from","In","#","for"," "],"1638":[">>>",">>>","import","from","def","class","In","#","for"," "],"1639":[">>>",">>>","import","def","from","#","In","class","for","print"],"1640":[">>>",">>>","def","import","In","from","#","class","for","if"],"1641":[">>>",">>>","import","def","class","from","#","In","for"," "],"1642":["import","import","from",">>>","def","class","In","#","for"," "],"1643":[">>>",">>>","import","def","from","#","In","class","for","print"],"1644":["import","import",">>>","def","from","#","In","class","with","for"],"1645":["import","import","from",">>>","def","In","#","class","for"," "],"1646":["class","class","from","import",">>>","def","In","#"," ","for"],"1647":["import","import",">>>","from","#","def","class","In"," ","print"],"1648":["import","import","from","class",">>>","def","#","In"," ","for"],"1649":["import","import","from",">>>","def","class","#"," ","In","for"],"1650":[">>>",">>>","def","import","from","class","In","#","for"," "],"1651":[">>>",">>>","def","import","In","from","class","#","for","print"],"1652":[">>>",">>>","import","def","In","from","#","class","for","print"],"1653":[">>>",">>>","import","def","from","class","#","In","if","for"],"1654":[">>>",">>>","import","def","from","#","In","class"," ","for"],"1655":["import","import",">>>","def","from","#","class","In","for"," "],"1656":[">>>",">>>","import","from","def","class","#","In"," ","for"],"1657":[">>>",">>>","In","import","def","from","#","df","class","for"],"1658":["import","import",">>>","from","def","class","In","#","for"," "],"1659":["class","class",">>>","def","import","from","#","In"," ","@"],"1660":["import","import",">>>","from","def","#","In","class","for"," "],"1661":["import","import",">>>","class","from","def","#","In"," ","for"],"1662":["import","import",">>>","from","def","In","#","class"," ","if"],"1663":["import","import",">>>","from","def","In","#","class","with","for"],"1664":["import","import","from","class","def",">>>","#","In"," ","for"],"1665":["import","import",">>>","In","from","def","#","class","for","df"],"1666":[">>>",">>>","import","def","In","from","#","class","for"," "],"1667":["class","class","from","def","import","#","@",">>>"," ","In"],"1668":[">>>",">>>","def","import","In","from","#","class","for","print"],"1669":["import","import",">>>","from","def","class","In","#","for"," "],"1670":["import","import",">>>","def","from","class","#","In"," ","if"],"1671":["class","class","from","import","def",">>>","#","In"," ","for"],"1672":["import","import",">>>","def","from","class","In","#","for"," "],"1673":["import","import","from","def","class",">>>","#","In"," ","for"],"1674":[">>>",">>>","import","In","from","def","#","class","df","for"],"1675":["In","In",">>>","import","def","df","from","#","class"," "],"1676":["import","import",">>>","def","from","#","In","with","for","class"],"1677":["import","import","class","from","def",">>>","#","In"," ","@"],"1678":["class","class",">>>","import","def","from","#","In","print"," "],"1679":[">>>",">>>","In","import","def","from","#","class","for","print"],"1680":["from","from","import",">>>","class","def","In","#","for"," "],"1681":[">>>",">>>","import","def","#","In","from","for","print"," "],"1682":["import","import","from","def","#","class",">>>","In"," ","@"],"1683":["import","import","from",">>>","In","def","#","class","df","for"],"1684":[">>>",">>>","import","In","def","from","class","#","for"," "],"1685":[">>>",">>>","import","from","class","def","#","In"," ","for"],"1686":["import","import","from",">>>","def","class","#","In","for"," "],"1687":["import","import","class","from",">>>","def","#","In"," ","for"],"1688":[">>>",">>>","import","def","from","In","#","for","class","print"],"1689":[">>>",">>>","In","import","from","def","#","class","df","for"],"1690":["class","class",">>>","def","import","from","In","#"," ","for"],"1691":["import","import","class",">>>","from","def","In","#"," ","$"],"1692":[">>>",">>>","class","def","import","from","In","#","for"," "],"1693":["In","In",">>>","import","from","def","df","#","class","for"],"1694":["import","import","from",">>>","#","def","In","class"," ","for"],"1695":[">>>",">>>","import","class","from","def","#","In"," ","for"],"1696":["import","import","from",">>>","In","def","#","class","for","df"],"1697":["In","In",">>>","import","def","from","df","#","class"," "],"1698":["from","from","import","class","def","#",">>>","@"," ","In"],"1699":["import","import","from",">>>","def","#","In","class","for"," "],"1700":[">>>",">>>","import","def","from","In","#","class","for"," "],"1701":[">>>",">>>","import","def","class","from","In","#","for"," "],"1702":["import","import","class","from","def",">>>","#","In"," ","@"],"1703":[">>>",">>>","import","def","class","from","#","In"," ","for"],"1704":[">>>",">>>","import","def","class","from","#","In"," ","for"],"1705":["import","import","from",">>>","In","def","#","class","for"," "],"1706":["import","import","from","def",">>>","class","In","#","for"," "],"1707":["import","import","from","class",">>>","def","#","In"," ","for"],"1708":[">>>",">>>","import","def","from","#","class","In","for","with"],"1709":["import","import",">>>","def","class","from","In","#"," ","for"],"1710":[">>>",">>>","import","def","from","class","In","#","for"," "],"1711":[">>>",">>>","import","def","from","In","#","class","for"," "],"1712":[">>>",">>>","def","import","class","from","In","#","for"," "],"1713":["import","import",">>>","In","from","def","#","class","for"," "],"1714":["import","import","from","class",">>>","def","In","#"," ","for"],"1715":["import","import",">>>","from","def","#","class","In"," ","for"],"1716":["import","import",">>>","from","def","class","#","In"," ","for"],"1717":[">>>",">>>","import","def","from","In","#","class","for"," "],"1718":["import","import",">>>","from","class","def","#","In"," ","for"],"1719":[">>>",">>>","import","def","from","In","#","class","for"," "],"1720":["import","import","from",">>>","class","def","#","In"," ","for"],"1721":["class","class","from","import","def",">>>","#"," ","In","@"],"1722":["import","import",">>>","from","def","class","#","In"," ","for"],"1723":["import","import","from","class","def",">>>","#","In","for"," "],"1724":["import","import","class","from",">>>","def","In","#"," ","for"],"1725":["import","import","from","class",">>>","def","#"," ","In","@"],"1726":["import","import","from",">>>","class","def","#","In"," ","for"],"1727":[">>>",">>>","import","def","from","class","#","In","print","for"],"1728":[">>>",">>>","import","def","In","from","#","class","for"," "],"1729":[">>>",">>>","import","def","from","In","class","#","for"," "],"1730":[">>>",">>>","import","class","def","from","In","#"," ","for"],"1731":["import","import",">>>","In","from","def","#","class","df","for"],"1732":[">>>",">>>","In","import","def","from","#","df","class"," "],"1733":[">>>",">>>","def","import","class","from","In","#","for"," "],"1734":[">>>",">>>","In","import","def","from","df","#","class"," "],"1735":["import","import","from","def","class",">>>","#","In"," ","if"],"1736":["import","import",">>>","from","class","def","#","In"," ","for"],"1737":["import","import","from","class","def",">>>","#","In"," ","for"],"1738":["import","import",">>>","from","def","class","#","In"," ","for"],"1739":[">>>",">>>","import","def","In","from","#","for","class","print"],"1740":[">>>",">>>","import","def","from","#","In","class","for","with"],"1741":["import","import","from",">>>","def","#","class","In"," ","for"],"1742":["class","class",">>>","import","def","from","#","In"," ","for"],"1743":[">>>",">>>","def","import","class","from","#","In"," ","print"],"1744":[">>>",">>>","import","from","class","def","#","In"," ","for"],"1745":[">>>",">>>","import","from","def","In","#","class","for"," "],"1746":["import","import","from",">>>","def","#","In","class","for"," "],"1747":[">>>",">>>","import","def","from","class","In","#","for"," "],"1748":[">>>",">>>","import","def","In","from","#","class","for"," "],"1749":["class","class","def",">>>","import","from","#","@"," ","In"],"1750":["class","class","def","from",">>>","import","#","In"," ","if"],"1751":["class","class","from","import",">>>","def","In","#"," ","@"],"1752":[">>>",">>>","def","import","#","from","In","class"," ","for"],"1753":[">>>",">>>","def","import","from","class","In","#","for","print"],"1754":["import","import",">>>","from","def","In","#","class","for","with"],"1755":["import","import",">>>","from","class","def","#","In"," ","$"],"1756":[">>>",">>>","import","def","In","from","#","class","for"," "],"1757":[">>>",">>>","import","def","In","from","#","for","class"," "],"1758":["import","import",">>>","from","class","def","#","In"," ","for"],"1759":["class","class","def","import",">>>","from","#","In","@"," "],"1760":[">>>",">>>","import","from","def","In","class","#","for"," "],"1761":["import","import","from","class","def",">>>","#","In","for"," "],"1762":["from","from","import","class",">>>","def","#","In"," ","for"],"1763":["import","import",">>>","from","def","#","In","class","for","with"],"1764":[">>>",">>>","In","import","def","df","from","#","class"," "],"1765":["from","from","import","class","def",">>>"," ","#","@","{"],"1766":[">>>",">>>","import","def","from","In","#","class","for"," "],"1767":["import","import","from",">>>","def","#","class","In"," ","for"],"1768":["class","class","import","from","def",">>>","#","In"," ","for"],"1769":[">>>",">>>","import","def","from","#","In","class"," ","for"],"1770":["class","class",">>>","import","from","def","In","#"," ","for"],"1771":[">>>",">>>","import","def","#","from","In","class"," ","for"],"1772":["class","class","import",">>>","from","def","#"," ","In","@"],"1773":[">>>",">>>","def","import","In","from","#","for","print","class"],"1774":["import","import",">>>","from","def","class","#"," ","In","for"],"1775":["In","In",">>>","import","def","from","df","#","class","for"],"1776":["import","import",">>>","from","def","class","#","In"," ","for"],"1777":["import","import","from","class",">>>","def","In","#"," ","for"],"1778":["def","def",">>>","class","import","from","#","In"," ","for"],"1779":["import","import",">>>","from","def","class","#","In","for","with"],"1780":[">>>",">>>","import","def","from","In","#","class","for"," "],"1781":["from","from","import","class",">>>","def","#","In"," ","for"],"1782":[">>>",">>>","import","def","from","In","class","#"," ","for"],"1783":["import","import",">>>","from","def","class","#","In"," ","for"],"1784":["import","import","from",">>>","In","def","#","class","for"," "],"1785":[">>>",">>>","import","def","from","#","class","In"," ","for"],"1786":[">>>",">>>","import","from","In","def","#","class","for"," "],"1787":["import","import",">>>","In","from","def","#","class","for","df"],"1788":[">>>",">>>","def","import","In","#","from","for"," ","print"],"1789":[">>>",">>>","import","In","def","from","#","class","for","print"],"1790":["class","class",">>>","def","import","from","#","In"," ","if"],"1791":["import","import",">>>","from","def","class","In","#","for"," "],"1792":["class","class",">>>","from","import","def","#"," ","In","@"],"1793":[">>>",">>>","import","In","def","from","#","class","for","print"],"1794":["class","class","from","import","def",">>>","#"," ","@","In"],"1795":["import","import",">>>","def","from","class","#","In","for"," "],"1796":["import","import",">>>","from","def","In","class","#"," ","for"],"1797":["import","import",">>>","from","def","class","#","In"," ","for"],"1798":[">>>",">>>","import","def","In","from","#","for","class","print"],"1799":[">>>",">>>","import","def","from","In","class","#","for"," "],"1800":[">>>",">>>","def","import","In","from","#","class","print","if"],"1801":["import","import","from",">>>","def","In","#","class","for"," "],"1802":["import","import",">>>","from","def","In","#","class","for","with"],"1803":["import","import","from","class","def","#",">>>","In"," ","for"],"1804":["import","import","from","class","def",">>>","#","In","for"," "],"1805":[">>>",">>>","import","def","class","from","#","In"," ","for"],"1806":[">>>",">>>","import","def","from","In","#","for","with","class"],"1807":[">>>",">>>","import","class","from","def","#","In"," ","for"],"1808":[">>>",">>>","def","import","class","from","In","#","for"," "],"1809":["import","import",">>>","from","def","#","In","class","for","with"],"1810":["class","class","from","def",">>>","import","In","#"," ","for"],"1811":["import","import",">>>","from","def","In","#","class","for"," "],"1812":[">>>",">>>","import","def","from","class","In","#","for","with"],"1813":["import","import","from","class",">>>","def","#","In"," ","for"],"1814":["import","import",">>>","from","def","#","class","In","for"," "],"1815":[">>>",">>>","class","def","import","from","#","In"," ","print"],"1816":["from","from","import","class","def",">>>","#"," ","In","@"],"1817":["class","class",">>>","from","import","def","#","In"," ","for"],"1818":["import","import",">>>","from","In","def","#","class","for","with"],"1819":["import","import","from","class","def",">>>","#","In"," ","for"],"1820":["import","import","class","from","def",">>>","#","In"," ","@"],"1821":["import","import","from","class",">>>","def","#","In"," ","for"],"1822":[">>>",">>>","def","import","class","In","from","#","print"," "],"1823":[">>>",">>>","In","import","def","from","df","#","class","for"],"1824":[">>>",">>>","import","def","from","In","class","#","for"," "],"1825":["import","import",">>>","def","from","class","In","#","for"," "],"1826":["import","import","from","def",">>>","class","#","In","for"," "],"1827":["import","import","from","class",">>>","def","#","In"," ","for"],"1828":["import","import",">>>","from","def","class","#","In"," ","for"],"1829":["import","import","from",">>>","class","def","#","In"," ","if"],"1830":[">>>",">>>","def","import","In","from","#","class","print","for"],"1831":[">>>",">>>","def","import","class","from","In","#","for"," "],"1832":["import","import",">>>","from","def","#","In","class","for","with"],"1833":["class","class","from",">>>","def","import","#","In"," ","for"],"1834":["import","import","from","class","def","#",">>>","In"," ","for"],"1835":["import","import","from","class",">>>","def","#","In"," ","for"],"1836":[">>>",">>>","import","def","In","from","#","class","for"," "],"1837":["import","import","from",">>>","class","def","#","In"," ","for"],"1838":[">>>",">>>","class","def","import","from","In","#"," ","for"],"1839":[">>>",">>>","import","from","def","#","class","In"," ","for"],"1840":["class","class","def",">>>","from","import","#","In"," ","for"],"1841":["from","from","import","class",">>>","def","In","#"," ","for"],"1842":["import","import",">>>","from","class","def","#","In"," ","$"],"1843":[">>>",">>>","import","def","from","#","class","In","if"," "],"1844":["import","import","from","class",">>>","def","#","In"," ","for"],"1845":["import","import",">>>","from","class","def","In","#"," ","for"],"1846":[">>>",">>>","import","def","from","#","In","with","for","class"],"1847":[">>>",">>>","def","import","In","from","class","#","for","if"],"1848":["import","import","from","class",">>>","#","def","In"," ","for"],"1849":["from","from","class","import","def","#"," ","@",">>>","In"],"1850":[">>>",">>>","In","import","def","from","df","#","class","for"],"1851":["import","import",">>>","from","def","class","#","In"," ","for"],"1852":["class","class",">>>","def","import","from","In","#"," ","print"],"1853":[">>>",">>>","import","In","def","from","#","class","for","print"],"1854":["class","class","import",">>>","def","from","#","In"," ","if"],"1855":["import","import","from",">>>","class","def","#","In"," ","for"],"1856":["import","import","from","class","def",">>>","#","In","for"," "],"1857":[">>>",">>>","import","def","from","In","class","#","for"," "],"1858":["class","class","from","def","import",">>>","#"," ","@","In"],"1859":[">>>",">>>","import","from","def","class","#","In"," ","for"],"1860":["import","import",">>>","from","def","class","#","In"," ","for"],"1861":[">>>",">>>","In","import","def","from","#","class","df"," "],"1862":[">>>",">>>","import","def","In","from","#","class","for"," "],"1863":["import","import",">>>","from","class","def","In","#"," ","for"],"1864":[">>>",">>>","def","import","In","class","from","#","if","for"],"1865":["from","from","class","import",">>>","def","#"," ","@","In"],"1866":[">>>",">>>","import","def","In","from","class","#","print"," "],"1867":["import","import","from",">>>","class","def","#","In"," ","for"],"1868":[">>>",">>>","def","import","from","class","In","#","for","if"],"1869":["import","import",">>>","from","def","In","#","class","for"," "],"1870":["import","import","from",">>>","class","def","In","#"," ","for"],"1871":[">>>",">>>","def","import","In","from","#","class","for","print"],"1872":[">>>",">>>","import","def","class","from","In","#","for"," "],"1873":[">>>",">>>","In","import","def","from","#","df","class"," "],"1874":["import","import",">>>","from","def","class","#","In"," ","$"],"1875":["import","import","from","class",">>>","def","#","In"," ","for"],"1876":[">>>",">>>","import","In","def","from","#","class","for"," "],"1877":["class","class","from","import","def",">>>","#"," ","In","@"],"1878":[">>>",">>>","In","import","def","from","#","df","class"," "],"1879":["import","import","class",">>>","from","def","#"," ","In","for"],"1880":["import","import","from","class",">>>","def","In","#"," ","for"],"1881":["import","import","from",">>>","class","def","#"," ","In","for"],"1882":[">>>",">>>","import","def","from","class","In","#","with","for"],"1883":[">>>",">>>","import","def","from","#","In","class","for","print"],"1884":["import","import","from",">>>","In","def","#","class","for"," "],"1885":["import","import","from",">>>","class","#","def","In"," ","for"],"1886":[">>>",">>>","import","class","def","from","#","In"," ","for"],"1887":["import","import","from",">>>","def","class","#","In"," ","for"],"1888":[">>>",">>>","import","def","from","In","#","class","for"," "],"1889":["class","class","from","def","import",">>>","#","@"," ","In"],"1890":[">>>",">>>","def","import","In","from","#","for","class"," "],"1891":["import","import","from","class",">>>","def","#","In"," ","for"],"1892":["import","import","from","def",">>>","class","#","In"," ","for"],"1893":["import","import","def","class",">>>","from","#","In"," ","print"],"1894":["class","class","from","import","def","#",">>>"," ","@","In"],"1895":["import","import","from",">>>","class","def","#","In"," ","for"],"1896":[">>>",">>>","import","def","from","In","#","class","for"," "],"1897":[">>>",">>>","class","import","def","from","In","#"," ","for"],"1898":[">>>",">>>","def","class","import","from","In","#","for"," "],"1899":["import","import",">>>","from","def","class","#","In"," ","for"],"1900":["import","import",">>>","from","def","class","#","In"," ","for"],"1901":["import","import","from",">>>","In","def","#","class","for"," "],"1902":[">>>",">>>","import","def","from","In","#","class","for","with"],"1903":["import","import","from",">>>","In","def","#","class","for"," "],"1904":[">>>",">>>","import","def","In","from","#","print","class","if"],"1905":[">>>",">>>","import","In","def","from","#","class","df","for"],"1906":["class","class","from","import","def",">>>","In","#"," ","@"],"1907":[">>>",">>>","import","def","from","class","In","#","for"," "],"1908":["import","import","from",">>>","In","def","#","class","for","df"],"1909":[">>>",">>>","import","In","def","from","class","#"," ","for"],"1910":["import","import",">>>","from","def","class","#","In"," ","@"],"1911":["import","import",">>>","def","In","from","#","for","with","class"],"1912":["class","class",">>>","def","import","from","#","In"," ","@"],"1913":["import","import",">>>","In","from","def","#","class","df","for"],"1914":["import","import",">>>","from","In","def","class","#","for","df"],"1915":["import","import","from","class",">>>","def","#","In"," ","for"],"1916":[">>>",">>>","def","import","from","class","In","#","for"," "],"1917":[">>>",">>>","def","class","import","from","In","#"," ","for"],"1918":["import","import",">>>","from","def","#","class","for","In","with"],"1919":["import","import","from","class","def",">>>","#","In"," ","for"],"1920":["import","import","from",">>>","def","#","class","In"," ","for"],"1921":["class","class",">>>","def","import","from","#","In"," ","for"],"1922":[">>>",">>>","class","import","def","from","#","In"," ","print"],"1923":["class","class",">>>","def","import","from","#","In"," ","print"],"1924":[">>>",">>>","def","import","In","class","from","#","for","print"],"1925":["import","import",">>>","from","def","class","#","In"," ","for"],"1926":["import","import","from","def",">>>","class","#","In"," ","for"],"1927":["class","class","from","def",">>>","import","#","In"," ","for"],"1928":["In","In",">>>","import","def","df","from","#","class"," "],"1929":[">>>",">>>","def","import","class","from","In","#","if","for"],"1930":["import","import","from","class",">>>","#","def","In"," ","$"],"1931":[">>>",">>>","import","def","from","class","In","#","for"," "],"1932":["import","import",">>>","def","from","#","class","In","with","for"],"1933":[">>>",">>>","import","def","from","In","#","class","for"," "],"1934":[">>>",">>>","import","def","from","#","class","In"," ","if"],"1935":[">>>",">>>","import","In","def","from","#","class","for"," "],"1936":["class","class",">>>","from","def","import","#"," ","@","In"],"1937":[">>>",">>>","def","import","class","In","from","#"," ","for"],"1938":[">>>",">>>","import","def","In","class","from","#","for"," "],"1939":["class","class","from","def",">>>","import","In","#"," ","{"],"1940":[">>>",">>>","import","def","from","In","#","class","for"," "],"1941":["class","class",">>>","import","from","def","In","#"," ","for"],"1942":["import","import",">>>","from","def","class","#","In"," ","for"],"1943":["class","class",">>>","def","from","import","#","In"," ","for"],"1944":["import","import","class","from",">>>","def","#"," ","In","@"],"1945":[">>>",">>>","class","from","def","import","#","In"," ","for"],"1946":["import","import","from","class",">>>","def","In","#"," ","for"],"1947":["import","import",">>>","from","In","def","#","class","for","df"],"1948":[">>>",">>>","import","def","In","from","class","#","for"," "],"1949":[">>>",">>>","import","from","def","#","In","class"," ","for"],"1950":["import","import",">>>","In","from","def","#","class","for","df"],"1951":["import","import",">>>","def","from","class","#","In","for","with"],"1952":["import","import","from",">>>","class","def","#","In"," ","@"],"1953":[">>>",">>>","import","def","from","In","#","class","if"," "],"1954":[">>>",">>>","from","def","class","import","In","#"," ","for"],"1955":[">>>",">>>","import","def","from","#","class","In"," ","for"],"1956":[">>>",">>>","import","def","from","In","#","class","for"," "],"1957":["import","import","from",">>>","def","class","#","In"," ","for"],"1958":[">>>",">>>","import","def","from","In","#","class","for"," "],"1959":["import","import",">>>","from","def","In","class","#","for"," "],"1960":["import","import","from","class","def",">>>","#"," ","In","@"],"1961":["import","import","class",">>>","from","def","In","#"," ","for"],"1962":["class","class",">>>","def","import","from","#","In"," ","@"],"1963":[">>>",">>>","In","def","import","from","#","class","for","if"],"1964":[">>>",">>>","import","def","from","#","In","class","for","with"],"1965":[">>>",">>>","def","import","from","In","class","#","for"," "],"1966":["import","import",">>>","from","def","In","#","class","for"," "],"1967":[">>>",">>>","import","def","from","In","class","#","for"," "],"1968":[">>>",">>>","import","def","class","from","In","#","for"," "],"1969":["class","class","def","from","import",">>>","#"," ","In","@"],"1970":[">>>",">>>","import","In","def","from","#","class","for","print"],"1971":["import","import","from","class",">>>","def","#","In"," ","for"],"1972":[">>>",">>>","import","def","from","#","In","class","print"," "],"1973":[">>>",">>>","import","In","from","def","#","class","for","df"],"1974":["import","import",">>>","def","from","class","#","In","for"," "],"1975":["import","import",">>>","from","def","#","In","class","for"," "],"1976":["import","import","from",">>>","In","def","#","class","for","df"],"1977":[">>>",">>>","import","def","from","class","#","In"," ","for"],"1978":["import","import","from",">>>","#","def","In","class"," ","for"],"1979":["class","class",">>>","import","def","from","In","#"," ","for"],"1980":[">>>",">>>","import","def","from","class","#","In"," ","for"],"1981":["import","import",">>>","class","def","from","#","In"," ","print"],"1982":["class","class","def",">>>","import","from","#","In","@"," "],"1983":["import","import",">>>","def","from","class","#","In"," ","for"],"1984":["import","import","from","class","def","#",">>>"," ","In","@"],"1985":[">>>",">>>","def","import","In","from","#","class","for"," "],"1986":["import","import","class","from","def",">>>","#"," ","@","In"],"1987":[">>>",">>>","In","import","def","from","#","class","for","print"],"1988":["import","import",">>>","def","class","from","#","In"," ","print"],"1989":["import","import","from",">>>","class","def","#","In"," ","for"],"1990":[">>>",">>>","import","from","def","class","In","#","for"," "],"1991":[">>>",">>>","def","import","class","from","In","#","for"," "],"1992":[">>>",">>>","class","import","def","from","In","#"," ","for"],"1993":[">>>",">>>","def","import","from","class","In","#","for"," "],"1994":[">>>",">>>","import","def","In","from","#","class","for"," "],"1995":["import","import",">>>","from","class","def","#"," ","In","@"],"1996":[">>>",">>>","import","def","In","from","#","class","for","print"],"1997":[">>>",">>>","class","def","import","from","In","#"," ","for"],"1998":["import","import","class","from","def",">>>","#","In"," ","for"],"1999":["import","import",">>>","from","def","class","#","In"," ","for"],"2000":[">>>",">>>","import","def","In","from","#","class","for","print"],"2001":["import","import","from",">>>","def","#","class","In","for"," "],"2002":["import","import",">>>","from","class","def","In","#"," ","for"],"2003":[">>>",">>>","import","def","class","from","#","In","print"," "],"2004":["class","class","from","def",">>>","import","#","In"," ","for"],"2005":["import","import",">>>","from","def","class","#","In"," ","for"],"2006":["import","import",">>>","In","from","def","#","class","for","df"],"2007":["class","class","def",">>>","import","from","#","@","In"," "],"2008":[">>>",">>>","import","def","from","class","#","In"," ","for"],"2009":["class","class",">>>","def","import","from","#","In"," ","print"],"2010":[">>>",">>>","In","import","def","from","#","df","class","for"],"2011":["import","import",">>>","In","from","def","#","class","df","for"],"2012":["import","import","from",">>>","class","#","def","In"," ","for"],"2013":["import","import",">>>","def","from","#","In","class","for","with"],"2014":["import","import",">>>","def","from","#","class","In","for"," "],"2015":[">>>",">>>","import","def","In","from","#","class","for","print"],"2016":["import","import",">>>","from","In","def","#","class","for","df"],"2017":["class","class","from",">>>","def","import","In","#"," ","for"],"2018":[">>>",">>>","import","def","from","In","class","#","for"," "],"2019":[">>>",">>>","import","def","from","In","class","#","for"," "],"2020":[">>>",">>>","import","def","from","In","class","#","for"," "],"2021":["import","import","from","class","def","#",">>>","In"," ","for"],"2022":["import","import",">>>","from","In","def","class","#","for"," "],"2023":[">>>",">>>","def","import","In","from","class","#","for"," "],"2024":["import","import","from","class",">>>","def","#","In"," ","for"],"2025":["import","import",">>>","from","def","class","#","In"," ","for"],"2026":["import","import","from",">>>","def","In","#","class","for"," "],"2027":["import","import","from",">>>","def","class","#","In","for"," "],"2028":[">>>",">>>","import","from","def","class","#","In","for"," "],"2029":[">>>",">>>","import","def","from","In","#","class","for"," "],"2030":["import","import",">>>","from","def","#","class","In","for"," "],"2031":["import","import",">>>","from","def","class","#","In"," ","for"],"2032":[">>>",">>>","import","def","from","#","In","class","for","with"],"2033":[">>>",">>>","def","import","class","from","In","#","for"," "],"2034":[">>>",">>>","import","def","from","In","#","class","for"," "],"2035":[">>>",">>>","def","class","import","from","#","In","for"," "],"2036":[">>>",">>>","import","def","In","from","#","class","for","print"],"2037":[">>>",">>>","import","def","from","class","In","#","for"," "],"2038":["import","import","from",">>>","class","#","In","def"," ","for"],"2039":[">>>",">>>","import","from","def","#","class","In"," ","for"],"2040":["import","import","from",">>>","class","def","#","In"," ","for"],"2041":[">>>",">>>","In","import","def","df","from","#","class","for"],"2042":["class","class",">>>","import","def","from","#","In"," ","print"],"2043":[">>>",">>>","import","from","class","def","#","In","for"," "],"2044":[">>>",">>>","import","In","def","from","#","class","for","print"],"2045":[">>>",">>>","import","def","In","from","#","class","for","print"],"2046":["import","import",">>>","from","class","def","In","#","for"," "],"2047":[">>>",">>>","class","def","import","from","In","#","if","for"],"2048":["class","class","from","import",">>>","def","#"," ","In","<"],"2049":[">>>",">>>","def","import","In","from","class","#","if","for"],"2050":[">>>",">>>","import","def","In","from","#","class","for","print"],"2051":[">>>",">>>","import","def","from","In","#","class","for"," "],"2052":[">>>",">>>","import","def","from","In","#","class","for"," "],"2053":[">>>",">>>","import","In","def","from","#","class","for","print"],"2054":["import","import",">>>","class","from","def","#","In"," ","for"],"2055":["import","import",">>>","from","def","In","#","class","for","with"],"2056":["import","import","from","In",">>>","def","#","class","df","for"],"2057":[">>>",">>>","import","def","from","#","In","class"," ","for"],"2058":["import","import","from","class",">>>","def","#","In"," ","for"],"2059":[">>>",">>>","class","import","from","def","In","#"," ","for"],"2060":[">>>",">>>","import","from","class","def","#","In","for"," "],"2061":["class","class","import","def",">>>","from","#","In","@"," "],"2062":[">>>",">>>","import","def","from","class","#","In"," ","for"],"2063":["import","import","from",">>>","def","class","#","In","for"," "],"2064":[">>>",">>>","def","import","In","from","#","class","print","for"],"2065":[">>>",">>>","import","def","from","In","#","class","for"," "],"2066":[">>>",">>>","import","def","from","In","#","class","for"," "],"2067":["import","import","from",">>>","In","#","def","class","for"," "],"2068":["import","import",">>>","from","def","#","class","In"," ","for"],"2069":["import","import","class","from","def",">>>","#","In"," ","@"],"2070":["import","import","class","from",">>>","def","#"," ","In","@"],"2071":["class","class",">>>","from","def","import","#"," ","<","{"],"2072":[">>>",">>>","import","from","def","class","#","In"," ","for"],"2073":[">>>",">>>","import","def","from","In","#","class","for","with"],"2074":["import","import",">>>","from","def","In","#","class","for"," "],"2075":[">>>",">>>","import","In","def","from","#","class","for"," "],"2076":["import","import",">>>","from","class","def","In","#"," ","for"],"2077":["import","import","from",">>>","def","#","class","In","for"," "],"2078":["class","class","def","from","import",">>>","#"," ","@","In"],"2079":[">>>",">>>","class","def","import","from","In","#"," ","for"],"2080":["import","import",">>>","from","class","def","#","In"," ","$"],"2081":["import","import",">>>","from","def","#","class","In"," ","for"],"2082":[">>>",">>>","import","In","def","from","#","class","for","df"],"2083":["import","import","class",">>>","def","from","#","In","with","@"],"2084":[">>>",">>>","import","def","from","class","#","In"," ","for"],"2085":["import","import","from",">>>","class","def","#","In"," ","for"],"2086":[">>>",">>>","import","def","In","from","class","#","for"," "],"2087":["import","import",">>>","from","def","class","#","In","for"," "],"2088":[">>>",">>>","In","import","def","from","#","class","for","print"],"2089":["import","import",">>>","def","from","#","In","for","class","with"],"2090":["In","In",">>>","import","from","def","df","#","class","for"],"2091":[">>>",">>>","import","def","from","In","#","class","print","for"],"2092":["class","class",">>>","def","from","In","import","#"," ","for"],"2093":[">>>",">>>","def","import","In","from","#","class","for","print"],"2094":[">>>",">>>","def","import","In","from","class","#","for"," "],"2095":["import","import",">>>","from","In","def","#","class","for","df"],"2096":["In","In",">>>","import","def","from","df","#","class"," "],"2097":[">>>",">>>","import","def","class","from","#","In","for"," "],"2098":[">>>",">>>","import","from","def","#","class","In"," ","for"],"2099":["import","import",">>>","from","def","class","#","In"," ","for"],"2100":["import","import",">>>","from","class","def","#","In"," ","for"],"2101":[">>>",">>>","import","In","def","from","class","#"," ","for"],"2102":[">>>",">>>","import","def","In","from","#","class","for"," "],"2103":["import","import","from","class","def",">>>","#","In"," ","for"],"2104":["import","import",">>>","def","from","#","class","In","for"," "],"2105":["import","import",">>>","def","In","from","#","class","for"," "],"2106":["import","import","from","class","def",">>>","#","In"," ","for"],"2107":["import","import",">>>","from","class","def","#","In"," ","if"],"2108":["class","class",">>>","def","import","from","#","In"," ","@"],"2109":["import","import","from",">>>","def","class","#","In"," ","for"],"2110":[">>>",">>>","import","from","def","class","In","#","for"," "],"2111":[">>>",">>>","import","def","In","from","#","class","for","print"],"2112":[">>>",">>>","import","def","from","class","In","#","for"," "],"2113":["import","import","from",">>>","class","def","In","#"," ","for"],"2114":["import","import","from",">>>","class","#","def","In"," ","$"],"2115":["import","import","from",">>>","class","def","In","#"," ","for"],"2116":["import","import","from",">>>","def","#","In","class","for"," "],"2117":["import","import","from","class","def",">>>","#","In"," ","for"],"2118":["import","import",">>>","In","from","def","#","class","for","df"],"2119":["import","import",">>>","from","class","def","In","#"," ","for"],"2120":["import","import",">>>","from","def","class","#","In","for"," "],"2121":[">>>",">>>","import","def","from","#","In","class","for"," "],"2122":["import","import",">>>","from","class","def","#","In"," ","for"],"2123":["import","import","from","class",">>>","def","#","In"," ","if"],"2124":[">>>",">>>","import","def","from","In","#","class"," ","for"],"2125":["import","import",">>>","from","In","def","#","class","for","with"],"2126":[">>>",">>>","import","class","def","from","In","#"," ","for"],"2127":["import","import","from","class",">>>","def","#","In"," ","for"],"2128":["import","import",">>>","from","def","In","#","class","for"," "],"2129":[">>>",">>>","class","import","from","def","#","In"," ","for"],"2130":["import","import","from",">>>","class","def","#","In"," ","if"],"2131":["class","class","from","def","import",">>>","#"," ","@","In"],"2132":[">>>",">>>","import","def","#","from","In"," ","for","class"],"2133":[">>>",">>>","import","def","from","class","#","In","for"," "],"2134":[">>>",">>>","import","def","from","class","In","#","for"," "],"2135":["class","class","import","from","def",">>>","#","In"," ","@"],"2136":["import","import",">>>","from","def","class","#","In","for"," "],"2137":["In","In",">>>","import","from","df","def","#","class"," "],"2138":[">>>",">>>","import","def","from","#","class","In"," ","for"],"2139":[">>>",">>>","import","def","from","class","#","In","for"," "],"2140":["class","class","from","import","def",">>>","#"," ","@","$"],"2141":["import","import",">>>","from","In","def","#","class","for"," "],"2142":["import","import",">>>","def","from","In","#","class","for"," "],"2143":[">>>",">>>","import","def","class","from","#","In"," ","for"],"2144":[">>>",">>>","import","def","from","In","class","#"," ","for"],"2145":["import","import",">>>","from","def","#","In","class","for","with"],"2146":["import","import",">>>","In","from","def","#","class","for","df"],"2147":[">>>",">>>","import","def","In","from","#","class","for","print"],"2148":["import","import","from","class",">>>","def","#","In"," ","for"],"2149":["import","import",">>>","from","def","#","In","for","with","class"],"2150":["from","from","import","class",">>>","def","In","#"," ","for"],"2151":["import","import","from",">>>","def","class","#","In"," ","for"],"2152":[">>>",">>>","def","import","from","class","In","#","for"," "],"2153":[">>>",">>>","import","def","In","from","class","#","for"," "],"2154":[">>>",">>>","def","import","class","from","In","#","for"," "],"2155":[">>>",">>>","import","def","from","In","class","#","for"," "],"2156":["import","import",">>>","from","class","def","#"," ","In","$"],"2157":["import","import","from","def",">>>","class","#","In"," ","for"],"2158":[">>>",">>>","import","def","In","from","#","class","for","print"],"2159":[">>>",">>>","import","def","In","from","class","#"," ","for"],"2160":["import","import",">>>","from","#","In","class","def"," ","for"],"2161":[">>>",">>>","In","import","def","from","#","class","for","print"],"2162":["class","class","import","from","def",">>>","#","@"," ","In"],"2163":[">>>",">>>","import","from","def","In","class","#","for"," "],"2164":["import","import",">>>","from","def","#","class","In","for"," "],"2165":["import","import","from","class","def",">>>","#","In"," ","for"],"2166":["class","class","from",">>>","import","def","In","#"," ","@"],"2167":[">>>",">>>","import","def","from","#","class","In","for"," "],"2168":[">>>",">>>","import","def","class","from","In","#","for"," "],"2169":[">>>",">>>","import","from","#","def","In","class"," ","for"],"2170":["import","import","from","class",">>>","def","#","In"," ","for"],"2171":["import","import","from",">>>","In","def","#","class","for","df"],"2172":[">>>",">>>","import","def","class","from","In","#","for"," "],"2173":["import","import",">>>","from","def","In","class","#","for"," "],"2174":["import","import",">>>","from","class","def","#","In"," ","for"],"2175":["class","class","from","def","import",">>>","#"," ","@","In"],"2176":["import","import","from",">>>","#","def","In","class","for"," "],"2177":[">>>",">>>","import","def","In","from","class","#","for"," "],"2178":[">>>",">>>","def","import","from","class","In","#","for"," "],"2179":["import","import",">>>","In","from","def","#","class","df"," "],"2180":[">>>",">>>","import","def","class","from","#","In"," ","if"],"2181":["class","class","import","from",">>>","def","#"," ","In","@"],"2182":["import","import",">>>","from","def","class","In","#","for"," "],"2183":[">>>",">>>","import","In","def","from","#","class","for","print"],"2184":["import","import",">>>","class","from","def","#","In"," ","for"],"2185":["class","class","def","from","import",">>>","#"," ","In","@"],"2186":["class","class","from","import","def",">>>","#"," ","@","In"],"2187":["import","import","class","from","def",">>>","#","In"," ","@"],"2188":["import","import",">>>","from","def","In","class","#","for"," "],"2189":[">>>",">>>","class","def","import","from","#","In"," ","print"],"2190":["class","class","def","from","import",">>>","#"," ","In","@"],"2191":["class","class","from","def","import",">>>","#"," ","@","In"],"2192":["import","import",">>>","from","def","class","#","In"," ","for"],"2193":["import","import","from",">>>","def","class","#","In"," ","for"],"2194":[">>>",">>>","import","def","In","from","class","#"," ","for"],"2195":["class","class","from","import",">>>","def","In","#"," ","@"],"2196":["import","import",">>>","from","def","In","class","#","for"," "],"2197":[">>>",">>>","class","def","import","from","In","#"," ","for"],"2198":["import","import",">>>","def","from","class","#","In"," ","for"],"2199":[">>>",">>>","import","from","In","def","#","class"," ","for"],"2200":[">>>",">>>","import","In","from","def","#","class","for"," "],"2201":["class","class",">>>","def","import","from","#","In","print"," "],"2202":["import","import","from","class",">>>","def","#"," ","In","@"],"2203":["import","import","from",">>>","def","In","#","class","for"," "],"2204":[">>>",">>>","import","def","from","#","In","class","for","with"],"2205":[">>>",">>>","import","from","def","class","In","#"," ","for"],"2206":[">>>",">>>","class","from","import","def","#","In"," ","for"],"2207":["import","import","from",">>>","In","def","#","class","for"," "],"2208":[">>>",">>>","import","def","from","#","class","In"," ","for"],"2209":[">>>",">>>","def","import","In","from","class","#","for","print"],"2210":[">>>",">>>","import","def","from","#","In","for","with"," "],"2211":["import","import","from","class",">>>","def","#"," ","@","In"],"2212":["import","import",">>>","class","def","from","In","#","for"," "],"2213":["import","import","class","from",">>>","def","#","In"," ","@"],"2214":[">>>",">>>","import","def","from","class","In","#","for"," "],"2215":[">>>",">>>","class","def","import","from","In","#","for"," "],"2216":["import","import",">>>","from","def","class","In","#"," ","for"],"2217":[">>>",">>>","import","def","from","#","In","class","for"," "],"2218":[">>>",">>>","import","def","In","from","class","#","for","print"],"2219":["class","class",">>>","def","import","from","In","#"," ","for"],"2220":["import","import","from","class",">>>","def","#"," ","In","@"],"2221":[">>>",">>>","from","In","import","def","class","#","for","if"],"2222":["import","import","from","class","def",">>>","#","In","for"," "],"2223":[">>>",">>>","import","def","from","In","#","print","for","class"],"2224":[">>>",">>>","import","from","def","In","class","#","for","if"],"2225":[">>>",">>>","import","from","def","#","In","class","with","for"],"2226":["import","import",">>>","from","#","In","def","class"," ","for"],"2227":["In","In","import",">>>","from","def","#","df","class"," "],"2228":[">>>",">>>","import","def","In","from","#","class","for","print"],"2229":["import","import",">>>","def","from","In","#","class","for","with"],"2230":[">>>",">>>","import","In","def","from","class","#","for","print"],"2231":["import","import","from","class",">>>","def","#","In"," ","@"],"2232":[">>>",">>>","import","from","def","#","In","class","for","with"],"2233":["class","class",">>>","import","def","from","#","In"," ","for"],"2234":["import","import","from",">>>","class","def","#"," ","In","@"],"2235":["import","import","from",">>>","class","def","#","In"," ","@"],"2236":["import","import",">>>","def","from","In","class","#","for"," "],"2237":[">>>",">>>","import","class","from","def","In","#"," ","for"],"2238":[">>>",">>>","import","def","from","In","#","class","for","print"],"2239":[">>>",">>>","import","def","class","from","In","#","for"," "],"2240":[">>>",">>>","def","class","import","from","#","In"," ","for"],"2241":[">>>",">>>","import","In","def","from","#","class","for","print"],"2242":[">>>",">>>","import","def","In","from","class","#","for"," "],"2243":[">>>",">>>","import","In","def","from","#","class","for","print"],"2244":[">>>",">>>","import","def","from","#","class","In"," ","for"],"2245":[">>>",">>>","import","from","def","class","#","In"," ","for"],"2246":["import","import",">>>","from","def","#","class","In"," ","for"],"2247":["import","import","from",">>>","def","#","class","In"," ","for"],"2248":["class","class","from","def",">>>","import","In","#"," ","for"],"2249":["import","import",">>>","from","def","class","#","In"," ","for"],"2250":[">>>",">>>","import","def","from","class","#","In"," ","for"],"2251":[">>>",">>>","def","import","In","from","class","#","for"," "],"2252":[">>>",">>>","import","def","from","#","In","class"," ","for"],"2253":["import","import","from","class","def","#",">>>","In"," ","for"],"2254":["import","import",">>>","from","class","def","#","In"," ","$"],"2255":["class","class","from","def","import",">>>","In","#"," ","@"],"2256":["import","import","from",">>>","In","def","#","class","for","df"],"2257":["import","import","from",">>>","class","def","In","#"," ","for"],"2258":[">>>",">>>","def","import","from","In","class","#","for"," "],"2259":[">>>",">>>","import","from","def","In","#","class","for","with"],"2260":[">>>",">>>","import","def","from","In","#","class","for"," "],"2261":["import","import",">>>","from","In","def","#","class","for"," "],"2262":[">>>",">>>","import","def","from","#","In","class","for","with"],"2263":["class","class","from","def","import",">>>","#"," ","@","In"],"2264":["import","import",">>>","def","from","#","class","for","if","In"],"2265":[">>>",">>>","def","import","class","from","In","#","for"," "],"2266":[">>>",">>>","def","import","In","from","class","#","if","for"],"2267":[">>>",">>>","import","def","from","class","#","In","for"," "],"2268":["class","class","from","import","def",">>>","#","@"," ","In"],"2269":["import","import",">>>","def","class","from","#","In"," ","print"],"2270":[">>>",">>>","import","def","from","In","class","#","for"," "],"2271":["import","import",">>>","from","class","In","def","#"," ","for"],"2272":["import","import","from","class",">>>","#","def","In"," ","for"],"2273":[">>>",">>>","import","from","class","def","#","In","for"," "],"2274":["import","import","In",">>>","from","def","#","class","df"," "],"2275":["class","class",">>>","import","def","from","#","In","for"," "],"2276":["import","import",">>>","from","class","def","#","In","for"," "],"2277":[">>>",">>>","import","def","from","class","In","#","for"," "],"2278":["class","class","from","def",">>>","import","In","#"," ","for"],"2279":[">>>",">>>","import","def","from","class","In","#","for"," "],"2280":[">>>",">>>","import","def","from","In","#","class","for","if"],"2281":["import","import","from",">>>","def","In","class","#","for"," "],"2282":[">>>",">>>","import","def","from","#","In","class"," ","for"],"2283":[">>>",">>>","import","def","class","from","#","In"," ","for"],"2284":["class","class","from",">>>","import","def","In","#"," ","for"],"2285":[">>>",">>>","class","def","import","from","#","In"," ","for"],"2286":["import","import","from","class","def",">>>","#","In"," ","for"],"2287":["class","class","from","import","def",">>>","#"," ","@","In"],"2288":[">>>",">>>","import","class","from","def","#","In"," ","for"],"2289":[">>>",">>>","import","def","from","In","#","for","with","class"],"2290":["class","class","from",">>>","import","def","In","#"," ","for"],"2291":[">>>",">>>","import","def","In","from","#","class","for","if"],"2292":["import","import","In",">>>","from","def","#","df","class","for"],"2293":["import","import",">>>","In","from","def","#","class","for","df"],"2294":["import","import",">>>","from","def","class","In","#","for"," "],"2295":["import","import","from","class",">>>","def","#","In"," ","$"],"2296":[">>>",">>>","import","def","In","class","from","#","for"," "],"2297":["In","In",">>>","import","def","from","df","#","class"," "],"2298":[">>>",">>>","import","In","def","from","#","class","for","print"],"2299":[">>>",">>>","import","def","from","class","In","#"," ","for"],"2300":[">>>",">>>","import","def","In","from","#","class","for"," "],"2301":["import","import",">>>","In","from","def","#","class","for","df"],"2302":[">>>",">>>","import","class","from","def","In","#"," ","for"],"2303":["import","import",">>>","from","def","class","#","In"," ","for"],"2304":["class","class","import","def","from",">>>","#","In"," ","@"],"2305":[">>>",">>>","import","def","from","In","#","class","for"," "],"2306":["import","import",">>>","from","def","class","In","#"," ","if"],"2307":[">>>",">>>","class","import","def","from","#","In"," ","print"],"2308":["import","import","class","from","def",">>>","#","In"," ","for"],"2309":[">>>",">>>","In","import","def","from","#","df","class"," "],"2310":[">>>",">>>","def","import","from","In","class","#","for"," "],"2311":[">>>",">>>","import","def","from","In","class","#","for"," "],"2312":[">>>",">>>","import","def","In","from","#","class","for"," "],"2313":[">>>",">>>","def","import","from","In","class","#","for"," "],"2314":["import","import",">>>","def","from","class","In","#"," ","for"],"2315":[">>>",">>>","import","def","class","from","In","#","for"," "],"2316":["In","In",">>>","import","def","from","#","df","class"," "],"2317":["import","import","from","class","def",">>>","#","In"," ","for"],"2318":["import","import","from",">>>","def","#","class","In"," ","for"],"2319":[">>>",">>>","def","import","class","from","In","#","for","if"],"2320":[">>>",">>>","def","import","from","class","In","#","for"," "],"2321":["class","class","from","def","import",">>>","#"," ","In","@"],"2322":[">>>",">>>","def","import","from","In","class","#","for"," "],"2323":["import","import","from","class",">>>","def","#","In"," ","for"],"2324":[">>>",">>>","import","from","def","In","#","class","if","for"],"2325":[">>>",">>>","import","def","from","#","class","In","for"," "],"2326":["class","class",">>>","def","import","from","In","#"," ","for"],"2327":["from","from","import","class",">>>","def","In","#"," ","for"],"2328":["import","import","from",">>>","def","class","#"," ","In","for"],"2329":[">>>",">>>","import","def","from","In","#","class","for","if"],"2330":["class","class","def","from","import",">>>","#","In"," ","@"],"2331":["import","import","In",">>>","from","def","#","class","df","for"],"2332":[">>>",">>>","def","import","class","In","from","#"," ","for"],"2333":["import","import",">>>","from","In","def","#","class","for"," "],"2334":["class","class","from","import",">>>","def","In","#"," ","for"],"2335":["import","import","from",">>>","In","def","#","class"," ","for"],"2336":["import","import","from",">>>","class","def","#"," ","@","In"],"2337":["import","import",">>>","def","from","In","#","class","for"," "],"2338":[">>>",">>>","import","In","def","from","#","class","for","print"],"2339":[">>>",">>>","import","from","def","In","#","class","print","for"],"2340":["class","class","from","import","def",">>>","#"," ","@","In"],"2341":["import","import","from",">>>","class","def","#","In"," ","for"],"2342":[">>>",">>>","import","def","from","In","class","#","for"," "],"2343":[">>>",">>>","import","from","In","def","#","class","for","print"],"2344":[">>>",">>>","def","import","In","from","#","class","print","for"],"2345":["import","import",">>>","from","class","#","def","In"," ","$"],"2346":["import","import",">>>","def","from","In","#","class","with","for"],"2347":[">>>",">>>","import","def","from","class","In","#","for"," "],"2348":["import","import","from",">>>","class","def","#","In"," ","for"],"2349":["class","class",">>>","import","def","from","#","In"," ","print"],"2350":["import","import",">>>","from","def","class","In","#","for"," "],"2351":["import","import",">>>","from","def","class","#","In"," ","if"],"2352":["class","class",">>>","def","import","from","#","In"," ","for"],"2353":["import","import",">>>","from","In","def","#","class","for","with"],"2354":[">>>",">>>","import","def","from","In","class","#","for"," "],"2355":["import","import",">>>","from","In","def","#","class","for","df"],"2356":["In","In",">>>","import","def","from","df","#","class","for"],"2357":["import","import",">>>","from","def","class","#","In"," ","for"],"2358":[">>>",">>>","def","import","In","from","#","class","print","for"],"2359":["import","import","class","from",">>>","def","#","In"," ","@"],"2360":["import","import","from",">>>","In","def","#","class","for","df"],"2361":["import","import",">>>","In","from","def","#","class","df","for"],"2362":["import","import",">>>","from","def","class","#","In"," ","for"],"2363":["class","class",">>>","import","def","from","#","In"," ","for"],"2364":[">>>",">>>","import","def","from","In","#","class","for"," "],"2365":["import","import",">>>","from","def","In","class","#"," ","for"],"2366":[">>>",">>>","import","class","from","def","#"," ","In","@"],"2367":["import","import","from",">>>","def","#","In","class"," ","for"],"2368":[">>>",">>>","In","import","def","from","#","class","for","print"],"2369":[">>>",">>>","import","def","In","from","class","#","for"," "],"2370":[">>>",">>>","import","def","from","In","class","#","for"," "],"2371":[">>>",">>>","In","import","def","from","df","#","class"," "],"2372":[">>>",">>>","import","def","In","from","class","#","for"," "],"2373":["class","class",">>>","def","import","from","In","#"," ","@"],"2374":["class","class",">>>","import","def","from","#","In"," ","for"],"2375":["import","import",">>>","def","In","from","#","class","for"," "],"2376":["import","import",">>>","from","def","In","#","for","class"," "],"2377":["import","import",">>>","from","def","class","#","In"," ","for"],"2378":["class","class","def","from","import",">>>","#","In"," ","for"],"2379":[">>>",">>>","import","def","class","from","#","In"," ","for"],"2380":["import","import","In",">>>","from","def","#","class","df","for"],"2381":["import","import","from",">>>","def","class","#","In"," ","$"],"2382":["class","class","from","def","import",">>>","In","#"," ","@"],"2383":[">>>",">>>","import","from","def","class","#"," ","In","for"],"2384":[">>>",">>>","In","import","def","from","class","#","df","for"],"2385":[">>>",">>>","import","def","class","from","#","In"," ","for"],"2386":["import","import","from",">>>","class","def","#","In"," ","for"],"2387":["import","import",">>>","class","from","def","#","In"," ","for"],"2388":[">>>",">>>","import","def","from","In","class","#","for"," "],"2389":["import","import",">>>","from","def","#","class","In"," ","for"],"2390":["import","import","from",">>>","class","def","#"," ","In","@"],"2391":["import","import","from",">>>","In","#","def","class","for"," "],"2392":["In","In",">>>","import","from","def","#","df","class","for"],"2393":["import","import","from","class","def",">>>","#","In"," ","for"],"2394":[">>>",">>>","import","def","from","#","In","class"," ","for"],"2395":["import","import",">>>","In","from","def","#","class","for","with"],"2396":["import","import",">>>","from","class","def","#","In","$"," "],"2397":[">>>",">>>","def","import","class","from","In","#","for"," "],"2398":["import","import","from","class","def",">>>","#","In","for"," "],"2399":[">>>",">>>","import","def","#","from","In"," ","for","print"],"2400":["import","import","def","from",">>>","class","In","#","for"," "],"2401":[">>>",">>>","import","In","def","from","class","#","for"," "],"2402":[">>>",">>>","import","In","from","def","#","class","for"," "],"2403":["import","import","from",">>>","def","class","#","In"," ","for"],"2404":[">>>",">>>","import","def","from","#","In","class"," ","for"],"2405":["import","import","from",">>>","def","#","In","class"," ","for"],"2406":["class","class","import","from",">>>","def","#"," ","In","@"],"2407":["import","import","from",">>>","def","#","In","class"," ","for"],"2408":["import","import",">>>","def","In","from","#","class","for"," "],"2409":["class","class","from","def","import",">>>"," ","#","In","@"],"2410":["import","import","from",">>>","def","class","#","In"," ","for"],"2411":["import","import","from",">>>","def","class","#","In","for"," "],"2412":["import","import","from","class",">>>","def","#","In"," ","for"],"2413":[">>>",">>>","class","def","import","from","In","#"," ","for"],"2414":["import","import",">>>","from","def","#","class","In"," ","for"],"2415":["import","import",">>>","class","from","def","#","In"," ","for"],"2416":["class","class","from","def","import",">>>","#"," ","@","In"],"2417":["import","import","In",">>>","from","def","#","class","df","for"],"2418":[">>>",">>>","import","from","In","def","#","class","if","for"],"2419":["class","class",">>>","def","import","from","#","In","for"," "],"2420":["class","class",">>>","def","import","from","In","#"," ","@"],"2421":["import","import","from",">>>","def","class","#","In","for"," "],"2422":["In","In",">>>","import","from","def","df","#","class","for"],"2423":["import","import",">>>","class","def","from","#","In"," ","$"],"2424":["class","class","import","from","def",">>>","#","In"," ","for"],"2425":[">>>",">>>","import","def","from","class","In","#"," ","for"],"2426":["import","import",">>>","class","from","def","#","In"," ","for"],"2427":[">>>",">>>","import","def","from","class","In","#","for"," "],"2428":["import","import","from","class","def",">>>","#","In"," ","for"],"2429":["class","class",">>>","import","def","from","#","In"," ","for"],"2430":["import","import","from",">>>","def","class","#","In"," ","for"],"2431":["import","import",">>>","from","class","def","In","#"," ","for"],"2432":[">>>",">>>","import","def","In","from","#","class","for"," "],"2433":[">>>",">>>","import","def","from","In","#","class","for"," "],"2434":[">>>",">>>","import","def","from","In","class","#","for"," "],"2435":["import","import",">>>","from","class","def","In","#"," ","for"],"2436":["import","import",">>>","class","def","from","#"," ","In","@"],"2437":["import","import",">>>","from","def","class","#","In"," ","print"],"2438":["class","class","import","from","def",">>>","#","In"," ","for"],"2439":["import","import","class",">>>","from","def","#"," ","In","for"],"2440":[">>>",">>>","import","def","from","In","#","class","for"," "],"2441":["class","class","from","import","def",">>>","In","#"," ","@"],"2442":["import","import","from","class",">>>","def","#","In"," ","for"],"2443":[">>>",">>>","import","def","In","from","class","#","for"," "],"2444":[">>>",">>>","def","import","from","In","class","#","for"," "],"2445":["import","import",">>>","from","def","In","#","class","for"," "],"2446":["import","import","from",">>>","class","def","#"," ","In","for"],"2447":["import","import",">>>","from","class","def","In","#","for"," "],"2448":[">>>",">>>","import","def","class","from","#","In"," ","for"],"2449":["import","import",">>>","from","def","#","In","class","for"," "],"2450":["class","class","import","from","def",">>>","#"," ","@","In"],"2451":["import","import","from",">>>","def","class","In","#"," ","for"],"2452":[">>>",">>>","import","def","In","from","#","class","for","with"],"2453":["import","import","from","class","def",">>>","#","In"," ","for"],"2454":["class","class","def","from","import",">>>","#","In"," ","@"],"2455":["import","import",">>>","from","def","class","#","In"," ","for"],"2456":["import","import","from","def","class",">>>","#","In"," ","@"],"2457":[">>>",">>>","import","def","from","class","#","In","for"," "],"2458":["import","import",">>>","from","class","def","#"," ","In","@"],"2459":["import","import",">>>","from","class","def","#","In"," ","for"],"2460":["import","import","from","class",">>>","#","def","In"," ","for"],"2461":["class","class","from","def",">>>","import","In","#"," ","@"],"2462":["import","import",">>>","from","def","class","#","In"," ","$"],"2463":[">>>",">>>","def","import","from","In","class","#","for"," "],"2464":["import","import","In",">>>","from","def","#","class","df","for"],"2465":[">>>",">>>","def","import","class","from","In","#","for"," "],"2466":[">>>",">>>","import","from","def","class","In","#"," ","for"],"2467":["import","import","from",">>>","class","def","#","In"," ","for"],"2468":["class","class","from","import","def",">>>","#"," ","@","In"],"2469":["import","import","In",">>>","from","def","#","class","df","for"],"2470":["class","class","from","def","import",">>>","#","In"," ","for"],"2471":["import","import","from","def",">>>","class","#","In","for"," "],"2472":[">>>",">>>","In","import","def","from","#","class","for","print"],"2473":[">>>",">>>","import","def","from","In","class","#","for"," "],"2474":[">>>",">>>","import","def","#","In","from","print"," ","for"],"2475":[">>>",">>>","In","import","def","from","class","#","for","print"],"2476":["class","class","import","from",">>>","def","#"," ","In","@"],"2477":[">>>",">>>","import","def","from","In","#","for","class","if"],"2478":[">>>",">>>","In","import","def","from","#","class","for","print"],"2479":["import","import","from","class","def",">>>","#","In"," ","for"],"2480":[">>>",">>>","import","def","from","In","#","class","for","print"],"2481":["import","import",">>>","def","from","class","#","In"," ","print"],"2482":["import","import",">>>","from","class","def","#","In"," ","for"],"2483":[">>>",">>>","import","from","def","#","In","class"," ","for"],"2484":["import","import","from","class","def",">>>","#","In"," ","@"],"2485":[">>>",">>>","import","from","class","def","#","In"," ","for"],"2486":["import","import",">>>","from","In","def","#","class","for","df"],"2487":[">>>",">>>","def","import","from","In","class","#","for","print"],"2488":[">>>",">>>","def","import","In","from","class","#","if","for"],"2489":["import","import",">>>","class","def","from","In","#","for"," "],"2490":["import","import",">>>","class","def","from","#","In"," ","for"],"2491":["import","import",">>>","def","In","from","#","class","for","print"],"2492":[">>>",">>>","import","def","In","from","class","#","for"," "],"2493":[">>>",">>>","import","from","def","class","#","In"," ","for"],"2494":["import","import",">>>","from","def","#","class","In"," ","for"],"2495":["import","import","class",">>>","from","def","In","#"," ","for"],"2496":[">>>",">>>","def","import","In","from","class","#"," ","print"],"2497":[">>>",">>>","import","from","def","In","#","class"," ","for"],"2498":["In","In",">>>","import","def","from","df","#","class"," "],"2499":["import","import",">>>","In","from","def","#","class","for","df"]},"actual_codes":{"0":"import numpy as np\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.quiver((0,0), (0,0), (1,0), (1,3), units = 'xy', scale = 1)\nplt.axis('equal')\nplt.xticks(range(-5,6))\nplt.yticks(range(-5,6))\nplt.grid()\nplt.show()\n","1":"from twisted.python import log\nfrom twisted.internet import interfaces\nfrom zope.interface import implements\n\nclass FTPFile(object):\n    \"\"\"\n    A consumer for FTP input that writes data to a file.\n\n    @ivar filename: a filename to be opened for writing.\n    \"\"\"\n\n    implements(interfaces.IProtocol)\n\n    def __init__(self, filename):\n        self.fObj = None\n        self.filename = filename\n\n    def makeConnection(self,transport)\n        self.fObj = open(self.filename,'wb')\n        log.info('Opened %s for writing' % self.filename)\n\n    def connectionLost(self,reason):\n        self.fObj.close()\n        log.info('Closed %s' % self.filename)\n\n    def dataReceived(self, bytes):\n        self.fObj.write(bytes)\n","2":"from collections import Counter\n\ndef isValidWord(word, hand, wordList):\n    # Check for membership first and early out if fails\n    # Otherwise, see if the count of any letter in word exceeds that of the hand\n    return word in wordList and all(hand.get(let, -1) >= cnt for let, cnt in Counter(word).items())        \n","3":"new_data = data.filter(lambda x: x[1][0] == \"ABC\")\n","4":"from collections import OrderedDict\n\nanyname = OrderedDict()\n","5":"from numba import jit\n\n@jit(nopython=True)\ndef interpolate_numba(arr, no_data=-32768):\n    \"\"\"return array interpolated along time-axis to fill missing values\"\"\"\n    result = np.zeros_like(arr, dtype=np.int16)\n\n    for x in range(arr.shape[2]):\n        # slice along x axis\n        for y in range(arr.shape[1]):\n            # slice along y axis\n            for z in range(arr.shape[0]):\n                value = arr[z,y,x]\n                if z == 0:  # don't interpolate first value\n                    new_value = value\n                elif z == len(arr[:,0,0])-1:  # don't interpolate last value\n                    new_value = value\n\n                elif value == no_data:  # interpolate\n\n                    left = arr[z-1,y,x]\n                    right = arr[z+1,y,x]\n                    # look for valid neighbours\n                    if left != no_data and right != no_data:  # left and right are valid\n                        new_value = (left + right) \/ 2\n\n                    elif left == no_data and z == 1:  # boundary condition left\n                        new_value = value\n                    elif right == no_data and z == len(arr[:,0,0])-2:  # boundary condition right\n                        new_value = value\n\n                    elif left == no_data and right != no_data:  # take second neighbour to the left\n                        more_left = arr[z-2,y,x]\n                        if more_left == no_data:\n                            new_value = value\n                        else:\n                            new_value = (more_left + right) \/ 2\n\n                    elif left != no_data and right == no_data:  # take second neighbour to the right\n                        more_right = arr[z+2,y,x]\n                        if more_right == no_data:\n                            new_value = value\n                        else:\n                            new_value = (more_right + left) \/ 2\n\n                    elif left == no_data and right == no_data:  # take second neighbour on both sides\n                        more_left = arr[z-2,y,x]\n                        more_right = arr[z+2,y,x]\n                        if more_left != no_data and more_right != no_data:\n                            new_value = (more_left + more_right) \/ 2\n                        else:\n                            new_value = value\n                    else:\n                        new_value = value\n                else:\n                    new_value = value\n                result[z,y,x] = int(new_value)\n    return result\n","6":"from lxml import etree\n\ncontacts = etree.parse(open(\"1234.xml\"))\n\nfor c in contacts.xpath('\/\/contact'):\n    if c.xpath('\/name')[0].text == 'Johnny Appleseed':\n        c.xpath('\/phone')[0].text = NEW_PHONE_NUMBER\n\nprint >> open(\"1234.xml\", \"w\"), etree.tostring(contacts)\n","7":"import Tkinter as tk\n\nroot = tk.Tk()\n\ndef clicked(event):\n    var.set('Clicked the button')\n\ndef released(event):\n    var.set('Released the button')\n\nvar = tk.StringVar()\nvar.set('Nothing to see here')\nlabel = tk.Label(root, textvar=var)\nlabel.pack()\n\nbut = tk.Button(root, text='Button')\nbut.bind(\"<Button-1>\", clicked)\nbut.bind(\"<ButtonRelease-1>\", released)\nbut.pack()\n\nroot.mainloop()\n","8":"\"((\\s|^)#[A-Z']+\\b)\"\n","9":"import argparse\nimport sys\nimport copy\nimport os\n\ndef split_list(lst,condition):\n    current=[]\n    out=[current]\n    for arg in lst:\n        current.append(arg)\n        if(condition(arg)):\n            current=[]\n            out.append(current)\n\n    return out\n\n\nparser=argparse.ArgumentParser()\nparser.add_argument('-m',action='store')\nparser.add_argument('-r',default='0',action='store')\n#pieces=split_list(sys.argv[1:],os.path.isfile)\npieces=split_list(sys.argv[1:],lambda x: x in ('foo','bar','baz','quux'))\noptions={} #use collections.OrderedDict if order matters -- or some more suitable data structure.\ndefault=argparse.Namespace()\nfor args in pieces:\n    if(not args):\n        continue\n    ns=copy.deepcopy(default)\n    default=parser.parse_args(args[:-1],namespace=ns)\n    options[args[-1]]=default\n\nprint (options)\n","10":"from commands.shVersionCmd import shVersionCmd\nfrom commands.shVRFCmd import shVRFCmd\n\n# An explicit list of allowed commands to prevent malicious activity.\ncommands = ['shVersionCmd', 'shVRFCmd']\n\ndef CommandFactory(commandnode):\n    cmd = commandnode.attrib['name']\n    if cmd in commands:\n        fn = globals()[cmd]\n        fn(commandnode)\n","11":"[report]\n\nexclude_lines =\n    if __name__ == .__main__.:\n","12":"df.groupby('product').apply(lambda x: np.std(x) \/ np.mean(x))\n","13":"number &= ~0xf\n","14":"t1, t2 = datetime.time(...), datetime.time(...)\n\nt1_ms = (t1.hour*60*60 + t1.minute*60 + t1.second)*1000 + t1.microsecond\nt2_ms = (t2.hour*60*60 + t2.minute*60 + t2.second)*1000 + t2.microsecond\n\ndelta_ms = max([t1_ms, t2_ms]) - min([t1_ms, t2_ms])\n","15":"from google.appengine.api import images\n\n...\n\n@register.simple_tag\ndef media_file_url(file_obj):\n    try:\n        return images.get_serving_url(file_obj.file.blobstore_info)\n    except:\n        return None\n","16":">>> bla = re.compile(u'^[A-Za-z]{5}\\d{6}$')\n>>> bla.match('abcde123456').group()\n'abcde123456'\n","17":"class DeudaForm(forms.ModelForm):\n\n    class Meta:\n        model = Deuda\n        exclude = ('propietario',)\n\n    def __init__(self, propietario):\n        forms.ModelForm.__init__(self)\n        self.fields['adeudado'].queryset = User.objects.exclude(pk=d.propietario.pk)\n","18":"import scipy as sp\nimport scipy.integrate\n\nxp = sp.linspace(0, 1000, 1000)\nyp = sp.randn(1000)\n\ndatafunc = lambda x: sp.interp(x, xp, yp)\n\nsp.integrate.quad(datafunc, 3, 1000)\n","19":"# run your simulation like usual\nrunSimulation()\n\n#create a ordered grid of axes, not one in top of the others\naxcolor = 'lightgoldenrodyellow'\nfig = p.figure()\naxdata = p.subplot2grid((7,4),(0,0),colspan=4,rowspan=4)\naxpos = p.subplot2grid((7,4),(-2,0),colspan=4, axisbg=axcolor)\naxvel = p.subplot2grid((7,4),(-1,0),colspan=4, axisbg=axcolor)\n\n# create your plots in the global space.\n# you are going to reference these lines, so you need to make them visible\n# to the update functione, instead of creating them inside a function \n# (and thus losing them at the end of the function)\nx = range(width)\nlpos, = axdata.plot(x,yPosition,'r')\nlvel, = axdata.plot(x,yVelocity,'g')\nltarget, = axdata.plot(x,yTarget,'k')\nlforce, = axdata.plot(x,yForce,'b')\n\n# same as usual\nspos = Slider(axpos, 'Position Gain', 1.0, 20.0, valinit=1.5)\nsvel = Slider(axvel, 'Velocity Gain', 5.0, 500.0, valinit=60.0)\n\n\ndef update(val):\n    # you don't need to declare the variables global, as if you don't\n    # assign a value to them python will recognize them as global\n    # without problem\n    runSimulation(round(spos.val,2),round(svel.val,2))\n    lpos.set_ydata(yPosition)\n    lvel.set_ydata(yVelocity)\n    ltarget.set_ydata(yTarget)\n    lforce.set_ydata(yForce)\n    # you need to update only the canvas of the figure\n    fig.canvas.draw()\n\nspos.on_changed(update)\nsvel.on_changed(update)\np.show()\n","20":"x=np.arange(0.1,1.1,0.1)\narray([ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])\n\n# Bin size\nbins = np.arange(0.05, 1.15, 0.1)\nnp.histogram(x,bins=bins,normed=1)[0]\n[ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]\nnp.histogram(x,bins=bins,normed=0)[0]\/float(len(x))\n[ 0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1]\n\n# Change the bin size\nbins = np.arange(0.05, 1.15, 0.2)\nnp.histogram(x,bins=bins,normed=1)[0]\n[ 1.,  1.,  1.,  1.,  1.]\nnp.histogram(x,bins=bins,normed=0)[0]\/float(len(x))\n[ 0.2,  0.2,  0.2,  0.2,  0.2]\n","21":">>> dct = {'pasta': [1,2,3]}\n>>> x = 'pas' + 'ta'\n>>> dct[x]\n[1, 2, 3]\n","22":"{% load i18n %}\n<div class=\"inline-group\">\n  <div class=\"tabular inline-related {% if forloop.last %}last-related{% endif %}\">\n{{ inline_admin_formset.formset.management_form }}\n<fieldset class=\"module\">\n   <h2>{{ inline_admin_formset.opts.verbose_name_plural|capfirst }}<\/h2>\n   {{ inline_admin_formset.formset.non_form_errors }}\n   <table>\n     <thead><tr>\n     {% for field in inline_admin_formset.fields %}\n       {% if not field.is_hidden %}\n         <th {% if forloop.first %}colspan=\"2\"{% endif %}>{{ field.label|capfirst }}<\/th>\n        {% endif %}\n     {% endfor %}\n     {% if inline_admin_formset.formset.can_delete %}<th>{% trans \"Delete?\" %}<\/th>{% endif %}\n     <\/tr><\/thead>\n\n     <tbody>\n     {% for inline_admin_form in inline_admin_formset %}\n     {% if not inline_admin_form.original %}\n        {% if inline_admin_form.form.non_field_errors %}\n        <tr><td colspan=\"{{ inline_admin_form.field_count }}\">{{ inline_admin_form.form.non_field_errors }}<\/td><\/tr>\n        {% endif %}\n        <tr class=\"{% cycle row1,row2 %} {% if inline_admin_form.original or inline_admin_form.show_url %}has_original{% endif %}\">\n\n        <td class=\"original\">\n          {% if inline_admin_form.original or inline_admin_form.show_url %}<p>\n          {% if inline_admin_form.original %} {{ inline_admin_form.original }}{% endif %}\n          {% if inline_admin_form.show_url %}<a href=\"..\/..\/..\/r\/{{ inline_admin_form.original_content_type_id }}\/{{ inline_admin_form.original.id }}\/\">{% trans \"View on site\" %}<\/a>{% endif %}\n            <\/p>{% endif %}\n          {% if inline_admin_form.has_auto_field %}{{ inline_admin_form.pk_field.field }}{% endif %}\n          {{ inline_admin_form.fk_field.field }}\n          {% spaceless %}\n          {% for fieldset in inline_admin_form %}\n            {% for line in fieldset %}\n              {% for field in line %}\n                {% if field.is_hidden %} {{ field.field }} {% endif %}\n              {% endfor %}\n            {% endfor %}\n          {% endfor %}\n          {% endspaceless %}\n        <\/td>\n\n        {% for fieldset in inline_admin_form %}\n          {% for line in fieldset %}\n            {% for field in line %}\n              <td class=\"{{ field.field.name }}\">\n              {{ field.field.errors.as_ul }}\n              {{ field.field }}\n              <\/td>\n            {% endfor %}\n          {% endfor %}\n        {% endfor %}\n\n        {% if inline_admin_formset.formset.can_delete %}\n          <td class=\"delete\">{% if inline_admin_form.original %}{{ inline_admin_form.deletion_field.field }}{% endif %}<\/td>\n        {% endif %}\n\n        <\/tr>\n\n     {% endif %}\n     {% endfor %}\n     <\/tbody>\n   <\/table>\n\n<\/fieldset>\n  <\/div>\n\n  {# <ul class=\"tools\"> #}\n  {#   <li><a class=\"add\" href=\"\">Add another {{ inline_admin_formset.opts.verbose_name|title }}<\/a><\/li> #}\n  {# <\/ul> #}\n\n<\/div>\n","23":"if \"screen\" in y or \"display\" in y or \"crack\" in y or \"smash\" in y\n","24":"auth = tweepy.AppAuthHandler(token, secret)\napi = tweepy.API(auth)\n","25":"vel = [4, 3]\nlst = [[4, 5]  # changed this identifier. Don't shadow Python built-ins\n       [6, 4]\n       [7, 5]\n       [3, 4]]\n\nlst = [[vel[0]+sublst[0], vel[1]+sublst[1]] for sublst in lst]\n","26":"strings = [\"and\",\"the\",\"woah\"]\n#Get a null set to be filled in\nnew = [\"\" for x in range(max([len(m) for m in strings]))]\n#Cycle through new list\nfor index,item in enumerate(new):\n    for w in strings:\n        try: \n            item += w[index]\n            new[index] = item\n        except IndexError,err:\n            pass\nprint new\n","27":"In [136]:\ndf = pd.DataFrame({'a':['asdas','asdasdsadas','123124'],'b':['554653645','546456453634','uyiyasdhnfjnas']})\ndf\n\nOut[136]:\n             a               b\n0        asdas       554653645\n1  asdasdsadas    546456453634\n2       123124  uyiyasdhnfjnas\n\nIn [138]:    \ndf.apply(lambda x: x.str[:4])\n\nOut[138]:\n      a     b\n0  asda  5546\n1  asda  5464\n2  1231  uyiy\n","28":"# my_spider.py\nclass MySpider(CrawlSpider):\n    name = 'my_spider'\n    ...\n\n    def parse(self, response):\n        x = HtmlXPathSelector(response)\n\n        headings = x.select('\/\/h2\/text()').extract()\n        for h in headings:\n            item = MyDjangoItem()\n            item['name'] = h\n            yield item\n\n        url = 'http:\/\/example.com\/next'  # I have custom rules for constructing (not extracting) next url\n        yield Request(url, callback=self.parse)\n","29":"words = [ \"happy\", \"sad\", \"good\", \"bad\"]\nfor word in words:\n    if (\"happy\" in word.lower()):\n        print \"yes\"\n","30":"from collections import defaultdict\nhash = defaultdict(dict)\nhash[1][2] = 1\n","31":"#!\/bin\/bash\n\nexport PYTHONSTARTUP=\"$1\"      # Set the startup script python will run when it start.\nshift                          # Remove the first argument, don't want to pass that.\npython manage.py shell \"$@\"    # Run manage.py with the startup script. \n","32":"class CTabWidget(QTabWidget):\n    def __init__(self, parent=None):\n        super(CTabWidget, self).__init__(parent)\n        self.tabBar = CTabBar(self)\n        self.setTabBar(self.tabBar)\n        self.setTabPosition(QTabWidget.West)\n        self.tab1 = QWidget(self)\n        self.tab2 = QWidget(self)\n        self.addTab(self.tab1, \"Foo\")\n        self.addTab(self.tab2, \"Bar\")\n\nclass CTabBar(QTabBar):\n    def __init__(self, parent=None):\n        super(CTabBar, self).__init__(parent)\n        self.setMovable(True)\n\n    def mouseDoubleClickEvent(self, event):\n        print \"Change name\"\n","33":"uif = \"images\/userGray.png\"\nbif = \"images\/bg.jpg\"\ncif = \"images\/chair3.png\"\ni = 0\nplayerX = 1\nplayerY = 1\npX = 1\npY = 1\nbX = 0\nbY = 0\nmoveX = 0\nmoveY = 0\nwindowX = 640\nwindowY = 480\nlowerY = 1024\nlowerX = 1024\nbullets = []\nx = 0\ny = 0\nrotate = False\n\nobjects = []\n\nobjects.append([256,260,410,511])\n\nimport pygame, sys\nfrom pygame.locals import *\n\npygame.init()\n\nscreen = pygame.display.set_mode((640,480),0,32)\n\nbackground = pygame.image.load(bif).convert()\nuser = pygame.image.load(uif).convert_alpha()\nchair = pygame.image.load(cif).convert_alpha()\nchair1 = pygame.image.load(cif).convert_alpha()\n\npygame.time.set_timer(USEREVENT + 1, 100)\n\ndef shoot(inLoc, clLoc, weapon):\n    bulletId = len(bullets)\n    bullets[bulletId] = [inLoc, clLoc, 200, 3]\n\nmoveSpeed = .1\n\nwhile True:\n\n\n\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            pygame.quit()\n            sys.exit()\n        if event.type == USEREVENT + 1:\n            rotate = True;\n        if event.type == KEYDOWN:\n            if event.key == K_LEFT or event.key == K_a:\n                moveX = -1*moveSpeed\n            elif event.key == K_RIGHT or event.key == K_d:\n                moveX = moveSpeed\n            if event.key == K_DOWN or event.key == K_s:\n                moveY = moveSpeed\n            elif event.key == K_UP or event.key == K_w:\n                moveY = -1*moveSpeed\n        if event.type == KEYUP:\n            if event.key == K_LEFT or event.key == K_a or event.key == K_RIGHT or event.key == K_d:\n                moveX = 0\n            if event.key == K_DOWN or event.key == K_s or event.key == K_UP or event.key == K_w:\n                moveY = 0\n\n    dontMoveX = 0\n    dontMoveY = 0\n\n    for obj in objects:\n\n        if playerX + moveX > obj[0]-user.get_width() and playerX + moveX < obj[1] and playerY + moveY > obj[2]-user.get_height() and playerY + moveY < obj[3]:\n            if playerY + moveY == obj[2]-user.get_height()-1 or playerY + moveY == obj[3]+1:\n                dontMoveX = 0\n            else:\n                dontMoveX = 1\n\n        if playerX + moveX > obj[0]-user.get_width() and playerX + moveX < obj[1] and playerY + moveY > obj[2]-user.get_height() and playerY + moveY < obj[3]:\n            if playerX + moveX == obj[0]-user.get_width()-1 or playerX + moveX == obj[1]+1:\n                dontMoveY = 0\n            else:\n                dontMoveY = 1\n\n    if dontMoveX == 0:\n        playerX += moveX\n\n        if (playerX >= 0 and playerX <= windowX\/2) or (playerX >= lowerX-(windowX\/2) and playerX <= lowerX-user.get_width()):\n            pX+=moveX\n        if playerX > windowX\/2 and playerX < lowerX-(windowX\/2):\n            bX+=-1*moveX\n\n    if dontMoveY == 0:\n        playerY += moveY\n\n        if (playerY >= 0 and playerY <= windowY\/2) or (playerY >= lowerY-(windowY\/2) and playerY <= lowerY-user.get_width()):\n            pY+=moveY\n        if playerY > windowY\/2 and playerY < lowerY-(windowY\/2):\n            bY+=-1*moveY\n\n    screen.blit(background,(bX,bY))\n\n\n\n    screen.blit(user,(pX,pY))\n\n\n    pygame.mouse.set_visible(False);\n\n    if rotate == True:    \n\n        if i < 360:\n            i = i + 18\n        else:\n            i = 0\n\n        orig_chair_rect = chair.get_rect()\n        chair1 = pygame.transform.rotate(chair, i);\n        rot_chair_rect = orig_chair_rect.copy()\n        rot_chair_rect.center = chair1.get_rect().center\n        chair1 = chair1.subsurface(rot_chair_rect).copy()\n\n        rotate = False\n\n    x,y = pygame.mouse.get_pos()\n    x -= chair.get_width()\/2\n    y -= chair.get_height()\/2\n\n    screen.blit(chair1,(x,y))\n\n    pygame.display.update()\n","34":"import ProtoText\nprint person_obj['name']       # print out the person_obj.name \nperson_obj['name'] = 'David'   # set the attribute 'name' to 'David'\n# again set the attribute 'name' to 'David' but in batch mode\nperson_obj.update({'name': 'David'})\nprint ('name' in person_obj)  # print whether the 'name' attribute is set in person_obj \n# the 'in' operator is better than the google implementation HasField function \n# in the sense that it won't raise Exception even if the field is not defined  \n","35":"In [14]: var1, var2, var3 = (int(i) for i in a)\n\nIn [15]: var1, var2, var3\nOut[15]: (32132, 654654, 89765464)\n","36":"seen = dict()\nfor row in data:\n    n = seen.setdefault(row[0], 0)\n    if n < 2:\n        print row\n    seen[row[0]] += 1\n","37":">>> my_list = [1,2,3,4,5]\n>>> my_set = {*my_list}\n>>> my_set\n   {1, 2, 3, 4, 5}\n","38":"import numpy\nfrom scipy.signal import fftconvolve\n\ndef ssim(im1, im2, window, k=(0.01, 0.03), l=255):\n    \"\"\"See https:\/\/ece.uwaterloo.ca\/~z70wang\/research\/ssim\/\"\"\"\n    # Check if the window is smaller than the images.\n    for a, b in zip(window.shape, im1.shape):\n        if a > b:\n            return None, None\n    # Values in k must be positive according to the base implementation.\n    for ki in k:\n        if ki < 0:\n            return None, None\n\n    c1 = (k[0] * l) ** 2\n    c2 = (k[1] * l) ** 2\n    window = window\/numpy.sum(window)\n\n    mu1 = fftconvolve(im1, window, mode='valid')\n    mu2 = fftconvolve(im2, window, mode='valid')\n    mu1_sq = mu1 * mu1\n    mu2_sq = mu2 * mu2\n    mu1_mu2 = mu1 * mu2\n    sigma1_sq = fftconvolve(im1 * im1, window, mode='valid') - mu1_sq\n    sigma2_sq = fftconvolve(im2 * im2, window, mode='valid') - mu2_sq\n    sigma12 = fftconvolve(im1 * im2, window, mode='valid') - mu1_mu2\n\n    if c1 > 0 and c2 > 0:\n        num = (2 * mu1_mu2 + c1) * (2 * sigma12 + c2)\n        den = (mu1_sq + mu2_sq + c1) * (sigma1_sq + sigma2_sq + c2)\n        ssim_map = num \/ den\n    else:\n        num1 = 2 * mu1_mu2 + c1\n        num2 = 2 * sigma12 + c2\n        den1 = mu1_sq + mu2_sq + c1\n        den2 = sigma1_sq + sigma2_sq + c2\n        ssim_map = numpy.ones(numpy.shape(mu1))\n        index = (den1 * den2) > 0\n        ssim_map[index] = (num1[index] * num2[index]) \/ (den1[index] * den2[index])\n        index = (den1 != 0) & (den2 == 0)\n        ssim_map[index] = num1[index] \/ den1[index]\n\n    mssim = ssim_map.mean()\n    return mssim, ssim_map\n\n\ndef nrmse(im1, im2):\n    a, b = im1.shape\n    rmse = numpy.sqrt(numpy.sum((im2 - im1) ** 2) \/ float(a * b))\n    max_val = max(numpy.max(im1), numpy.max(im2))\n    min_val = min(numpy.min(im1), numpy.min(im2))\n    return 1 - (rmse \/ (max_val - min_val))\n\n\nif __name__ == \"__main__\":\n    import sys\n    from scipy.signal import gaussian\n    from PIL import Image\n\n    img1 = Image.open(sys.argv[1])\n    img2 = Image.open(sys.argv[2])\n\n    if img1.size != img2.size:\n        print \"Error: images size differ\"\n        raise SystemExit\n\n    # Create a 2d gaussian for the window parameter\n    win = numpy.array([gaussian(11, 1.5)])\n    win2d = win * (win.T)\n\n    num_metrics = 2\n    sim_index = [2 for _ in xrange(num_metrics)]\n    for band1, band2 in zip(img1.split(), img2.split()):\n        b1 = numpy.asarray(band1, dtype=numpy.double)\n        b2 = numpy.asarray(band2, dtype=numpy.double)\n        # SSIM\n        res, smap = ssim(b1, b2, win2d)\n\n        m = [res, nrmse(b1, b2)]\n        for i in xrange(num_metrics):\n            sim_index[i] = min(m[i], sim_index[i])\n\n    print \"Result:\", sim_index\n","39":"outp = fun()\n","40":">>> time = datetime.datetime.strptime(\"04:35:45\", \"%H:%M:%S\").time()\n>>> time\ndatetime.time(4, 35, 45)\n>>> day = datetime.datetime.now().date()\n>>> day\ndatetime.date(2016, 1, 6)\n>>> datetime.datetime.combine(day, time)\ndatetime.datetime(2016, 1, 6, 4, 35, 45)\n>>> \n","41":">>> from igraph import Graph\n>>> Graph.adhesion == Graph.edge_connectivity == Graph.edge_disjoint_paths\nTrue\n>>> Graph.cohesion == Graph.vertex_connectivity == Graph.vertex_disjoint_paths\nTrue\n","42":"Guess_Battleship_Board_Row = int(input(\"Guess the X coordinate:\")) - 1\nGuess_Battleship_Board_Column = int(input(\"Guess the Y coordinate:\")) - 1\n","43":"play = 'y'\nwhile play == 'y'\n\n    Do your game logic here\n\n    play = input('Would you like to play in-between [y|n]? ')\n","44":">>> l=re.split(r'[\\\\ ]+',path_options)\n>>> l=[' '.join(l[:-1]),l[-1]]\n>>> l\n['just a dir\/my script.sh', '--option']\n","45":"import numpy as np\nx = np.array([[10, 1], [2, 12], [3, 5]])\nmulti_cols = x[:,0] * x[:,1]\nprint x[multi_cols.argmin()]\n","46":">>> import numpy as np\n>>> x = np.array([1,2,3,4,5])\n>>> b = np.array([True,False,False,True,False]) # this is your boolean data array\n>>> markers_on = x[~b]\n>>> markers_on\narray([2, 3, 5])\n","47":"header_row = 0\n\n# build list of lists that represents row values in worksheet,\n# including column names from header row\nrows = [worksheet.row_values(row) for row in range(worksheet.nrows)]\n\n# extract list of column names to use for insert statement, values to be inserted remain\ncolumns = rows.pop(header_row)\n\ncnxn = pyodbc.connect(r\"DRIVER={SQL Server};SERVER=XXXXXXXXXX\\DEV_CON1;DATABASE=GGG;UID=AAA_dbo;PWD=XXXXXXXXX;\")\ncursor = cnxn.cursor()\n\n# list of column names used to build SQL statement, including parameter placeholders (?)\npopulate_db = \"insert into tblSnap_TEST ({}) values ({})\".format(', '.join(columns),\n                                                                 ', '.join('?' * len(columns)))\n\n# insert is executed once for each sequence of parameter values\ncursor.executemany(populate_db, rows)\ncnxn.commit()\ncnxn.close()\n","48":"x = numpy.arange(10)\ny = numpy.zeros(x.shape)\n\ny[1:] = x[1:] - x[:-1]\n\nprint y\n","49":">>> r = subprocess.getoutput(\"google-chrome-stable https:\/\/www.google.com\/\")\n>>> r\nCreated new window in existing browser session.'\n>>> \n","50":"import matplotlib.pyplot as plt\nimport numpy as np\n\ndef xticklabels_example():\n    fig = plt.figure() \n\n    x = np.arange(20)\n    y1 = np.cos(x)\n    y2 = (x**2)\n    y3 = (x**3)\n    yn = (y1,y2,y3)\n    COLORS = ('b','g','k')\n\n    for i,y in enumerate(yn):\n        ax = fig.add_subplot(len(yn),1,i+1)\n\n        ax.plot(x, y, ls='solid', color=COLORS[i]) \n\n        if i != len(yn) - 1:\n            # all but last \n            ax.set_xticklabels( () )\n        else:\n            for tick in ax.xaxis.get_major_ticks():\n                tick.label.set_fontsize(14) \n                # specify integer or one of preset strings, e.g.\n                #tick.label.set_fontsize('x-small') \n                tick.label.set_rotation('vertical')\n\n    fig.suptitle('Matplotlib xticklabels Example')\n    plt.show()\n\nif __name__ == '__main__':\n    xticklabels_example()\n","51":"In [2]: row = array([0,0,1,2,2,2])\n\nIn [3]: col = array([0,2,2,0,1,2])\n\nIn [4]: data = array([1,2,3,4,5,6])\n\nIn [5]: a = csr_matrix((data, (row, col)), shape=(3,3))\n\nIn [6]: a.A\nOut[6]: \narray([[1, 0, 2],\n       [0, 0, 3],\n       [4, 5, 6]])\n\nIn [7]: a.sum(axis=0)  # sum the columns\nOut[7]: matrix([[ 5,  5, 11]])\n\nIn [8]: a.sum(axis=1)  # sum the rows\nOut[8]: \nmatrix([[ 3],\n        [ 3],\n        [15]])\n","52":"class MyTestClass(unittest.TestCase):\n    def setUp(self):\n        self.my_obj = MyClass()\n        self.my_obj_mock = flexmock(self.my_obj)\n\n    def my_test_case(self):\n        self.my_obj_mock.should_receive('other_method').and_return(1).and_return(2).and_return(3)\n        self.my_obj.method_to_test()\n","53":"import csv\nfrom collections import defaultdict, Counter\nfrom datetime import datetime\nfrom urlparse import urlsplit\n\nindiv = Counter()\n\ndomains = defaultdict(lambda: defaultdict(int))\nwith open(\"history.csv\", \"rb\") as f:\n    for timestr, url in csv.reader(f):\n        dt = datetime.strptime(timestr, \"%Y-%m-%d %H:%M:%S\")\n        if 6 <= dt.hour < 11: # between 6am and 11am\n            today_domains = domains[dt.date()]\n            domain = urlsplit(url).hostname\n            if len(today_domains) < 5 and domain not in today_domains:\n                today_domains[domain] += 1\n                indiv += Counter([domain])\nfor domain in indiv:\n    print '%s,%d' % (domain, indiv[domain])\n","54":"class UserForm(ModelForm):\n    first_name = forms.CharField(label='Vorname')\n    # ...\n\n    class Meta:\n        model = User\n        fields = [\"first_name\", \"last_name\", \"username\", \"email\", \"password\"]\n","55":"In [33]: filename = \"sciPHOTOf105w0.fits\"\n\nIn [34]: filename.rpartition('.')[0]\nOut[34]: 'sciPHOTOf105w0'\n\nIn [35]: filename.rsplit('.', 1)[0]\nOut[35]: 'sciPHOTOf105w0'\n","56":"select = Select(driver.find_element_by_id(\"dropDown\"))\noptions = select.options\nfor index in range(0, len(options) - 1):\n    select.select_by_index(index)\n    # do stuff\n","57":"dat1.unstack().reset_index([\"foo\", \"bar\"], name=\"obs\")\n\n\n  foo bar       obs\n0   a   c  0.716688\n1   a   c  0.945587\n2   a   c  0.388928\n3   a   c  0.597745\n0   a   d  0.201622\n1   a   d  0.267941\n2   a   d  0.575878\n3   a   d  0.632626\n0   b   c  0.143869\n1   b   c  0.499576\n2   b   c  0.860764\n3   b   c  0.369183\n0   b   d  0.857490\n1   b   d  0.048870\n2   b   d  0.804838\n3   b   d  0.230868\n","58":"import itertools\nimport numpy as np\n\nmy_array = np.array([[0,1,2],[3,4,5],[6,7,8]])\n\nn = len(my_array)\n\nfor r in itertools.combinations(xrange(n), 2):\n    rows = np.array(r)\n    on = np.zeros(n, dtype=bool)\n    on[rows] = True\n    print my_array[on]\n    print my_array[~on]\n","59":"self.cursor.execute(\"INSERT INTO items (title, url) VALUES (%s, %s)\",\n                    (item['title'][0], item['link']))\n","60":"from subprocess import Popen, PIPE\n\np = Popen([\"\/path\/to\/FORTRAN\/program\"], stdin=PIPE,\n          bufsize=1, close_fds=True)\np.communicate(\"INPUT_FILE1\\r\\nINPUT_FILE2\")\nrc = p.returncode\n","61":">>> from django.template import Template, Context\n>>> t = Template('''\n...     {% for first in firstList %}\n...         {% for second in firstList %}\n...             {% if first == second %}\n...                 {{ first }}\n...             {% endif %}\n...         {% endfor %}\n...     {% endfor %}\n... ''')\n>>> t.render(Context({'firstList': ['foo', 'bar'], 'secondList': ['foo', 'bar']}))\nu'\\n    \\n        \\n            \\n                foo\\n            \\n        \\n            \\n        \\n    \\n        \\n            \\n        \\n            \\n                bar\\n            \\n        \\n    \\n'\n>>> print(t.render(Context({'firstList': ['foo', 'bar'], 'secondList': ['foo', 'bar']})))\n\n\n                foo\n\n\n\n                bar\n","62":"def strip_string(string, to_strip):\n    if to_strip:\n        while string.startswith(to_strip):\n            string = string[len(to_strip):]\n        while string.endswith(to_strip):\n            string = string[:-len(to_strip)]\n    return string\n","63":">>> import networkx as nx\n>>> net = nx.Graph()\n>>> net.add_edge(\"user_42\", \"user_9\", trust=9)\n>>> net.adj\n{'user_42': {'user_9': {'trust': 9}}, 'user_9': {'user_42': {'trust': 9}}}\n","64":"import re\n\nstrings = \"\"\"String1_Todelete_restofstring.txt\nString2_Alsotoremove_restofstring.txt\nString3_2013_restofstring.txt\nString4_2011_restofstring.txt\nString5_restofstring_tosuppress.txt\"\"\".split()\n\nkeywords = set((\"Todelete\", \"2013\",\"2011\", \"Alsotoremove\",\"tosuppress\"))\n\nfor s in strings:\n    print re.sub(\"_[^_.]+\", lambda m: \"\" if m.group(0)[1:] in keywords else m.group(0), s)\n","65":">>>urllib.urlencode({\"param\":\"val\", \"items\":[json.dumps(item) for item in items] }, True)\n","66":"def fib(n, r):\n    if n < 2:\n        r[0] = n\n    else:\n        r1 = [None]\n        r2 = [None]\n        # Start fib() threads that use r1 and r2 for results.\n        ...\n\n        # Sum the results of the threads.\n        r[0] = r1[0] + r2[0]\n\ndef FibonacciThreads(n):\n    r = [None]\n    fib(n, r)\n    return r[0]\n","67":"from libcpp.vector cimport vector                                                                                                                                                                          \n\n\nctypedef vector[int] int_vec                                                        \nctypedef vector[int_vec] int_vec_vec                                                \n\n\ndef test():                                                                         \n    cdef int_vec v                                                                  \n    v = int_vec(5)                                                                  \n\n    cdef int_vec_ve vv                                                              \n    vv = int_vec_vec(5, v)   \n","68":">>> re.search(\"brown fox\\W+(?:\\w+\\W+){1,4}lazy dog\", s)\n<_sre.SRE_Match at 0x3045850>\n\n>>> re.search(\"brown fox\\W+(?:\\w+\\W+){1,3}lazy dog\", s)\n<_sre.SRE_Match at 0x3045920>\n\n>>> re.search(\"brown fox\\W+(?:\\w+\\W+){1,2}lazy dog\", s)\n(None)\n","69":"class POINT(Structure):\n    _fields_ = [(\"x\", c_int),\n               (\"y\", c_int)]\n","70":">>> def test():\n...     return (1, 2)\n... \n>>> thing = test()\n>>> thing\n(1, 2)\n>>> type(thing)\n<type 'tuple'>\n>>> type(thing).__name__\n'tuple'\n","71":"def func():\n    im1 = Image.open(\"C:\\\\Users\\\\Poos\\\\Desktop\\\\G\\\\green_pixel.bmp\")\n    A = list(im1.getdata())\n\n    x = 0\n    y = 0\n\n    im2 = ImageGrab.grab()\n    B = list(im2.getdata())\n\n    for x in range(0,1024, 50):\n        for y in range(0,600, 20):\n        if(B != A):\n            im3 = im2.crop((x,y,x+1,y+1))\n            B = list(im3.getdata())\n            print(x, y)\n\n        else:\n            print(\"hooray!\")\n            return\n\n        return\n","72":"txt = open(\"C:\\\\user\\\\documents\\\\python\\\\ex15_sample.txt\")\n","73":">>> s = \"I am Enrolled in a course, 'MPhil' since 2014. I LOVE this 'SO MuCH'\"\n>>> re.sub(r\"\\b(?<!')(\\w+)(?!')\\b\", lambda match: match.group(1).lower(), s)\n\"i am enrolled in a course, 'MPhil' since 2014. i love this 'SO MuCH'\"\n","74":"from datetime import timedelta\n\ncreatedate_mongo += timedelta(days=1)\n","75":"def func1(a, b):\n    pass\n\ndef func2(a, b):\n    pass\n\ndef functionA(val1, val2, func):\n    func(val1, val2)\n\n# now call functionA passing in a function\nfunctionA(\"foo\", \"bar\", func1)\n","76":"for x in OrderedList:\n    if x in ResultList1:\n        print x, '1'\n        continue\n    if x in ResultList2:\n        print x, '2'\n        continue\n    if x in ResultList3:\n        print x, '3'\n        continue\n","77":"infoObject = pygame.display.Info()\npygame.display.set_mode((infoObject.current_w, infoObject.current_h))\n","78":"#!\/usr\/bin\/env python\nfrom itertools import combinations\n\nimport igraph\nimport optparse\n\nparser = optparse.OptionParser(usage=\"%prog [options] infile\")\nparser.add_option(\"-k\", metavar=\"K\", default=3, type=int,\n        help=\"use a clique size of K\")\n\noptions, args = parser.parse_args()\n\nif not args:\n    parser.error(\"Required input file as first argument\")\n\nk = options.k\ng = igraph.load(args[0], format=\"ncol\", directed=False)\ncls = map(set, g.maximal_cliques(min=k))\n\nedgelist = []\nfor i, j in combinations(range(len(cls)), 2):\n    if len(cls[i].intersection(cls[j])) >= k-1:\n        edgelist.append((i, j))\n\ncg = igraph.Graph(edgelist, directed=False)\nclusters = cg.clusters()\nfor cluster in clusters:\n    members = set()\n    for i in cluster:\n        members.update(cls[i])\n    print \"\\t\".join(g.vs[members][\"name\"])\n","79":"import urllib\nimport urllib2\n\nuri = 'http:\/\/legistar.council.nyc.gov\/Legislation.aspx'\n\n#the http headers are useful to simulate a particular browser (some sites deny\n#access to non-browsers (bots, etc.)\n#also needed to pass the content type. \nheaders = {\n    'HTTP_USER_AGENT': 'Mozilla\/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.13) Gecko\/2009073022 Firefox\/3.0.13',\n    'HTTP_ACCEPT': 'text\/html,application\/xhtml+xml,application\/xml; q=0.9,*\/*; q=0.8',\n    'Content-Type': 'application\/x-www-form-urlencoded'\n}\n\n# we group the form fields and their values in a list (any\n# iterable, actually) of name-value tuples.  This helps\n# with clarity and also makes it easy to later encoding of them.\n\nformFields = (\n   # the viewstate is actualy 800+ characters in length! I truncated it\n   # for this sample code.  It can be lifted from the first page\n   # obtained from the site.  It may be ok to hardcode this value, or\n   # it may have to be refreshed each time \/ each day, by essentially\n   # running an extra page request and parse, for this specific value.\n   (r'__VSTATE', r'7TzretNIlrZiKb7EOB3AQE ... ...2qd6g5xD8CGXm5EftXtNPt+H8B'),\n\n   # following are more of these ASP form fields\n   (r'__VIEWSTATE', r''),\n   (r'__EVENTVALIDATION', r'\/wEWDwL+raDpAgKnpt8nAs3q+pQOAs3q\/pQOAs3qgpUOAs3qhpUOAoPE36ANAve684YCAoOs79EIAoOs89EIAoOs99EIAoOs39EIAoOs49EIAoOs09EIAoSs99EI6IQ74SEV9n4XbtWm1rEbB6Ic3\/M='),\n   (r'ctl00_RadScriptManager1_HiddenField', ''), \n   (r'ctl00_tabTop_ClientState', ''), \n   (r'ctl00_ContentPlaceHolder1_menuMain_ClientState', ''),\n   (r'ctl00_ContentPlaceHolder1_gridMain_ClientState', ''),\n\n   #but then we come to fields of interest: the search\n   #criteria the collections to search from etc.\n                                                       # Check boxes  \n   (r'ctl00$ContentPlaceHolder1$chkOptions$0', 'on'),  # file number\n   (r'ctl00$ContentPlaceHolder1$chkOptions$1', 'on'),  # Legislative text\n   (r'ctl00$ContentPlaceHolder1$chkOptions$2', 'on'),  # attachement\n                                                       # etc. (not all listed)\n   (r'ctl00$ContentPlaceHolder1$txtSearch', 'york'),   # Search text\n   (r'ctl00$ContentPlaceHolder1$lstYears', 'All Years'),  # Years to include\n   (r'ctl00$ContentPlaceHolder1$lstTypeBasic', 'All Types'),  #types to include\n   (r'ctl00$ContentPlaceHolder1$btnSearch', 'Search Legislation')  # Search button itself\n)\n\n# these have to be encoded    \nencodedFields = urllib.urlencode(formFields)\n\nreq = urllib2.Request(uri, encodedFields, headers)\nf= urllib2.urlopen(req)     #that's the actual call to the http site.\n\n# *** here would normally be the in-memory parsing of f \n#     contents, but instead I store this to file\n#     this is useful during design, allowing to have a\n#     sample of what is to be parsed in a text editor, for analysis.\n\ntry:\n  fout = open('tmp.htm', 'w')\nexcept:\n  print('Could not open output file\\n')\n\nfout.writelines(f.readlines())\nfout.close()\n","80":"import sys\ndef Time_Function(i,rows,counter,start,var):\n\n    if  i==start or i% round(rows\/10) ==0 and counter <=100:\n        sys.stdout.write(str(counter))\n        counter=counter+10\n        var=0\n    if i% round((rows\/10)\/3) ==0 and counter <=100 and var<3:  \n        sys.stdout.write('.')\n        var=var+1\n    return [counter,var] \n\ndef Project(array,rows,cols):\n    counter=var=0\n    for i in range(0,rows):\n        for j in range(0,cols):\n            array=3 #just an arbitrary number\n        [counter,var]=Time_Function(i,rows,counter,0,var)\n\narray1=1\narray2=2\nProject(array1,2018,486)\nprint \"\\n\"\nProject(array2,2023,486)\n","81":"from sqlalchemy import Column, Boolean, Integer\n\ndef c_id():\n    return Column(Integer, primary_key=True)\n\ndef c_bool():\n    return Column(Boolean, nullable=False, default=False)\n\ndef c_string(len):\n    return Column(String(len), nullable=False, default='')\n\nclass Thing(Base):\n    id = c_id()\n    thing = c_bool()\n    tag = c_string(255)\n","82":">>> import time\n>>> time.mktime(time.strptime('02-12-2012', '%d-%m-%Y'))\n1354424400.0\n","83":"for line in ActiveFileR:\n    newline = line\n    for ReChr1 in CapAlphabet:\n        for ReChr2 in CapAlphabet:\n            newline = newline.replace(ReChr1 + ReChr2, ReChr1 + \" \" + ReChr2)\n    ActiveFileW.write(newline)\n","84":">>> np.column_stack((A[1:,:3],A[1:,4:]))\narray([[ 6,  7,  8, 10],\n       [11, 12, 13, 15],\n       [16, 17, 18, 20],\n       [21, 22, 23, 25]])\n","85":"first_set, second_set = {(\"A\", 23), (\"B\", 15)}, {(\"X\", 23), (\"B\", 42)}\n\n# Group items based on the first elements, as dictionaries\nd1, d2 = {}, {}\nfor item in first_set:\n    d1.setdefault(item[0], []).append(item)\nfor item in second_set:\n    d2.setdefault(item[0], []).append(item)\n\n# Merge the dictionaries to form a list of grouped items\ns = [d1.get(key, []) + d2.get(key, []) for key in d1.viewkeys() | d2]\n\n# Filter out all the groups if the length is lesser than 1\nprint [item for item in s if len(item) > 1]\n# [[('B', 15), ('B', 42)]]\n","86":"if len(x)==len(y):\n   return min(x,y)\n","87":"import numpy as np\nimport scipy.misc\n\na = np.random.uniform(0, 2**16 - 1, (500, 500)).astype('int32')\nimg = scipy.misc.toimage(a, high=np.max(a), low=np.min(a), mode='I')\nimg.save('my16bit.png')\n\n# check that you got the same values\nb = scipy.misc.imread('my16bit.png')\nb.dtype\n# dtype('int32')\nnp.array_equal(a, b)\n# True\n","88":"import numpy\nimport glob\n\nfor f in glob.glob(\"*.csv\"):\n    print f\n\n    r = numpy.recfromcsv(f)\n    print numpy.interp(5, r.depth, r.temp)\n","89":">>> import numpy\n>>> import numpy.random\n>>> x = numpy.random.rand(100, 3, 4)\n>>> mask = numpy.random.rand(*x.shape)\n>>> result = numpy.where(mask < 0.5, 0, x)\n","90":"with open(\"test.txt\") as file:\n    for line in file:\n        line = line.rstrip()\n        if line:\n            print line\n","91":"def route(route, method):\n    def decorator(f):\n        print 'decorator defined'\n        print 'defining route'\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            print 'Hello'\n            # do stuff here such as authenticate, authorise, check request json\/arguments etc.\n            # these will get passed along with the route and method arguments above.\n            return f(*args, **kwargs)\n\n        app.add_url_rule(route, methods=method, view_func=wrapper)\n        print 'route defined'\n        return wrapper\n    return decorator\n","92":"    self.qleTextBoxCam1Focus.editingFinished.connect(self.qleCam1Focus)\n","93":"import numpy as np\nA = np.array([[3,1,-1], [1,3,-1], [-1,-1,5]])\nw,v =  np.linalg.eig(A)\nprint w\nidx = w.argsort()[::-1] #large to small\n# idx = w.argsort() #small to large\nw = w[idx]\nv = v[:,idx]\nprint w # now they are ordered and you can iterate through your results to write them to your file\n","94":"all_interfaces_up() {\n    \/your\/code\/path\/codename.py\n    # return true if all interfaces listed in \/etc\/network\/interfaces as 'auto'\n    # are up.  if no interfaces are found there, then \"all [given] were up\"\n","95":"#!\/usr\/bin\/python\n\nimport cgi;\nimport codecs;\n\nform = cgi.FieldStorage()\nmy_a = form.getvalue(\"a\",\"\")\n\nwFile = codecs.open(\"test.txt\", \"w\", \"utf8\")\nwFile.write(my_a);\nwFile.close()\n\nprint(\"Content-Type: text\/plain\")\nprint(\"Location: ..\/plain.html\")\nprint()\n","96":"def backtracking(domains):\n    if any(len(dom) == 0 for var, dom in domains.iteritems()):\n        return None\n    if all(len(dom) == 1 for var, dom in domains.iteritems()):\n        return domains\n\n    # minimum remaining values heuristic: process variables with few possible\n    # values first (fail-first strategy)\n    order = sorted(domains.iteritems(), key=lambda (var, dom): len(dom))\n    for var, dom in order:\n        if len(dom) == 1:\n            continue\n\n        for value in list(dom):\n            doms = {v: d - {value} for v, d in domains.iteritems()\n                                   if v != var}\n            doms[var] = {value}\n\n            solution = backtracking(doms)\n            if solution is not None:\n                return solution\n\nprint(backtracking({v: set(d) for v, d in options.iteritems()}))\n","97":"import xml.etree.ElementTree as ET\n\ndef openEmptyXML():\n    doc = ET.parse(\"Automatimport.xml\")\n    for atc in doc.findall(\".\/\/ATC\"):   \n        versionname = atc.find(\"OriginalTestVersionName\") \n        tcName = versionname.text\n        if tcName == 'REQPROD 232 Read IO':\n            verdict1 = atc.find(\"Verdict\")\n            verdict2 = atc.find(\"Procedure\/Verdict\")\n            verdict3 = atc.find(\"Procedure\/Result\/Verdict\")\n            print tcName\n            print verdict1.text\n            print verdict2.text\n            print verdict3.text\n\nopenEmptyXML()\n","98":">>> test_out = [['I am monkey free.'], ['I explained my life free.']]\n>>> A = \"monkey free\"\n>>> replacement = \"xxxxxx\"\n>>> [[string.replace(A, replacement) for string in sublist] for sublist in test_out]\n[['I am xxxxxx.'], ['I explained my life free.']]\n","99":">>> import numpy as np\n>>> a = np.random.random(10)  # set up a random array to play with\n>>> a\narray([ 0.20291643,  0.89973074,  0.14291639,  0.53535553,  0.21801353,\n        0.05582776,  0.64301145,  0.56081956,  0.85771335,  0.6032354 ])\n>>>\n>>> b = np.array([0,5,6,9])  # indices we *don't want*\n>>> mask = np.ones(a.shape,dtype=bool)\n>>> mask[b] = False          # Converted to a mask array of indices we *do want*\n>>> mask\narray([False,  True,  True,  True,  True, False, False,  True,  True, False], dtype=bool)\n>>>\n>>> np.arange(a.shape[0])[mask]  #This gets you the indices that aren't in your original\narray([1, 2, 3, 4, 7, 8])\n>>> a[mask]  #This gets you the elements not in your original.\narray([ 0.89973074,  0.14291639,  0.53535553,  0.21801353,  0.56081956,\n        0.85771335])\n","100":"models.ForeignKey('DiscussionPost', null=True)\n","101":"import sys\n\ndef _call_for_all_streams(func_name):\n    def wrapper(self, *args, **kwargs):\n        result = []\n        for stream in self._streams:\n            func = getattr(stream, func_name)\n            result.append(func(*args, **kwargs))\n        return result\n    return wrapper\n\nclass OStreamWrapper(object):\n    def __init__(self, *streams):\n        self._streams = streams\n\nfor method in filter(lambda x: not x.startswith('_'), dir(file)):\n    setattr(OStreamWrapper, method, _call_for_all_streams(method))\n\nif __name__ == '__main__':\n    file1 = open(\"file1.txt\", \"w\")\n    file2 = open(\"file2.txt\", \"w\")\n    ostream = OStreamWrapper(file1, file2, sys.stdout)\n    ostream.write(\"ECHO!\")\n    ostream.close()\n","102":"import wx\nimport wx.stc as stc\nimport os\nimport platform\nimport time\nsystemType = platform.system()\nif systemType == \"Windows\":\n    import win32wnet\n\nclass MainWindow(wx.Frame):\n    def __init__(self, parent, id, title):\n\n        run_params = {}\n        self.run_params = run_params\n\n        # OS dependent info\n        self.run_params[\"systemType\"] = systemType\n        if systemType == \"Windows\":\n            self.run_params[\"fontSize\"] = 8\n            self.run_params[\"fontSize2\"] = 7\n        else:\n            self.run_params[\"fontSize\"] = 10\n            self.run_params[\"fontSize2\"] = 9\n\n        wx.Frame.__init__(self, parent, id, title, size=(900, 710), style=wx.DEFAULT_FRAME_STYLE & ~ (wx.RESIZE_BORDER | \n                                                wx.RESIZE_BOX | \n                                                wx.MAXIMIZE_BOX))\n\n        ##########################################################\n        # Passed self here and removed the unnecessary second self\n        ##########################################################\n        self.submissions = SubmissionPane(self, run_params) \n        self.CreateStatusBar()\n\n        menuBar = wx.MenuBar()\n\n        self.Centre()\n        self.Show()\n\nclass SubmissionPane(wx.Panel):\n    ################################################\n    # changed the init here\n    ################################################\n    def __init__(self, parent, run_params):\n        wx.Panel.__init__(self, parent)\n\n        self.parent = parent\n        self.selected_folders = None\n        self.params = run_params\n        ################################################\n        # changed the ref below\n        ################################################\n        self.frame = self  \n\n        main_sizer = wx.BoxSizer(wx.VERTICAL)\n        self.top_row_sizer = wx.BoxSizer(wx.HORIZONTAL);\n        radio_static_box = wx.StaticBox(self, label='Some Text')\n        radio_static_box_sizer = wx.StaticBoxSizer(radio_static_box, wx.HORIZONTAL)\n\n        job_static_box = wx.StaticBox(self, label='Some Text')\n        job_static_box_sizer = wx.StaticBoxSizer(job_static_box, wx.HORIZONTAL)\n\n        '''\n        radio_labels = ['Some Text', 'Some Text2']\n        self.radio_box = wx.RadioBox(\n                self, -1, \"\", \n                choices=radio_labels,\n        )\n        '''\n        self.radio1 = wx.RadioButton(self, label='Some Text', style=wx.RB_GROUP)\n        self.radio2 = wx.RadioButton(self, label='Some Text')\n        self.radio1.SetValue(True)\n\n        radio_static_box_sizer.Add(self.radio1, flag=wx.BOTTOM, border=0)\n        radio_static_box_sizer.Add(self.radio2, flag=wx.LEFT, border=10)\n        self.top_row_sizer.Add(radio_static_box_sizer, flag=wx.LEFT, border=10)\n\n        self.check_box = wx.CheckBox(self, label=\"Some Text\")\n        self.check_box.SetValue(False)\n\n        if self.params[\"systemType\"] == \"Windows\":\n            self.txtTitle = wx.TextCtrl(self, style=wx.SUNKEN_BORDER, value=\"Some Text...\", size=(200, -1), pos=(306, 14))\n        else:\n            self.txtTitle = wx.TextCtrl(self, style=wx.SUNKEN_BORDER, value=\"Some Text...\", size=(200, -1), pos=(350, 19))\n\n        job_static_box_sizer.Add(self.check_box, flag=wx.LEFT, border=0)\n\n        self.top_row_sizer.Add(job_static_box_sizer, flag=wx.LEFT, border=10);\n        self.txtTitle.Show(False)\n\n        main_sizer.Add(self.top_row_sizer);\n        main_sizer.Add((-1, 10))\n\n        job_static_box2 = wx.StaticBox(self, label='Some Text')\n\n        third_row_sizer = wx.StaticBoxSizer(job_static_box2, wx.HORIZONTAL);\n        self.tc_files = wx.TextCtrl(self, size=(375, 25))\n        self.buttonGo = wx.Button(self, label='Go')\n        self.buttonGo.Bind(wx.EVT_BUTTON, self.OnSubmit)\n        third_row_sizer.Add(self.tc_files, flag=wx.RIGHT, border=8)\n\n        if self.params[\"systemType\"] == \"Windows\":\n            third_row_sizer.Add(self.buttonGo, flag=wx.LEFT | wx.TOP, border=0)\n        else:\n            third_row_sizer.Add(self.buttonGo, flag=wx.LEFT | wx.TOP, border=2)\n\n        main_sizer.Add(third_row_sizer, flag=wx.LEFT, border=10)\n\n        self.log_text22 = wx.ListCtrl(self,size=(875,275),\n                         style=wx.LC_REPORT | wx.BORDER_SUNKEN | wx.LC_SINGLE_SEL | wx.LC_VRULES | wx.LC_HRULES)\n\n        font = wx.Font(self.params[\"fontSize2\"], wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)\n        self.log_text22.SetFont(font)\n\n        self.log_text22.InsertColumn(1, '1', width=40, format=wx.LIST_FORMAT_CENTRE)\n        self.log_text22.InsertColumn(2, '2', width=50, format=wx.LIST_FORMAT_CENTRE)\n        self.log_text22.InsertColumn(3, '3', width=156)\n        self.log_text22.InsertColumn(4, '4', width=332)\n        self.log_text22.InsertColumn(5, '5', width=100, format=wx.LIST_FORMAT_CENTRE)\n        self.log_text22.InsertColumn(6, '6', width=82, format=wx.LIST_FORMAT_CENTRE)\n        self.log_text22.InsertColumn(7, '7', width=60, format=wx.LIST_FORMAT_CENTRE)\n        self.log_text22.InsertColumn(8, '8', width=50, format=wx.LIST_FORMAT_CENTRE)\n\n        main_sizer.Add((-1, 10))\n        list_sizer = wx.BoxSizer(wx.VERTICAL)\n        list_sizer.Add(self.log_text22, flag=wx.LEFT, border=10)\n        main_sizer.Add(list_sizer)\n\n        self.running_log1 = wx.stc.StyledTextCtrl(self, -1, size=(875,175))\n        self.running_log1.StyleSetFont(wx.stc.STC_STYLE_DEFAULT, font)\n        self.running_log1.SetMarginWidth(1, 0)\n        self.running_log1.StyleSetBackground(wx.stc.STC_STYLE_DEFAULT, (0,0,0))\n        self.running_log1.StyleSetForeground(wx.stc.STC_STYLE_DEFAULT, (0,255,0))\n        self.running_log1.StyleClearAll()\n\n        main_sizer.Add((-1, 5))\n        list_sizer = wx.BoxSizer(wx.VERTICAL)\n        list_sizer.Add(self.running_log1, flag=wx.LEFT, border=10)\n        main_sizer.Add(list_sizer)\n\n        list_sizer.Add((-1, 10))\n        self.buttonClose = wx.Button(self, -1, \"Quit\")\n        list_sizer.Add(self.buttonClose, flag=wx.ALIGN_CENTER | wx.TOP | wx.LEFT, border=10)\n\n        self.SetBackgroundColour(\"Light Grey\")\n\n        self.SetSizer(main_sizer)\n\n        self.Layout()\n\n    def OnSubmit(self, event):\n        msg = \"Running\"\n        jobSubmitmsg = wx.BusyInfo(msg, self)\n        time.sleep(3)\n        jobSubmitmsg = None\n\napp = wx.App(redirect=False)\nMainWindow(None, -1, 'Application')\napp.MainLoop()\n","103":"from bs4 import BeautifulSoup\n\ndata = '''<html><body><table><tr><td>1562375XXXX<\/td><td>2 minutes ago<\/td><td class=\"span10\" style=\"word-wrap: break-word;\">1234567: hi honney, trust trying how to use globfone. glad u told me about this site. it will be<br \/>\nuseful to me in the future. \/check globfone.com<br \/><\/td><\/tr><\/table><\/body><\/table>'''\n\ndef grab_smss(soup):   # soup = the web page, parsed after applying\n    \"\"\"                # html_doc = html_doc.replace(\"\\n\", \"\")\n    Extracts SMSs from page, in form [From, Ago, Msg]\n    \"\"\"\n    sms_list = []\n    in_smss = False\n    [s.extract() for s in soup('br')]\n    for row in soup.body.table.find_all('tr'):\n        sms_row = [' '.join(unicode(subchild.string) for subchild in child) for child in row.children]\n        sms_list.append(sms_row)\n        if \"From Number\" in sms_row:\n            in_smss = True\n    return sms_list\n\n\nprint grab_smss(BeautifulSoup(data))\n","104":"import numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom multiprocessing import Process\nimport time # optional for testing only\nimport matplotlib.animation as animation\n\n# A. First we define some useful tools:\n\ndef wait_fig(): \n    # Block the execution of the code until the figure is closed.\n    # This works even with multiprocessing.\n    if matplotlib.pyplot.isinteractive():\n        matplotlib.pyplot.ioff() # this is necessary in mutliprocessing\n        matplotlib.pyplot.show(block=True)\n        matplotlib.pyplot.ion() # restitute the interractive state\n    else:\n        matplotlib.pyplot.show(block=True) \n\n    return    \n\n\ndef wait_anim(anim_flag, refresh_rate = 0.1):    \n    #This will be used in synergy with the animation class in the example\n    #below, whenever the user want the figure to close automatically just \n    #after the animation has ended.\n    #Note: this function uses the controversial event_loop of Matplotlib, but \n    #I see no other way to obtain the desired result.\n\n    while anim_flag[0]: #next code extracted from plt.pause(...)\n        backend = plt.rcParams['backend']\n        if backend in plt._interactive_bk:\n            figManager = plt._pylab_helpers.Gcf.get_active()\n            if figManager is not None:\n                figManager.canvas.start_event_loop(refresh_rate)  \n\n\ndef draw_fig(fig = None):    \n    #Draw the artists of a figure immediately.\n    #Note: if you are using this function inside a loop, it should be less time \n    #consuming to set the interactive mode \"on\" using matplotlib.pyplot.ion()\n    #before the loop, event if restituting the previous state after the loop.\n\n    if matplotlib.pyplot.isinteractive():\n        if fig is None:\n            matplotlib.pyplot.draw()\n        else: \n            fig.canvas.draw()            \n    else:   \n        matplotlib.pyplot.ion() \n        if fig is None:\n            matplotlib.pyplot.draw()\n        else: \n            fig.canvas.draw() \n        matplotlib.pyplot.ioff() # restitute the interactive state\n\n    matplotlib.pyplot.show(block=False)\n    return\n\n\ndef pause_anim(t): #This is taken from plt.pause(...), but without unnecessary \n                   #stuff. Note that the time module should be previously imported.\n                   #Again, this use the controversial event_loop of Matplotlib. \n    backend = matplotlib.pyplot.rcParams['backend']\n    if backend in matplotlib.pyplot._interactive_bk:\n        figManager = matplotlib.pyplot._pylab_helpers.Gcf.get_active()\n        if figManager is not None:\n            figManager.canvas.start_event_loop(t)\n            return\n    else: time.sleep(t) \n\n\n#--------------------------\n\n# B. Now come the particular functions that will do the job.\ndef f(x, y):\n    return np.sin(x) + np.cos(y)\n\n\ndef plot_graph():\n    fig = plt.figure()\n    x = np.linspace(0, 2 * np.pi, 120)\n    y = np.linspace(0, 2 * np.pi, 100).reshape(-1, 1)\n    im = fig.gca().imshow(f(x, y))    \n    draw_fig(fig)\n    n_frames = 50\n\n    #==============================================    \n    #First method - direct animation: This use the start_event_loop, so is \n    #somewhat controversial according to the Matplotlib doc.\n    #Uncomment and put the \"Second method\" below into comments to test.\n\n    '''for i in range(n_frames): # n_frames iterations    \n        x += np.pi \/ 15.\n        y += np.pi \/ 20.\n        im.set_array(f(x, y))\n        draw_fig(fig)  \n        pause_anim(0.015) # plt.pause(0.015) can also be used, but is slower\n\n    wait_fig() # simply suppress this command if you want the figure to close \n               # automatically just after the animation has ended     \n    '''    \n    #================================================\n    #Second method: this uses the Matplotlib prefered animation class.    \n    #Put the \"first method\" above in comments to test it.\n    def updatefig(i, fig, im, x, y, anim_flag, n_frames):\n        x = x + i * np.pi \/ 15.\n        y = y + i * np.pi \/ 20.\n        im.set_array(f(x, y))        \n\n        if i == n_frames-1:\n            anim_flag[0] = False\n\n    anim_flag = [True]    \n    animation.FuncAnimation(fig, updatefig, repeat = False, frames = n_frames, \n         interval=50, fargs = (fig, im, x, y, anim_flag, n_frames), blit=False) \n                            #Unfortunately, blit=True seems to causes problems\n\n    wait_fig()  \n    #wait_anim(anim_flag) #replace the previous command by this one if you want the \n                     #figure to close automatically just after the animation \n                     #has ended                                                                \n    #================================================           \n    return\n\n#--------------------------\n\n# C. Using multiprocessing to obtain the desired effects. I believe this \n# method also works with the \"threading\" module, but I haven't test that.\n\ndef main() # it is important that ALL the code be typed inside \n           # this function, otherwise the program will do weird \n           # things with the Ipython or even the Python console. \n           # Outside of this condition, type nothing but import\n           # clauses and function\/class definitions.\n    if __name__ != '__main__': return                      \n    p = Process(target=plot_graph)\n    p.start()\n    print('hello', flush = True) #just to have something printed here\n    p.join() # suppress this command if you want the animation be executed in\n             # parallel with the subsequent code\n    for i in range(3): # This allows to see if execution takes place after the \n                       #process above, as should be the case because of p.join().\n        print('world', flush = True) \n        time.sleep(1)        \n\nmain()\n","105":"bound_handler = handler.__get__(self, MyWidget)\n","106":"self.users.update({\"user_id\": event['userid']}, {'$addToSet': {'campaigns': UserCampaigns[i]}})\n","107":"def group(items):\n  iterator = iter(items)\n  group = [next(iterator)]\n  result =[group]\n  for item in iterator:\n    (a, b), (c, d) = item, group[-1]\n    if a in (c, d) or b in (c, d):\n      group.append(item)\n    else:\n      group = [item]\n      result.append(group)\n  return result\n\nprint(group([(1,2),(2,3),(3,4),(7,8),(8,9),(2,1),(2,3),(1,4)]))\n","108":"import csv\nimport matplotlib.pyplot as plt\n\n### Making test CSV file ###\ndata = [['2011\/12\/15,5'],['2011\/12\/11,4'],['2011\/12\/19,2'],['2011\/12\/16,3'],['2011\/12\/20,8'],['2011\/12\/14,4'],['2011\/12\/10,10'],['2011\/12\/9,7']]\nwith open('test.csv', 'wb') as f:\n    writer = csv.writer(f)\n    for i in data:\n        writer.writerow(i)\n\n\n### Extract data from CSV ###\nwith open('test.csv', 'rb') as n:\n    reader = csv.reader(n)\n    dates = []\n    freq = []\n    for row in reader:\n        values = row[0].split(',')\n        dates.append(values[0])\n        freq.append(values[1])          \n\n\n### Do plot ###\nfalse_x = [x for x in range(len(dates))]\nplt.plot(false_x,freq, 'o-')\nplt.xticks(range(len(dates)), (dates), rotation=45)\n# plt.axis([xmin, xmax, ymin, ymax]) - sets axes limits on graph\nplt.axis([-1, 8, 0, 11])\nplt.show()\n","109":"import unittest\nimport mock\n\n\nclass TestCaseName(unittest.TestCase):\n\n    @mock.patch('path_to_module.AdWordsClient', autospec=True)\n    @mock.patch('path_to_module.GoogleRefreshTokenClient', autospec=True)\n    @mock.patch('path_to_module.tz', autospec=True)\n    def test_get_account_timezone(self, tz_mock, adwords_client_mock, grefresh_token_client_mock):\n        adwards_client_instance = mock.Mock()\n        adwords_client_mock.return_value = test_get_account_timezone\n        instance = AdWords(...)\n        instance.get_account_timezone()\n        adwards_client_instance.GetService.assert_called_with(...)\n","110":"img = plt.imread('latest_0013679_caz.tiff')\nplt.imshow(img[:, :, 0], cmap=plt.cm.coolwarm)\n","111":"C = {}\ndist_km=[]\nreturned_values=[]\n\nfor row in product(zip(latA, longA), zip(latB, longB)):\n    e=(list(chain(*row)))\n    distance= distance_function(e[0],e[1],e[2],e[3])\n    dist_kilo=(distance*6373)\n    dist_km.append(dist_kilo)\n\n    if dist_kilo<1.01: \n        C  ={\n            \"clat\":row[0][0],\n            \"clong\": row[0][1],\n            \"tlat\":row[1][0],\n            \"tlong\": row[1][1],\n            \"distance_km\": dist_kilo\n        }\n        returned_values.append(C)\n","112":"def validate_parkings(self, value):\n    user_parkings = set(self.context['request'].user.parkings.all())\n    post_parkings = set(value)\n    if not post_parkings.issubset(user_parkings):\n        raise serializers.ValidationError(\"parking doesn't belong to you\")\n    return value\n","113":"res = {\"cmd\": \"echo \\\"Hello World\\\" \", \"end\": \"2014-08-01 19:32:38.714584\", \"stdout\": \"Hello World\", \"changed\": True, \"start\": \"2014-08-01 19:32:38.707510\", \"delta\": \"0:00:00.007074\", \"stderr\": \"\", \"rc\": 0, \"invocation\": {\"module_name\": \"shell\", \"module_args\": \"echo \\\"Hello World\\\"\"}}\n\ndef json_log(res, host):\n    if isinstance(res,dict) and 'verbose_override' not in res:  \n           res.update({\"host\": host})        \n           combined_json  = JSONEncoder().encode(res)\n           print(combined_json)\n\nIn [73]: json_log(res,\"centos\")\n{\"cmd\": \"echo \\\"Hello World\\\" \", \"end\": \"2014-08-01 19:32:38.714584\", \"stdout\": \"Hello World\", \"changed\": true, \"rc\": 0, \"start\": \"2014-08-01 19:32:38.707510\", \"host\": \"centos\", \"stderr\": \"\", \"delta\": \"0:00:00.007074\", \"invocation\": {\"module_name\": \"shell\", \"module_args\": \"echo \\\"Hello World\\\"\"}}\n","114":"s = \"C:\\level1\\level2\\level3\\level4\\level5\\level6\\level7\"\nl = s.split('\\\\')\nprint l[4], l[5]\n","115":"In [1]: !ls \\\n   ...: *.txt\naws-forum.txt  encyclic.txt\n\nIn [2]: \n","116":"\nIn [13]: \"+\".join(random.sample(sentences,3))\nOut[13]: 'a+b+c'\n","117":"def __init__(self, corpus=None, num_topics=100, id2word=None,\n                 distributed=False, chunksize=2000, passes=1, update_every=1,\n                 alpha='symmetric', eta=None, decay=0.5, offset=1.0,\n                 eval_every=10, iterations=50, gamma_threshold=0.001)\n","118":"def _dont_doctest_inherited_docstrings(docstring):\n    docstring_disabled = \"\"\n    for line in docstring.splitlines():\n        docstring_disabled += line + \"#doctest: +DISABLE\"\n    return docstring_disabled\n\nclass _frommethod:\n    \"\"\"\n    Adapted from numpy.ma._frommethod\n    \"\"\"\n\n    def __init__(self, func_name):\n        self.__name__ = func_name\n        docstring = getattr(MaskedArray, func_name).__doc__\n        self.__doc__ = _dont_doctest_inherited_docstrings(docstring)\n        self.obj = None\n","119":">>> HOSTS = ['backup-ros', 'backupa-files', 'print-server1','print-server2']\n>>> backups = [x for x in HOSTS if x.startswith('backup-')]\n>>> backups\n['backup-ros']\n","120":">>> elem.tag\n'line'\n>>> elem.get('number')\n'2'\n>>> elem.text\n'Line 3'`\n","121":"class Page:\n   #attributes\n\nclass Questions:\n   #attributes\n   pages = models.ManyToManyField(through = 'PageQuestions', ...)\n\nclass PageQuestions:\n    page = models.ForeignKey(Page)\n    question = models.ForeignKey(Question)\n    ordinal_number = models.IntegerField()\n\n    class Meta:\n        unique_together = (('page', 'question')) #optional\n","122":"import pkg_resources\nmy_data = pkg_resources.resource_string(__name__, \"config.yml\")\n","123":"import os, subprocess, tempfile\nf, fname = tempfile.mkstemp()\nf.write('default')\nf.close()\ncmd = os.environ.get('EDITOR', 'vi') + ' ' + fname\nsubprocess.call(cmd, shell=True)\nwith open(fname, 'r') as f:\n    #read file\nos.unlink(fname)\n","124":"def main_func()\n    ...\n    def callback():\n        current_time = time.time()\n        if current_time - callback.start_time > 1.0:\n            print 'working'\n            callback.start_time = time.time()\n    callback.start_time = time.time()\n    work_function(args, callback)\n","125":"In [2]:\n\ndf = pd.DataFrame({'Recipient_State':['AL', 'AR', 'AZ','CA','CO'], 'Total_Amount_of_Payment_USDollars':np.random.randn(5)})\ndf\nOut[2]:\n  Recipient_State  Total_Amount_of_Payment_USDollars\n0              AL                           0.401242\n1              AR                           1.333060\n2              AZ                          -0.515762\n3              CA                           0.740358\n4              CO                          -0.900249\nIn [3]:\n\ngp = df.groupby('Recipient_State')['Total_Amount_of_Payment_USDollars'].sum()\ngp\nOut[3]:\nRecipient_State\nAL                 0.401242\nAR                 1.333060\nAZ                -0.515762\nCA                 0.740358\nCO                -0.900249\nName: Total_Amount_of_Payment_USDollars, dtype: float64\nIn [4]:\n\ngp.index\nOut[4]:\nIndex(['AL', 'AR', 'AZ', 'CA', 'CO'], dtype='object')\nIn [5]:\n\ngp.reset_index()\nOut[5]:\n  Recipient_State  Total_Amount_of_Payment_USDollars\n0              AL                           0.401242\n1              AR                           1.333060\n2              AZ                          -0.515762\n3              CA                           0.740358\n4              CO                          -0.900249\n","126":"[a*b for a,b in zip(lista,listb)]\n","127":"import elementtree.ElementTree as ET\n\ndef getCVE(nessus_file):\ntry:\n    tree = ET.parse(nessus_file)\n    doc = tree.getroot()\n    walk = doc.getiterator('cve')\n    for cve in walk:\n        print cve.text\nexcept:\n    pass\n\ngetCVE('file.nessus')\n","128":"urllib2.urlopen(url[, data][, timeout])\n","129":">>> import datetime\n>>> d1 = datetime.datetime.strptime(\"00:08:30.291\", \"%H:%M:%S.%f\")\n>>> d1\ndatetime.datetime(1900, 1, 1, 0, 8, 30, 291000)\n>>> d2\ndatetime.datetime(1900, 1, 1, 0, 2, 30, 291000)\n>>> dt1 = datetime.timedelta(minutes=d1.minute, seconds=d1.second, microseconds=d1.microsecond)\n>>> dt2 = datetime.timedelta(minutes=d2.minute, seconds=d2.second, microseconds=d2.microsecond)\n>>> fin = dt1 + dt2\n>>> fin\ndatetime.timedelta(0, 660, 582000)\n>>> str(fin)\n'0:11:00.582000'\n","130":"import win32gui\nimport re\n\nclass WindowMgr:\n    \"\"\"Encapsulates some calls to the winapi for window management\"\"\"\n    def __init__ (self):\n        \"\"\"Constructor\"\"\"\n        self._handle = None\n\n    def find_window(self, class_name, window_name = None):\n        \"\"\"find a window by its class_name\"\"\"\n        self._handle = win32gui.FindWindow(class_name, window_name)\n\n    def _window_enum_callback(self, hwnd, wildcard):\n        '''Pass to win32gui.EnumWindows() to check all the opened windows'''\n        if re.match(wildcard, str(win32gui.GetWindowText(hwnd))) != None:\n            self._handle = hwnd\n\n    def find_window_wildcard(self, wildcard):\n        self._handle = None\n        win32gui.EnumWindows(self._window_enum_callback, wildcard)\n\n    def set_foreground(self):\n        \"\"\"put the window in the foreground\"\"\"\n        win32gui.SetForegroundWindow(self._handle)\n\nw = WindowMgr()\nw.find_window_wildcard(\".*Hello.*\")\nw.set_foreground()\n","131":">>> L = [0, 0, 1, 1, 2, 2, 0]\n>>> list(itertools.dropwhile(lambda x: x == 0, L))\n[1, 1, 2, 2, 0]\n","132":"create or replace function func1(listof_id integer[])\n  returns setof func_type as\n$body$  \n\nx = []\nfor item in listof_id:\n    query = \"select {0} as x, {0} * 2 as y, {0} * 3 as z, {0} * 4 as zz\".format(item)\n    result_set = plpy.execute(query)\n    x.extend([[l['x'], l['y'], l['z'], l['zz']] for l in result_set])\n\nreturn x\n$body$ language plpythonu\n;\n\nselect * from func1(array[1,2]);\n x | y | z | zz \n---+---+---+----\n 1 | 2 | 3 |  4\n 2 | 4 | 6 |  8\n","133":"with open(\"input.txt\") as f:\n    lastmarkedline = None\n    for line in f:\n        if line.startswith('>'):\n            lastmarkedline = line\n        elif lastmarkedline is not None:\n            field1 = lastmarkedline.split()[1]\n            field2 = line.split()[1]\n            print \"{0}\\t{1}\".format(field1, field2)\n","134":">>> 's1' > 's2'\nFalse\n>>> 's1' < 's2'\nTrue\n","135":"def list_to_string(lst):\n    return \"\\0\".join(l) + \"\\0\"\n\ndef string_to_list(s):\n    return s.split(\"\\0\")[:-1]\n","136":"res = [\n    e +  # filter list itself\n    [\n        sum( # sum all\n            l[4]  # get fourth item if contains all\n            for l in data  # take each element of data\n            if all(i in l for i in e)  # check if contains all filter list\n        )\n    ]  # concat sum to list itself\n    for e in ls  # take each element of filter list \n]\n","137":"for i, each in enumerate(test_text):\n    print each, test_text[i-5]\n","138":"def param_type(**type_spec):\n    def deco(f):\n        def view(request, **kwargs):\n            for k, type_ in type_spec.items():\n                kwargs[k] = type_(kwargs[k])\n            return f(request, **kwargs)\n        return view\n    return deco\n\n@param_type(number=int)\ndef double(request, number=42):\n    return HttpResponse(2*number)\n","139":"import matplotlib.pyplot as plt\nimport numpy as np\nfrom numpy.random import normal\nfrom scipy.optimize import curve_fit\n\nx_data = np.linspace(0, 2*np.pi, 30)\ny_data = np.sin(x_data) + normal(0, 0.2, 30)\n\n\ndef func(x, a, b, c, d):\n    return a * np.sin(b*x + c) + d\n\nparameter, covariance_matrix = curve_fit(func, x_data, y_data)\n\nx = np.linspace(min(x_data), max(x_data), 1000)\nplt.plot(x_data, y_data, 'rx', label='data')\nplt.plot(x, func(x, *parameter), 'b-', label='fit')   # the star is to unpack the parameter array\nplt.show()\n","140":">>> s = StringIO.StringIO('1, \"text1,text2\", \"text3, text4\", a, b, c')\n>>> list(csv.reader(s, skipinitialspace=True))\n[['1', 'text1,text2', 'text3, text4', 'a', 'b', 'c']]\n","141":"html_code = urllib2.urlopen(\"xxx\")\nhtml_code_list = html_code.readlines()\ndata = \"\"\nfor line in html_code_list:\n    line = line.strip()\n\n    if line.startswith(\"<h2\"):\n       data = data+line\n\nhp = MyHTMLParser()\nhp.feed(data)\nhp.close()\n","142":"def filter_unique(df, n):\n    data_by_date = df.groupby('date')['ID'].apply(lambda x: x.tolist())\n\n    filtered_data = {}\n    previous = []\n    for i, (date, data) in enumerate(data_by_date.items()):\n        if i >= n:\n            if len(previous)==1:\n                filtered_data[date] = list(set(previous[i-n]).intersection(data))\n            else:\n                filtered_data[date] = list(set.intersection(*[set(x) for x in previous[i-n:]]).intersection(data))\n        else:\n            filtered_data[date] = data\n        previous.append(data)\n\n    result =  pd.DataFrame.from_dict(filtered_data, orient='index').stack()\n    result.index = result.index.droplevel(1)\n\nfilter_unique(df, 2)\n\n1\/31\/15     2\n1\/31\/15     3\n1\/31\/15     4\n11\/30\/14    1\n11\/30\/14    2\n11\/30\/14    3\n12\/31\/14    2\n12\/31\/14    3\n2\/28\/15     1\n2\/28\/15     3\n3\/31\/15     1\n3\/31\/15     4\n4\/30\/15     4\n4\/30\/15     5\n","143":">>> a = 'xyz-abc'\n>>> a.find('-')  # return the index of the first instance of '-'\n3\n>>> a[a.find('-'):]   # return the string of everything past that index\n'-abc'\n","144":"text=\"\"\"<script type=\"text\/javascript\" language=\"JavaScript\">\nArtistName = \"FUN.\";\nSongName = \"We Are Young\";\n<\/script> \"\"\"\n\nimport re\n\nprint dict(re.findall(r'((?:Artist|Song)Name)\\s=\\s\"([^\"]*)\"', text))\n# {'ArtistName': 'FUN.', 'SongName': 'We Are Young'}\n","145":">>> s = \"\"\"12\/31\/1991\n... December 10, 1980\n... September 25, 1970\n... 2005-11-14\n... December 1990\n... October 12, 2005\n... 1993-06-26\"\"\"\n\n>>> from dateutil import parser\n>>> for i in s.splitlines():\n...     d = parser.parse(i)\n...     print(d.strftime(\"%Y-%m-%d\"))\n...\n1991-12-31\n1980-12-10\n1970-09-25\n2005-11-14\n1990-12-10\n2005-10-12\n1993-06-26\n","146":"q = forms.CharField(label='search', \n                    widget=forms.TextInput(attrs={'placeholder': 'Search'}))\n","147":"# in student.py\nclass Student:\n    Id=\"\"\n\n    def __init__(self, Id):\n        self.Id = Id\n\n# in main.py, assume main.py and student.py are in the same folder.\ndef main():\n    from student import Student\n    print(\"is workign\")\n    temp =  Student(\"50\")  ## I want to create the object of class Student and send an attribute\n\nif __name__ == '__main__':\n    main()\n","148":">>> 1 == 1.0\nTrue\n>>> hash(1) == hash(1.0)\nTrue\n","149":"In [11]: pd.Panel(dict(enumerate([pd.DataFrame(x) for x in data])))\nOut[11]:\n<class 'pandas.core.panel.Panel'>\nDimensions: 2 (items) x 2 (major_axis) x 2 (minor_axis)\nItems axis: 0 to 1\nMajor_axis axis: buy to sell\nMinor_axis axis: eurcny to eurusd\n\nIn [12]: pd.Panel(dict(enumerate([pd.DataFrame(x) for x in data])), items=['buy', 'sell'], major_axis=[0, 1], minor_axis=['eurusd', 'eurcny'])\nOut[12]:\n<class 'pandas.core.panel.Panel'>\nDimensions: 2 (items) x 2 (major_axis) x 2 (minor_axis)\nItems axis: buy to sell\nMajor_axis axis: 0 to 1\nMinor_axis axis: eurusd to eurcny\n","150":"bash-3.2$ python\nPython 2.7.5 (default, Mar  9 2014, 22:15:05) \n[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> mylist = [x*x for x in range(3)]\n>>> for i in mylist:\n...     print i\n... \n0\n1\n4\n>>> exit()\nbash-3.2$ \n","151":"lst = [5, 10, 10, 20, 50, 50, 20]\n\n# Convert (and build reverse mapping)\nmapping = {}\nreverse_mapping = {}\nconv = []\nfor i in lst:\n    v = mapping.setdefault(i, len(mapping))\n    reverse_mapping[v] = i\n    conv.append(v)\n\n# Convert back\nback = [reverse_mapping[v] for v in conv]\n","152":"import os\nimport wx\nimport wx.lib.agw.hypertreelist as HTL\n\nclass MyFrame(wx.Frame):\n\ndef __init__(self, parent):\n\n    wx.Frame.__init__(self, parent, -1, pos = (0,0), size=(700, 900), title= \"HyperTreeList Demo\")\n\n\n    # ------------------------------------------\n    # Algo for creating Files' List Starts here\n    # ------------------------------------------\n    allFiles = []       \n    for root, dirs, files in os.walk(\"D:\\\\DIRECTORY\", topdown = True):  \n        for name in files:  \n            location = os.path.join(root, name)                 \n            allFiles.append(location)       \n\n    treeList= HTL.HyperTreeList(self, agwStyle= wx.TR_DEFAULT_STYLE| 0x4000 )\n    treeList.AddColumn(\"List View\")\n    treeList.SetColumnWidth(0, 600)\n\n    TLRoot = treeList.AddRoot (\"D:\", ct_type= 1)\n    allDirs = []\n    allDirsItem = []\n    allDirs.append (\"D:\")\n    allDirsItem.append(TLRoot)\n\n\n    # --------------------------------------\n    # Algo for filling Tree List Starts here\n    # --------------------------------------\n    for eachName in allFiles:\n        nameSplit = eachName.split(os.sep)\n        matchingDirFound = 0\n\n        lenNS= len(nameSplit)    \n        i=lenNS -1\n        for eachNameSplit in reversed(nameSplit):       \n            for eachDoneDir in reversed(allDirs):\n                if eachNameSplit == eachDoneDir:\n                    matchingDirFound = 1\n                    break     \n\n            if matchingDirFound == 1: \n                break   \n            i= i-1              \n\n        if matchingDirFound ==1:\n            for k in range(i, lenNS-1):\n                allDirsItem.append([])\n                allDirsItem[k+1] = treeList.AppendItem (allDirsItem[k], nameSplit[k+1], ct_type= 1)\n\n                if len(allDirs)> k+1:\n                    allDirs[k+1] = nameSplit[k+1]\n                else:\n                    allDirs.append (nameSplit[k+1])\n","153":"from .. import myFile2\n","154":"PROXY = \"127.0.0.1:4321\"\n\nwebdriver.DesiredCapabilities.CHROME['proxy'] = {\n    \"httpProxy\":PROXY,\n    \"ftpProxy\":PROXY,\n    \"sslProxy\":PROXY,\n    \"socksProxy\":None #You probably don't want this\n    \"proxyType\":\"MANUAL\",\n}\ndriver = webdriver.Chrome()\n","155":"def donuts(count):\n    if count < 10:\n     return 'Number of donuts: ' + str(count)\n    else: return 'Number of donuts: many'\n\nprint donuts(8)\n","156":"import pdb; pdb.set_trace()\n","157":"def my_preexec_fn():\n    os.setuid(10033)\nprocess = subprocess.Popen(cmdstr,stdout=subprocess.PIPE, stderr=subprocess.STDOUT, preexec_fn=my_preexec_fn)\n","158":"print df\n   Time  Input A\n0     0   3.3337\n1   500   3.3096\n2  1001   3.3044\n3  1501   3.3630\n4  2004   3.2822\n5  2504   3.3335\n\nd = pd.to_datetime('Tue Mar 08 11:20:40 EST 2016')\nprint d\n2016-03-08 11:20:40\n\nprint df['Time'].apply(lambda x: pd.offsets.Milli(x) + d )\n0   2016-03-08 11:20:40.000\n1   2016-03-08 11:20:40.500\n2   2016-03-08 11:20:41.001\n3   2016-03-08 11:20:41.501\n4   2016-03-08 11:20:42.004\n5   2016-03-08 11:20:42.504\nName: Time, dtype: datetime64[ns]\n","159":"return ('', 204)\n","160":">>> a = \"9300.1 9600.6 9300.2 9300.1 9600.5 9600.7\"\n>>> b = a.split()\n>>> adict = {}\n>>> for item in b:\n        index = item.find('.')\n        ast = item[:index]\n        bst = item[index + 1:]\n        if ast in adict:\n            adict[ast] = adict[ast] + int(bst)\n        else:\n            adict[ast] = int(bst)\n>>> adict\n{'9600': 18, '9300': 4}\n>>> c = ''\n>>> for item in adict.keys():\n        c += '.'.join([item, str(adict[item])])\n        if item != adict.keys()[-1]:\n            c += \" \"    \n>>> c\n'9600.18 9300.4'\n","161":">>> from itertools import combinations\n>>> lis = [1,2,3,4]\nfor i in xrange(1, len(lis)+1):  #xrange will return the values 1,2,3,4 in this loop\n    print list(combinations(lis, i))\n...     \n[(1,), (2,), (3,), (4,)]\n[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\n[(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]\n[(1,2,3,4)]\n","162":"import os\nsubpath =\"filedir\/filename.txt\"\nprint os.path.join(os.getenv(\"LOCALAPPDATA\"), subpath)\n","163":">>> def foo():\n...     pass\n... \n>>> def bar():\n...     pass\n... \n>>> import inspect\n>>> [member.__name__ for member in globals().values() \\\n...                  if inspect.isfunction(member)]\n['bar', 'foo']\n","164":"directions = []\ndirections.append('forward')\n#execute command here\ndirections.append('right')\n#execute command here then turn car 180 degrees\n#at this point directions = ['forward', 'right'] now you need to just pop the commands to execute\nissueCommand(directions.pop()) #sends 'right'\nissueCommand(directions.pop()) #sends 'forward'\n","165":"tags = models.ManyToManyField('tags.Tag', ...)\n","166":">>> np.column_stack((a, b))\narray([[ 1,  6],\n       [ 2,  7],\n       [ 3,  8],\n       [ 4,  9],\n       [ 5, 10]])\n","167":"from scipy.sparse import csr_matrix\nrows = [0, 0, 0]\ncolumns = [100, 47, 150]\ndata = [-1, +1, -1]\nm = csr_matrix( (data,(rows, columns)), shape=(1, 300) )\n\nindices = m.indices\n\n# right permutation\nm.indices = (indices + 1) % m.shape[1]\n\n# left permutation\nm.indices = (indices - 1) % m.shape[1]\n","168":"if language == \"hun\":\n    LOGIN_LABEL_USERNAME_STR                    = u'Felhaszn\u00e1l\u00f3'\n    LOGIN_LABEL_PASSWORD_STR                    = u'Jelsz\u00f3'\n","169":"import matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\nfrom IPython.display import display\n%matplotlib notebook\n\nfig = plt.figure(figsize=(6, 6))\nax1 = plt.subplot(111, aspect='equal')\nax1.set_xlim(-5,5)\nax1.set_ylim(-5,5)\ncirc = Circle((0,0), radius=1)\nax1.add_patch(circ)\n\ndef change_radius(r=1):\n    circ.set_radius(r)\n    display(fig)\n\nfrom ipywidgets import interact\ninteract(change_radius, r=(1.0, 5))\n","170":"% if mydict.get('somekey'):\n    ${mydict['somekey'][0]['hellothere']}<\/td><\/tr>\n% endif\n","171":"import math\nint(math.round((((year2 - year1) * 12) + (month2 - month1)) * 30.4375 + (day2 - day1)))\n","172":"words = set(message.split(\" \"))\nresult = [int(word in words) for word in terms]\n","173":"        var engine = Python.CreateEngine();\n        var scope = engine.CreateScope();\n        scope.SetVariable(\"foo\", 42);\n        engine.Execute(\"print foo; bar=foo+11\", scope);\n        Console.WriteLine(scope.GetVariable(\"bar\"));\n","174":"training_data_without_sports, test_data_without_sports, feature_cols_all = (\n    divide_data('..\/data\/feature_without_sports.csv', training_ratio))\n","175":"call(['function1', file1,  file2,  'data.labels=%s' % input])\n","176":"def parent_to_child(parent):\n    newchild= child()\n    newchild.property= parent.property\n    #...\n\nlist_of_children= map(parent_to_child, list_of_parents)\n","177":">>> from mako.template import Template\n>>> print Template(\"${a\/b}\").render(a=1, b=2)\n0\n>>> print Template(\"${a\/b}\", future_imports=['division']).render(a=1, b=2)\n0.5\n>>> print Template(\"${'{0:.2f}'.format(a\/b)}\", future_imports=[\"division\"]).render(a=1, b=2)\n0.50\n","178":"def Fin_adj(row, field):\n    if field == 'Cr':\n        if row[field] <= .7:\n            return Range_eval(row[field],0.,.69,.0,.25)\n        elif row[field] <= .9:\n            return Range_eval(row[field],.7,.89,.25,.5)\n        elif row[field] <= 1.1:\n            return Range_eval(row[field],.9,1.10,.9,.95)\n        elif row[field] <= 1.5:\n            return Range_eval(row[field],1.1,1.49,.95,1)\n        elif row[field] <= 3.:\n            return 1\n        else:\n            return Range_eval(row[field],3.,df[field].max(),.95,1)\n\ndef Range_eval (val_in, Oldmin, Oldmax, Newmin, Newmax):\n    return (((val_in - Oldmin) * (Newmax - Newmin)) \/ (Oldmax - Oldmin)) + Newmin\n","179":"with open('myfile.txt') as f:\n    try:\n        header = next(f)\n    except StopIteration as e:\n        print \"File is empty\"\n    for line in f:\n        # do stuff with line\n","180":"        import sys\n        reload(sys)\n        sys.setdefaultencoding('utf8')\n","181":"def largestPowerOfTwoThatIsAFactorOf(num):\n    if num % 2 != 0: return 1\n    factor = 0\n    while num % 2 == 0:\n        num \/= 2\n        factor += 1\n    return 2 ** factor\n    ## or return factor; as per your requirement\n","182":"from itertools import product\nfor y, x in product(range(3), repeat=2):\n  do_something()\n  for y1, x1 in product(range(3), repeat=2):\n    do_something_else()\n","183":"points = []\nfor line in file:\n    x,y = eval(line)\n    points.append((x,y))\nresult = np.array(points)\n","184":"def getObjectFromLink(url):\n    global r\n    obj=praw.objects.Submission.get_info(r, url)\n    if len(url.split('\/'))==6:\n        return obj\n    else:\n        return obj.comments[0]\n","185":"(set-option :auto-config false)\n(declare-const x Int)\n(declare-const y Int)\n(assert (or (= x 1) (= y 1)))\n(check-sat)\n(get-model)\n","186":"max_range = max(s.index) + 1\ns = s.reindex(index=range(1, max_range), fill_value=0)\n","187":"# Setup test data based on incomplete sample\nbytes = \"\\x16\\x00\\x00\\x00\\xdc\\x5a\\x9f\\xd2\\x31\\x04\\xca\\x01\\xba\\x81\\x89\\x1a\\x81\\xe2\\xcd\\x01\\xba\\x81\\x89\\x1a\\x81\\xe2\\xcd\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x24\\x00\\x52\\x00\\x65\\x00\\x63\\x00\\x79\\x00\\x63\\x00\\x6c\\x00\\x65\\x00\\x2e\\x00\\x42\\x00\\x69\\x00\\x6e\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\nbytes = bytes + \"\\x00\"*(592-len(bytes))\n\nimport struct\nimport codecs\n\n# typedef struct _WIN32_FIND_DATA {\n#   DWORD    dwFileAttributes;\n#   FILETIME ftCreationTime;\n#   FILETIME ftLastAccessTime;\n#   FILETIME ftLastWriteTime;\n#   DWORD    nFileSizeHigh;\n#   DWORD    nFileSizeLow;\n#   DWORD    dwReserved0;\n#   DWORD    dwReserved1;\n#   TCHAR    cFileName[MAX_PATH];\n#   TCHAR    cAlternateFileName[14];\n\n\nfmt = \"<L3Q4L520s28s\"\n\nattrs, creation, access, write, sizeHigh, sizeLow, reserved0, reserved1, name, alternateName = struct.unpack(fmt, bytes)\nname = codecs.utf_16_le_decode(name)[0].strip('\\x00')\nalternateName = codecs.utf_16_le_decode(alternateName)[0].strip('\\x00')\nprint name\n","188":"import sys\noutfile = 'file path'\n\nwith open(outfile, 'r') as f:\n    lines = f.readlines()\n    for line in lines:\n        sys.stdout.write(line)\n","189":"cardValue = { 'J': 11, 'Q': '12', 'K': 13, 'A': 14}\ndef getCardValue(c)\n    return cardValue[c] if c in cardValue else c\n\nwhile i <= len(aDeck):\n    print(\"Player A: {}\\nPlayer B: {}\".format(aDeck[i],bDeck[i]))\n    cardA = getCardValue(aDeck[i])\n    cardB = getCardValue(bDeck[i])\n    if  cardA > cardB:\n        print(\"Player A wins!\\n\")\n    elif cardA < cardB:\n        print(\"Player B wins!\\n\")\n    else:\n        print(\"It's a tie!\\n\")\n    i += 1\n","190":"h5file_path=\"\/absolute\/path\/to\/file\"\n\ndef readchunk(v):\n    empty = h5.File(h5file_path)\n    return empty['\/mydata'][v,:]\n\nfoo = sc.parallelize(range(0,100)).map(lambda v: readchunk(v))\nfoo.count()\n","191":"[i for i in xrange(no_jobs) for x in xrange(T)]\n","192":"#!\/usr\/bin\/env perl\n\nuse strict; use warnings;\nuse autodie;\n\nuse Fcntl qw(:seek);\nuse List::Util qw( sum );\n\nmy ($input_file) = @ARGV;\ndie \"Need input file\\n\" unless defined $input_file;\n\nmy $HEADER_SIZE = 4_096;\n\nmy @typedef = (\n    {\n        fields => [\n            qw(\n                TS_INCR_LO\n                TS_INCR_HI\n                SEQID\n                OP\n                LUN\n                NBLKS\n                LBA_LO\n                LBA_HI\n            )\n        ],\n        tmpl => 'LLLSSLLL',\n        start => 0,\n        size => 28,\n    },\n    {\n        fields => [\n            qw(\n                TS_INCR_LO\n                TS_INCR_HI\n                SEQID\n                OP\n                LUN\n                LATENCY_TICKS\n                HOST_ID\n                HOST_LUN\n            )\n        ],\n        tmpl => 'LLLSSLSS',\n        start => 28,\n        size => 24,\n    },\n);\n\nopen my $input, '<:raw', $input_file;\n\nseek $input, $HEADER_SIZE, SEEK_SET;\n\nmy $BLOCK_SIZE = sum map $_->{size}, @typedef;\nread $input, my($buffer), $BLOCK_SIZE;\n\nmy @structs;\n\nfor my $t ( @typedef ) {\n    my %struct;\n    @struct{ @{ $t->{fields}} } = unpack(\n        $t->{tmpl},\n        substr($buffer, $t->{start}, $t->{size})\n    );\n    push @structs, \\%struct;\n}\n\nuse Data::Dumper;\nprint Dumper \\@structs;\n","193":"# Note, your path probably differs\nsubprocess.call(r\"C:\\Program Files\\Microsoft Office\\Office12\\EXCEL.exe\")\n\n# The script will wait until Excel is closed and then continue\n","194":"import numpy as np\n\ndef f(*args, **kwargs):\n  length = kwargs.get(\"length\", 1)\n  ret = []\n  for arg in args:\n    if isinstance(arg, (float, int)):\n      ret.append(np.repeat(arg, length))\n    else:\n      ret.append(arg)\n  return tuple(ret)\n\nprint f(1, 2, length=4)\n","195":"class MyDialog(gtk.Dialog, gtk.Buildable):\n    __gtype_name__ = \"MyDialog\"\n\n    def do_parser_finished(self, builder):\n        self.treeview = builder.get_object(\"treeview1\")\n        # Do any other associated post-initialization\n","196":"def combine(all_ensembles):\n    \"\"\"Combine the sub-estimators of a group of ensembles\n\n        >>> from sklearn.datasets import load_iris\n        >>> from sklearn.ensemble import ExtraTreesClassifier\n        >>> iris = load_iris()\n        >>> X, y = iris.data, iris.target\n\n        >>> all_ensembles = [ExtraTreesClassifier(n_estimators=4).fit(X, y)\n        ...                  for i in range(3)]\n        >>> big = combine(all_ensembles)\n        >>> len(big.estimators_)\n        12\n        >>> big.n_estimators\n        12\n        >>> big.score(X, y)\n        1.0\n\n    \"\"\"\n    final_ensemble = copy(all_ensembles[0])\n    final_ensemble.estimators_ = []\n\n    for ensemble in all_ensembles:\n        final_ensemble.estimators_ += ensemble.estimators_\n\n    # Required in old versions of sklearn\n    final_ensemble.n_estimators = len(final_ensemble.estimators_)\n\n    return final_ensemble\n","197":"def justify(s, pos):\n    if len(s)<=70:\n        if pos == l:\n            print 30*' ' + s\n        elif pos == c:\n            print ((70 - len(s))\/2)*' ' + s\n        elif pos == r:\n            #you missed it here...\n            print (40 - len(s))*' ' + s\n        else:\n            print('You entered invalid argument-(use either r, c or l)')\n    else:\n        print(\"The entered string is more than 70 character long. Couldn't be justified.\")\n","198":"text(0, 1,'matplotlib', horizontalalignment='center',\n     verticalalignment='center',\n     transform=ax.transAxes)\n","199":"import numpy as np\nimport pandas as pd\nx = np.random.randn(5)\ny = np.sin(x)\ndf = pd.DataFrame({'x':x, 'y':y})\ndf.plot('x', 'y', kind='scatter')\n","200":">>> l = np.array([-3, -2, -1, 0, 1, 2, 3, 4, 3, 2, 1, 0, -1, -2, -3, 4, -3, -2, -1, 0, 1, 2])\n>>> epsilon = 1\n>>> inds = np.argwhere(np.abs(l) < epsilon) # indices of \u201calmost zero\u201d items\n>>> left = inds[0] # index of the first \u201calmost zero\u201d value\n>>> right = inds[-1] # -\/\/- last\n>>> l[:left + 1] = 0 # zero out everything to the left and including the first \u201calmost zero\u201d\n>>> l[right:] = 0 # -\/\/- last\n>>> l\n  >\narray([ 0,  0,  0,  0,  1,  2,  3,  4,  3,  2,  1,  0, -1, -2, -3,  4, -3,\n   -2, -1,  0,  0,  0])\n","201":">>> (1\/1\/1\/1\/x + 2\/(1+1\/x)).normal()\n(2*x**2 + x + 1)\/(x*(x + 1))\n","202":"dic = {'p1':[0,0,0,0,7], 'p2': [0,0,0,0,5], 'p3': [0,0,0,0,8]}\nsorted_keys = sorted(dic, key=lambda k: dic[k][4])\nprint sorted_keys\n# ['p2', 'p1', 'p3']\n","203":"protected string Solve(string Line1, string Line2)\n{\n    string[] Inputs = Line1.Split();\n    uint A = uint.Parse(Inputs[0]);\n    byte N = byte.Parse(Inputs[1]);\n    Inputs = Line2.Split();\n    List<uint> Motes = new List<uint>(N);\n    foreach (string Size in Inputs)\n    {\n        Motes.Add(uint.Parse(Size));\n    }\n    Motes.Sort();\n    List<Action> Actions = new List<Action>();\n\n    while (Motes.Count > 0)\n    {\n        if (A > Motes[0])\n        {\n            A += Motes[0];\n            Motes.RemoveAt(0);\n        }\n        else if(A > 1)\n        {\n            uint I;\n            for (I = 0; A <= Motes[0]; I++)\n            {\n                A = (A << 1) - 1;\n            }\n            Actions.Add(new Action(I, Motes.Count));\n        }\n        else\n        {\n            Actions.Add(new Action(101, Motes.Count));\n            break;\n        }\n    }\n\n    uint TotalInserts = 0;\n    int TotalRemoved = 0;\n    for (int I = Actions.Count - 1; I >= 0; I--)\n    {\n        int StepRemaining = Actions[I].Remaining - TotalRemoved;\n        uint StepInsert = Actions[I].Inserts;\n        if (StepInsert >= StepRemaining)\n        {\n            TotalRemoved += StepRemaining;\n            TotalInserts = 0;\n        }\n        else\n        {\n            TotalInserts += StepInsert;\n            if (TotalInserts >= Actions[I].Remaining)\n            {\n                TotalRemoved = Actions[I].Remaining;\n                TotalInserts = 0;\n            }\n        }\n    }\n\n    return (TotalInserts + TotalRemoved).ToString();\n}\nstruct Action\n{\n    public uint Inserts;\n    public int Remaining;\n    public Action(uint inserts, int remaining)\n    {\n        Inserts = inserts;\n        Remaining = remaining;\n    }\n}\n","204":"import itertools\n\ndef covnersion_Anim(xPos,trueVal,*args):\n    mTuple = args\n    plt_bulk_lst = []\n    plt_head_lst = []\n    color_list = ['Green','Blue','Orchid','Cyan','Goldenrod','Salmon','Orange','Violet','Magenta']\n    f = plt.figure(figsize =(17,8))\n    ax = plt.gca()\n    ax.set_xlim([min(xPos),max(xPos)])\n    ax.set_ylim([0,1])\n    ms = 5\n    for j,c in zip(range(len(mTuple)),itertools.cycle(color_list)):\n        plt_bulk_lst.append(ax.plot([],[],color=c,ms=ms,marker='x',linestyle='none')[0])\n        plt_head_lst.append(ax.plot([xPos[0]],[mTuple[j][0]],color='Dark'+c,ms=ms,marker='o',linestyle='none')[0])\n    real_plt, = plot([],[],color='red')\n\n    for j in range(1,len(xPos)):\n        print j\n        for hd_plt,blk_plt,m in zip(plt_head_lst,plt_bulk_lst,mTuple):\n            hd_plt.set_xdata([xPos[j]])\n            hd_plt.set_ydata([m[j]])\n\n            blk_plt.set_ydata(m[:j])\n            blk_plt.set_xdata(xPos[:j])\n\n            real_plt.set_xdata(xPos[:j])\n            real_plt.set_ydata(trueVal[:j])\n\n        plt.pause(1)\n\n    return f\ncovnersion_Anim(range(12),rand(12),rand(12),rand(12),rand(12))\n","205":"\"\"\"\n>>> from datetime import date\n>>> from workalendar.europe import France\n>>> cal = France()\n>>> cal.holidays(2013)\n[(datetime.date(2013, 1, 1), 'New year'),\n (datetime.date(2013, 4, 1), 'Easter Monday'),\n (datetime.date(2013, 5, 1), 'Labour Day'),\n (datetime.date(2013, 5, 8), 'Victory in Europe Day'),\n (datetime.date(2013, 5, 9), 'Ascension Thursday'),\n (datetime.date(2013, 5, 20), 'Whit Monday'),\n (datetime.date(2013, 5, 30), 'Corpus Christi'),\n (datetime.date(2013, 7, 14), 'Bastille Day'),\n (datetime.date(2013, 8, 15), 'Assumption of Mary to Heaven'),\n (datetime.date(2013, 11, 1), 'All Saints Day'),\n (datetime.date(2013, 11, 11), 'Armistice Day'),\n (datetime.date(2013, 12, 25), 'Christmas Day')]\n>>> cal.is_working_day(date(2013, 12, 25))  # it's Christmas\nFalse\n>>> cal.is_working_day(date(2013, 12, 29))  # it's Sunday\nFalse\n>>> cal.is_working_day(date(2013, 12, 26))\nTrue\n","206":"fig, ax = plt.subplots(1, 1, figsize=(9, 5))\nax.hist([data.ix[low:high, 'values'] for low, high in [(0, 70), (70, 85), (85, 90)]],\n         bins=15,\n         stacked=True,\n         rwidth=1.0,\n         label=['first70', 'next15', 'last5'])\nax.legend()\n","207":"tagger = ClassifierBasedPOSTagger(train=training_sentences, cutoff_prob=0.95)\n","208":"import numpy as np\nfrom scipy.stats import truncnorm, norm\n\na_s = np.random.uniform(0, 1, size=100)\nb_s = a_s + 0.2\n\ncdf_start = norm.cdf(a_s)\ncdf_stop = norm.cdf(b_s)\ncdf_samples = np.random.uniform(0, 1, size=(100, 100))\ncdf_samples *= (cdf_stop - cdf_start)[:, None]\ncdf_samples +=  cdf_start[:, None]\ntruncnorm_samples = norm.ppf(cdf_samples)\n","209":"html_theme_options = {\n    'page_width': 'auto',\n}\n","210":"foo.__dict__\n","211":"persons = []\nfor person in driver.find_elements_by_class_name('person'):\n    title = person.find_element_by_xpath('.\/\/div[@class=\"title\"]\/a').text\n    company = person.find_element_by_xpath('.\/\/div[@class=\"company\"]\/a').text\n\n    persons.append({'title': title, 'company': company})\n","212":">>> import ast\n>>> x = u'[ \"A\",\"B\",\"C\" , \" D\"]'\n>>> x = ast.literal_eval(x)\n>>> x\n['A', 'B', 'C', ' D']\n>>> x = [n.strip() for n in x]\n>>> x\n['A', 'B', 'C', 'D']\n","213":"from traits.api import HasTraits, Button\nfrom traitsui.api import View, Item\nimport numpy\n\n##you may need to uncoment these 2 lines to prevent \n##ImportErrors due to missing backends\n#from traits.etsconfig.api import ETSConfig\n#ETSConfig.toolkit = 'qt4' # or 'wx'    \n\nfrom pyface.api import FileDialog, OK\n\n\nclass ArrayToBeSaved(HasTraits):\n    save_as = Button('save as')\n\n    traits_view = View(Item('save_as'))\n\n    def __init__(self):\n        self.my_array = numpy.ones(3)\n\n    def _save_as_changed(self):\n        dlg = FileDialog(action='save as')\n        if dlg.open() == OK:\n            numpy.save(dlg.path, self.my_array)\n            self.my_array = numpy.zeros(3)\n\natbs = ArrayToBeSaved()\n\natbs.configure_traits()\n","214":"class RecordForm(forms.Form):\n    name = forms.CharField(max_length=255)\n    domain = forms.TypedChoiceField(choices=[])\n    type = forms.TypedChoiceField(choices=...)\n    content = forms.CharField()\n    ttl = forms.CharField()\n    comment = forms.CharField()\n\n    def __init__(self, *args, **kwargs):\n        super(RecordForm, self).__init__(*args, **kwargs)\n        self.fields['type'].choices = [(c.id, c.name) for c in Domain.objects.all()]\n","215":">>> import requests\n>>> from bs4 import BeautifulSoup\n>>> import re\n>>> url = \"http:\/\/www.webconfs.com\/domain-age.php\"\n>>> domain = 'youtube.com' \n>>> r = requests.post(url, {'domains': domain, 'submit': 'submit'})\n>>> soup = BeautifulSoup(r.content)\n>>> for item in soup.find_all('a', href=re.compile('website-history')):\n...     print item.text\n... \n9 years 0 months old\n","216":"#urls.py\n\nurlpatterns = patterns('',\n\n    url(r'^downloads\/(?P<parent_id>\\d+)\/$', ParentView.as_view(), name='parents_list'),\n    url(r'^downloads\/(?P<parent_id>\\d+)\/(?P<child_id>\\d+)\/$', ChildView.as_view(),\n                                    name='childs_list'),\n)\n","217":"from sqlalchemy import *\nfrom sqlalchemy.orm import *\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Foo(Base):\n    __tablename__ = 'foo'\n    id = Column(Integer, primary_key=True)\n    status = Column(String)\n    barId = Column(Integer, ForeignKey(\"bar.id\"))\n    bar = relationship(\"Bar\", lazy=\"joined\")\n\nclass Bar(Base):\n    __tablename__ = 'bar'\n    id = Column(Integer, primary_key=True)\n\ne = create_engine(\"sqlite:\/\/\", echo=True)\nBase.metadata.create_all(e)\n\ns = Session(e)\n\ns.add(Foo(id=1, bar=Bar()))\ns.commit()\n\nf1 = s.query(Foo).get(1)\nf1.status = 'done'\ns.commit()\n\nassert 'bar' not in f1.__dict__\ns.refresh(f1)\nassert 'bar' in f1.__dict__\ns.close()\n\nassert f1.bar.id == 1\n","218":"from functools import partial\nimport maya.cmds as cmds\n\ndef one (*args):\n    print '1'\n\ndef two (*args):\n    print '2'\n\ndef radioSwitch (a, state, *args):\n    if state:\n        cmds.radioButtonGrp(a, e=True, enable=False)\n    else:\n        cmds.radioButtonGrp(a, e=True, enable=True)\n\nwinID = 'xx'\nif cmds.window(winID, exists=True):\n    cmds.deleteUI(winID)\n\n\nwindow = cmds.window(winID, sizeable = False, title=\"Resolution Switcher\", widthHeight=(300, 100) )\n\ncmds.columnLayout( )\ncmds.text (label = '')\ncmds.text (label = '')\ncb_disable = cmds.checkBoxGrp( cat = (1,'left', 20), ncb = 1, l1='  DISABLE', offCommand = \"\" , onCommand = \"\" )\na = cmds.radioButtonGrp( cat = [(1,'left', 90),(2, 'left', 100)], enable=True, numberOfRadioButtons=2,   on1 = one , on2 = two )\ncmds.checkBoxGrp(cb_disable, e=1, offCommand = partial(radioSwitch, a, False))\ncmds.checkBoxGrp(cb_disable, e=1, onCommand = partial(radioSwitch, a, True))\ncmds.text (label = '')\ncmds.showWindow( window )\n","219":"In [37]: df = pd.DataFrame(['Slow', 'Normal', 'Fast', 'Slow'], columns=['Speed'])\n\nIn [38]: df\nOut[38]:\n    Speed\n0    Slow\n1  Normal\n2    Fast\n3    Slow\n\nIn [39]: pd.get_dummies(df['Speed'])\nOut[39]:\n   Fast  Normal  Slow\n0     0       0     1\n1     0       1     0\n2     1       0     0\n3     0       0     1\n","220":"if UserProfileLanuage.objects.filter(user=user, language=A).exists():\n    # do something\n","221":"keywords = []\n\n...\n        keywords.append(row[0].strip())\n","222":"from bisect import bisect\n\nd = {\"A\": 0, \"B\": 0, \"C\": 0, \"D\": 0, \"E\": 0, \"F\": 0}\n\n\ndef grade(score, breakpoints=[70, 80, 90, 100], grades='FBCDA'):\n    i = bisect(breakpoints, score)\n    return grades[i]\n\n\nfor n in [66, 67, 77, 88, 80, 90, 91,100]:\n    d[grade(n)] += n\nprint(d)\n{'A': 100, 'C': 168, 'B': 77, 'E': 0, 'D': 181, 'F': 145}\n","223":"import dir1\nif __name__ == '__main__':\n    __package__ = 'dir1.dir2'\n    from .. import in_dir1\n","224":">>> import socket\n>>> import struct\n>>> addr_long = int(\"0200A8C0\",16)\n>>> hex(addr_long)\n'0x200a8c0'\n>>> struct.pack(\"<L\", addr_long)\n'\\xc0\\xa8\\x00\\x02'\n\n>>> socket.inet_ntoa(struct.pack(\"<L\", addr_long))\n'192.168.0.2'\n>>> \n","225":"import sys\n\nfor arg in sys.argv:\n    print arg \n","226":"from django.db import models\nfrom django.db import transaction\n\nclass MyModel(models.Model):\n    # model definition\n\n    @transaction.commit_on_success()\n    def save(self, *args, **kwargs):\n        try:\n            super(MyModel, self).save(*args, **kwargs)\n            do_other_things()\n            obj2 = MySecondModel(mymodel = self, foo = \"bar\")\n            obj2.save()\n        except:\n            print 'exception'\n            raise\n        else:\n            print 'job done'\n\n\n\nclass MySecondModel(models.Model):\n    myModelId = models.ForeignKey(MyModel)\n    # other fields defining this model\n","227":"import encodings\nimport os\nimport pkgutil\n\nmodnames=set([modname for importer, modname, ispkg in pkgutil.walk_packages(\n    path=[os.path.dirname(encodings.__file__)], prefix='')])\naliases=set(encodings.aliases.aliases.values())\n\nprint(modnames-aliases)\n# set(['charmap', 'unicode_escape', 'cp1006', 'unicode_internal', 'punycode', 'string_escape', 'aliases', 'palmos', 'mac_centeuro', 'mac_farsi', 'mac_romanian', 'cp856', 'raw_unicode_escape', 'mac_croatian', 'utf_8_sig', 'mac_arabic', 'undefined', 'cp737', 'idna', 'koi8_u', 'cp875', 'cp874', 'iso8859_1'])\n\nprint(aliases-modnames)\n# set(['tactis'])\n\ncodec_names=modnames.union(aliases)\nprint(codec_names)\n# set(['bz2_codec', 'cp1140', 'euc_jp', 'cp932', 'punycode', 'euc_jisx0213', 'aliases', 'hex_codec', 'cp500', 'uu_codec', 'big5hkscs', 'mac_romanian', 'mbcs', 'euc_jis_2004', 'iso2022_jp_3', 'iso2022_jp_2', 'iso2022_jp_1', 'gbk', 'iso2022_jp_2004', 'unicode_internal', 'utf_16_be', 'quopri_codec', 'cp424', 'iso2022_jp', 'mac_iceland', 'raw_unicode_escape', 'hp_roman8', 'iso2022_kr', 'cp875', 'iso8859_6', 'cp1254', 'utf_32_be', 'gb2312', 'cp850', 'shift_jis', 'cp852', 'cp855', 'iso8859_3', 'cp857', 'cp856', 'cp775', 'unicode_escape', 'cp1026', 'mac_latin2', 'utf_32', 'mac_cyrillic', 'base64_codec', 'ptcp154', 'palmos', 'mac_centeuro', 'euc_kr', 'hz', 'utf_8', 'utf_32_le', 'mac_greek', 'utf_7', 'mac_turkish', 'utf_8_sig', 'mac_arabic', 'tactis', 'cp949', 'zlib_codec', 'big5', 'iso8859_9', 'iso8859_8', 'iso8859_5', 'iso8859_4', 'iso8859_7', 'cp874', 'iso8859_1', 'utf_16_le', 'iso8859_2', 'charmap', 'gb18030', 'cp1006', 'shift_jis_2004', 'mac_roman', 'ascii', 'string_escape', 'iso8859_15', 'iso8859_14', 'tis_620', 'iso8859_16', 'iso8859_11', 'iso8859_10', 'iso8859_13', 'cp950', 'utf_16', 'cp869', 'mac_farsi', 'rot_13', 'cp860', 'cp861', 'cp862', 'cp863', 'cp864', 'cp865', 'cp866', 'shift_jisx0213', 'johab', 'mac_croatian', 'cp1255', 'latin_1', 'cp1257', 'cp1256', 'cp1251', 'cp1250', 'cp1253', 'cp1252', 'cp437', 'cp1258', 'undefined', 'cp737', 'koi8_r', 'cp037', 'koi8_u', 'iso2022_jp_ext', 'idna'])\n","228":"In [248]:\n\nd = {112: 'en', 113: 'es', 114: 'es', 111: 'en'}\ndf['D'] = df['U'].map(d)\ndf\nOut[248]:\n     U   L   D\n0  111  en  en\n1  112  en  en\n2  112  es  en\n3  113  es  es\n4  113  ja  es\n5  113  zh  es\n6  114  es  es\n","229":"class App(Frame):\n    def __init__(self, master):\n        self.matrix = Grid(self, 10, 10)\n        self.label = Label(self, text=\"Hello\")\n        self.matrix.grid(row=0, column=0, sticky=\"nsew\")\n\n        self.label.grid(row=0, column=1, sticky=\"nsew\")\n        self.grid_rowconfigure(0, weight=1)\n        self.grid_columnconfigure(0, weight=1)\n","230":" # coding: utf-8\n from nose.plugins.attrib import attr\n\n\n @attr(\"foo\", \"bar\", \"baz\")\n def test1():\n     print \"I'm test1\"\n\n\n @attr(\"foo\")\n def test_2():\n     print \"I'm test2\"\n","231":"self.testbed.init_blobstore_stub()\nself.testbed.init_files_stub()\nfrom google.appengine.api import files\nfile_name = files.blobstore.create(mime_type='application\/octet-stream')\nwith files.open(file_name, 'a') as f:\n    f.write('blobdata')\nfiles.finalize(file_name)\nblob_key = files.blobstore.get_blob_key(file_name)\n","232":"#!\/usr\/bin\/python\nemail = \"\" # Initialize the email\ncount = 0  # and counter\nimport fileinput\n\nfor line in fileinput.input(\"word.txt\"): # Interator: process a line at a time\n  myArr = line.split(\",\")\n  if (email != myArr[0]): # New email; print and reset count, email\n    for n in range(0,count):\n      print email + \",\" + str(n+1) + \",\" + str(count)\n    email = myArr[0]\n    count = 1  \n  else: # Same email, increment count\n    count = count + 1\n\n# Print the final email\nfor n in range(0,count):\n  print email + \",\" + str(n+1) + \",\" + str(count)\n","233":"import datetime\nqueryset = MyModel.objects.filter(\\\n     time_created__lt=(datetime.now()-datetime.timedelta(minutes=3)))\n","234":">>> neis = g.neighbors(\"a\", mode=\"out\")\n>>> g.vs[neis][\"name\"]\n","235":"net use \\\\computername\\path\\to\\dir \/user:username password\n","236":"In [4]: df = pd.read_csv('triangle.csv', header=None)\n\nIn [5]: df\nOut[5]: \n    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14\n0   75 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN\n1   95  64 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN\n2   17  47  82 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN\n3   18  35  87  10 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN\n4   20   4  82  47  65 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN\n5   19   1  23  75   3  34 NaN NaN NaN NaN NaN NaN NaN NaN NaN\n6   88   2  77  73   7  63  67 NaN NaN NaN NaN NaN NaN NaN NaN\n7   99  65   4  28   6  16  70  92 NaN NaN NaN NaN NaN NaN NaN\n8   41  41  26  56  83  40  80  70  33 NaN NaN NaN NaN NaN NaN\n9   41  48  72  33  47  32  37  16  94  29 NaN NaN NaN NaN NaN\n10  53  71  44  65  25  43  91  52  97  51  14 NaN NaN NaN NaN\n11  70  11  33  28  77  73  17  78  39  68  17  57 NaN NaN NaN\n12  91  71  52  38  17  14  91  43  58  50  27  29  48 NaN NaN\n13  63  66   4  68  89  53  67  30  73  16  69  87  40  31 NaN\n14   4  62  98  27  23   9  70  98  73  93  38  53  60   4  23\n\nIn [24]: for row in df.iterrows():\n   ....:     for item in row[1]:\n   ....:         if np.isnan(item) == False:\n   ....:             l.append((n, item))\n   ....:             n += 1\n\n\nIn [26]: import networkx as nx\n\nIn [27]: G = nx.Graph()\n\nIn [28]: G.add_nodes_from(l)\n\nIn [29]: G.nodes()\nOut[29]: \n[(113, 73.0),\n (74, 39.0),\n (64, 51.0),\n (111, 70.0),\n (72, 17.0),\n (69, 28.0),\n (102, 87.0),\n (46, 48.0),\n (118, 4.0),\n (105, 4.0),\n (92, 66.0),\n (55, 53.0),\n (19, 3.0),\n (17, 23.0),\n (90, 48.0),\n (18, 75.0),\n (27, 67.0),\n (37, 41.0),\n (8, 87.0),\n (59, 25.0),\n (43, 70.0), etc......\n","237":"request.db = ...connect...\n","238":"re.sub(r'\\d+\"', \"\", strin)\n","239":"import seaborn as sns\niris = sns.load_dataset(\"iris\")\nx_vars = ['sepal_length', 'sepal_width', 'petal_length']\ny_vars = ['petal_width']\npp = sns.pairplot(data=iris, x_vars=x_vars, y_vars=y_vars)\n_ = plt.setp(pp.axes[0,1].get_yticklabels(), visible=True) #changing the 2nd plot\n","240":"In [6]: a = [['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h'], ['i', 'j', 'k', 'l'], ['m', 'n'], ['o']]\n\nIn [7]: a.sort(key=len)\n\nIn [8]: print a\n[['o'], ['d', 'e'], ['m', 'n'], ['a', 'b', 'c'], ['f', 'g', 'h'], ['i', 'j', 'k', 'l']]\n","241":"class ViewPerso (QtGui.QTableView):\n    def __init__(self, parent = None):\n        super(ViewPerso, self).__init__(parent)\n        self.parent = parent\n\n    def currentChanged (self, current, previous):\n        index = current.sibling(current.row(), 4)\n        try:\n            if not index.data() or len(self.parent.vidsSelected()) > 1:\n                return\n        except AttributeError:\n            pass\n        self.clicked.emit(current)\n        self.scrollTo(current)\n\n    def keyboardSearch (self, search):\n        pass\n\n    def keyPressEvent (self, e):\n        super(ViewPerso, self).keyPressEvent(e)\n        e.ignore()\n","242":">>> p = \"^[a-z]{2}:(\\w+)$\"\n>>> re.match(p, \"eu:road\").group(1)\n'road'\n>>> re.match(p, \"road:eu\")\nNone\n","243":"$.ajaxSetup({\n    beforeSend: function(xhr, settings) {\n        function getCookie(name) {\n            var cookieValue = null;\n            if (document.cookie && document.cookie != '') {\n                var cookies = document.cookie.split(';');\n                for (var i = 0; i < cookies.length; i++) {\n                    var cookie = jQuery.trim(cookies[i]);\n                    \/\/ Does this cookie string begin with the name we want?\n                    if (cookie.substring(0, name.length + 1) == (name + '=')) {\n                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                        break;\n                    }\n                }\n            }\n            return cookieValue;\n        }\n        if (!(\/^http:.*\/.test(settings.url) || \/^https:.*\/.test(settings.url))) {\n            \/\/ Only send the token to relative URLs i.e. locally.\n            xhr.setRequestHeader(\"X-CSRFToken\", getCookie('csrftoken'));\n        }\n    }\n});\n","244":">>> text = \"Rac\u0142awicka R\u00f3g\u00e9\"\n>>> text.encode('1252', 'ignore').decode('1252')\n'Racawicka R\u00f3g\u00e9'\n","245":"q = session.query(Person)\nq = q.filter(Person.building == g.current_building)\nq = q.filter(~Person.groups.any())\n","246":"In [153]:\n\ndef num_spells(x):\n    t = list(x.unique())\n    return [t.index(el)+1 for el in x]\n\nd1.apply(num_spells, axis=1)\n\nOut[153]:\n    1962  1963  1964  1965\nc1     1     1     1     2\nc2     1     1     2     2\nc3     1     1     1     1\n\nIn [144]:\nfrom itertools import chain, repeat\ndef spell_len(x):\n    t = list(x.value_counts())\n    return list(chain.from_iterable(repeat(i,i) for i in t))\n\nd1.apply(spell_len, axis=1)\nOut[144]:\n    1962  1963  1964  1965\nc1     3     3     3     1\nc2     2     2     2     2\nc3     4     4     4     4\n","247":"(defn extract-data\n  \"extract 4 integer from a string line according to a package name\"\n  [pkg line]\n  (map read-string\n       (rest (first\n              (re-seq\n               (re-pattern\n                (str pkg \".*>(\\\\d+)\/(\\\\d+).*>(\\\\d+)\/(\\\\d+)\"))\n               line)))))\n\n(defn scan-lines-by-pkg\n  \"scan all string lines and extract all data as integer sequences\n    according to package names\"\n  [pkgs lines]\n  (filter seq (for [pkg pkgs\n                    line lines]\n                (extract-data pkg line))))\n\n(defn sum-data\n  \"add all data in valid lines together\"\n  [pkgs lines]\n  (apply map + (scan-lines-by-pkg pkgs lines)))\n\n(defn get-percent\n  [covered all]\n  (str (format \"%.2f\" (float (\/ (* covered 100) all))) \"%\"))\n\n(defn get-cov\n  [pkgs lines]\n  {:line-cov (apply get-percent (take 2 (sum-data pkgs lines)))\n    :branch-cov (apply get-percent (drop 2 (sum-data pkgs lines)))})\n\n(get-cov [\"d\" \"f\"] [\"abc\" \"d>11\/23d>34\/89d\" \"e>25\/65e>13\/25e\" \"f>36\/92f>19\/76\"])\n","248":"import sys\nimport select\nimport tty\nimport termios\n\nclass NonBlockingConsole(object):\n\n    def __enter__(self):\n        self.old_settings = termios.tcgetattr(sys.stdin)\n        tty.setcbreak(sys.stdin.fileno())\n        return self\n\n    def __exit__(self, type, value, traceback):\n        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.old_settings)\n\n\n    def get_data(self):\n        if select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], []):\n            return sys.stdin.read(1)\n        return False\n\n\nif __name__ == '__main__':\n    # Use like this\n    with NonBlockingConsole() as nbc:\n        i = 0\n        while 1:\n            print i\n            i += 1\n\n            if nbc.get_data() == '\\x1b':  # x1b is ESC\n                break\n","249":"query=\"select 1<2 as val;\"\nresult=plpy.execute(query)\nif result[0][\"val\"]: \n   print 'of corse: 1 < 2'\nelse:\n   print 'this will never be printed'\n","250":"from django.db.models import Count\n\nTag.objects.annotate(action_count=Count('action'))\n","251":"dt = pandas.read_csv('file.csv', index_col=1, skiprows=1).T.to_dict()\n","252":">>> m = max(a)\n>>> [i for i, j in enumerate(a) if j == m]\n[9, 12]\n","253":"import json, subprocess\n\ndef remove_unused_snaps(region):\n    line = 'aws ec2 describe-images --region {} --owners self'.format(region)\n    p = subprocess.Popen(line.split(),\n                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out, err = p.communicate()\n    obj = json.loads(out.decode(\"utf-8\"))\n\n    snaps_used = set(i['BlockDeviceMappings'][0]['Ebs']['SnapshotId'] for i in obj['Images'])\n\n    line = 'aws ec2 describe-snapshots --region {} --owner-ids self'.format(region)\n    p = subprocess.Popen(line.split(),\n                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out, err = p.communicate()\n    obj = json.loads(out.decode(\"utf-8\"))\n\n    snaps_old = set(i['SnapshotId'] for i in obj['Snapshots'])\n\n    line = 'aws ec2 delete-snapshot --region {} --snapshot-id'.format(region)\n    for snap in list(snaps_old - snaps_used):\n        p = subprocess.Popen(line.split() + [snap],\n                             stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        out, err = p.communicate()\n        print(snap, out, err)\n","254":"logger(level=\"debug\")(repeat(5)(foo))(var)\n","255":">>> [(k, '=', v) for k, v in d.items()]\n[('a', '=', 1), ('c', '=', 3), ('b', '=', 2)]\n","256":"class MyDict(dict):\n    def __repr__(self):\n        s = \"{\"\n        for key in self:\n            s += \"{0}:{1}, \".format(key, self[key])\n        if len(s) > 1:\n            s = s[0: -2]\n        s += \"}\"\n        return s\n\nMyDict({'a': 1, 'b': 2})\n{a:1, b:2}\n","257":"import csv\n\nwith open('summ.csv') as csvfile:\n    reader = csv.DictReader(csvfile)\n    kept2 = [row for row in reader]\n","258":"awk '{for(i=1;i<=NF;i+=2)$(i+1)=$(i+1)OFS sprintf(\"%.3f\",1-$(i+1)-$i)}1' OFS='\\t' file\n0.800   0.200   0.000   0.000   0.200   0.800   0.800   0.200   0.000\n0.000   0.900   0.100   0.000   0.900   0.100   0.000   0.900   0.100\n0.900   0.010   0.090   0.900   0.010   0.090   0.770   0.010   0.220\n","259":"QByteArray\nQChar\nQColor\nQDate\nQDateTime\nQKeySequence\nQLatin1Char\nQLatin1String\nQLine\nQLineF\nQMatrix\nQPoint\nQPointF\nQPolygon\nQRect\nQRectF\nQSize\nQSizeF\nQString\nQTime\n","260":"import os \nimport smtplib\nfrom email.MIMEMultipart import MIMEMultipart\nfrom email.MIMEText import MIMEText\nfrom email.MIMEImage import MIMEImage\nfrom email.MIMEBase import MIMEBase\nfrom email import Encoders\n\n\n#Set up crap for the attachments\nfiles = \"\/tmp\/test\/dbfiles\"\nfilenames = [os.path.join(files, f) for f in os.listdir(files)]\n#print filenames\n\n\n#Set up users for email\ngmail_user = \"joe@email.com\"\ngmail_pwd = \"somepasswd\"\nrecipients = ['recipient1','recipient2']\n\n#Create Module\ndef mail(to, subject, text, attach):\n   msg = MIMEMultipart()\n   msg['From'] = gmail_user\n   msg['To'] = \", \".join(recipients)\n   msg['Subject'] = subject\n\n   msg.attach(MIMEText(text))\n\n   #get all the attachments\n   for file in filenames:\n      part = MIMEBase('application', 'octet-stream')\n      part.set_payload(open(file, 'rb').read())\n      Encoders.encode_base64(part)\n      part.add_header('Content-Disposition', 'attachment; filename=\"%s\"' % file)\n      msg.attach(part)\n\n   mailServer = smtplib.SMTP(\"smtp.gmail.com\", 587)\n   mailServer.ehlo()\n   mailServer.starttls()\n   mailServer.ehlo()\n   mailServer.login(gmail_user, gmail_pwd)\n   mailServer.sendmail(gmail_user, to, msg.as_string())\n   # Should be mailServer.quit(), but that crashes...\n   mailServer.close()\n\n#send it\nmail(recipients,\n   \"Todays report\",\n   \"Test email\",\n   filenames)\n","261":"import asyncio\n\n@asyncio.coroutine\ndef echo_server():\n    yield from asyncio.start_server(handle_connection, 'localhost', 8000)\n\n@asyncio.coroutine\ndef handle_connection(reader, writer):\n    while True:\n        data = yield from reader.read(8192)\n        if not data:\n            break\n        writer.write(data)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(echo_server())\ntry:\n    loop.run_forever()\nfinally:\n    loop.close()\n","262":"for f in glob.glob(...)[n:]:\n    with open(f) as inputfile:\n","263":">>> def numeric_compare(x, y):\n        return x - y\n>>> sorted([5, 2, 4, 1, 3], cmp=numeric_compare)\n[1, 2, 3, 4, 5]\n","264":"dict3 = {k: [dict2[i] for i in v] for k, v in dict1.items()}\n","265":">>> from itertools import izip_longest\n>>> data=[[('a1','b1'),('c1','d1')],[('a2','b2'),('c2','d2'),('e2','f2')],[('a3','b3'),('c3','d3'),('e3','f3')]]\n>>> for columns in izip_longest(*data,fillvalue=''):\n        print '\\t'.join(map(' '.join,columns))\n\n\na1 b1   a2 b2   a3 b3\nc1 d1   c2 d2   c3 d3\n        e2 f2   e3 f3\n","266":"import boto\nimport threading\nimport tempfile\nimport os\n\nDEFAULT_CHUNK_SIZE = 2**20 * 64 # 64 MB per request\n\nclass BigFile(object):\n    def __init__(self, file_obj, file_size, chunksize=DEFAULT_CHUNK_SIZE, start=True):\n        self._file_obj = file_obj\n        self._file_size = file_size\n        self._lock = threading.RLock()\n        self._load_condition = threading.Condition(self._lock)\n        self._load_run = True\n        self._loc = 0\n        self._chunk_size = chunksize\n        chunk_count = self._file_size \/\/ self._chunk_size\n        chunk_count += 1 if self._file_size % self._chunk_size else 0\n        self._chunks = [None for _ in xrange(chunk_count)]\n        self._load_thread = threading.Thread(target=self._load)\n        if start:\n            self._load_thread.start()\n\n    def _chunk_loc(self):\n        ' Returns (chunk_num, chunk_offset) for a given location in the larger file '\n        return self._loc \/\/ self._chunk_size, self._loc % self._chunk_size\n\n    def _load_chunk(self, chunk_num):\n        tf = tempfile.TemporaryFile()\n        start_idx = chunk_num * self._chunk_size\n        self._file_obj.seek(start_idx)\n        tf.write(self._file_obj.read(self._chunk_size))\n        with self._lock:\n            self._chunks[chunk_num] = (tf, tf.tell()) # (tempfile, size)\n            self._load_condition.notify()\n\n    def _load(self):\n        while self._load_run:\n            # check current chunk, load if needed\n            with self._lock:\n                chunk_num, _ = self._chunk_loc()\n                chunk_and_size = self._chunks[chunk_num]\n            if chunk_and_size is None:\n                self._load_chunk(chunk_num)\n\n            # find next empty chunk\n            for i in xrange(len(self._chunks)):\n                cur_chunk = chunk_num + i\n                    cur_chunk %= len(self._chunks) # loop around\n                if self._chunks[cur_chunk] is None:\n                    self._load_chunk(cur_chunk)\n                    break\n            else:\n                # all done, stop thread\n                break\n\n    def seek(self, loc, rel=os.SEEK_SET):\n        with self._lock:\n            if rel == os.SEEK_CUR:\n                self._loc += loc\n            elif rel == os.SEEK_SET:\n                self._loc = loc\n            elif rel == os.SEEK_END:\n                self._loc = self._file_size + loc\n\n    def read(self, bytes_to_read):\n        ret = []\n        with self._lock:\n            chunk_num, chunk_offset = self._chunk_loc()\n            while (bytes_to_read > 0 or bytes_to_read == -1) and chunk_num < len(self._chunks):\n                while not self._chunks[chunk_num]:\n                    self._load_condition.wait()\n                chunk, size = self._chunks[chunk_num]\n                cur_chunk_bytes = min(self._chunk_size-chunk_offset, bytes_to_read, size)\n                chunk.seek(chunk_offset, os.SEEK_SET)\n                data = chunk.read(cur_chunk_bytes)\n                ret.append(data)\n                bytes_to_read -= len(data)\n                chunk_num += 1\n        return ''.join(ret)\n\n    def start(self):\n        self._load_thread.start()\n\n    def join(self):\n        self._load_thread.join()\n\n    def stop(self):\n        self._load_run = False\n\nclass S3RangeReader:\n    def __init__(self, key_obj):\n        self._key_obj = key_obj\n        self.size = self._key_obj.size\n        self._pos = 0\n\n    def __len__(self):\n        return self.size\n\n    def seek(self, pos, rel=os.SEEK_SET):\n        if rel == os.SEEK_CUR:\n            self._pos += pos\n        elif rel == os.SEEK_SET:\n            self._pos = pos\n        elif rel == os.SEEK_END:\n            self._pos = self.size + pos\n\n    def read(self, bytes=-1):\n        if bytes == 0 or self._pos >= self.size:\n            return ''\n        else:\n            if bytes == -1:\n                bytes = self.size\n            headers = {'Range': 'bytes=%s-%s' % (self._pos, self._pos + bytes - 1)} # S3 ranges are closed ranges: [start,end]\n            return self._key_obj.get_contents_as_string(headers=headers)\n\nif __name__ == '__main__':\n    key = boto.s3_connect().get_bucket('mybucket').get_key('my_key')\n    reader = S3RangeReader(key)\n    bf = BigFile(reader, len(reader)) # download starts by default\n    bf.seek(1000000)\n    bf.read(100) # blocks\n    bf.seek(0)\n    bf.read(100) # should not block\n","267":"lst1, lst2, lst3 = map(list, zip(*tuple_of_lists))\n","268":"rows_xpath = XPath(\"\/\/*[@id='content-primary']\/table\/tbody\/tr[td[1]\/span\/span\/\/text()='%s']\" % (date))\n","269":"import csv\ncr = csv.reader(open(\"temp.csv\",\"rb\"))\narr = range(100) #adjust to needed\nx = 0\nfor row in cr:    \n    arr[x] = row\n    x += 1\n\nprint arr[:22] #adjust to needed\n","270":"import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.ticker as ticker\n\nimg = np.random.randn(300,300)\nmyplot = plt.imshow(img)\n\ndef fmt(x, pos):\n    a, b = '{:.2e}'.format(x).split('e')\n    b = int(b)\n    return r'${} \\times 10^{{{}}}$'.format(a, b)\n\nplt.colorbar(myplot, format=ticker.FuncFormatter(fmt))\nplt.show()\n","271":"t = np.arange(0.0, 2.0, 0.01)\ns = np.sin(2*np.pi*t)\nplt.plot(t, s, c=seaborn.color_palette()[2])\nplt.plot(t, 2*s, c=seaborn.color_palette()[2])\n","272":"In [11]: ds.map(json.loads).apply(lambda x: pd.Series([x[\"a\"] if \"a\" in x else None, x[\"b\"] if \"b\" in x else None]))\nOut[11]:\n             0    1\nTNFRSF18   0.0  0.0\nSDF4       NaN  0.0\nTNFRSF4    0.0  NaN\nB3GALT6    0.0  0.0\nC1orf159   3.0  NaN\nBC033949   NaN  2.0\nISG15      5.0  3.0\nWASH7P     0.0  NaN\nNOC2L      0.0  NaN\nLOC643837  0.0  4.0\n","273":"    if e_move_count <= 500:\n        self.enemy.move(e_xMove, e_yMove)\n        e_move_count += 1\n\n    if e_move_count >= 500:\n        e_xMove = random.randint(-1,1)\n        e_yMove = random.randint(-1,1)\n        self.enemy.move(e_xMove, e_yMove)\n        e_move_count = 0\n","274":"data = data.reshape(81, 201, 3)\nx = data[...,0]\ny = data[...,1]\nz = data[...,2]\n\nCS = plt.contourf(x,y,z,200,cmap=plt.cm.jet,rasterized=True)\nplt.colorbar()\n\nplt.show() \n","275":"result = format(int(strvalue, 16) + 37, 'x')\n","276":">>> def fn(*args):\n...     print args\n...     \n>>> fn([1, 2, 3])\n([1, 2, 3],)\n>>> fn(*[1, 2, 3])\n(1, 2, 3)\n>>> \n","277":">>> numpy.minimum.accumulate([5,4,6,10,3])\narray([5, 4, 4, 4, 3])\n","278":"while True:\n    try:\n        speed_limit = int(input(\"What is your speed zone? \"))\n        break\n    except ValueError:\n        print(\"That is not a number! \")\n        continue\n\nwhile True:\n    print(\"What speed is the car going?\")\n    try:\n        pass_car_speed = int(input( \"Enter speed, or 0 to quit: \"))\n    except ValueError:\n        print(\"Invalid number! \")\n        continue\n\n    if not pass_car_speed: # 0 is False, non-zero True\n        break # quit loop (and program)\n\n    if pass_car_speed <= speed_limit:\n        print(\"This car is under the limit. No ticket needed!\")\n    else:\n        fine = (pass_car_speed - speed_limit) * 10\n        name = input(\"What is the car model name? \")\n        print(\"____________________________________________\")\n        print(\"   | P O L I C E   T I C K E T |   \")\n        print(\"   | Speed: \",pass_car_speed,\"   \")\n        print(\"   | Fine Cost: \",fine,\"    \")\n        print(\"   | Car Name: \",name,\"  \")\n        print(\"____________________________________________\")\n\nprint(\"Goodbye!\")\n","279":"import os, re\n\ndef purge(dir, pattern):\n    for f in os.listdir(dir):\n    \tif re.search(pattern, f):\n    \t\tos.remove(os.path.join(dir, f))\n","280":"import gtk\nicon_theme = gtk.icon_theme_get_default()\nicon_info = icon_theme.lookup_icon(\"my-icon-name\", 48, 0)\nprint icon_info.get_filename()\n","281":"import gmpy2\n\ndef matching_bits(x, y):\n    '''Returns the number of bits that match between x and y. The\n    sign of x and y are ignored. x and y must be of type mpfr.'''\n\n    # Force both values to be positive, and x >= y.\n    x = abs(x)\n    y = abs(y)\n    if x < y:\n        x, y = y, x\n\n    if not isinstance(x, type(gmpy2.mpfr(0))) or not isinstance(y, type(gmpy2.mpfr(0))):\n        raise TypeError(\"Arguments must be of type 'mpfr'.\")\n\n    x_bits, x_exp, x_prec = x.digits(2)\n    y_bits, y_exp, y_prec = y.digits(2)\n\n    # (x_exp - y_exp) is the number of zeros that must be prepended\n    # to x to align the mantissas. If that is greater than the precision\n    # y, then no bits in common.\n    if (x_exp - y_exp) > x_prec:\n        return 0\n\n    x_bits = \"0\" * (x_exp - y_exp) + x_bits\n\n    count = 0\n    while count < min(x_prec, y_prec) and x_bits[count] == y_bits[count]:\n        count += 1\n    return count\n","282":"class DynamicModelSerializer(serializers.ModelSerializer):\n\"\"\"\nA ModelSerializer that takes an additional `fields` argument that\ncontrols which fields should be displayed, and takes in a \"nested\"\nargument to return nested serializers\n\"\"\"\n\ndef __init__(self, *args, **kwargs):\n    fields = kwargs.pop(\"fields\", None)\n    exclude = kwargs.pop(\"exclude\", None)\n    nest = kwargs.pop(\"nest\", None)\n\n    if nest is not None:\n        if nest == True:\n            self.Meta.depth = 1\n\n    super(DynamicModelSerializer, self).__init__(*args, **kwargs)\n\n    if fields is not None:\n        # Drop any fields that are not specified in the `fields` argument.\n        allowed = set(fields)\n        existing = set(self.fields.keys())\n        for field_name in existing - allowed:\n            self.fields.pop(field_name)\n\n    if exclude is not None:\n        for field_name in exclude:\n            self.fields.pop(field_name)\n","283":"def flip(picture):\n    width = getWidth(picture)\n    height = getHeight(picture)\n    for y in range(0, height\/2):\n      for x in range(0, width):\n        **p1 = getPixel(picture, width - 1 - x, y)**\n        p2 = getPixel(picture, x, height - 1 - y,)\n        color = getColor(p1)\n        setColor(p1, getColor(p2))\n        setColor(p2, color)\n","284":"# api.py\nclass CustomCommentResource(ModelResource):\n    children = fields.ToManyField('self', lambda bundle: bundle.obj.customcomment_set.all(), null=True, blank=True, full=True)\n\n    class Meta:\n        queryset = CustomComment.objects.filter(parent_comment=None, active=True)\n        resource_name = 'comment'\n","285":"#!\/usr\/bin\/python\n# -*- coding: utf-8 -*-\n\n\nfrom ctypes import windll, Structure, c_long, byref #windows only\n\n\nclass RECT(Structure):\n    _fields_ = [\n    ('left',    c_long),\n    ('top',     c_long),\n    ('right',   c_long),\n    ('bottom',  c_long),\n    ]\n    def width(self):  return self.right  - self.left\n    def height(self): return self.bottom - self.top\n\n\ndef onTop(window):\n    SetWindowPos = windll.user32.SetWindowPos\n    GetWindowRect = windll.user32.GetWindowRect\n    rc = RECT()\n    GetWindowRect(window, byref(rc))\n    SetWindowPos(window, -1, rc.left, rc.top, 0, 0, 0x0001)\n","286":"class ImageFactory(factory.django.DjangoModelFactory):\n    class Meta:\n        model = Image\n\n    image = factory.LazyAttribute(\n            lambda _: ContentFile(\n                factory.django.ImageField()._make_data(\n                    {'width': 1024, 'height': 768}\n                ), 'example.jpg'\n            )\n        )\n","287":"class MyAuthenticationForm(AuthenticationForm):\n    username = forms.CharField(label=_(\"Username\"), max_length=64)\n","288":">> s = \"banana 4 apple 2 orange 4\"\n>> lst = s.split()\n>> dict(zip(lst[::2], lst[1::2]))\n","289":"import ctypes\n\ndef deref(addr, typ):\n    return ctypes.cast(addr, ctypes.POINTER(typ))\n\nderef(id(4), ctypes.c_int)[6] = 5\n\n2 + 2\n#>>> 5\n\n2 + 2 == 5\n#>>> True\n","290":"(r'\/browse\/article\/([a-zA-Z0-9_-]+)(?:\/([0-9]*))?', ArticleHandler),\n","291":"class Employee: pass\ndef foo(self): pass\nEmployee.foo = foo\n","292":"dict( (o.name,o) for o in obj_list )[name]\n","293":"files_url = \"%s\/files\/content\" % (settings.BOX_API_HOST)\nheaders = {\"Authorization\": \"BoxAuth api_key=%s&auth_token=%s\" % \n              (settings.BOX_API_KEY, self.doctor.box_auth_token)\n          }\n\nfile_root, file_suffix = os.path.splitext(str(self.document))\nfilename = \"%s%s\" % (slugify(self.description), file_suffix)\nfiles = {\n        'filename1': open(settings.MEDIA_ROOT + str(self.document), 'rb'),\n        }\ndata = {\n        'filename1': filename,\n        'folder_id': str(self.patient.get_box_folder()),\n       }\n\nr = requests.post(files_url,\n                  headers=headers,\n                  files=files,\n                  data=data)\n\nfile_response = simplejson.loads(r.text)\n\ntry:\n    if int(file_response['entries'][0]['id']) > 0:\n        box_file_id = int(file_response['entries'][0]['id'])\n\n        #Update the name of file\n        file_update_url = \"%s\/files\/%s\" % (settings.BOX_API_HOST, box_file_id) \n        data_update = {\"name\":  filename}\n        file_update = requests.put(file_update_url,\n                                   data=simplejson.dumps(data_update),\n                                   headers=headers)\n\n        LocalDocument.objects.filter(id=self.id).update(box_file_id=box_file_id)\nexcept:\n    pass\n","294":"[~]$ python\nPython 2.7.5+ (default, Sep 17 2013, 17:31:54) \n[GCC 4.8.1] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \n>>> import requests\n>>> \n>>> r = requests.get('http:\/\/www.google.com')\n>>> \n>>> r.status_code\n200\n>>> r.content\n'<!doctype html><html itemscope=\"\" itemtype=\"http:\/\/schema.org\/WebPage\" lang=\"en\"><head><meta content=\"Search the world\\'s information, including webpages, images, videos and more. Google has many special features to help you find exactly what you\\'re looking for.\" name=\"description\"><meta content=\"noodp\" name=\"robots\"><meta content=\"\/logos\/doodles\/2015\/eiji-tsuburayas-114th-birthday-4809204506296320.2-hp.jpg\" itemprop=\"image\"><meta content=\"Make a movie with Eiji Tsuburaya! #GoogleDoodle\" property=\"og:description\"><meta content=\"http:\/\/www.google.com\/logos\/doodles\/2015\/eiji-tsuburayas-114th-birthday-4809204506296320.2-hp.jpg\" property=\"og:image\"><meta content=\"356\" property=\"og:image:width\"><meta content=\"200\" property=\"og:image:height\"><title>Google<\/title><script>(function(){window.google={kEI:\\'QuybVeO7Osy4sAXDxIKQCg\\',kEXPI:\\'18168,3700062,3700306,4020727,4029815,4032235,4032500,4032678,4033307,4033344,4034631,4034882,4036363,4036366,4036470,4036848,4036948,4037333,4037457,4037855,4037921,4037960,4038777,4039047,4039280,4039379,4039386,4039403,4039706,4039878,4040028,4040117,4040135,4040240,8300096,8300200,8300202,8500394,8501295,8501406,8501489,10200083,10201088,10201270,10201302,10201304\\',authuser:0,kscs:\\'c9c918f0_10\\'};google.kHL=\\'en\\';})();(function(){google.lc=[];google.li=0;google.getEI=function(a){for(var b;a&&(!a.getAttribute||!(b=a.getAttribute(\"eid\")));)a=a.parentNode;return b||google.kEI};google.getLEI=function(a){for(var b=null;a&&(!a.getAttribute||!(b=a.getAttribute(\"leid\")));)a=a.parentNode;return b};google.https=function(){return\"https:\"==window.location.protocol};google.ml=function(){return null};google.time=function(){return(new Date).getTime()};google.log=function(a,b,d,e,g){a=google.logUrl(a,b,d,e,g);if(\"\"!=a){b=new Image;var c=google.lc,f=google.li;c[f]=b;b.onerror=b.onload=b.onabort=function(){delete c[f]};window.google&&window.google.vel&&window.google.vel.lu&&window.google.vel.lu(a);b.src=a;google.li=f+1}};google.logUrl=function(a,b,d,e,g){var c=\"\",f=google.ls||\"\";if(!d&&-1==b.search(\"&ei=\")){var h=google.getEI(e),c=\"&ei=\"+h;-1==b.search(\"&lei=\")&&((e=google.getLEI(e))?c+=\"&lei=\"+e:h!=google.kEI&&(c+=\"&lei=\"+google.kEI))}a=d||\"\/\"+(g||\"gen_204\")+\"?atyp=i&ct=\"+a+\"&cad=\"+b+c+f+\"&zx=\"+google.time();\/^http:\/i.test(a)&&google.https()&&(google.ml(Error(\"a\"),!1,{src:a,glmm:1}),a=\"\");return a};google.y={};google.x=function(a,b){google.y[a.id]=[a,b];return!1};google.load=function(a,b,d){google.x({id:a+k++},function(){google.load(a,b,d)})};var k=0;})();google.kCSI={};var _gjwl=location;function _gjuc(){var a=_gjwl.href.indexOf(\"#\");if(0<=a&&(a=_gjwl.href.substring(a),0<a.indexOf(\"&q=\")||0<=a.indexOf(\"#q=\"))&&(a=a.substring(1),-1==a.indexOf(\"#\"))){for(var d=0;d<a.length;){var b=d;\"&\"==a.charAt(b)&&++b;var c=a.indexOf(\"&\",b);-1==c&&(c=a.length);b=a.substring(b,c);if(0==b.indexOf(\"fp=\"))a=a.substring(0,d)+a.substring(c,a.length),c=d;else if(\"cad=h\"==b)return 0;d=c}_gjwl.href=\"\/search?\"+a+\"&cad=h\";return 1}return 0}\\nfunction _gjh(){!_gjuc()&&window.google&&google.x&&google.x({id:\"GJH\"},function(){google.nav&&google.nav.gjh&&google.nav.gjh()})};window._gjh&&_gjh();<\/script><style>#gbar,#guser{font-size:13px;padding-top:1px !important;}#gbar{height:22px}#guser{padding-bottom:7px !important;text-align:right}.gbh,.gbd{border-top:1px solid #c9d7f1;font-size:1px}.gbh{height:0;position:absolute;top:24px;width:100%}@media all{.gb1{height:22px;margin-right:.5em;vertical-align:top}#gbar{float:left}}a.gb1,a.gb4{text-decoration:underline !important}a.gb1,a.gb4{color:#00c !important}.gbi .gb4{color:#dd8e27 !important}.gbf .gb4{color:#900 !important}\\n<\/style><style>body,td,a,p,.h{font-family:arial,sans-serif}body{margin:0;overflow-y:scroll}#gog{padding:3px 8px 0}td{line-height:.8em}.gac_m td{line-height:17px}form{margin-bottom:20px}.h{color:#36c}.q{color:#00c}.ts td{padding:0}.ts{border-collapse:collapse}em{font-weight:bold;font-style:normal}.lst{height:25px;width:496px}.gsfi,.lst{font:18px arial,sans-serif}.gsfs{font:17px arial,sans-serif}.ds{display:inline-box;display:inline-block;margin:3px 0 4px;margin-left:4px}input{font-family:inherit}a.gb1,a.gb2,a.gb3,a.gb4{color:#11c !important}body{background:#fff;color:black}a{color:#11c;text-decoration:none}a:hover,a:active{text-decoration:underline}.fl a{color:#36c}a:visited{color:#551a8b}a.gb1,a.gb4{text-decoration:underline}a.gb3:hover{text-decoration:none}#ghead a.gb2:hover{color:#fff !important}.sblc{padding-top:5px}.sblc a{display:block;margin:2px 0;margin-left:13px;font-size:11px}.lsbb{background:#eee;border:solid 1px;border-color:#ccc #999 #999 #ccc;height:30px}.lsbb{display:block}.ftl,#fll a{display:inline-block;margin:0 12px}.lsb{background:url(\/images\/srpr\/nav_logo80.png) 0 -258px repeat-x;border:none;color:#000;cursor:pointer;height:30px;margin:0;outline:0;font:15px arial,sans-serif;vertical-align:top}.lsb:active{background:#ccc}.lst:focus{outline:none}<\/style><script><\/script><link rel=\"stylesheet\" type=\"text\/css\" media=\"all\" href=\"\/searchahead-js\/css\/searchaheadbox.css\"\/>\\r\\n<!--[if IE 6]>\\r\\n<link rel=\"stylesheet\" type=\"text\/css\" media=\"all\" href=\"\/searchahead-js\/css\/searchaheadbox_ie6.css\"\/>\\r\\n<![endif]-->\\r\\n<!--[if IE 7]>\\r\\n<link rel=\"stylesheet\" type=\"text\/css\" media=\"all\" href=\"\/searchahead-js\/css\/searchaheadbox_ie7.css\"\/>\\r\\n<![endif]-->\\r\\n\\r\\n<script type=\"text\/javascript\" src=\"\/searchahead-js\/searchaheadAll.min.js\"><\/script><\/head><body bgcolor=\"#fff\"><script>(function(){var src=\\'\/images\/nav_logo199.png\\';var iesg=false;document.body.onload = function(){window.n && window.n();if (document.images){new Image().src=src;}\\nif (!iesg){document.f&&document.f.q.focus();document.gbqf&&document.gbqf.q.focus();}\\n}\\n})();<\/script><div id=\"mngb\">    <div id=gbar><nobr><b class=gb1>Search<\/b> <a class=gb1 href=\"http:\/\/www.google.com\/imghp?hl=en&tab=wi\">Images<\/a> <a class=gb1 href=\"http:\/\/maps.google.com\/maps?hl=en&tab=wl\">Maps<\/a> <a class=gb1 href=\"https:\/\/play.google.com\/?hl=en&tab=w8\">Play<\/a> <a class=gb1 href=\"http:\/\/www.youtube.com\/?tab=w1\">YouTube<\/a> <a class=gb1 href=\"http:\/\/news.google.com\/nwshp?hl=en&tab=wn\">News<\/a> <a class=gb1 href=\"https:\/\/mail.google.com\/mail\/?tab=wm\">Gmail<\/a> <a class=gb1 href=\"https:\/\/drive.google.com\/?tab=wo\">Drive<\/a> <a class=gb1 style=\"text-decoration:none\" href=\"http:\/\/www.google.com\/intl\/en\/options\/\"><u>More<\/u> &raquo;<\/a><\/nobr><\/div><div id=guser width=100%><nobr><span id=gbn class=gbi><\/span><span id=gbf class=gbf><\/span><span id=gbe><\/span><a href=\"http:\/\/www.google.com\/history\/optout?hl=en\" class=gb4>Web History<\/a> | <a  href=\"\/preferences?hl=en\" class=gb4>Settings<\/a> | <a target=_top id=gb_70 href=\"https:\/\/accounts.google.com\/ServiceLogin?hl=en&continue=http:\/\/www.google.com\/\" class=gb4>Sign in<\/a><\/nobr><\/div><div class=gbh style=left:0><\/div><div class=gbh style=right:0><\/div>    <\/div><center><span id=\"prt\" style=\"display:block\"> <div><style>.pmoabs{background-color:#fff;border:1px solid #E5E5E5;color:#666;font-size:13px;padding-bottom:20px;position:absolute;right:2px;top:3px;z-index:986}#pmolnk{border-radius:2px;-moz-border-radius:2px;-webkit-border-radius:2px}.kd-button-submit{border:1px solid #3079ed;background-color:#4d90fe;background-image:-webkit-gradient(linear,left top,left bottom,from(#4d90fe),to(#4787ed));background-image:-webkit-linear-gradient(top,#4d90fe,#4787ed);background-image:-moz-linear-gradient(top,#4d90fe,#4787ed);background-image:-ms-linear-gradient(top,#4d90fe,#4787ed);background-image:-o-linear-gradient(top,#4d90fe,#4787ed);background-image:linear-gradient(top,#4d90fe,#4787ed);filter:progid:DXImageTransform.Microsoft.gradient(startColorStr=\\'#4d90fe\\',EndColorStr=\\'#4787ed\\')}.kd-button-submit:hover{border:1px solid #2f5bb7;background-color:#357ae8;background-image:-webkit-gradient(linear,left top,left bottom,from(#4d90fe),to(#357ae8));background-image:-webkit-linear-gradient(top,#4d90fe,#357ae8);background-image:-moz-linear-gradient(top,#4d90fe,#357ae8);background-image:-ms-linear-gradient(top,#4d90fe,#357ae8);background-image:-o-linear-gradient(top,#4d90fe,#357ae8);background-image:linear-gradient(top,#4d90fe,#357ae8);filter:progid:DXImageTransform.Microsoft.gradient(startColorStr=\\'#4d90fe\\',EndColorStr=\\'#357ae8\\')}.kd-button-submit:active{-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,0.3);-moz-box-shadow:inset 0 1px 2px rgba(0,0,0,0.3);box-shadow:inset 0 1px 2px rgba(0,0,0,0.3)}#pmolnk a{color:#fff;display:inline-block;font-weight:bold;padding:5px 20px;text-decoration:none;white-space:nowrap}.xbtn{color:#999;cursor:pointer;font-size:23px;line-height:5px;padding-top:5px}.padi{padding:0 8px 0 10px}.padt{padding:5px 20px 0 0;color:#444}.pads{text-align:left;max-width:200px}<\/style> <div class=\"pmoabs\" id=\"pmocntr2\" style=\"behavior:url(#default#userdata);display:none\"> <table border=\"0\"> <tr> <td colspan=\"2\"> <div class=\"xbtn\" onclick=\"google.promos&&google.promos.toast&& google.promos.toast.cpc()\" style=\"float:right\">&times;<\/div> <\/td> <\/tr> <tr> <td class=\"padi\" rowspan=\"2\"> <img src=\"\/images\/icons\/product\/chrome-48.png\"> <\/td> <td class=\"pads\">A faster way to browse the web<\/td> <\/tr> <tr> <td class=\"padt\"> <div class=\"kd-button-submit\" id=\"pmolnk\"> <a href=\"\/chrome\/index.html?hl=en&amp;brand=CHNG&amp;utm_source=en-hpp&amp;utm_medium=hpp&amp;utm_campaign=en\" onclick=\"google.promos&&google.promos.toast&& google.promos.toast.cl()\">Install Google Chrome<\/a> <\/div> <\/td> <\/tr> <\/table> <\/div> <script type=\"text\/javascript\">(function(){var a={s:{}};a.s.va=50;a.s.ra=10;a.s.aa=\"body\";a.s.Ra=!0;a.s.Ua=function(b,c){var d=a.s.Ha();a.s.Ja(d,b,c);a.s.Va(d);a.s.Ra&&a.s.Sa(d)};a.s.Va=function(b){(b=a.s.ca(b))&&0<b.forms.length&&b.forms[0].submit()};a.s.Ha=function(){var b=document.createElement(\"iframe\");b.height=0;b.width=0;b.style.overflow=\"hidden\";b.style.top=b.style.left=\"-100px\";b.style.position=\"absolute\";document.body.appendChild(b);return b};a.s.ca=function(b){return b.contentDocument||b.contentWindow.document};a.s.Ja=function(b,c,d){b=a.s.ca(b);b.open();d=[\"<\",a.s.aa,\\'><form method=POST action=\"\\',d,\\'\">\\'];for(var e in c)c.hasOwnProperty(e)&&d.push(\\'<textarea name=\"\\',e,\\'\">\\',c[e],\"<\/textarea>\");d.push(\"<\/form><\/\",a.s.aa,\">\");b.write(d.join(\"\"));b.close()};a.s.ea=function(b,c){c>a.s.ra?google&&google.ml&&google.ml(Error(\"ogcdr\"),!1,{cause:\"timeout\"}):b.contentWindow?a.s.Ta(b):window.setTimeout(function(){a.s.ea(b,c+1)},a.s.va)};a.s.Ta=function(b){document.body.removeChild(b)};a.s.Sa=function(b){a.s.Fa(b,\"load\",function(){a.s.ea(b,0)})};a.s.Fa=function(b,c,d){b.addEventListener?b.addEventListener(c,d,!1):b.attachEvent&&b.attachEvent(\"on\"+c,d)};var m={Ya:0,G:1,H:2,M:5};a.o={};a.o.O={na:\"i\",L:\"d\",pa:\"l\"};a.o.C={P:\"0\",I:\"1\"};a.o.R={N:1,L:2,K:3};a.o.A={ha:\"a\",la:\"g\",F:\"c\",Ba:\"u\",Aa:\"t\",P:\"p\",ta:\"pid\",ja:\"eid\",Ca:\"at\"};a.o.oa=window.location.protocol+\"\/\/www.google.com\/_\/og\/promos\/\";a.o.ka=\"g\";a.o.Da=\"z\";a.o.V=function(b,c,d,e){var f=null;switch(c){case m.G:f=window.gbar.up.gpd(b,d,!0);break;case m.M:f=window.gbar.up.gcc(e)}return null==f?0:parseInt(f,10)};a.o.Na=function(b,c,d){return c==m.G?null!=window.gbar.up.gpd(b,d,!0):!1};a.o.S=function(b,c,d,e,f,h,k,l){var g={};g[a.o.A.P]=b;g[a.o.A.la]=c;g[a.o.A.ha]=d;g[a.o.A.Ca]=e;g[a.o.A.ja]=f;g[a.o.A.ta]=1;k&&(g[a.o.A.F]=k);l&&(g[a.o.A.Ba]=l);if(h)g[a.o.A.Aa]=h;else return google.ml(Error(\"knu\"),!1,{cause:\"Token is not found\"}),null;return g};a.o.Y=function(b,c,d){if(b){var e=c?a.o.ka:a.o.Da;c&&d&&(e+=\"?authuser=\"+d);a.s.Ua(b,a.o.oa+e)}};a.o.Ia=function(b,c,d,e,f,h,k){b=a.o.S(c,b,a.o.O.L,a.o.R.L,d,f,null,e);a.o.Y(b,h,k)};a.o.La=function(b,c,d,e,f,h,k){b=a.o.S(c,b,a.o.O.na,a.o.R.N,d,f,e,null);a.o.Y(b,h,k)};a.o.Qa=function(b,c,d,e,f,h,k,l,g,n){switch(c){case m.M:window.gbar.up.dpc(e,f);break;case m.G:window.gbar.up.spd(b,d,1,!0);break;case m.H:g=g||!1,l=l||\"\",h=h||0,k=k||a.o.C.I,n=n||0,a.o.Ia(e,h,k,f,l,g,n)}};a.o.Oa=function(b,c,d,e,f){return c==m.G?0<d&&a.o.V(b,c,e,f)>=d:!1};a.o.Ka=function(b,c,d,e,f,h,k,l,g,n){switch(c){case m.M:window.gbar.up.iic(e,f);break;case m.G:c=a.o.V(b,c,d,e)+1;window.gbar.up.spd(b,d,c.toString(),!0);break;case m.H:g=g||!1,l=l||\"\",h=h||0,k=k||a.o.C.P,n=n||0,a.o.La(e,h,k,1,l,g,n)}};a.o.Pa=function(b,c,d,e,f,h){b=a.o.S(c,b,a.o.O.pa,a.o.R.K,d,e,null,null);a.o.Y(b,f,h)};var p={Wa:\"a\",Za:\"l\",Xa:\"c\",ia:\"d\",K:\"h\",N:\"i\",jb:\"n\",I:\"x\",gb:\"ma\",hb:\"mc\",ib:\"mi\",$a:\"pa\",ab:\"pc\",cb:\"pi\",fb:\"pn\",eb:\"px\",bb:\"pd\",kb:\"gpa\",mb:\"gpi\",nb:\"gpn\",ob:\"gpx\",lb:\"gpd\"};a.i={};a.i.w={qa:\"hplogo\",za:\"pmocntr2\"};a.i.C={ya:\"0\",I:\"1\",ga:\"2\"};a.i.v=document.getElementById(a.i.w.za);a.i.ma=16;a.i.wa=2;a.i.xa=20;google.promos=google.promos||{};google.promos.toast=google.promos.toast||{};a.i.J=function(b){a.i.v&&(a.i.v.style.display=b?\"\":\"none\",a.i.v.parentNode&&(a.i.v.parentNode.style.position=b?\"relative\":\"\"))};a.i.fa=function(b){try{if(a.i.v&&b&&b.es&&b.es.m){var c=window.gbar.rtl(document.body)?\"left\":\"right\";a.i.v.style[c]=b.es.m-a.i.ma+a.i.wa+\"px\";a.i.v.style.top=a.i.xa+\"px\"}}catch(d){google.ml(d,!1,{cause:a.i.B+\"_PT\"})}};google.promos.toast.cl=function(){try{a.i.T==m.H&&a.o.Pa(a.i.W,a.i.D,a.i.C.ga,a.i.$,a.i.X,a.i.Z),window.gbar.up.sl(a.i.D,a.i.B,p.K,a.i.U(),1)}catch(b){google.ml(b,!1,{cause:a.i.B+\"_CL\"})}};google.promos.toast.cpc=function(){try{a.i.v&&(a.i.J(!1),a.o.Qa(a.i.v,a.i.T,a.i.w.ba,a.i.W,a.i.Ga,a.i.D,a.i.C.I,a.i.$,a.i.X,a.i.Z),window.gbar.up.sl(a.i.D,a.i.B,p.ia,a.i.U(),1))}catch(b){google.ml(b,!1,{cause:a.i.B+\"_CPC\"})}};a.i.da=function(){try{if(a.i.v){var b=276,c=document.getElementById(a.i.w.qa);c&&(b=Math.max(b,c.offsetWidth));var d=parseInt(a.i.v.style.right,10)||0;a.i.v.style.visibility=2*(a.i.v.offsetWidth+d)+b>document.body.clientWidth?\"hidden\":\"\"}}catch(e){google.ml(e,!1,{cause:a.i.B+\"_HOSW\"})}};a.i.Ea=function(){var b=[\"gpd\",\"spd\",\"aeh\",\"sl\"];if(!window.gbar||!window.gbar.up)return!1;for(var c=0,d;d=b[c];c++)if(!(d in window.gbar.up))return!1;return!0};a.i.Ma=function(){return a.i.v.currentStyle&&\"absolute\"!=a.i.v.currentStyle.position};google.promos.toast.init=function(b,c,d,e,f,h,k,l,g,n,q,r){try{if(!a.i.Ea())google.ml(Error(\"apa\"),!1,{cause:a.i.B+\"_INIT\"});else if(a.i.v)if(e==m.H&&!l==!g)google.ml(Error(\"tku\"),!1,{cause:\"zwieback: \"+g+\", gaia: \"+l}),a.i.J(!1);else if(a.i.w.F=\"toast_count_\"+c+(q?\"_\"+q:\"\"),a.i.w.ba=\"toast_dp_\"+c+(r?\"_\"+r:\"\"),a.i.B=d,a.i.D=b,a.i.T=e,a.i.W=c,a.i.Ga=f,a.i.$=l?l:g,a.i.X=!!l,a.i.Z=k,a.o.Na(a.i.v,e,a.i.w.ba,c)||a.o.Oa(a.i.v,e,h,a.i.w.F,c)||a.i.Ma())a.i.J(!1);else{a.o.Ka(a.i.v,e,a.i.w.F,c,f,a.i.D,a.i.C.ya,a.i.$,a.i.X,a.i.Z);if(!n){try{window.gbar.up.aeh(window,\"resize\",a.i.da)}catch(u){}window.lol=a.i.da;window.gbar.elr&&a.i.fa(window.gbar.elr());window.gbar.elc&&window.gbar.elc(a.i.fa);a.i.J(!0)}window.gbar.up.sl(a.i.D,a.i.B,p.N,a.i.U())}}catch(t){google.ml(t,!1,{cause:a.i.B+\"_INIT\"})}};a.i.U=function(){var b=a.o.V(a.i.v,a.i.T,a.i.w.F,a.i.W);return\"ic=\"+b};})();<\/script> <script type=\"text\/javascript\">(function(){var sourceWebappPromoID=144002;var sourceWebappGroupID=5;var payloadType=5;var cookieMaxAgeSec=2592000;var dismissalType=5;var impressionCap=25;var gaiaXsrfToken=\\'\\';var zwbkXsrfToken=\\'\\';var kansasDismissalEnabled=false;var sessionIndex=0;var invisible=false;window.gbar&&gbar.up&&gbar.up.r&&gbar.up.r(payloadType,function(show){if (show){google.promos.toast.init(sourceWebappPromoID,sourceWebappGroupID,payloadType,dismissalType,cookieMaxAgeSec,impressionCap,sessionIndex,gaiaXsrfToken,zwbkXsrfToken,invisible,\\'0612\\');}\\n});})();<\/script> <\/div> <\/span><br clear=\"all\" id=\"lgpd\"><div id=\"lga\"><a href=\"\/search?site=&amp;ie=UTF-8&amp;q=Eiji+Tsuburaya&amp;oi=ddle&amp;ct=eiji-tsuburayas-114th-birthday-4809204506296320&amp;hl=en&amp;sa=X&amp;ei=QuybVeO7Osy4sAXDxIKQCg&amp;ved=0CAMQNg\"><img alt=\"Eiji Tsuburaya&#8217;s 114th Birthday\" border=\"0\" height=\"200\" src=\"\/logos\/doodles\/2015\/eiji-tsuburayas-114th-birthday-4809204506296320.2-hp.jpg\" title=\"Eiji Tsuburaya&#8217;s 114th Birthday\" width=\"356\" id=\"hplogo\" onload=\"window.lol&&lol()\"><br><\/a><br><\/div><form action=\"\/search\" name=\"f\"><table cellpadding=\"0\" cellspacing=\"0\"><tr valign=\"top\"><td width=\"25%\">&nbsp;<\/td><td align=\"center\" nowrap=\"\"><input name=\"ie\" value=\"ISO-8859-1\" type=\"hidden\"><input value=\"en\" name=\"hl\" type=\"hidden\"><input name=\"source\" type=\"hidden\" value=\"hp\"><input name=\"biw\" type=\"hidden\"><input name=\"bih\" type=\"hidden\"><div class=\"ds\" style=\"height:32px;margin:4px 0\"><input style=\"color:#000;margin:0;padding:5px 8px 0 6px;vertical-align:top\" autocomplete=\"off\" class=\"lst\" value=\"\" title=\"Google Search\" maxlength=\"2048\" name=\"q\" size=\"57\"><\/div><br style=\"line-height:0\"><span class=\"ds\"><span class=\"lsbb\"><input class=\"lsb\" value=\"Google Search\" name=\"btnG\" type=\"submit\"><\/span><\/span><span class=\"ds\"><span class=\"lsbb\"><input class=\"lsb\" value=\"I\\'m Feeling Lucky\" name=\"btnI\" onclick=\"if(this.form.q.value)this.checked=1; else top.location=\\'\/doodles\/\\'\" type=\"submit\"><\/span><\/span><\/td><td class=\"fl sblc\" align=\"left\" nowrap=\"\" width=\"25%\"><a href=\"\/advanced_search?hl=en&amp;authuser=0\">Advanced search<\/a><a href=\"\/language_tools?hl=en&amp;authuser=0\">Language tools<\/a><\/td><\/tr><\/table><input id=\"gbv\" name=\"gbv\" type=\"hidden\" value=\"1\"><\/form><div id=\"gac_scont\"><\/div><div style=\"font-size:83%;min-height:3.5em\"><br><\/div><span id=\"footer\"><div style=\"font-size:10pt\"><div style=\"margin:19px auto;text-align:center\" id=\"fll\"><a href=\"\/intl\/en\/ads\/\">Advertising&nbsp;Programs<\/a><a href=\"\/services\/\">Business Solutions<\/a><a href=\"https:\/\/plus.google.com\/116899029375914044550\" rel=\"publisher\">+Google<\/a><a href=\"\/intl\/en\/about.html\">About Google<\/a><\/div><\/div><p style=\"color:#767676;font-size:8pt\">&copy; 2015 - <a href=\"\/intl\/en\/policies\/privacy\/\">Privacy<\/a> - <a href=\"\/intl\/en\/policies\/terms\/\">Terms<\/a><\/p><\/span><\/center><script>(function(){window.google.cdo={height:0,width:0};(function(){var a=window.innerWidth,b=window.innerHeight;if(!a||!b)var c=window.document,d=\"CSS1Compat\"==c.compatMode?c.documentElement:c.body,a=d.clientWidth,b=d.clientHeight;a&&b&&(a!=google.cdo.width||b!=google.cdo.height)&&google.log(\"\",\"\",\"\/client_204?&atyp=i&biw=\"+a+\"&bih=\"+b+\"&ei=\"+google.kEI);})();})();<\/script><div id=\"xjsd\"><\/div><div id=\"xjsi\" data-jiis=\"bp\"><script>(function(){function c(b){window.setTimeout(function(){var a=document.createElement(\"script\");a.src=b;document.getElementById(\"xjsd\").appendChild(a)},0)}google.dljp=function(b,a){google.xjsu=b;c(a)};google.dlj=c;})();(function(){window.google.xjsrm=[];})();if(google.y)google.y.first=[];if(!google.xjs){window._=window._||{};window._._DumpException=function(e){throw e};if(google.timers&&google.timers.load.t){google.timers.load.t.xjsls=new Date().getTime();}google.dljp(\\'\/xjs\/_\/js\/k\\\\x3dxjs.hp.en_US.n4Isykx1pOI.O\/m\\\\x3dsb_he,d\/rt\\\\x3dj\/d\\\\x3d1\/t\\\\x3dzcms\/rs\\\\x3dACT90oGruBlRL4zSGyBzh4XK8InqnND9gA\\',\\'\/xjs\/_\/js\/k\\\\x3dxjs.hp.en_US.n4Isykx1pOI.O\/m\\\\x3dsb_he,d\/rt\\\\x3dj\/d\\\\x3d1\/t\\\\x3dzcms\/rs\\\\x3dACT90oGruBlRL4zSGyBzh4XK8InqnND9gA\\');google.xjs=1;}google.pmc={\"sb_he\":{\"agen\":true,\"cgen\":true,\"client\":\"heirloom-hp\",\"dh\":true,\"ds\":\"\",\"fl\":true,\"host\":\"google.com\",\"jam\":0,\"jsonp\":true,\"msgs\":{\"cibl\":\"Clear Search\",\"dym\":\"Did you mean:\",\"lcky\":\"I\\\\u0026#39;m Feeling Lucky\",\"lml\":\"Learn more\",\"oskt\":\"Input tools\",\"psrc\":\"This search was removed from your \\\\u003Ca href=\\\\\"\/history\\\\\"\\\\u003EWeb History\\\\u003C\/a\\\\u003E\",\"psrl\":\"Remove\",\"sbit\":\"Search by image\",\"srch\":\"Google Search\"},\"ovr\":{},\"pq\":\"\",\"refoq\":true,\"refpd\":true,\"rfs\":[],\"scd\":10,\"sce\":5,\"stok\":\"zjtqyOq-JYCOTkhf-6zvDRQ7OsI\"},\"d\":{}};google.y.first.push(function(){if(google.med){google.med(\\'init\\');google.initHistory();google.med(\\'history\\');}});if(google.j&&google.j.en&&google.j.xi){window.setTimeout(google.j.xi,0);}\\n<\/script><\/div><\/body><\/html>'\n>>>\n","295":">>> from vtk.util import numpy_support as npvtk\n>>> vtkarray = npvtk.numpy_to_vtk(numpy_array)\n>>> numpy_array = npvtk.vtk_to_numpy(vtkarray)\n","296":"def getCourseID(s):\n    cur.execute('SELECT id FROM students WHERE name = ? ', (s, ))\n    results = list(cur)\n    if results:\n        return results[0][0]\n    return None # nothing was found...\n","297":"from collections import deque\n\ndef item_with_context(predicate, seq, before=0, after=0):\n    q = deque(maxlen=before)\n    it = iter(seq)\n\n    for s in it:\n        if predicate(s):\n            return list(q) + [s] + [x for _,x in zip(range(after), it)]\n        q.append(s)\n","298":"import threading\n\ndef hello():\n    t = threading.Timer(10.0, hello)\n    t.start()\n    print \"hello, world\" \n\nt = threading.Timer(10.0, hello)\nt.start() \n","299":"s = \"Some ABC text followed by XYZ followed by multiple ABC, more ABC, more ABC\"\n\npattern = re.compile(r'(?<=XYZ)(.*?)ABC')\nwhile pattern.search(s):\n   s = pattern.sub(r'\\1REPLACED', s)\n\nprint s\n","300":"import collections\n\nfile_data = collections.defaultdict(list)\n\nwith open(\"you_file\") as f\n    for line in file:\n        tag, data  = line.split('\\t', 1)\n        file_data[tag].append(data) \n\nfor file_name, data in file_data.items():\n    with open(file_name, 'w') as f:\n         f.write(\"\\n\".join(data))\n","301":"import sys\nfrom tkinter import *\nfrom PIL import Image, ImageTk\n\ndef clear():\n    txtDisplay.delete(0,END);\n    return;\n\n#Parent Window.\nroot = Tk();\nroot.title('Calculator ++ [1.7.2]');\nroot.geometry('350x450');\n\n#Main entry.\nnum1 = StringVar();\ntxtDisplay = Entry(root, textvariable = num1, relief=RIDGE, bd = 10, width=33,    insertwidth = 1, font = 40);\ntxtDisplay.place(x=15, y=10);\ntxtDisplay.focus();\n\n\ndef update_entry(v):\n    current_value = num1.get()\n    num1.set(current_value + v)\n\n#Buttons:\nzeroButton = Button(root, text='0', width=20, height=3, bg='LightBlue', fg='red', command = lambda: update_entry('0')).place(x=17,y=382);\noneButton = Button(root, text='1', width=8, height=3, bg='LightBlue', fg='red', command = lambda: update_entry('1')).place(x=17, y=302);\ntwoButton = Button(root, text='2', width=8, height=3, bg='LightBlue', fg='red').place(x=100, y=302);\nthreeButton = Button(root, text='3', width=8, height=3, bg='LightBlue', fg='red').place(x=182, y=302);\nfourButton = Button(root, text='4', width=8, height=3, bg='LightBlue', fg='red').place(x=17, y=222);\nfiveButton = Button(root, text='5', width=8, height=3, bg='LightBlue', fg='red').place(x=100, y=222);\nsixButton = Button(root, text='6', width=8, height=3, bg='LightBlue', fg='red').place(x=182, y=222);\nsevenButton = Button(root, text='7', width=8, height=3, bg='LightBlue', fg='red').place(x=17, y=142);\neightButton = Button(root, text='8', width=8, height=3, bg='LightBlue', fg='red').place(x=100, y=142);\nninthButton = Button(root, text='9', width=8, height=3, bg='LightBlue', fg='red').place(x=182, y=142);\n\ndecimalButton = Button(root, text='.', width=8, height=3, bg='powder blue').place(x=182, y=382);\nequalButton = Button(root, text='=', width=8, height=8, bg='Lightgreen').place(x=264, y=307);\nplusButton = Button(root, text='+', width=8, height=3, bg='gray', command = lambda: update_entry('+')).place(x=264, y=222);\nminusButton = Button(root, text='-', width=8, height=3, bg='gray').place(x=264, y=142);\nmultiplyButton = Button(root, text='x', width=8, height=3, bg='gray').place(x=264, y=66);\ndivideButton = Button(root, text='\u00f7', width=8, height=3, bg='gray').place(x=182, y=66);\nclearButton = Button(root, text='Clear (CE)', width=20, height=3, command =      clear, bg='Orange').place(x=17, y=66);\n\n#Locks the parent windows size.\nroot.maxsize(350,450);\nroot.minsize(350,450);\n\n#Parent window's background color:\nroot.configure(background = 'black');\nroot.mainloop();\n","302":"tlist = ['Hello world',\n   'Hello world print',\n   'Text',\n   'World hello print']\n\nprint [i for i in tlist if \"print\" in i]\n","303":"class PersistentList(list):\n    def __init__(self, *args, **kwargs):\n        for attr in ('append', 'extend', 'insert', 'pop', 'remove', 'reverse', 'sort'):\n            setattr(self, attr, self._autosave(getattr(self, attr))\n        list.__init__(self, *args, **kwargs)\n    def _autosave(self, func):\n        @wraps(func)\n        def _func(*args, **kwargs):\n            ret = func(*args, **kwargs)\n            self._save()\n            return ret \n        return _func\n","304":"from pyspark.sql.functions import row_number\nfrom pyspark.sql import Window\n\nw = Window.partitionBy(\"some_column\").orderBy(\"some_other_column\")\ndf.withColumn(\"rn\", row_number().over(w))\n","305":"@total_ordering\nclass B_ordering(object):\n    __slots__ = ()                 # see Raymond's comment\n    def __lt__(self, other):\n        return self.y < other.y\n\nclass B(B_ordering, namedtuple('B', 'x y')):\n    pass\n","306":"from collections import defaultdict\n\na = defaultdict(lambda:None)\nprint a[100]\n","307":"import pandas as pd\n\n# read your csv data, separate must not be ',', for example, set tab `\\t`\n# =======================================================================\n# I just read from clipboard\ndf = pd.read_clipboard(header=None, sep='\\t')\n\ndf\n                   0\n0          a,b,x,z,y\n1  b,e,w,t,u,o,s,z,i\n2              z,o,w\n3          o,p,w,z,a\n\n# step 1\n# =========================\ndf1 = df.groupby(level=0).apply(lambda group: pd.Series(group.values.ravel().tolist()[0].split(',')))\n\ndf1\n\n0  0    a\n   1    b\n   2    x\n   3    z\n   4    y\n1  0    b\n   1    e\n   2    w\n   3    t\n   4    u\n       ..\n   7    z\n   8    i\n2  0    z\n   1    o\n   2    w\n3  0    o\n   1    p\n   2    w\n   3    z\n   4    a\ndtype: object\n\n\n# step 2\n# =========================\npd.get_dummies(df1).groupby(level=0).agg(max)\n\n   a  b  e ...  x  y  z\n0  1  1  0 ...  1  1  1\n1  0  1  1 ...  0  0  1\n2  0  0  0 ...  0  0  1\n3  1  0  0 ...  0  0  1\n\n[4 rows x 13 columns]\n\n# step 3, to_csv()\n# =========================\n","308":"var mydata = {{indexdata}};\n","309":"ipython nbconvert --to rst your.ipynb\n","310":"from Tkinter import *\n\nclass MyDialog:\n\n    def __init__(self, parent):\n\n        top = self.top = Toplevel(parent)\n\n        Label(top, text=\"Value\").pack()\n\n        self.e = Entry(top)\n        self.e.pack(padx=5)\n\n        b = Button(top, text=\"OK\", command=self.ok)\n        b.pack(pady=5)\n\n    def ok(self):\n\n        print \"value is\", self.e.get()\n\n        self.top.destroy()\n\n\nroot = Tk()\nButton(root, text=\"Hello!\").pack()\nroot.update()\n\nd = MyDialog(root)\n\nroot.wait_window(d.top)\nroot.mainloop()\n","311":"#!\/usr\/bin\/env python\n\nimport curses\nimport curses.textpad as textpad\n\ntry:\n    mainwindow = curses.initscr()\n    # Some curses-friendly terminal settings\n    curses.cbreak(); mainwindow.keypad(1); curses.noecho()\n    textpad.Textbox(mainwindow).edit()\nfinally:\n    # Reverse curses-friendly terminal settings\n    curses.nocbreak(); mainwindow.keypad(0); curses.echo()\n    curses.endwin()\n","312":">>> import icu # pip install PyICU\n>>> sorted(['a','b','c','\u00e4'])\n['a', 'b', 'c', '\u00e4']\n>>> collator = icu.Collator.createInstance(icu.Locale('de_DE.UTF-8'))\n>>> sorted(['a','b','c','\u00e4'], key=collator.getSortKey)\n['a', '\u00e4', 'b', 'c']\n","313":"for i in xrange(10):\n    args = ['python', 'testrun.py', 'HWStatus']\n    p = subprocess.Popen(args)\n    while p.poll() != 0:\n        time.sleep(amount_of_time)\n","314":">>> haystack = np.array([[1, -1, 1, -1],\n...                      [1, 1, -1, 1],\n...                      [1, -1, 1, -1]])\n>>> needle = np.array([1, -1, 1, -1])\n>>> haystack.dot(needle)\narray([ 4, -2,  4])\n>>> np.sum(haystack.dot(needle) == len(needle))\n2\n","315":"reversed_df = df.iloc[::-1]\n","316":"from bugland import bug\n","317":"button = Gtk.Button(label='Some text')\n","318":"read_pipes = [pipe_fd0, pipe_fd1, ... ]\n\nwhile True:\n    read_fds, write_fds, exc_fds =  select.select(read_pipes, [], [] )\n    for read_fd in read_fds:\n        # read from read_fd pipe descriptor\n","319":"Py_LOCAL_INLINE(PyObject *)\nSTRINGLIB(split_whitespace)(PyObject* str_obj,\n                           const STRINGLIB_CHAR* str, Py_ssize_t str_len,\n                           Py_ssize_t maxcount)\n{\n    ...\n#ifndef STRINGLIB_MUTABLE\n        if (j == 0 && i == str_len && STRINGLIB_CHECK_EXACT(str_obj)) {\n            \/* No whitespace in str_obj, so just use it as list[0] *\/\n            Py_INCREF(str_obj);\n            PyList_SET_ITEM(list, 0, (PyObject *)str_obj);\n            count++;\n            break;\n        }\n","320":"def enterPiece(aBoard, aColour, aPoint):\n    c = aBoard\n    if 0 < aPoint <= aBoard.size:\n        for j in range(aPoint):\n            c.removePieceFromPoint(aColour, 0)\n            c.addPieceToPoint(aColour, aPoint)\n            return True\n        else:\n            return False\n","321":"In [67]:\n\ndf=pd.read_clipboard(header=None, na_values=['0'])\nprint df\n            0\n0  22\/05\/2014\n1  22\/05\/2014\n2         NaN\n3  22\/05\/2014\nIn [68]:\n\npd.to_datetime(df[0])\nOut[68]:\n0   2014-05-22\n1   2014-05-22\n2          NaT\n3   2014-05-22\nName: 0, dtype: datetime64[ns]\n","322":"with open(scriptPath, 'r') as inp:\n    for line in inp:\n        if line == 'GO\\n':\n            c.execute(sqlQuery)\n            sqlQuery = ''\n        elif 'PRINT' in line:\n            disp = line.split(\"'\")[1]\n            print(disp, '\\r')\n        else:\n            sqlQuery = sqlQuery + line\ninp.close()\n","323":"starts=numpy.intersect1d(numpy.where(a<44)[0]+1,numpy.where(a>44)[0])\nprint(numpy.split(a,starts))\n","324":"buffer = \"path\/filename.zip\"  # zip filename to write (or file-like object)\nname = \"folder\/data.txt\"      # name of file inside zip \nbytes = \"blah blah blah\"      # contents of file inside zip\n\nzip = zipfile.ZipFile(buffer, \"w\", zipfile.ZIP_DEFLATED)\ninfo = zipfile.ZipInfo(name)\ninfo.external_attr = 0777 << 16L # give full access to included file\nzip.writestr(info, bytes)\nzip.close()\n","325":"In [1]: text = '''\n   ...: <span>    Lekhwiya&nbsp;v&nbsp;<strong class=\"winner-strong\">Zobahan<\/strong><\/span>\n   ...: <span>    <strong class=\"winner-strong\">Sepahan<\/strong>&nbsp;v&nbsp;Al&nbsp;Nasr&nbsp;(UAE)<\/span>\n   ...: '''\n\nIn [2]: import scrapy\n\nIn [3]: selector = scrapy.Selector(text=text, type=\"html\")\n\nIn [4]: for span in selector.xpath('\/\/span'):\n   ...:     print(span.xpath('string(.)').extract_first())\n   ...:     \n    Lekhwiya\u00a0v\u00a0Zobahan\n    Sepahan\u00a0v\u00a0Al\u00a0Nasr\u00a0(UAE)\n\nIn [5]: for span in selector.xpath('\/\/span'):\n    print(span.xpath('normalize-space(.)').extract_first())\n   ...:     \nLekhwiya\u00a0v\u00a0Zobahan\nSepahan\u00a0v\u00a0Al\u00a0Nasr\u00a0(UAE)\n","326":"from xgoogle.search import GoogleSearch, SearchError\ntry:\n  page = 1\n  gs = GoogleSearch(\"foo bar\")  \n  gs.results_per_page = 100\n  results = []\n  while page < 10:\n      gs.page = page\n      results += gs.get_results()\n      page += 1\nexcept SearchError, e:\n  print \"Search failed: %s\" % e\nfor res in results:\n    print res.url\n","327":"def change_window(browser):\n    \"\"\"\n    Simple window switcher without the need of playing with ids.\n    @param browser: Current browser instance\n    \"\"\"\n    curr = browser.current_window_handle\n    all_handles = browser.window_handles\n    for handle in list(set([curr]) - set(all_handles)):\n        return browser.switch_to_window(handle)\n","328":"class DeviceAdmin(AjaxSelectAdmin):\n    ... code that you have above ...\n\nclass DeviceAdminWithHistory(DeviceAdmin, SimpleHistoryAdmin):\n    pass\n\nadmin.site.register(Device, DeviceAdminWithHistory)\n","329":"sorted(yourArray, key=lambda x: x[3])\n#sort yourArray by the 4th value in every list\n","330":">>> for elem in soup.findAll():\n    path = '.'.join(reversed([p.name for p in elem.parentGenerator() if p]))\n    print \"{:10}|{:60}|{:10}\".format(elem.name,elem.attrs, path)\n\n\nhtml      |[]                                                          |[document]\nhead      |[]                                                          |[document].html\ntitle     |[]                                                          |[document].html.head\nbody      |[]                                                          |[document].html\ndiv       |[(u'id', u'abc')]                                           |[document].html.body\nol        |[(u'id', u'def')]                                           |[document].html.body.div\nli        |[(u'class', u'testItem')]                                   |[document].html.body.div.ol\na         |[(u'href', u'http:\/\/testpage.html')]                        |[document].html.body.div.ol.li\nli        |[(u'class', u'testItem')]                                   |[document].html.body.div.ol\ntable     |[(u'id', u'testTable')]                                     |[document].html.body.div.ol.li\ntr        |[]                                                          |[document].html.body.div.ol.li.table\ntd        |[]                                                          |[document].html.body.div.ol.li.table.tr\ndiv       |[(u'id', u'testDiv')]                                       |[document].html.body.div.ol.li.table.tr.td\n>>> \n","331":"sqlite> .tab\njob         snmptarget  t1          t2          t3        \nsqlite> select name from sqlite_master where type = 'table';\njob\nt1\nt2\nsnmptarget\nt3\n\nsqlite> .schema job\nCREATE TABLE job (\n    id INTEGER PRIMARY KEY,\n    data VARCHAR\n);\nsqlite> select sql from sqlite_master where type = 'table' and name = 'job';\nCREATE TABLE job (\n    id INTEGER PRIMARY KEY,\n    data VARCHAR\n)\n","332":"    ...\n        clsname = str(classes[0])\n    ...\n    if clsname is not None:\n        # final hack - module name shows up in str(cls), but we've already\n        # computed module name, so remove it\n        clsname = clsname.split(\".\")[1:]\n        clsname = \".\".join(clsname)\n        funcname = \"%s.%s\" % (clsname, funcname)\n","333":"from cx_Freeze import Executable\nfrom cx_Freeze import setup as cx_setup\nfrom distutils.core import setup\nfrom Cython.Build import cythonize\n\nsetup(options={'build_ext': {'compiler': 'mingw32'}},\n      ext_modules=cythonize(\"fx.pyx\"))\n\ncx_setup(name='myproject',\n      version='0.0',\n      description='',\n      options={\"build_exe\": {\"packages\":[\"pygame\",\"fx\"]}},\n      executables=[Executable('main.py',targetName=\"myproject.exe\",base = \"Win32GUI\")],\n      requires=['pygcurse','pyperclip','rsa','dill','numpy']\n      )\n","334":"import logging\nimport socket\n\n# The next line allows 'socket' in the logging package's namespace to pick up\n# the stdlib socket module\nlogging.socket = socket\n...\n# when the config file is processed, it should work as expected\nlogging.config.fileConfig(...)\n# remove the mapping from the logging package, as not needed any more\n# (optional)\ndel logging.socket\n","335":"PENDING = 0\nDONE = 1\nSTATUS_CHOICES = (\n    (PENDING, 'Pending'),\n    (DONE, 'Done'),\n)\n","336":"with open('file_output.html', 'w') as f:\n  for tag in soup.select(\"#ModelTable\"):\n    f.write(tag.prettify())\n","337":"In [2]: os.environ['probe1'] = 'hello'\n\nIn [3]: os.system('echo $probe1')\nhello\n","338":"import csv\nfrom xlsxwriter.workbook import Workbook\n\nworkbook = Workbook(\"test.xlsx\")\nworksheet = workbook.add_worksheet(\"Raw_Data\")\n\nwith open(\"C:\\Console2\\\\csv.test\",'r') as f:\n    reader = csv.reader(f)\n    for r, row in enumerate(reader):\n        for c, col in enumerate(row):\n            worksheet.write(r, c, col)\n\nworkbook.close()\n","339":"from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom Tkinter import *\nimport Tkinter as tk\nfrom tkFileDialog import askopenfilename\nimport time\nfrom selenium.webdriver.firefox.firefox_binary import FirefoxBinary\n\n#out\nout = open(\"n_grams_outfile.txt\", \"w\")\nout.write(\"search string\" + \"\\t\" + \"pub year\" + \"\\t\" + \"frequency\" + \"\\n\")\n\n#create a function that will return the filepath for a file provided by the user\nuser_defined_filepath = {}\ndef selectfile():\n    user_defined_filepath['filename'] = askopenfilename(filetypes=[(\"Text\",\"*.txt\")]) # user_defined_filepath['filename'] may now be accessed in the global scope.\n\n#create function we'll call when start button is pressed\ndef query_n_grams(event = \"<Button>\"):\n\n    #create binary switch we'll use to only start new browser in first pass. Set default to true\n    first_pass = 1\n\n    #identify the input file\n    inputfile = user_defined_filepath['filename']\n    readinputfile = open(inputfile).read()\n    stringinputfile = str(readinputfile)\n\n    #assume input file = tsv. Left hand column = string of len <= 6; right hand column = pub year of text\n    split_by_row = stringinputfile.split(\"\\n\")\n    for row in split_by_row:\n\n        #because the program will yelp if it reaches the end of the input file and then tries to split an empty line on \"\\t\", wrap call in try\/except\n        try:\n            search_terms = row.split(\"\\t\")[0]\n            actual_pub_year = row.split(\"\\t\")[1]\n        except IndexError:\n            pass\n\n        pub_year_minus_five = int(actual_pub_year) - 5\n        pub_year_plus_five = int(actual_pub_year) + 5        \n\n        #you now have terms and pub yaer. Fire up webdriver and ride, cowboy\n        if first_pass == 1:\n\n            binary = FirefoxBinary('C:\\Text\\Professional\\Digital Humanities\\Programming Languages\\Python\\Query Literature Online\\LION 3.0\\Firefox Versions\\Firefox23\\FirefoxPortable.exe')\n            driver = webdriver.Firefox(firefox_binary=binary)\n\n            first_pass = 0\n\n        #otherwise, use extant driver\n        driver.implicitly_wait(10)\n        driver.get(\"https:\/\/books.google.com\/ngrams\")\n        driver.refresh()\n        driver.implicitly_wait(10)\n\n        #send keys\n        driver.implicitly_wait(10)\n        keyword = driver.find_element_by_class_name(\"query\")\n        driver.implicitly_wait(10)\n        keyword.clear()\n        driver.implicitly_wait(10)\n        keyword.send_keys(str(search_terms))\n        driver.implicitly_wait(10)\n\n        #find start year\n        driver.implicitly_wait(10)\n        start_year = driver.find_element_by_name(\"year_start\")\n        driver.implicitly_wait(10)\n        start_year.clear()\n        driver.implicitly_wait(10)\n        start_year.send_keys(str(pub_year_minus_five))\n        driver.implicitly_wait(10)\n\n        #find end year\n        driver.implicitly_wait(10)\n        end_year = driver.find_element_by_name(\"year_end\")\n        driver.implicitly_wait(10)\n        end_year.clear()\n        driver.implicitly_wait(10)\n        end_year.send_keys(pub_year_plus_five)\n        driver.implicitly_wait(10)\n\n        #click enter\n        driver.implicitly_wait(10)\n        submit_button = driver.find_element_by_class_name(\"kd_submit\")\n        driver.implicitly_wait(10)\n        submit_button.click()\n        driver.implicitly_wait(10)\n\n        #grab html\n        driver.implicitly_wait(10)\n        html = driver.page_source\n        driver.implicitly_wait(10)\n\n        #if you run a search that yields no hits, can't split the html, so use try\/except\n        try:\n\n            #we want the list object that comes right after timeseries and before the comma\n            desired_percent_figures = html.split('\"timeseries\": [')[1].split(\"]\")[0]\n\n            #now desired_percent_figures contains comma-separated list of percents (which we still need to convert out of mathematical notation). Convert out of mathematical notation (with e)\n            percents_as_list = desired_percent_figures.split(\",\")\n\n            #convert to ints\n            percent_list_as_ints = [float(i) for i in percents_as_list]\n\n            #take your list and find mean\n            mean_percent = sum(percent_list_as_ints) \/ float(len(percent_list_as_ints))\n\n            out.write(str(search_terms) + \"\\t\" + str(actual_pub_year) + \"\\t\" + str(mean_percent) + \"\\n\")\n\n        #you'll get IndexError if you run a query like \"Hello Garrett\" for which there are no entries in the database at all. (Other queries, like 'animal oeconomy' for year 1700, yields result 0, but because search string is in database elsewhere, won't throw IndexError)\n        except IndexError:\n\n            mean_percent = \"0.0\"\n\n            #because we got an index error, we know that the search yielded no results. so let's type 0.0 as percent\n            out.write(str(search_terms) + \"\\t\" + str(actual_pub_year) + \"\\t\" + str(mean_percent) + \"\\n\")\n\n#create TK frame\nroot = tk.Tk()\ncanvas = tk.Canvas(root, width=157, height=100)\ncanvas.pack()\n\n#create label for tk\nngram_label = tk.Button(root, text = \"Google N-Gram API\", command = \"\", anchor = 'w', width = 14, activebackground = \"#33B5E5\")\nngram_label_canvas = canvas.create_window(20, 20, anchor='nw', width = 119, window=ngram_label)\n\n#create a button that allows users to find a file for analysis\nfile_label = tk.Button(root, text = \"Input file\", command = selectfile, anchor = 'w', width = 7, activebackground = \"#33B5E5\")\nfile_label_canvas = canvas.create_window(20, 60, anchor='nw', window=file_label)\n\n#create a start button that allows users to submit selected parameters and run the \"startviewing\" processes\nstart_label = tk.Button(root, text = \"Go!\", command = query_n_grams, anchor = 'w', width = 3, activebackground = \"#33B5E5\")\nstart_label_canvas = canvas.create_window(107, 60, anchor='nw', window=start_label)\n\nroot.mainloop()\n","340":"class FourVector:\n    def __init__(self, ct = 0, x = 0, y = 0, z = 0, r = None):\n        self.a = (ct, x, y, z)\n        if r is not None:\n            self.a = (ct, r[0], r[1], r[2])\n\nP0 = FourVector()\nprint P0.a\n\nP1 = FourVector(ct = 9, x = 1, y = 2, z = 4)\nprint P1.a\n\nP2 = FourVector(ct = 99.9, r = [1, 2, 4])\nprint P2.a\n","341":">>> eval(compile('def _raise(*a): raise a[0], a[1], a[2]', '<py3fix>', 'exec'))\n>>> _raise(Exception, \"error message\", None)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<py3fix>\", line 1, in _raise\nException: error message\n\n>>> eval(compile('def _raise(*a): raise a[0], a[1], a[2]', '<my_source_file>', 'exec'))\n>>> _raise(Exception, \"error message\", None)Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<my_source_file>\", line 1, in _raise\nException: error message\n","342":"class User(db.Model):\n    def readonly(self):\n        return ReadOnlyUser(self.name, self.id);\n","343":"def replace(a,b): \nwhile True:\n    c = input(\"Enter a letter you would like to replace\") \n    d = \"\" \n    charfound = False\n    for char in a: \n        if char == c: \n            charfound = True    \n            d += b \n        else: \n            d+= char \n    if charfound:\n        print(d)\n        break\n    else:\n        print('Letter must be in phrase!')\n","344":"C=np.einsum('ij,ik->jik',A,B)\n","345":"class Example(...):\n    def __init__(...):\n        ...\n        self.l1.description = \"This is label 1\"\n        self.l2.description = \"This is label 2\"\n        self.b1.description = \"This is the OK button\"\n\n        for widget in (self.l1, self.l2, self.b1):\n            widget.bind(\"<Enter>\", self.on_enter)\n            widget.bind(\"<Leave>\", self.on_leave)\n        ...\n\n    def on_enter(self, event):\n        description = getattr(event.widget, \"description\", \"\")\n        self.l2.configure(text=description)\n","346":"Event.objects.filter(groups__person=person)\n","347":"import re\nimport ast\nfrom collections import OrderedDict\n\ndef read(f):\n    for s in f:\n        m = re.match(r'^OrderedDict\\((.+)\\)$', s)\n        if m:\n            yield OrderedDict(ast.literal_eval(m.group(1)))\n\n...\nfor d in read(snap_fh):\n    print type(d)\n","348":"np.dot(clf.coef_, x) - clf.intercept_ = 0\n","349":"import re\n\ndata=['test_140815080910_data.p',\n'other_test_140815081010_data.p',\n'other_test_140815081111_other_data.p']\n\ndata.sort(key=lambda L: (re.findall('\\d{10}', L), L))\n# ['test_140815080910_data.p', 'other_test_140815081010_data.p', 'other_test_140815081111_other_data.p']\n","350":">>> import math\n>>> print (math.floor(5.6))\n5.0\n","351":"class Lessons(models.Model):\n    name = models.CharField()\n\nclass Exercises(models.Model):\n    lesson = models.ForeignKey(Lessons)\n    name = models.CharField()\n    text = models.CharField()\n","352":"'''This is a test {{ <-- escape these ---> }} and the value is {0}'''.format(42)\n","353":"import csv\nfrom collections import Counter\n\nwith open('words.csv') as f:\n    next(f)  # skip header\n    occurrence = Counter(tuple(row[1:3]) for row in csv.reader(f))\n\nwith open('occurrence.csv', 'w') as f:\n    writer = csv.writer(f)\n    writer.writerow(['Destination', 'Source', 'Counts'])\n    for (dest, src), cnt in occurrence.items():\n        writer.writerow([dest, src, cnt])\n","354":"SELECT\n    u.id\nFROM\n    subscriptions sub  JOIN\n    users u ON u.id = sub.subscriber_id LEFT JOIN\n    subscriptions unsub\n        ON unsub.subscribee_id = sub.subscriber_id\n        AND unsub.subscriber_id= sub.subscribee_id \nWHERE\n    sub.subscribee_id = :user_id\n    AND unsub.subscribee_id IS NULL\n","355":"def _get_logger(pdir,ldir,lname,level,fmt):\n    try:\n        logs_dir = os.path.join(pdir, ldir)\n        if not os.path.exists(logs_dir):\n            os.makedirs(logs_dir)\n    except Exception as e:\n        print e\n        exit(1)\n\n    logging.basicConfig(\n        filename=os.path.join(logs_dir, lname),\n        level=level,\n        format=fmt\n    )\n    return logging.getLogger('cli.log')\n\n\nexec_file = os.path.abspath(argv[0])\nexec_dir = os.path.dirname(exec_file)\n#build a dict with default configuration values for the logger\ndefault_logger = dict(pdir=exec_dir,ldir='logs',lname='cli.log',level='ERROR',\n                fmt='%(asctime)s %(levelname)s: %(message)s')\n\ntry:\n    log_filename = args.logfile if args.logfile else config.get('Logging', 'filename')\n    level = config.get('Logging', 'log_level')\n    format = config.get('Logging', 'format')\nexcept (NoOptionError, NoSectionError) as e:\n    #unpack the configuration dict and call _get_logger\n    logger = _get_logger(**default_logger)\n    logger.error(repr(e))\n    exit(1)\nelse:\n    # we have successfully read configuration from file, so update\n    # configuration dict to reflect new settings\n    default_logger.update(fmt=format,level=level,lname=log_filename)\nif os.path.isabs(log_filename):\n    # log_filename is an absolute one. split it to get filename and dirname\n    # and update configuration dict\n    bdir, log_filename = os.path.split(log_filename)\n    default_logger.update(pdir='',ldir=bdir,lname=log_filename)\nlogger = _get_logger(**default_logger)\n","356":"def walk_list(list_of_g):\n    to_idx = 0\n    for g_current in list_of_g:\n        if not subtle_condition(g_current):\n            list_of_g[to_idx] = g_current\n            to_idx += 1\n    del list_of_g[to_idx:]\n","357":"from django.utils.encoding import smart_str\n\nresponse = HttpResponse(mimetype='application\/force-download') # mimetype is replaced by content_type for django 1.7\nresponse['Content-Disposition'] = 'attachment; filename=%s' % smart_str(file_name)\nresponse['X-Sendfile'] = smart_str(path_to_file)\n# It's usually a good idea to set the 'Content-Length' header too.\n# You can also set any other required headers: Cache-Control, etc.\nreturn response\n","358":"import scrapy\nfrom scrapy.http import FormRequest\n\nclass MySpider(scrapy.Spider):\n    # ...\n    def start_requests(self):\n        yield FormRequest(some_post_url,\n                          formdata=dict(param1='value1', param2='value2'))\n","359":"list.sort(key=lambda item:item['date'], reverse=True)\n","360":"function checkdata(code) { \n  var dig = 0; \n  var test = 1; \n  for(var i=0; i<code.length-1;i++) { \n    dig=dig+(char2number(code.charAt(i))*test);\n    test*=2;\n  }\n  dig = mod(dig,9);\n  alert(dig);\n  if(dig==code.charAt(code.length-1)) return true; \n  else return false;}\n","361":"import csv\nwith open(filename, 'w') as f:\n   writer = csv.writer(f, delimiter=',')\n   writer.writerows(my_list)  #considering my_list is a list of lists.\n","362":"import numpy as np\nimport matplotlib.pyplot as plt\n\nlowerBound = 0.25\nupperBound = 0.75\nmyMatrix = np.random.rand(100,100)\n\nmyMatrix =np.ma.masked_where((lowerBound < myMatrix) & \n                             (myMatrix < upperBound), myMatrix)\n\n\nfig,axs=plt.subplots(2,1)\n#Plot without mask\naxs[0].imshow(myMatrix.data)\n\n#Default is to apply mask\naxs[1].imshow(myMatrix)\n\nplt.show()\n","363":"id_array = [x.id for x in _get_object_array() if x.id % 2 == 0]\n","364":">>> from itertools import chain\n>>> l = [0, 2, (1, 2), 5, 2, (3, 5)]\n>>> list(chain(*(i if isinstance(i, tuple) else (i,) for i in l)))\n[0, 2, 1, 2, 5, 2, 3, 5]\n","365":"def cutter(seq):\n    n = len(seq)\n    if n <= 20:\n        # here the recursion stops, do your stuff with the sequence\n        return\n    a = cutter(seq[:n\/2])\n    b = cutter(seq[n\/2:])\n    # combine the answer from both subsequences\n    return\n","366":"for elem in cmp_data['company']:\n    print elem\n","367":"funcs = (\n    (20, f),\n    (40, g),\n    (float('inf'), h),\n)\n\ndef superFunction(x):\n    for limit, f in funcs:\n        if x <= limit:\n            return f(x)\n","368":"import sys\ndef test(filename):\n    f = open(filename)\n    lines = f.readlines()\n    lines = [item.rstrip(\"\\n\") for item in lines]\n    newList = list()\n    for item in lines:\n            item = item.split(\",\")\n            item = tuple(int(items) for items in item)\n            newList.append(item)                \n    f.close()\n    print newList\n\nif __name__ == \"__main__\":\n    test(sys.argv[1])\n\nO\/P:\ntechie@gateway2:myExperiments$ python test.py \/export\/home\/techie\/myExperiments\/test.txt\n[(68, 125), (113, 69), (65, 86), (108, 149), (152, 53), (78, 90), (54, 160), (20, 137), (107, 90), (48, 12)]\n","369":">>> data = [[1, 3, \"String1\"], [3, 2, \"String2\"]]\n>>> class AnyString(str):\n...     def __eq__(self, other):\n...         return isinstance(other, str)\n...     \n>>> check = [1, 3, AnyString()]\n>>> check in data\nTrue\n","370":">>> df_tags = df.apply(lambda x: pd.Series(x['Tags']),axis=1).stack().reset_index(level=1, drop=False)\n>>> df_tags.columns = ['Key', 'Value']\n>>> df_tags\n          Key   Value\n0        Type      12\n0  background  orange\n0      circle    blue\n>>> df.drop('Tags', axis=1).join(df_tags)\n     ID  Name         Key   Value\n0  4345  Bill        Type      12\n0  4345  Bill  background  orange\n0  4345  Bill      circle    blue\n","371":"In [1]: import sys,csv\n\nIn [2]: csv.writer(sys.stdout).writerow(['one\", f\"', 'two', 'three'])  \n\"one\"\", f\"\"\",two,three\n\nIn [3]: csv.reader(['\"one\"\", f\"\"\",two,three']).next()  \nOut[3]: ['one\", f\"', 'two', 'three']\n","372":"$('.load_comments').on('click', function () {\n\nopenerp.jsonRpc(\"\/slides\/expand_comment\", + $(this).attr('slide-id'), 'call', {\n    'values': comments,\n}).then(function (data) {\n        $(data.target).closest('.list_comment').html($('<div class=\"media\"<\/div>'));\n        \/\/ slides: data\n});\n","373":"querysting = \"select Year, {} from table where Year={}\".format(c,y)\ndf = pd.read_sql(querystring,db)\n","374":"class InstitutionView(ModelView):\n    ...\n\n    # _handle_view called every request\n    def _handle_view(self, name, **kwargs):\n        if not flask_login.current_user.is_authenticated():\n            return self.inaccessible_callback(name, **kwargs)\n\n        # re-scaffold views every request\n        self._refresh_cache()\n\n        return super(InstitutionView, self)._handle_view(name, **kwargs)\n\n    # _refresh_cache called once when view is added to admin interface\n    def _refresh_cache(self):\n        # do not _refresh_cache outside of a request context\n        if not flask_login.current_user:\n            # init members with empty tuples to avoid instantiation error\n            self._list_columns = ()\n            return\n        super(InstitutionView, self)._refresh_cache()\n","375":"class Unit:\n  \"\"\"Very simple class to track a unit name, and an associated count.\"\"\"\n  def __init__(self, name, amount):\n   self.name = name\n   self.amount = amount\n\n# Pre-existing lists of types and amounts.    \nlist1 = [\"Infantry\", \"Tanks\", \"Jets\"]\nlist2 = [ 10, 20, 30]\n\n# Create a list of Unit objects, and initialize using\n# pairs from the above lists.    \nunits = []\nfor a, b in zip(list1, list2):\n  units.append(Unit(a, b))\n","376":"df.unstack(level=-1)\n","377":"difference = lambda x: ['x['Allotment'][0], x.ix[1]['NDII_Mean'] - x.ix[0]['NDII_Mean']]\ndf_diffs = DataFrame([difference(x[1].reset_index(drop = True)) for x in df.groupby(['Allotment'])])\ndf_diffs.columns = ['Allotment', 'NDII_Mean']\nprint df_diffs\n\n  Allotment  NDII_Mean\n0   A_Annex    0.55756\n1  Arnstson   -0.02747\n","378":"for j in range(123) :\n    for x,y in zip(list1,list2) :\n        doSomething()\n....\nfor x,y in zip(list1,list2) :\n    doSomethingElse()\n","379":"import os\nimport abc\n\nclass Path(object):\n    __metaclass__ = abc.ABCMeta\n\n    def __new__(cls, path):       \n        imp = cls._get_subclass_for(path)\n        instance = super(Path, cls).__new__(imp)\n        return instance\n\n    def __init__(self, path):\n        self.path = path\n\n    @classmethod\n    def _get_subclass_for(cls, path):\n        #import pdb; pdb.set_trace()\n        for subclass in cls.__subclasses__():\n            if subclass.match(path):\n                return subclass\n        raise LookupError(\"No matching subclass for path '%s'\" % path)\n\n    @staticmethod\n    @abc.abstractmethod\n    def match(path):\n        return False\n\n\n@Path.register\nclass FilePath(Path):\n    @staticmethod\n    def match(path):\n        return os.path.isfile(path)\n\n\n@Path.register\nclass DirectoryPath(Path):\n    @staticmethod\n    def match(path):\n        return os.path.isdir(path)\n","380":"response = requests.post(url, data=data, headers=headers)\n","381":"import random\n\nwhile True:\n\n    first_num = random.randint(1,500)\n    second_num = random.randint(1,500)\n\n    print (first_num)\n    print (second_num)\n\n    answer = int(input('Entrer la somme des deux nombres: '))\n\n    if answer == first_num + second_num:\n        print(\"It's correct!\")\n        break\n    else:\n        print(\"It's wrong!\")\n        tryAgain = raw_input('Try again? [(y)\/n] ')\n        if tryAgain.lower() == 'n':\n            break\n","382":"line2 = new_file.next() # now pointing at line 3\nif line2[0] == \"P\":\n    for _ in xrange(4):\n        new_file.next() # skip lines 3, 4, 5, 6\nelse:\n    new_file.next() # skip line 3 only\n","383":"for filename in glob.iglob(\"*.hgx\"):\n    with open(filename) as f:\n        # process file f here\n","384":"In [38]: x='a'\n\nIn [39]: lis=[]\n\nIn [40]: id(lis)\nOut[40]: 154680492\n\nIn [41]: lis=lis+[x]\n\nIn [42]: lis\nOut[42]: ['a']\n\nIn [43]: id(lis)\nOut[43]: 154749100\n","385":"#initializing a variable with some mock poll data\noption1 = \"general store\"\noption2 = \"supermarket\"\noption3 = \"mall\"\noption4 = \"small store\"\n\nsample_data = [option1,option2,option1,option1,option3,option3,option4,option4,option4,option2]\n\n#a dict that will store the poll results\nresults = {}\n\nfor response in sample_data:\n    results[response] = results.setdefault(response, 0) + 1\n","386":"\ndef maybeExpungeTag(self, tag):\n    \"\"\"\n    Delete \/tag\/ from the tags table if it is no longer referenced by\n    any bookmarks.\n\n    Return:\n        True if the tag was deleted.\n        False if the tag is still referenced and was not deleted.\n    \"\"\"\n    if not len(tag.bookmarks):\n        self.session.delete(tag)\n        return True\n    else:\n        return False\n\n# and for the actual delete...\nmark = # ...get the bookmark being deleted\ntags = mark.tags_rel\nself.session.delete(mark)\nfor tag in tags:\n    self.maybeExpungeTag(tag)\nself.session.commit()\n","387":"from google.appengine.ext import deferred\n\n  def do_something_expensive(a, b, c=None):\n    logging.info(\"Doing something expensive!\")\n    # Do your work here\n\n  # Somewhere else\n  deferred.defer(do_something_expensive, \"Hello, world!\", 42, c=True)\n","388":"import os.path, time\nfrom datetime import datetime\nfrom time import mktime\n\nfulldate = time.ctime(os.path.getctime(\"file.xlsx\"))\nstruct = time.strptime(fulldate)\nfiletime = datetime.fromtimestamp(mktime(struct))\nfiledate = filetime.replace(hour=0, minute=0, second=0, microsecond=0)\n\nif filetime < datetime.now():\n  print \"The file is quite old\"\nelse:\n  print \"The file is not so old\"\n","389":"numbers_sizes = (i*10**exp for exp in range(2, 9) for i in range(1, 10))\nfor n in numbers_sizes:\n    test(n)\n","390":"import dateutil.parser as p\n\n(p.parse(\"02:20:03\")+datetime.timedelta(minutes=2)).time()\n","391":"STRAIGHT_FLUSH = 9\n...\nTWO_PAIR = 2\nONE_PAIR = 1\nHIGH_CARD = 0\n\nhand_score('A7532')  # I omit suits here\n# => (HIGH_CARD, 14,7,5,3,2)\nhand_score('KK333')\n# => (FULL_HOUSE, 3, 13)\nhand_score('33444')\n# => (FULL_HOUSE, 4, 3)\nhand_score('AKQJ0')\n# => (STRAIGHT, 14)\n\n# Tuples can be easily compared:\n(HIGH_CARD, 14,7,5,3,2) < (STRAIGHT, 14)\n# => True\n","392":"import httplib2\n\nfrom apiclient.discovery import build\nfrom oauth2client.client import SignedJwtAssertionCredentials\n\n# Email of the Service Account.\nSERVICE_ACCOUNT_EMAIL = '<some-id>@developer.gserviceaccount.com'\n\n# Path to the Service Account's Private Key file.\nSERVICE_ACCOUNT_PKCS12_FILE_PATH = '\/path\/to\/<public_key_fingerprint>-privatekey.p12'\n\ndef createAnalyticsService():\n  f = file(SERVICE_ACCOUNT_PKCS12_FILE_PATH, 'rb')\n  key = f.read()\n  f.close()\n\n  credentials = SignedJwtAssertionCredentials(SERVICE_ACCOUNT_EMAIL, key,\n      scope='https:\/\/www.googleapis.com\/auth\/analytics.readonly')\n  http = httplib2.Http()\n  http = credentials.authorize(http)\n\n  return build('analytics', 'v3', http=http)\n","393":"import numpy as np\n\na=np.array([1,])\nb=np.array([1,])\nc=np.array([1,2,3])\n\ndef foo(a,b,c):\n    args=locals()\n    return args.items()[np.array([i[1].size for i in args.items()]).argmax()][1]\n\nbiggest = foo(a,b,c)\nprint biggest\n# [1,2,3]\n","394":"Lst =[]\nif entData != \"stop\":\n    Lst.append(entData)\n","395":"def filter(self, *q_objs, **query):\n    \"\"\"An alias of :meth:`~mongoengine.queryset.QuerySet.__call__`\n    \"\"\"\n    return self.__call__(*q_objs, **query)\n","396":"import java.math.BigInteger;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class SignatureFromPython {\n    private static final Pattern PAT = Pattern.compile(\"\\\\[(\\\\d+)\\\\]\");\n\n    private static byte[] i2osp(final BigInteger i, final int bitSize) {\n        if (i == null || i.signum() == -1) {\n            throw new IllegalArgumentException(\n                    \"input parameter should not be null or negative\");\n        }\n\n        if (bitSize < Byte.SIZE) {\n            throw new IllegalArgumentException(\n                    \"bitSize parameter should not be negative and a multiple of 8\");\n        }\n\n        final int byteSize = (bitSize - 1) \/ Byte.SIZE + 1;\n        final byte[] signedBigEndian = i.toByteArray();\n        final int signedBigEndianLength = signedBigEndian.length;\n        if (signedBigEndianLength == byteSize) {\n            return signedBigEndian;\n        }\n\n        final byte[] leftPadded = new byte[byteSize];\n\n        if (signedBigEndianLength == byteSize + 1) {\n            System.arraycopy(signedBigEndian, 1, leftPadded, 0, byteSize);\n        } else if (signedBigEndianLength < byteSize) {\n            System.arraycopy(signedBigEndian, 0, leftPadded, byteSize\n                    - signedBigEndianLength, signedBigEndianLength);\n        } else {\n            throw new IllegalArgumentException(\n                    \"Integer i is too large to fit into \" + bitSize + \" bits\");\n        }\n        return leftPadded;\n    }\n\n    public static String toHex(final byte[] data) {\n        final StringBuilder hex = new StringBuilder(data.length * 2);\n        for (int i = 0; i < data.length; i++) {\n            hex.append(String.format(\"%02X\", data[i]));\n        }\n        return hex.toString();\n    }\n\n    public static void main(String[] args) {\n        String sigString = \"[68830459489863257411523011520104203035626147084548742757940226446079486348431212041096334237130703774949375015187747280487790006116898192460644067270457728626039524097117092304115366780581423597886886987279231850120937691165013216970647150989646220735762034864029622135210042186666476516651349805320771941650]\";\n        Matcher sigMatcher = PAT.matcher(sigString);\n        if (!sigMatcher.matches()) {\n            throw new IllegalArgumentException(\"Whatever\");\n        }\n        BigInteger sigBI = new BigInteger(sigMatcher.group(1));\n        \/\/ requires bouncy castle libraries\n        System.out.println(toHex(i2osp(sigBI, 1024)));\n    }\n}\n","397":"import wx\n\nclass TextObjectValidator(wx.PyValidator):\n     \"\"\" This validator is used to ensure that the user has entered something\n         into the text object editor dialog's text field.\n     \"\"\"\n     def __init__(self):\n         \"\"\" Standard constructor.\n         \"\"\"\n         wx.PyValidator.__init__(self)\n\n\n\n     def Clone(self):\n         \"\"\" Standard cloner.\n\n             Note that every validator must implement the Clone() method.\n         \"\"\"\n         return TextObjectValidator()\n\n\n     def Validate(self, win):\n         \"\"\" Validate the contents of the given text control.\n         \"\"\"\n         textCtrl = self.GetWindow()\n         text = textCtrl.GetValue()\n\n         if len(text) == 0:\n             wx.MessageBox(\"A text object must contain some text!\", \"Error\")\n             textCtrl.SetBackgroundColour(\"pink\")\n             textCtrl.SetFocus()\n             textCtrl.Refresh()\n             return False\n         else:\n             textCtrl.SetBackgroundColour(\n                 wx.SystemSettings_GetColour(wx.SYS_COLOUR_WINDOW))\n             textCtrl.Refresh()\n             return True\n\n\n     def TransferToWindow(self):\n         \"\"\" Transfer data from validator to window.\n\n             The default implementation returns False, indicating that an error\n             occurred.  We simply return True, as we don't do any data transfer.\n         \"\"\"\n         return True # Prevent wxDialog from complaining.\n\n\n     def TransferFromWindow(self):\n         \"\"\" Transfer data from window to validator.\n\n             The default implementation returns False, indicating that an error\n             occurred.  We simply return True, as we don't do any data transfer.\n         \"\"\"\n         return True # Prevent wxDialog from complaining.\n\n#----------------------------------------------------------------------\n\nclass TestValidateDialog(wx.Dialog):\n    def __init__(self, parent):\n        wx.Dialog.__init__(self, parent, -1, \"Validated Dialog\")\n\n        self.SetAutoLayout(True)\n        VSPACE = 10\n\n        fgs = wx.FlexGridSizer(0, 2)\n\n        fgs.Add((1,1));\n        fgs.Add(wx.StaticText(self, -1,\n                             \"These controls must have text entered into them.  Each\\n\"\n                             \"one has a validator that is checked when the Okay\\n\"\n                             \"button is clicked.\"))\n\n        fgs.Add((1,VSPACE)); fgs.Add((1,VSPACE))\n\n        label = wx.StaticText(self, -1, \"First: \")\n        fgs.Add(label, 0, wx.ALIGN_RIGHT|wx.CENTER)\n\n        fgs.Add(wx.TextCtrl(self, -1, \"\", validator = TextObjectValidator()))\n\n        fgs.Add((1,VSPACE)); fgs.Add((1,VSPACE))\n\n        label = wx.StaticText(self, -1, \"Second: \")\n        fgs.Add(label, 0, wx.ALIGN_RIGHT|wx.CENTER)\n        fgs.Add(wx.TextCtrl(self, -1, \"\", validator = TextObjectValidator()))\n\n\n        buttons = wx.StdDialogButtonSizer() #wx.BoxSizer(wx.HORIZONTAL)\n        b = wx.Button(self, wx.ID_OK, \"OK\")\n        b.SetDefault()\n        buttons.AddButton(b)\n        buttons.AddButton(wx.Button(self, wx.ID_CANCEL, \"Cancel\"))\n        buttons.Realize()\n\n        border = wx.BoxSizer(wx.VERTICAL)\n        border.Add(fgs, 1, wx.GROW|wx.ALL, 25)\n        border.Add(buttons)\n        self.SetSizer(border)\n        border.Fit(self)\n        self.Layout()\n\n\n\napp = wx.App(redirect=False)\nf = wx.Frame(parent=None)\nf.Show()\ndlg = TestValidateDialog(f)\ndlg.ShowModal()\ndlg.Destroy()\n\napp.MainLoop()\n","398":">>> import numpy as np\n>>> import pandas as pd\n>>> index = np.arange(0, 10)\n>>> df = pd.DataFrame(index=index, columns=['foo', 'bar'])\n>>> df\nOut[268]: \n   foo  bar\n0  NaN  NaN\n1  NaN  NaN\n2  NaN  NaN\n3  NaN  NaN\n4  NaN  NaN\n5  NaN  NaN\n6  NaN  NaN\n7  NaN  NaN\n8  NaN  NaN\n9  NaN  NaN\n","399":"from sqlalchemy import *\nfrom sqlalchemy.orm import *\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom examples.dogpile_caching.caching_query import query_callable, FromCache, RelationshipCache\nfrom hashlib import md5\nfrom dogpile.cache.region import make_region\n\nBase = declarative_base()\n\nclass Person(Base):\n    __tablename__ = 'person'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(100), nullable=False)\n    type = Column(String(50))\n    __mapper_args__ = {\n        'polymorphic_identity': 'object',\n        'polymorphic_on': type\n        }\n\nclass Man(Person):\n    __tablename__ = 'man'\n    id = Column(Integer, ForeignKey('person.id'), primary_key=True)\n    age = Column(String(100), nullable=False)\n    __mapper_args__ = {'polymorphic_identity': 'man'}\n\nclass SomethingElse(Person):\n    __tablename__ = 'somethingelse'\n\n    id = Column(Integer, ForeignKey('person.id'), primary_key=True)\n    age = Column(String(100), nullable=False)\n    __mapper_args__ = {'polymorphic_identity': 'somethingelse'}\n\nclass Config(Base):\n    __tablename__ = \"config\"\n    id = Column(Integer, primary_key=True)\n    person = Column(Integer, ForeignKey('person.id'))\n    address = Column(String)\n    person_ref = relationship(Person)\n\ne = create_engine(\"sqlite:\/\/\", echo=True)\nBase.metadata.create_all(e)\n\ndef md5_key_mangler(key):\n    \"\"\"Receive cache keys as long concatenated strings;\n    distill them into an md5 hash.\n\n    \"\"\"\n    return md5(key.encode('ascii')).hexdigest()\n\nregions = {}\nregions['default'] = make_region(\n            key_mangler=md5_key_mangler\n            ).configure(\n                'dogpile.cache.memory_pickle',\n            )\n\nSession = scoped_session(\n                sessionmaker(\n                    bind=e,\n                    query_cls=query_callable(regions)\n                )\n            )\n\nsess = Session()\nsess.add(Config(person_ref=SomethingElse(age='45', name='se1')))\nsess.add(Config(person_ref=Man(age='30', name='man1')))\nsess.commit()\n\nall_types = with_polymorphic(Person, \"*\", aliased=True)\n\nconf = sess.query(Config).options(joinedload(Config.person_ref.of_type(all_types)), FromCache(\"default\")).first()\nsess.commit()\nsess.close()\n\nprint \"_____NO MORE SQL!___________\"\n\n\nconf = sess.query(Config).options(joinedload(Config.person_ref.of_type(all_types)), FromCache(\"default\")).first()\nprint conf.person_ref.age\n","400":"echo $PS1\n","401":"def OSinfo(runthis):\n    osstdout = subprocess.Popen(runthis, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)\n\n    theInfo = osstdout.communicate()[0].strip()\n\n    return (theInfo, osstout.returncode)\n","402":">>> 'hello world'.encode('hex')\n'68656c6c6f20776f726c64'\n>>> '68656c6c6f20776f726c64'.decode('hex')\n'hello world'\n","403":"def subthread1(stop):\n    while not stop:\n        time.sleep(1)\n        print(' 1...')\n\ndef main_thread(q):\n    stop = [] # list rather than boolean because we need it \"by reference\"\n\n    t1 = Thread(target=subthread1, args=(stop,))\n    t1.daemon = True\n    t1.start()\n\n    while True:\n        msg = q.get()\n        if msg == 0:\n            print(\"EXITING THREAD\")\n            stop.append(True)\n            break\n","404":"def process_request(self, request):\n    full_path = request.get_full_path()\n    if full_path.startswith('\/users\/login'):\n        return\n","405":"<Location \/admin>\n    Order Deny, Allow\n    Deny from all\n    Allow from 127.0.0.1\n<\/Location>\n","406":"import os, fcntl\nfcntl.fcntl(thePipe, fcntl.F_SETFL, os.O_NONBLOCK) \n","407":"from scipy.sparse import hstack\nhstack((X, X2))\n","408":"subprocess.Popen('ulimit -v 1024; ls', shell=True)\n","409":">>> tcs = root.findall('Testcase')\n>>> tcs\n[<Element 'Testcase' at 0x23e14e0>, <Element 'Testcase' at 0x23e1828>]\n>>> len(tcs)\n2\n>>> r = ET.Element('Root')\n>>> r.append(tcs[0])\n>>> ET.tostring(r, 'utf-8')\n'<Root><Testcase>\\n          <Info1>[]<\/Info1>\\n          <Info2>[]<\/Info2>\\n     <\/Testcase>\\n     <\/Root>'\n","410":"A = HDFStore('A.h5')\nB = HDFStore('B.h5')\n\nnrows_a = A.get_storer('df').nrows\nnrows_b = B.get_storer('df').nrows\na_chunk_size = 1000000\nb_chunk_size = 1000000\n\ndef merge_a_b(a,b):\n    # function that returns an operation on passed\n    # frames a and b\n    # could be a merge, join, concat, or other operation that \n    # results in a single frame\n\n\nfor a in xrange(int(nrows_a \/ a_chunk_size) + 1):\n\n    a_start_i = a * a_chunk_size\n    a_stop_i  = min((a + 1) * a_chunk_size, nrows_a)\n\n    a = A.select('df', start = a_start_i, stop = a_stop_i)\n\n    for b in xrange(int(nrows_b \/ b_chunk_size) + 1):\n\n        b_start_i = b * b_chunk_size\n        b_stop_i = min((b + 1) * b_chunk_size, nrows_b)\n\n        b = B.select('df', start = b_start_i, stop = b_stop_i)\n\n        # this is your result store\n        m = merge_a_b(a, b)\n\n        if len(m):\n            store.append('df_result', m)\n","411":">>> import re\n>>> s = '  hello world!   '\n>>> match = re.search(r\"^\\s*(\\S.*?)\\s*$\", s)\n>>> match.group(1), match.start(1), match.end(1)\n('hello world!', 2, 14)\n","412":"with Model() as sw_model:\n\n    sigma = HalfCauchy('sigma', beta=10, testval=1.)\n\n    switchpoint = DiscreteUniform('switchpoint', lower=0, upper=90, testval=45)\n\n    # Priors for pre- and post-switch intercepts and slopes\n    intercept_u1 = Uniform('Intercept_u1', lower=-10, upper=10, testval = 0)\n    intercept_u2 = Uniform('Intercept_u2', lower=-10, upper=10, testval = 0)\n    x_coeff_u1 = Normal('x_u1', 0, sd=20)\n    x_coeff_u2 = Normal('x_u2', 0, sd=20)\n\n    intercept = switch(switchpoint < x, intercept_u1, intercept_u2)\n    x_coeff = switch(switchpoint < x, x_coeff_u1, x_coeff_u2)\n\n    likelihood = Normal('y', mu=intercept + x_coeff * x, sd=sigma, observed=y)\n\n    start = find_MAP() \n\n    step1 = NUTS([intercept_u1, intercept_u2, x_coeff_u1, x_coeff_u2])\n    step2 = Metropolis([switchpoint])\n\n    trace = sample(20000, step=[step1, step2], start=start, njobs=4,progressbar=True)\n","413":"import xmpp\n\nipaddress='<server-ip>'\nuser='<new-user>' #without @<server-ip>\npasswd='<password>'\n\nc = xmpp.Client(ipaddress)\nc.connect((ipaddress,5222), secure=0)\nc.auth(user,passwd,sasl=1)\nc.sendInitPresence()\nc.isConnected()\nc.send(xmpp.protocol.Message('<jid of receiver user with @<domain> >',\"hello world\"))\n","414":"pixels, = np.where(bitflags & FLAG)\nfor i, pixel in zip(pixels, array[pixels]):\n    do_something(i, pixel)\n","415":"list1 = [\"a\", \"b\", \"c\", \"xc\"]\nlist2 = [\"d\", \"e\", \"to\", \"xc\"]\nlist3 = [\"f\", \"g\", \"h\", \"i\", \"j\", \"xc\"]\n\nprint list(set(list1) & set(list2) & set(list3)) # it will print ['xc']\n","416":"#!\/usr\/bin\/env python3\nimport subprocess\n\ndef run_command(command, **kwargs):\n    with subprocess.Popen(command,\n                          stdout=subprocess.PIPE,\n                          stderr=subprocess.STDOUT,\n                          bufsize=1,\n                          **kwargs) as p:\n        yield from p.stdout\n    # close p.stdout, call p.wait() automatically\n\nfor line in run_command(r'java -jar c:\\jar\\minecraft.jar',\n                        cwd=r'D:\\working directory',\n                        universal_newlines=True):\n    print(line, end='')\n","417":"def natural_numbers():\n    n = 0\n    while True:\n        n += 1\n        yield n\n\ndef find_nth_character(n):\n    numbers = \"\"\n    gen = natural_numbers()\n\n    while len(numbers) < n:\n        numbers += str(gen.next())\n\n    print numbers\n    return numbers[n-1]\n\n\ndef main():\n    print find_nth_character(15)\n\nif __name__ == '__main__':\n    main()\n","418":">>> import platform\n>>> platform.linux_distribution()\n('Ubuntu', '11.04', 'natty')\n>>> \" \".join(platform.linux_distribution())\n'Ubuntu 11.04 natty'\n>>> \n","419":">>> tgt\n'https:\\\\\/\\\\\/pbs.twimg.com\\\\\/profile_banners\\\\\/2604140473\\\\\/1404508267'\n>>> tgt.replace('\\\\', '')\n'https:\/\/pbs.twimg.com\/profile_banners\/2604140473\/1404508267'\n","420":"service MyService {\n    \/\/returns immediately\n    oneway void onewayMethod(<params>);\n\n    \/\/blocks until completion\n    void normalMethod(<params>);\n}\n","421":"import fileinput\n\npattern = 'UUID={}&Major={}&Minor={}&Power={}&RSSI={}'\n\nfor line in fileinput.input():\n  query = pattern.format(*line.strip().split(' '))\n  # now do something with query\n","422":"def check_for_messages():\n\n    <your code here>\n\n    root.after(10000, check_for_messages)\n","423":"start_urls = ['http:\/\/www.e3050.com\/Items.aspx?cat=SON']\npro_urls = [] # all product Urls\n\ndef parse(self, response): # select 50 products on each page\n    yield FormRequest.from_response(response,\n        formdata={'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$pagesddl': '50',\n                  'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$sortddl': 'Price(ASC)'},\n        meta={'curr': 1, 'total': 0, 'flag': True},\n        dont_click=True,\n        callback=self.page_rs_50)\n\ndef page_rs_50(self, response): # paginate the pages\n    hxs = HtmlXPathSelector(response)\n    curr = int(response.request.meta['curr'])\n    total = int(response.request.meta['total'])\n    flag = response.request.meta['flag']\n    self.pro_urls.extend(hxs.select(\n        \"\/\/td[@class='name']\/\/a[contains(@id,'ctl00_ctl00_ContentPlaceHolder1_ItemListPlaceHolder_itemslv_ctrl')]\/@href\"\n    ).extract())\n    if flag:\n        total = hxs.select(\n            \"\/\/span[@id='ctl00_ctl00_ContentPlaceHolder1_ItemListPlaceHolder_lbl_pagesizeBtm']\/text()\").re('\\d+')[0]\n    if curr < total:\n        curr += 1\n        yield FormRequest.from_response(response,\n            formdata={'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$pagesddl': '50',\n                      'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$sortddl': 'Price(ASC)',\n                      'ctl00$ctl00$ScriptManager1': 'ctl00$ctl00$ScriptManager1|ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$pager1$ctl00$ctl01'\n                , '__EVENTTARGET': 'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$pager1$ctl00$ctl01',\n                      'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$hfVSFileName': hxs.select(\n                          \".\/\/input[@id='ctl00_ctl00_ContentPlaceHolder1_ItemListPlaceHolder_hfVSFileName']\/@value\").extract()[\n                                                                                          0]},\n            meta={'curr': curr, 'total': total, 'flag': False},\n            dont_click=True,\n            callback=self.page_rs_50\n        )\n    else:\n        for pro in self.pro_urls:\n            yield Request(\"http:\/\/www.e3050.com\/%s\" % pro,\n                callback=self.parse_product)\n\n\ndef parse_product(self, response):\n    pass\n    #TODO Implementation Required For Parsing\n","424":"bank['bob'][1] = 10  # 'bob' is the key\n","425":"cv::Mat vesselImage = cv::imread(filename); \/\/the original image\ncv::threshold(vesselImage, vesselImage, 125, 255, THRESH_BINARY);\ncv::Mat blurredImage; \/\/output of the algorithm\ncv::pyrUp(vesselImage, blurredImage);\n\nfor (int i = 0; i < 15; i++)\n    cv::medianBlur(blurredImage, blurredImage, 7);\n\ncv::pyrDown(blurredImage, blurredImage);\ncv::threshold(blurredImage, blurredImage, 200, 255, THRESH_BINARY);\n","426":"class MyThread(Thread):\n    def __init__(self):\n        Thread.__init__(self)\n        self.ToKill = False\n    def run(self):\n        while True:\n            self.FooHandler()\n            if self.ToKill:\n                return None\n    def FooHandler(self):\n        \"\"\" your function here \"\"\"\n        print 3\n\nclass Panel(wx.Panel):\n    def __init__(self, parent):\n        wx.Panel.__init__(self, parent, id=-1, style=wx.RAISED_BORDER)\n        Bsizer = wx.BoxSizer(wx.VERTICAL)\n        button=wx.ToggleButton(self, label=\"Click To Enable\")\n\n        Bsizer.Add(button,1,wx.ALL | wx.EXPAND)\n        self.SetSizer(Bsizer)\n        self.Bind(wx.EVT_TOGGLEBUTTON,self.buttonEvt,id=button.GetId())\n\n    def buttonEvt(self, evt):\n        clickedToggleButton = evt.GetEventObject()\n        if clickedToggleButton.GetValue():\n            self.thread = MyThread()\n            self.thread.start()\n            clickedToggleButton.SetLabel(\"Click To Disable\")\n        else:\n            self.thread.ToKill = True\n            clickedToggleButton.SetLabel(\"Click To Enable\")\n","427":"import json\nimport requests\nfrom OpenSSL import crypto\n\nP12_CERT_FILE = 'C:\/Users\/mryan\/Documents\/Code\/SampleApps\/bundle.p12'\np12_cert = crypto.load_pkcs12(open(P12_CERT_FILE).read(), 'passphrase')\npem_cert = crypto.dump_certificate(crypto.FILETYPE_PEM, p12_cert.get_certificate())\n\n# remove PEM header, footer, and new lines to produce raw cert data\nraw_data = ''.join(pem_cert.split('\\n')[1:-2])\ncert_data = json.dumps({'RawData': raw_data})\nresult = requests.post(apiRoot + \"\/Accounts\/\" + accId + \"\/certs\", data=cert_data)\n","428":"    pixelspace = reader.GetPixelSpacing()\n    spacing = image.GetSpacing()\n\n    vtk_data = image.GetPointData().GetScalars()\n\n    numpy_data = numpy_support.vtk_to_numpy(vtk_data)\n\n    numpy_data = numpy_data.reshape(dims[0], dims[1], dims[2])\n    numpy_data = numpy_data.transpose(2,1,0)\n\n    dims = numpy_data.shape\n\n    dataImporter = vtkImageImport()\n    dataImporter.SetDataScalarTypeToFloat() \n    dataImporter.SetNumberOfScalarComponents(1)\n    dataImporter.SetDataExtent(0, dims[2]-1, 0, dims[1]-1, 0, dims[0]-1)\n    dataImporter.SetWholeExtent(0, dims[2]-1, 0, dims[1]-1, 0, dims[0]-1)\n    dataImporter.SetDataSpacing(spacing[0],spacing[1],spacing[2])\n    dataImporter.CopyImportVoidPointer(numpy_data, numpy_data.nbytes)\n","429":"dict(zip(col_names, p))\n","430":"def get_member(a,the_list):\n    if a in the_list:\n        return a\n    else:\n        for elem in the_list:\n            if isinstance(elem,list):\n                if a in elem:\n                    return elem\n    return None\n\ndef merge_member(a,b,the_list):\n    get_member_a = get_member(a,the_list)\n    get_member_b = get_member(b,the_list)\n    if get_member_a and get_member_b:\n        the_list.remove(get_member_a)\n        the_list.remove(get_member_b)\n        if isinstance(get_member_b,list):\n            get_member_b.extend(get_member_a)\n            the_list.append(get_member_b)\n        elif isinstance(get_member_a,list):\n            get_member_a.extend(get_member_b)\n            the_list.append(get_member_a)\n        else:\n            the_list.append([get_member_b,get_member_a])\n    return the_list\n","431":">>> import requests\n>>> response = requests.get(\"http:\/\/www.google.com\")\n>>> print response.content\n'<!doctype html><html itemscope=\"\" itemtype=\"http:\/\/schema.org\/WebPage\"><head>....'\n>>> print response.content == response.text\nTrue\n","432":"def print_binary(prefix,n):\nif n==0:\n    print (prefix)\nelse:\n    print_binary((prefix+'0'),n-1)\n    print_binary((prefix+'1'),n-1)\n","433":"from OpenSSL import SSL\nfrom twisted.internet import reactor, ssl\nfrom twisted.web import client\n\nclass MyPolicy(client.BrowserLikePolicyForHTTPS):\n    def creatorForNetloc(self, hostname, port):\n        return ssl.optionsForClientTLS(\n            hostname.decode(\"ascii\"),\n            extraCertificateOptions={'method': SSL.SSLv3_METHOD},\n            trustRoot=self._trustRoot\n        )\n\nmyAgent = client.Agent(reactor, contextFactory=MyPolicy())\n","434":"#include <boost\/python.hpp>\n#include <boost\/python\/suite\/indexing\/vector_indexing_suite.hpp>\n#include <Python.h>\n#include <vector>\n#include <boost\/variant.hpp>\n\ntypedef boost::variant<int> number;\ntypedef std::vector<number> vector;\n\nvector function()\n{\n   return vector{1};\n}\n\nstruct number_to_object : boost::static_visitor<PyObject*>\n{\n   static result_type convert(number const& v)\n   {\n      return apply_visitor(number_to_object(), v);\n   }\n\n   template<typename T>\n   result_type operator () (T const& v) const\n   {\n      return boost::python::incref(boost::python::object(v).ptr());\n   }\n};\n\nvoid init_module() {}\n\nBOOST_PYTHON_MODULE(pyexc_test)\n{\n   using namespace boost::python;\n\n   class_<vector>(\"vector\").def(vector_indexing_suite<vector, true>());\n\n   to_python_converter<number, number_to_object>();\n   implicitly_convertible<int, number>();\n\n   def(\"function\", function);\n   def(\"init_module\", init_module);\n}\n","435":"array[n-i:-i or None]\n","436":"# data source\nl0 = [{\"num\": 60, \"name\": \"A\"}, {\"num\": 50, \"name\": \"B\"}, {\"num\": 49, \"name\": \"C\"}]\n\n# initialization, length of data source, void data destination,\n# start from beginning of data source\nll0, l1, nl = len(l0), [], 0\n\n# the loop is downwards, because we want to match the numbers\n# in data source from high to low\nfor n in range(l0[0]['num'], 0, -1):\n    # first test avoids IndexError, second test is your condition\n    if nl < ll0 and l0[nl]['num'] == n:\n        l1.append([n, l0[nl]])\n        # if we had a match, we switch our attention to the next item\n        # in data source, hence increment the index in data source\n        nl += 1\n    else:\n        l1.append([n, {}])\n\n# we built the data destination list from top to bottom,\n# you want from bottom to top, hence\nl1.reverse()\n","437":"import time\nfrom random import randint\n\ndef print_data():\n    print \"Hello World!\"\n    time.sleep(randint(30, 45))\n\ndef print_data_for(total_time):\n    start_time = time.time()\n    while time.time() < start_time + total_time:\n        print_data()\n\nprint_data_for(60*60)  # 1 hour\n","438":"class OtherTable(DeclarativeBase, DatetimeBase):\n    __tablename__ = 'other_table'\n\n    blah = Column(Integer, primary_key=True)\n    other_column = Column(Text)\n\n    __table_args__ = (PrimaryKeyConstraint(\"blah\", \"inserted\"),)\n","439":"import itertools\n\ndef has_monochromatic_rectangles(grid):\n  # use range instead of xrange here (xrange is not in Python 3)\n  points = list(itertools.product(range(len(grid)), range(len(grid[0]))))\n  # check if for any rectangle, all 4 colors are equal\n  # (this is more brute-force than necessary, but you placed simplicity\n  # above efficiency. Also, for 17x17, it doesn't matter at all ;)\n  return any(grid[x1][y1] == grid[x1][y2] == grid[x2][y1] == grid[x2][y2]\n             for (x1,y1), (x2,y2) in itertools.product(points, points)\n             if x1 != x2 and y1 != y2)\n\ndef has_max_colors(grid, most):\n  # collect all grid values and uniquify them by creating a set\n  return len(set(sum(grid, []))) <= most\n\nif __name__ == '__main__':\n  # read from STDIN (could easily be adapted to read from file, URL, ...)\n  import sys\n  grid = [map(int, line.split(',')) for line in sys.stdin]\n\n  assert has_max_colors(grid, 4)\n  assert not has_monochromatic_rectangles(grid)\n","440":"  2706 function calls (2004 primitive calls) in 4.504 CPU seconds\n\nOrdered by: standard name\n\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n     2    0.006    0.003    0.953    0.477 pobject.py:75(save_objects)\n  43\/3    0.533    0.012    0.749    0.250 pobject.py:99(evaluate)\n...\n","441":"#!\/usr\/bin\/perl\nopen(FI,\"file.txt\");\nread(FI,$_,10000000);\nclose(FI);\n@arr = split('--###--');\n$cnt=0;\nfor $c (@arr)\n{\n    open(FO,\">$cnt.txt\");\n    print FO $c;\n    close(FO);\n    $cnt++;\n}\n","442":"# func1 is not in func2's globals\n>>> func2.__globals__['func1']\nTraceback (most recent call last):\n  File \"<pyshell#6>\", line 1, in <module>\n    func2.__globals__['func1']\nKeyError: u'func1'\n\n# func1 is in the globals of the internally-stored wrapped version of func2\n>>> func2.__closure__[0].cell_contents.__globals__['func1']\n<function func1 at 0x0000000002B2B358>\n","443":"thelist = [int(s) for s in thestring.split()]\n","444":">>> data = defaultdict(set)\n>>> data['a'].add(1)\n>>> data['b'].add(2)\n>>> data['b'].add(3)\n>>> min(data.items(), key=lambda x: min(x[1]))\n('a': {1})\n>>> min(data.items(), key=lambda x: max(len(x[1])))\n('b': {2, 3})\n","445":"last_time = 0 # starting time of data, 0 is here as example\ntotal_time = 0 # 0 seconds\n\nfor time, switch, state in state_switches:\n    if a_on and b_on and c_on:\n        total_time += time - last_time\n\n    if switch == \"A\":\n        a_on = state\n    if switch == \"B\":\n        b_on = state\n    if switch == \"C\":\n        c_on = state\n\n    last_time = time\n","446":"def main():\n        maxNumber = 5000\n        diff = 1000\n\n        p = {}\n        quickCache = {}\n\n        for i in range(maxNumber):\n            p[i] = i * (3 * i - 1 ) \/ 2\n\n        def quickCheck(n):\n            if n in quickCache: return quickCache[n]\n            partial_c = (sqrt(1 + 24 * (n)))\/-6 \n            c = 1\/6 + partial_c\n            if int(c.real) == c.real:\n                    quickCache[n] = True\n                    return True\n            c = c - 2*partial_c\n            if int(c.real) == c.real:\n                    quickCache[n] = True\n                    return True\n            quickCache[n] = False\n            return False\n\n        for i in range(1, maxNumber):\n                mi = p[i]\n                for g in range(i+1, maxNumber):\n                        ma = p[g]\n                        if ma - mi < diff and quickCheck(ma - mi) and quickCheck(ma + mi):\n                                print('New couple ', ma, mi)\n                                diff = ma - mi\n","447":"new_d = {}\nfor k, v in d.items():\n   u, n, r = k.split('_')\n   new_d[(n, r)] = v + new_d.get((n, r), 0)\n","448":"class StoryForm(ModelForm):\n\n    fecha_cierre = forms.TypedChoiceField(\n       choices=DAYS_CHOICES, widget=forms.Select)\n\n    class Meta:\n        models = Story\n        exclude = ('deadline',)\n\n    def save(self):\n        story = super(StoryForm, self).save(commit=False)\n        story.deadline = datetime.datetime.now() + \\\n                         datetime.timedelta(days=self.cleaned_data['fecha_cierre']))\n        story.save()\n        return story\n","449":"from celery import task\nfrom django.core.cache import cache\n\ndef page_two_calculation(arg1, arg2):\n    return arg1 + arg2\n\n@task\ndef page_two_task(arg1, arg2):\n    result = page_two_calculation(arg1, arg2)\n    cache_key = \"page-two-%s-%s\" (arg1, arg2)\n    cache.set(cache_key, result)\n\ndef page_one(request, arg1, arg2):\n\n    # Start the page two task\n    page_two_task.delay(arg1, arg2)\n\n    # Return the page one response\n    return HttpResponse('page one')\n\ndef page_two(request, arg1, arg2)\n    cache_key = \"page-two-%s-%s\" (arg1, arg2)\n    result = cache.get(cache_key)\n    if result is None:\n         # the result will only be None if the page 2 calculation\n         # doesn't exist in the cache, in which case we'll have to\n         # return the value synchronously.\n         result = page_two_calculation(arg1, arg2)\n    return result\n","450":"if item in my_canvas.find_all():\n   my_canvas.delete(item)\nelse:\n   print(\"Item not on canvas\")\n","451":"var csrftoken == getCookie('csrftoken') || $(\":input[name='csrfmiddlewaretoken']\").val();\n","452":"import matplotlib.pyplot as plt\n\nplt.hlines(7, 0, 2, linestyles='dashed')\nplt.hlines(11, 0, 2, linestyles='dashed')\nplt.hlines(10, 0, 2, linestyles='dashed')\nplt.hlines(8, 0, 2, linestyles='dashed')\nplt.annotate(\n    '', xy=(1, 10), xycoords='data',\n    xytext=(1, 8), textcoords='data',\n    arrowprops={'arrowstyle': '<->'})\nplt.annotate(\n    'D = 1', xy=(1, 9), xycoords='data',\n    xytext=(5, 0), textcoords='offset points')\n\n# alternatively,\n# plt.text(1.01, 9, 'D = 1')\n\nplt.show()\n","453":"    def parse(self, response):\n        hxs = HtmlXPathSelector(response)\n        links = hxs.select('\/\/a[@class=\"prodLink ListItemLink\"]\/@href')\n        for link in links:\n            href = link.extract()\n            yield Request('http:\/\/www.walmart.com\/' + href, self.parse_data)\n        #\n        #                                                    here\n        #                                                      |\n        #                                                      v\n        next_link = hxs.select('\/\/li[@class=\"btn-nextResults\"]\/a\/@href').extract()\n        if next_link:\n            # and as hxs.select() will return a list, you should select the first element\n            yield Request('http:\/\/www.walmart.com\/search\/search-ng.do' + next_link[0], self.parse)\n        else:\n            print \"last Page\"\n","454":"file_content = set([line.rstrip() for line in file_handler])\nonly_in_platform = set(platform_specific_req).difference(file_content)\n","455":"def is_prime(num):\n    # returns false if num is not an integer\n    if not isinstance(num, int):\n        return None\n    # returns false is divisible by any number \n    # between 1 and num return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    # if none of the numbers divide num return True\n    return True.\n","456":"import sys\n\nfrom PyQt4.QtCore import *\nfrom PyQt4.QtGui import *\n\nclass FeedbackWindow(QWidget):\n    def __init__(self):\n        QWidget.__init__(self)\n        self.main_layout = QVBoxLayout(self)\n        #self.main_widget = QWidget(self)              # main_widget is not used.\n        #self.main_widget.setLayout(self.main_layout)\n        self.setLayout(self.main_layout)\n        self.title_label = QLabel(\"Tell us what you think:\")\n        self.feedback_text_editor = QTextEdit()\n        self.send_button = QPushButton(\"Send\")\n\n        self.main_layout.addWidget(self.title_label)\n        self.main_layout.addWidget(self.feedback_text_editor)\n        self.main_layout.addWidget(self.send_button)\n\n        self.setWindowTitle(\"Feedback\")\n        self.setGeometry(200,120,300,300)\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    w = FeedbackWindow()\n    w.show()\n    app.exec_()\n","457":"#! \/usr\/bin\/env python3\n\n\ndef main():\n    print(find_mismatch('Hello, world!', 'Hello, world'))\n    print(find_mismatch('Hello, world!', 'Hello, world!'))\n    print(find_mismatch('Hello, world!', 'Hallu, world!'))\n    print(find_mismatch('Hello, world!', 'Hello, world.'))\n\n\ndef find_mismatch(string_a, string_b):\n    if len(string_a) != len(string_b):\n        return 2\n    folded_a, folded_b = string_a.casefold(), string_b.casefold()\n    if folded_a == folded_b:\n        return 0\n    found_difference = False\n    for character_a, character_b in zip(folded_a, folded_b):\n        if character_a != character_b:\n            if found_difference:\n                return 2\n            found_difference = True\n    return 1\n\n\ndef find_mismatch(a, b):\n    \"\"\"Find mismatches in strings a and b.\n\n    Returns 0 when strings are the same.\n    Returns 1 when strings differ in one character.\n    Returns 2 any other time (different lengths or more mismatches).\"\"\"\n    if len(a) != len(b):\n        return 2\n    a, b = a.casefold(), b.casefold()\n    if a == b:\n        return 0\n    error = False\n    for a, b in zip(a, b):\n        if a != b:\n            if error:\n                return 2\n            error = True\n    return 1\n\n\nif __name__ == '__main__':\n    main()\n","458":"def directed_graph_from_edges(edges):\n    graph = {}\n    for a,b in edges:\n        graph.setdefault(a,set())\n        graph[a].add(b)\n    return graph\n","459":"import htql; \naddress = '88-21 64th st , Rego Park , New York 11374'\nstates=['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', \n    'Delaware', 'District Of Columbia', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', \n    'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', \n    'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', \n    'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', \n    'Oregon', 'PALAU', 'Pennsylvania', 'PUERTO RICO', 'Rhode Island', 'South Carolina', 'South Dakota', \n    'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', \n    'Wyoming']; \n\na=htql.RegEx(); \na.setNameSet('states', states);\n\nstate_zip1=a.reSearchStr(address, \"&[s:states][,\\s]+\\d{5}\", case=False)[0]; \n# state_zip1 = 'New York 11374'\n\nstate_zip2=a.reSearchList(address.split(), r\"&[ws:states]<,>?<\\d{5}>\", case=False)[0]; \n# state_zip2 = ['New', 'York', '11374']\n","460":">>> class Foo(object):\n...     def __del__(self):\n...         print \"Bye bye!\"\n... \n>>> spam = Foo()\n>>> bar = spam\n>>> del spam\n>>> del bar\nBye bye!\n","461":"startValue = -1.0\nintervalLength = 2.0\nnumberOfSteps = 14\nincreasePerStep = intervalLength \/ numberOfSteps\n\nprint startValue\n\nx = startValue\nfor i in range (numberOfSteps):\n    x += increasePerStep\n    print x\n\n\n-1.0\n-0.857142857143\n-0.714285714286\n-0.571428571429\n-0.428571428571\n-0.285714285714\n-0.142857142857\n-2.22044604925e-16\n0.142857142857\n0.285714285714\n0.428571428571\n0.571428571429\n0.714285714286\n0.857142857143\n1.0\n","462":"if form.is_valid():\n    c = form.cleaned_data[\"category\"]\n    category = Category.objects.filter(name=c).first()\n    if not category:\n        category = Category.objects.create(name=c)\n    product = form.save(commit=False)\n    product.category = category\n    product.save()\n","463":"x[1].T\nx[2] - Y\n","464":"\n>>> import typing\n>>> point = typing.NamedTuple(\"Point\",[('x',int),('y',int)])\n","465":"from collections import defaultdict\n\nwords_seen = defaultdict(list)\n\nfor word,filedate in get_words():\n    words_seen[word].append(filedate)\n","466":">>> from pygit2 import clone_repository\n>>> repo_url = 'git:\/\/github.com\/libgit2\/pygit2.git'\n>>> repo_path = '\/path\/to\/create\/repository'\n>>> repo = clone_repository(repo_url, repo_path) # Clones a non-bare repository\n>>> repo = clone_repository(repo_url, repo_path, bare=True) # Clones a bare repository\n","467":"#include <iostream>\n#include <list>\n#include <utility>\n#include <vector>\nusing namespace std;\n\nvoid likeCPlusPlus()\n{\n    int i = 666, j = 666, width = 666, height = 666, image[666][666];\n\n    for( int dy = 1;  dy >= -1;  --dy )\n    {\n        int const   dx  = -1;\n        int const   x   = i + dx;\n        int const   y   = j + dy;\n\n        if(\n            0 <= x && x < width &&\n            0 <= y && y < height &&\n            image[x][y] == 0\n            )\n        {}\n    }\n}\n\nvoid likePythonInCPlusPlus()\n{\n    int i = 666, j = 666, width = 666, image[666][666];\n\n    std::vector<std::pair<int,int> > direction;\n    direction.push_back(std::make_pair(-1,1));\n    direction.push_back(std::make_pair(-1,0));\n    direction.push_back(std::make_pair(-1,-1));\n    for ( std::vector<std::pair<int,int> >::iterator itr = direction.begin(); \n                       itr != direction.end(); ++itr)\n    {\n        int m = (*itr).first;\n        int n = (*itr).second;\n        if ( (0 <= i + m && i + m < width ) && \n                       (0 <= j + n && j + n < width ) && \n                       image[i + m][j + n ] == 0)\n        {}\n    }\n}\n\nint main()\n{}\n","468":"In [107]: pd.DataFrame(np.diag(s),index=s.index,columns=s.index)\nOut[107]: \n          a         b         c         d         e\na  0.630529  0.000000  0.000000  0.000000  0.000000\nb  0.000000  0.360884  0.000000  0.000000  0.000000\nc  0.000000  0.000000  0.345719  0.000000  0.000000\nd  0.000000  0.000000  0.000000  0.796625  0.000000\ne  0.000000  0.000000  0.000000  0.000000 -0.176848\n","469":"$ echo $LANG\nen_US.utf-8\n$ python3\nPython 3.3.2 (default, Aug 22 2013, 12:33:42)\n[GCC 4.2.1 Compatible Apple Clang 4.0 ((tags\/Apple\/clang-421.0.60))] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from unidecode import unidecode\n>>> print(unidecode(u\"C\u0153ur\"))\nCoeur\n>>> print(unidecode(u\"\u0441\u043e\u043e\u0431\u0449\u0435\u0301\u043d\u0438\u044f\"))\nsoobshcheniia\n","470":"joined_tables = [mapper.class_ for mapper in query._join_entities]\n","471":"#include <Python.h>\n\nstatic PyObject * \ndo_something(PyObject *self, PyObject *args, PyObject *kwargs)\n{\n   char *filename;\n   int mode = 2;\n   static char *keywords[] = {\"filename\", \"mode\", NULL};\n\n   if (!PyArg_ParseTupleAndKeywords(args, kwargs, \"s|i\", keywords, &filename, &mode))\n      return NULL;\n\n   char *result = do_somethingelse(filename);\n   return Py_BuildValue(\"s\", result);\n}\n\nstatic PyMethodDef\nmodule_functions[] = {\n    { \"do_something\", (PyCFunction)do_something, METH_VARARGS | METH_KEYWORDS, \"do something\" },\n    { NULL }\n};\n\n\nPyMODINIT_FUNC\ninitmyext(void)\n{\n    Py_InitModule(\"myext\", module_functions);\n}\n","472":"; When server connection is released back to pool:\n;   session      - after client disconnects\n;   transaction  - after transaction finishes\n;   statement    - after statement finishes\npool_mode = session\n","473":"import math \ndef multiplier(x, y):\n    dist = x - y\n    return 1 + dist\/math.sqrt(1+dist**2)\n","474":"def rank(toSort):\n    #importing from the string library\n    from string import lowercase as alph\n\n    #temporary list\n    _ranks=[]\n\n    #populate with empty dictonaries\n    for i in range(len(toSort)):\n        _ranks.append({})\n\n    #the actual sorting algorithm\n    for i in range(len(toSort)-1):\n        #iterate all k\/v pairs in the supplied dictionary\n        for k,v in toSort.iteritems():\n            #iterate all k\/v pairs in v element\n            for a,b in v.iteritems():\n                #if the alpha index of an element is equal to\n                #the max alpha index of elements in its containing dictionary...\n                if alph.index(b)==max(map(alph.index,v.values())):\n                    _ranks[i][k]=a\n                #if it isn't..\n                else:\n                    try:\n                        _ranks[i+1][k]=a\n                    except IndexError:\n                        _ranks[-1][k]=a\n    return _ranks\n","475":"import matplotlib.pyplot as plt\nimport numpy as np\n\nX1=np.random.rand(10,10)\nX2=np.random.rand(10,10)\nK,sigma=10,1.5\n\nvmin = np.minimum(X1,X2).min()\nvmax = np.maximum(X1,X2).max()\n\nfig, axes = plt.subplots(1,2)\n\naxes[0].set_title(\"$K = \" + str(K) + \" , \\sigma = \" + str(sigma) + \"$\")\nheatmap1 = axes[0].imshow(X1, interpolation='none',  cmap=plt.get_cmap(\"seismic\"),\n                          vmin=vmin,vmax=vmax)\n\n\naxes[1].set_title(r\"$K = \" + str(K) + \", \\sigma = \" + str(sigma) + \"$\")\nheatmap2 = axes[1].imshow(X2, interpolation='none',   cmap=plt.get_cmap(\"seismic\"),\n                          vmin=vmin,vmax=vmax)\n\nplt.subplots_adjust(left=None, bottom=None, right=0.8, top=None,\n                    wspace=0.4, hspace=.4)\n\nfig.savefig('test.png')\ncpos = [axes[0].get_position().bounds[1],\n        axes[0].get_position().bounds[3]]\n\ncax = fig.add_axes([0.9,cpos[0],0.01,cpos[1]])\n\nfig.colorbar(heatmap1,cax=cax)\n\nfig.savefig('test.png')\n","476":"zip_file = zipfile.ZipFile('toto.zip')\ntarget_path = 'C:\\test\\object'\n\nfor i, filename in enumerate(zip_file.namelist()):\n    target = os.path.join(target_path, \"%05d_%s\" % (i, filename))\n    file_obj = open(target, 'wb')\n    try:\n        shutil.copyfileobj(zip_file.open(filename, 'r'), file_obj)\n    finally:\n        file_obj.close()\n","477":"import subprocess, time, signal\n\np = subprocess.Popen(['python', '-u', 'myscript.py'], stdout=subprocess.PIPE)\ntime.sleep(5)\np.send_signal(signal.SIGTERM)\noutput = p.communicate()[0]\n\nprint('Process has exited with code %d' % p.wait())\nprint('Output is %s' % str(output))\n","478":"with open('file_a','r') as fa:  # open file a --> read the files into lists\n    list_a = fa.read().splitlines()\nwith open('file_b','r') as fb:  # open file b --> read the files into lists\n    list_b = fb.read().splitlines()\n\n# get element in list_b if list_a contain the element(only first 24 characters)\nmatch_list = [n for n in list_b if n[:24] in list_a]\n\nwith open('file_c','w+') as fc:  # write the matching list to the new file\n    fc.write('\\n'.join(match_list))\n","479":"figure;\n\nset(gca, 'ColorOrder', hsv(5));\nset(gca, 'LineStyleOrder', '-|--|:');\n\nhold on;\n\nt = 0:pi\/20:2*pi;\nfor i = 1:15\n    plot(t, sin(t-i\/5));\nend\n","480":"import threading\nlock = threading.Lock()\n\ndef write_to_file(f, text, file_size):\n    lock.acquire() # thread blocks at this line until it can obtain lock\n\n    # in this section, only one thread can be present at a time.\n    print >> f, text, file_size\n\n    lock.release()\n\ndef filesize(asset):  \n    f = open(\"results.txt\", 'a+')  \n    c = wmi.WMI(asset)  \n    wql = 'SELECT FileSize,Name FROM CIM_DataFile where (Drive=\"D:\" OR Drive=\"E:\") and Caption like \"%file%\"'  \n    for item in c.query(wql):  \n        write_to_file(f, item.Name.split(\"\\\\\")[2].strip().upper(), str(item.FileSize))\n","481":"    predictions \/= n_predictions\n    self.oob_prediction_ = predictions\n\n    if self.n_outputs_ == 1:\n        self.oob_prediction_ = \\\n            self.oob_prediction_.reshape((n_samples, ))\n\n    self.oob_score_ = 0.0\n\n    for k in range(self.n_outputs_):\n        self.oob_score_ += r2_score(y[:, k],\n                                    predictions[:, k])\n\n    self.oob_score_ \/= self.n_outputs_\n","482":"from matplotlib import pyplot as pp\n\nclass FigEventLoopDemo(object):\n\n    def __init__(self):\n\n        self.fig,self.ax = pp.subplots(1,1,num='Event loop demo')\n        self.clickme = self.ax.text(0.5,0.5,'click me',ha='center',va='center',color='r',fontsize=20,picker=10)\n\n        canvas = self.fig.canvas\n\n        # add a callback that triggers when the text is clicked\n        self.cid = canvas.mpl_connect('pick_event',self.on_pick)\n\n        print \"entering a blocking loop\"\n\n        # start a blocking event loop\n        self.fig.canvas.start_event_loop(timeout=-1)\n\n    def on_pick(self,event):\n\n        if event.artist is self.clickme:\n\n            # exit the blocking event loop\n            self.fig.canvas.stop_event_loop()\n\n            print \"now we're unblocked\"\n","483":"class FooResource(ModelResource):\n    class Meta:\n        # The usual stuff\n\n    def dispatch(self, request_type, request, **kwargs):\n        # Do whatever\n","484":">>> import numpy as np\n>>> np.loadtxt('\/tmp\/sample.txt', dtype=str, delimiter='##', comments=None)\narray(['826', '25733', 'Emanuele Buratti', ' ', 'Mammalian cell expression'], \n      dtype='|S25')\n","485":"alltext = myfile.read()\ntokenized_sentences = nltk.word_tokenize(alltext)\n","486":"class Button(QPushButton):\n\n    def __init__(self, parent=None):\n        super(Button, self).__init__(parent)\n        # other initializations...\n\n    def enterEvent(self, QEvent):\n        # here the code for mouse hover\n        pass\n\n    def leaveEvent(self, QEvent):\n        # here the code for mouse leave\n        pass\n","487":"In [8]: result = \"10['1', '0']0\"\n\nIn [9]: re.sub(r'\\[[^\\]]*\\]', '', result)\nOut[9]: '100'\n","488":">>> import numpy as np\n>>> a = np.array([[1, 2, 3], [4, 5, 6]])\n>>> b = np.array([[7, 8, 9], [10, 11, 12]])\n>>> np.hstack( (a, b) )\narray([[ 1,  2,  3,  7,  8,  9],\n       [ 4,  5,  6, 10, 11, 12]])\n","489":"s = requests.Session()\ns.auth = ('user', 'pass')\ns.headers.update({'x-test': 'true'})\n\n# both 'x-test' and 'x-test2' are sent\ns.get('http:\/\/httpbin.org\/headers', headers={'x-test2': 'true'})\n","490":">>> import numpy as np\n>>> wds = np.random.rand(550800, 8)\n>>> z = np.random.rand(212065)\n>>> ixs = np.random.randint(212065, size=(550800, 8))\n\n>>> np.einsum('ij,ij->i', wds, z[ixs])\narray([ 1.65069924,  3.26203701,  3.16035664, ...,  1.76963986,\n        2.09727537,  1.94905991])\n\n>>> np.vdot(wds[0], z[ixs[0]])\n1.6506992361953157\n>>> np.vdot(wds[1], z[ixs[1]])\n3.2620370116548827\n","491":"from jinja2 import Template\n\nmy_template = Template(\"\"\"\n<html>\n<body>\n<table border=\"0\">\n<tr>\n{% for url in urls %}\n<td><a href=\"{{ url }}\">{{ url }}<\/td>\n{% endfor %}\n<\/tr>\n<\/table>\n\"\"\")\n\nurls = [\"http:\/\/.....jpg\",\"http:\/\/.....jpg\",\"http:\/\/.....jpg\",\"http:\/\/.....jpg\"]\nrendered_html = my_template.render(urls=urls)\n","492":"import random\n\nindex = random.randint(0, len(yourstring)-1)\nyourstring = yourstring[:index] + yourstring[index+1:]\n\nprint yourstring[index]\n","493":"import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nX_MAX = 50\nY_MAX = 50\nZ_MAX = 50\nfig = plt.figure(1)\nax = fig.add_subplot(111, projection='3d')\nax.set_title(\"My Title\")\nax.set_xlim3d([0, X_MAX])\nax.set_ylim3d([0, Y_MAX])\nax.set_zlim3d([0, Z_MAX])\nax.set_autoscale_on(False)\nplt.ion()\nplt.show()\n\na = 0\nsct = None\nwhile a < 50:\n  a += 1\n  if sct is not None:\n      sct.remove()\n  sct = ax.scatter( a, a\/2+1, 3, s=1 )\n  fig.canvas.draw()\n  plt.pause(0.001)\n","494":"$.ajax({\n     type: \"GET\",\n     url : \"\/repl\",\n     data: {url : \"print \\\"hello\\\"\"},\n     contentType: 'application\/json;charset=UTF-8',\n     success: function(result){\n         alert(result.output);\n    }\n  });\n","495":"class mylist (list):\n\n    def __getitem__(self, n):\n        if n < 0:\n            raise IndexError(\"...\")\n        return list.__getitem__(self, n)\n\nkeyboard = mylist() # instead of []\n","496":"from django.db.models import Sum\n\ntotal = ( Task.objects\n            .filter(your-filter-here)\n            .aggregate(\n                total=Sum('progress', field=\"progress*estimated_days\")\n             )['total']\n         )\n","497":"class PartitionerInvariantsFixture(object):\n    def setUp(self):\n        self.testDataSet = range(100) # create test-data-set\n        super(PartitionInvariantsFixture, self).setUp()\n\n    def test_partitioner(self):\n        TestCase.assertEqual(self.testDataSet, \n                     chain.from_iterable(self.partitioner(self.testDataSet))\n\nclass MyClassTests(TestCase, PartitionerInvariantsFixture):\n    partitioner = Partitioner\n","498":"import numpy as np\nfrom pandas import Timestamp\n\nmonths = range(1, 13)\ndf['ep0'] = df.opdate.where(df.opdate > Timestamp('20140101'), Timestamp('20140101'))\nfor month in months:\n    colname = 'ep%d' % month\n    prev_colname = 'ep%d' % (month - 1)\n    df[colname] = df[prev_colname] + np.timedelta64(40, 'D')\n","499":"from decimal import Decimal\n\ndef number2string(a):\n    b = format(Decimal(str(a)).normalize(), 'f')\n    print a,\"->\",b\n","500":"def generate_values(f):\n    buf = \"\" # a buffer of data read from the file\n    pos = 0  # the position of our buffer within the file\n\n    while True: # loop until we return at the end of the file\n        new_data = f.read(4096) # read up to 4k bytes at a time\n\n        if not new_data: # quit if we got nothing\n            if buf:\n                yield pos, buf.split(\",\") # handle any data after last newline\n            return\n\n        buf += new_data\n        line_start = 0 # index into buf\n\n        try:\n            while True: # loop until an exception is raised at end of buf\n                line_end = buf.index(\"\\n\", line_start) # find end of line\n                line = buf[line_start:line_end] # excludes the newline\n\n                if line: # skips blank lines\n                    yield pos+line_start, line.split(\",\") # yield pos,data tuple\n\n                line_start = line_end+1\n        except ValueError: # raised by `index()`\n            pass\n\n        pos += line_end + 1\n        buf = buf[line_end + 1:] # keep left over data from end of the buffer\n","501":"import random\nrandom.shuffle(array)\n","502":"def PrintProductsBelowNumber(number):\n    number1 = 1\n    while number1 <= number:\n        number2 = 1\n        while number2 <= number:\n            print(number1, \"*\", number2, \"=\", number1 * number2)\n            number2 += 1\n        number1 += 1\n\nPrintProductsBelowNumber(2)\n","503":"self.e = tk.Entry(...)\n...\nself.e.insert(\"insert\", \"new text\")\n","504":"from apiclient import discovery\n\n# Auth goes here if necessary. Create authorized http object...\nclient = discovery.build('storage', 'v1beta2') # add http=whatever param if auth\nrequest = client.objects().list(\n    bucket=\"mybucket\",\n    prefix=\"abc\/myfolder\")\nwhile request is not None:\n  response = request.execute()\n  print json.dumps(response, indent=2)\n  request = request.list_next(request, response)\n","505":"In [36]: np.bincount(a, weights=b)\nOut[36]: array([  13.,  103.,    6.])\n","506":"import sys\nfrom PyQt4.Qt import *\n\nclass MyPopup(QWidget):\n    def __init__(self, mainWindow):\n        QWidget.__init__(self)\n\n        # use the mainWindow passed as parameter\n        mainWindow.label1.setText('hello')\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self, *args):\n        QMainWindow.__init__(self, *args)\n        self.cw = QWidget(self)\n        self.setCentralWidget(self.cw)\n        self.btn1 = QPushButton(\"Click me\", self.cw)\n        self.btn1.setGeometry(QRect(50, 50, 100, 30))\n        self.label1 = QLabel(\"No Commands running\", self.cw)\n        self.connect(self.btn1, SIGNAL(\"clicked()\"), self.doit)\n        self.w = None\n\n    def doit(self):\n        self.w = MyPopup(self) #when creating the popup pass in the main window\n        self.w.setGeometry(QRect(100, 100, 400, 200))\n        self.w.show()\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    myapp = MainWindow()\n    myapp.show()\n    sys.exit(app.exec_())\n","507":">>> tup = [lst[x+1] for x in range(0, len(lst), 2)]\n>>> names = [lst[x] for x in range(0, len(lst), 2)]\n>>> b = []\n>>> [b.append(x) for x in tup if x not in b]\n>>> b\n[(['1000.0'], None), (['1001.0'], None)]\n>>> list(set(names))\n['ACER', 'HP']\n","508":"plt.figure()\nCS = plt.contour(X, Y, Z) \nplt.clabel(CS, inline=1, fontsize=10)\nplt.title('Simplest default with labels')\n","509":"import hmac\nimport hashlib\nimport base64\ndig = hmac.new(b'1234567890', msg=your_bytes_string, digestmod=hashlib.sha256).digest()\nbase64.b64encode(dig).decode()      # py3k-mode\n'Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg='\n","510":"In [32]: text\nOut[32]: u' A <EM ID=\"5103\" CATEG=\"ORGANIZACAO\" TIPO=\"INSTITUICAO\">Legi\\xe3o da Boa    Vontade<\/EM> comemora amanh\\xe3 o <EM ID=\"5104\" CATEG=\"VALOR\" TIPO=\"CLASSIFICACAO\">10\\xba.<\/EM> anivers\\xe1rio da sua implanta\\xe7\\xe3o em <EM ID=\"5105\" CATEG=\"LOCAL\" TIPO=\"HUMANO\">Portugal<\/EM> com cerim\\xf3nias de car\\xe1cter religioso e de conv\\xedvio -- disse ontem fonte da organiza\\xe7\\xe3o. '\n\nIn [33]: re.sub(r'<EM[^C]*(CATEG=\"[^\"]+\")[^>]*>', r'<\\1>', text).replace(r'<\/EM>', '')\nOut[33]: u' A <CATEG=\"ORGANIZACAO\">Legi\\xe3o da Boa    Vontade comemora amanh\\xe3 o <CATEG=\"VALOR\">10\\xba. anivers\\xe1rio da sua implanta\\xe7\\xe3o em <CATEG=\"LOCAL\">Portugal com cerim\\xf3nias de car\\xe1cter religioso e de conv\\xedvio -- disse ontem fonte da organiza\\xe7\\xe3o. '\n","511":"from pathlib import Path\nfor subdir in sorted(Path('\/some\/path').iterdir()):\n    print(subdir)\n","512":"for pos, link in enumerate(soup.find_all('a', href=re.compile(\"bangladesh\"))):\n    tip = link.get('href')\n    print(tip)\n    if (pos + 1) == 2:\n        webbrowser.open(tip)\n","513":" d = {}\n l = llist.dllist()\n\n # insert 'foo' and obtain the link\n lnk = l.append('foo')\n # insert the link to the dictionary\n d['foo'] = lnk\n","514":"variable = \"\"\nvalue = \"\"\nr = \"\"\nfor key in form.keys():\n        variable = str(key)\n        value = str(form.getvalue(variable))\n        r += \"<p>\"+ variable +\", \"+ value +\"<\/p>\\n\" \n\nfields = \"<p>\"+ str(r) +\"<\/p>\"        \n","515":"class OnlyOne:\n    class __OnlyOne:\n        def __init__(self, arg):\n            self.val = arg\n        def __str__(self):\n            return repr(self) + self.val\n    instance = None\n    def __init__(self, arg):\n        if not OnlyOne.instance:\n            OnlyOne.instance = OnlyOne.__OnlyOne(arg)\n        else:\n            OnlyOne.instance.val = arg\n    def __getattr__(self, name):\n        return getattr(self.instance, name)\n","516":"In [103]: def lst():\n    i = 1\n    while i <= 10:\n        yield i\n        i += 1\n\nIn [104]: g = lst()\n\nIn [105]: while True:\n    try:\n        v1, v2 = next(g), next(g)\n        print(v1,v2)\n    except StopIteration:\n        break\n   .....:     \n(1, 2)\n(3, 4)\n(5, 6)\n(7, 8)\n(9, 10)\n","517":"RotatingFileHandler(filename, maxBytes=10*1024*1024, backupCount=5)\n","518":"class Test01(unittest.TestCase):\n\n    def test_login(self):\n        self.page = \"https:\/\/myWebPageAddress\"\n        self.username = \"userName\"\n        self.password = \"Password\"\n        self.browser_label = ['firefox', 'chrome', 'ie']\n\n        for index in range(len(self.browser_label)):\n            self.browser_name = self.browser_label[index]\n\n\n            if self.browser_name == 'firefox':\n                logger.debug(\"Opening [\" + self.browser_name + \"] ...\")\n                self.driver = webdriver.Firefox()\n            if self.browser_name == 'chrome':\n                logger.debug(\"Opening [\" + self.browser_name + \"] ...\")\n                self.driver = webdriver.Chrome()\n            if self.browser_name == 'ie':\n                logger.debug(\"Opening [\" + self.browser_name + \"] ...\")\n                self.driver = webdriver.Ie()\n\n            try:\n                logger.info(\"Test_01::Case_01::Login OK\")\n                Test01.case_01(self)\n            except BaseException as e:\n                logger.fatal(e.value)\n        logger.info(\"End\")\n        self.driver.close()\n\n    def case_01(self):\n    ....\n    ....\n","519":"In [58]: df.pivot_table(index='c2', columns='c1', values='v').reset_index()\nOut[58]:\nc1 c2  g1  g2\n0   x  72  53\n1   y  44  97\n2   z  13  32\n","520":"\n#Dev by Mkee\nimport Tkinter as tk\nimport sys\n\nclass Shuffle(object):\n    def __init__(self,master=None):\n        self.master=master\n        self.text=tk.Text(master)\n    def hide(self):\n        self.text.pack_forget()\n    def show(self):\n        self.text.pack(side=tk.LEFT, padx=5, pady=5)\n\nclass Buttons(object):\n    def __init__(self,master=None):\n        self.master=master\n        self.red = tk.Button(self.master, text=\"Red\", bg=\"red\", fg=\"white\")\n        self.green = tk.Button(self.master, text=\"Green\", bg=\"green\", fg=\"black\")\n        self.blue = tk.Button(self.master, text=\"Blue\", bg=\"blue\", fg=\"white\")\n    def hide(self):\n        self.red.pack_forget()\n        self.green.pack_forget()\n        self.blue.pack_forget()                \n    def show(self):\n        self.red.pack(side=tk.LEFT,expand=tk.YES,fill=tk.BOTH)\n        self.green.pack(side=tk.LEFT,expand=tk.YES,fill=tk.BOTH)\n        self.blue.pack(side=tk.LEFT,expand=tk.YES,fill=tk.BOTH)\n\nclass MainApp(object):\n    def __init__(self,master=None):\n        self.master=master\n        app=self.app=tk.Tk()\n        app.title(\"Mkee's Tools\")\n        app.geometry('300x200')\n        self.shuffle=Shuffle(master)\n        self.buttons=Buttons(master)\n        self.current=None\n        menubar=tk.Menu(app)\n        program_menu=tk.Menu(menubar)\n        program_menu.add_command(label='Shuffle',\n                                 command=lambda: self.show(self.shuffle))\n        program_menu.add_command(label='Buttons',\n                                 command=lambda: self.show(self.buttons)) \n        program_menu.add_command(label='Quit',command=sys.exit) \n        menubar.add_cascade(label='Programs', menu=program_menu)\n        app.config(menu=menubar)\n    def show(self,obj):\n        if self.current != obj:\n            try: self.current.hide()\n            except AttributeError: pass\n            self.current=obj\n            obj.show()\n\ndef main():\n    m=MainApp()\n    m.app.mainloop()\n\nif __name__=='__main__':\n    main()\n","521":"import re\ntext = \"\"\"UINT32 CacheSize() const { return _cacheSize; }\n    UINT32 LineSize() const { return _lineSize; }\n    UINT32 Associativity(UINT64 obj, INT8 obj2) const { return _associativity; }\n    VOID SplitAddress(const ADDRINT addr, CACHE_TAG & tag, UINT32 & setIndex) const\n    VOID SplitAddress(const ADDRINT addr, CACHE_TAG & tag, UINT32 & setIndex, UINT32 & lineIndex) const\n    {\n        const UINT32 lineMask  = _lineSize - 1 INT8;\n\"\"\"\nfor line in text.split(\"\\n\"):\n    print re.sub(r'(U?INT\\d+?)',r'PIN_\\1', line)\n","522":"tmp_vis = []\n\nframe_tracker = []\n\nwhile True:\n  for i in xrange(8):\n     rets, frame = cap[i].read()\n     try:\n       tmp_vis.append(cv2.resize(frame, (self.w, self.h)))\n     except:\n       continue\n\n  print \"\\nbreak\"\n\n  frame_tracker.append(tmp_vis)\n\n  print hashlib.sha1(frame_tracker[0][0].view(np.uint8)).hexdigest()\n\n  if len(frame_tracker) > 1:\n    print hashlib.sha1(frame_tracker[1][0].view(np.uint8)).hexdigest()   \n\n  if len(frame_tracker) > 2:\n    print hashlib.sha1(frame_tracker[2][0].view(np.uint8)).hexdigest() \n","523":"# Server code\nimport xmlrpclib\nfrom SimpleXMLRPCServer import SimpleXMLRPCServer\n\ndef is_even(n):\n    return n%2 == 0\n\nserver = SimpleXMLRPCServer((\"localhost\", 8000))\nprint \"Listening on port 8000...\"\nserver.register_function(is_even, \"is_even\")\nserver.serve_forever()\n\n\n# Client code\nimport xmlrpclib\n\nproxy = xmlrpclib.ServerProxy(\"http:\/\/localhost:8000\/\")\nprint \"3 is even: %s\" % str(proxy.is_even(3))\nprint \"100 is even: %s\" % str(proxy.is_even(100))\n","524":"postgres=# select * from employees ;\n empid | supervisorid \n-------+--------------\n     1 |             \n     2 |             \n     3 |            1\n     4 |            2\n     5 |            3\n     6 |            4\n(6 rows)\n\nWITH RECURSIVE emp(empid,supervisorid) AS (\n     SELECT empid, supervisorid  FROM employees where empid=1\n     UNION ALL\n     SELECT e.empid, e.supervisorid\n     FROM emp s, employees e\n     WHERE e.supervisorid = s.empid \n   )\nSELECT * \n FROM emp\n ;\n empid | supervisorid \n-------+--------------\n     1 |             \n     3 |            1\n     5 |            3\n(3 rows)\n","525":"with open('ipaddr.txt', \"r\") as f:\n    lines=f.readlines()\n    table = [line.split(\"\\t\") for line in lines]\n    print table[22][39:]\n    print table[18][39:]\n    print table[26][39:]\n    f.close()\n","526":"def recursivemethod(obj_to_act_on, persistent_obj=None):\n\n    if persistent_obj == None:\n        persistent_obj = set()\n\n    # Act on your object\n\n    return recursivemethod(newobj, persistent_obj)\n","527":"from scipy.interpolate import griddata\n\n\nAngles = [-180, -90, 0 , 90, 180, -135, \n          -45,45, 135, 180,-90, 0, 90, 180 ]\n\nRadii = [0,0.33,0.33,0.33,0.33,0.5,0.5,\n         0.5,0.5,0.5,0.6,0.6,0.6,0.6]\n\nAngles = np.array(Angles)\/180.*np.pi\nx = np.array(Radii)*np.sin(Angles)\ny = np.array(Radii)*np.cos(Angles)\n\nValues = [30.42,24.75, 32.23, 34.26, 26.31, 20.58, \n          23.38, 34.15,27.21, 22.609, 16.013, 22.75, 27.062, 18.27]\n\nXi = np.linspace(-1,1,100)\nYi = np.linspace(-1,1,100)\n\n#make the axes\nf = plt.figure()\nleft, bottom, width, height= [0,0, 1, 0.7]\nax  = plt.axes([left, bottom, width, height])\npax = plt.axes([left, bottom, width, height], \n                projection='polar',\n                axisbg='none')\ncax = plt.axes([0.8, 0, 0.05, 1])\nax.set_aspect(1)\nax.axis('Off')\n\n\n# grid the data.\nVi = griddata((x, y), Values, (Xi[None,:], Yi[:,None]), method='cubic')\ncf = ax.contour(Xi,Yi,Vi, 15, cmap=plt.cm.jet)\n\n#make a custom colorbar, because the default is ugly\ngradient = np.linspace(1, 0, 256)\ngradient = np.vstack((gradient, gradient))\ncax.xaxis.set_major_locator(plt.NullLocator())\ncax.yaxis.tick_right()\ncax.imshow(gradient.T, aspect='auto', cmap=plt.cm.jet)\ncax.set_yticks(np.linspace(0,256,len(cf1.get_array())))\ncax.set_yticklabels(map(str, cf.get_array())[::-1])\n","528":"import sys\nfrom PyQt4.QtCore import *\nfrom PyQt4.QtGui import *\nfrom PyQt4.QtWebKit import *\n\napp = QApplication(sys.argv)\n\nweb = QWebView()\nweb.load(QUrl(\"http:\/\/www.google.com\"))\n#web.show()\n\nprinter = QPrinter()\nprinter.setPageSize(QPrinter.A4)\nprinter.setOutputFormat(QPrinter.PdfFormat)\nprinter.setOutputFileName(\"file.pdf\")\n\ndef convertIt():\n    web.print_(printer)\n    print \"Pdf generated\"\n    QApplication.exit()\n\nQObject.connect(web, SIGNAL(\"loadFinished(bool)\"), convertIt)\n\nsys.exit(app.exec_())\n","529":">>> lsta = ['a','b','c']\n>>> lstb = ['1','2','3','4']\n>>> lstc = ['x','y']\n>>> from itertools import product\n>>> [\"\".join(t) for t in product(lsta, lstb, lstc)]\n['a1x', 'a1y', 'a2x', 'a2y', 'a3x', 'a3y', 'a4x', 'a4y', \n 'b1x', 'b1y', 'b2x', 'b2y', 'b3x', 'b3y', 'b4x', 'b4y', \n 'c1x', 'c1y', 'c2x', 'c2y', 'c3x', 'c3y', 'c4x', 'c4y']\n","530":"path = os.path.join(os.path.dirname(__file__), '..', 'templates', 'myPage.html')\n","531":"from django.db.models import Q\n\n@login_required \ndef friends_search(request):\n    search_result = None\n\n    if request.method == 'POST':    \n        if request.POST.get('fld_name'):\n            try:\n                fld_name = request.POST.get('fld_name')\n                q = Q(nickname__icontains=fld_name) | Q(family__icontains=fld_name)\n                search_result = UserProfile.objects.filter(q)     \n                if not search_result:\n                    search_result = '\u041f\u043e \u0432\u0430\u0448\u0435\u043c\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e.'\n            except Exception as exc:\n                search_result = '\u0412 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u0435\u043d. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0432\u0430\u0448 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e\u0437\u0436\u0435.'   \n\n    t = loader.get_template('friends_search.html')\n    c = RequestContext(request, {\n    'search_result': search_result,\n}, [custom_proc])   \n    return HttpResponse(t.render(c))\n","532":"import random\ncorrect = 0\nincorrect = 0\nusedwords = []\nprint 'Welcome to text twist, you have 14 guesses to get 7 words made up of 4, 5 or 6 letters. Good Luck!'\n\nfor i in range(14):\n    print \"Your letters are 'E' 'P' 'L' 'B' 'E' 'B', what is your guess?\"\n    answer = raw_input()\n    if answer in usedwords:\n        print \"Sorry, you've already used this word\"\n    else: #Newly added\n        usedwords.append(answer) #We have to add the input words to the list if they are new\n        if answer == 'belle' or answer == 'bleep' or answer == 'pebble' or answer == 'beep' or answer == 'bell' or answer == 'peel' or answer == 'peep':\n            if answer in usedwords:\n                print 'Nice that was one of the words!'\n            usedwords.append(answer)\n            correct = correct + 1\n        if answer != 'belle' and answer != 'bleep' and answer != 'pebble' and answer != 'beep' and answer != 'bell' and answer != 'peel' and answer != 'peep':\n            print 'Sorry, that was not one of the words.'\n            incorrect = incorrect + 1\n\n\nprint 'Your final score was', correct, 'correct and', incorrect, 'wrong.'\n","533":"listb_iter = iter(ListB)\nitem_b = next(listb_iter) #we're assuming that ListB as at least one item.\nfor item_a in ListA:\n    if ...: #condition to move on to the next item in ListB\n        try:\n            item_b = next(listb_iter)\n        except StopIteration:\n            #went through all of ListB\n\n    #other logic\n","534":"df = (pd.DataFrame({'name': ['A.J. Price'] * 3, \n                    'opponent': ['76ers', 'blazers', 'bobcats'], \n                    'nearest_neighbors': [['Zach LaVine', 'Jeremy Lin', 'Nate Robinson', 'Isaia']] * 3})\n      .set_index(['name', 'opponent']))\n\n>>> df\n                                                    nearest_neighbors\nname       opponent                                                  \nA.J. Price 76ers     [Zach LaVine, Jeremy Lin, Nate Robinson, Isaia]\n           blazers   [Zach LaVine, Jeremy Lin, Nate Robinson, Isaia]\n           bobcats   [Zach LaVine, Jeremy Lin, Nate Robinson, Isaia]\n\ndf.reset_index(inplace=True)\nrows = []\n_ = df.apply(lambda row: [rows.append([row['name'], row['opponent'], nn]) \n                         for nn in row.nearest_neighbors], axis=1)\ndf_new = pd.DataFrame(rows, columns=df.columns).set_index(['name', 'opponent'])\n\n>>> df_new\n                    nearest_neighbors\nname       opponent                  \nA.J. Price 76ers          Zach LaVine\n           76ers           Jeremy Lin\n           76ers        Nate Robinson\n           76ers                Isaia\n           blazers        Zach LaVine\n           blazers         Jeremy Lin\n           blazers      Nate Robinson\n           blazers              Isaia\n           bobcats        Zach LaVine\n           bobcats         Jeremy Lin\n           bobcats      Nate Robinson\n           bobcats              Isaia\n","535":"class CounterExample(object):\n\n    instances_created = 0\n\n    def __init__(self):\n        CounterExample.instances_created += 1\n\n    def __del__(self):\n        \"\"\" If you want to track the current number of instances\n            you can add a hook in __del__. Otherwise use\n            __init__ and just count up.\n        \"\"\"\n        CounterExample.instances_created -= 1\n","536":"last_three = []\nfor j in range(1, its + 2):\n    ...\n    k2 = cost(candidate1, candidate2)\n    if k2 in last_three:\n        continue\n    elif k2 < k1:\n        ...\n    last_three[(j%3)-1] = k2\n","537":"from kivy.app import App\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.properties import StringProperty, NumericProperty, ListProperty\nfrom kivy.graphics.context import Clock\nfrom kivy.uix.widget import Widget\n\nclass Controls(BoxLayout):   \n    def __init__(self, **kwargs):\n        self.temp_solar=NumericProperty()\n        self.temp_pool=NumericProperty()\n        self.delta_value=NumericProperty()\n        self.max_value=NumericProperty()\n        self.hysteresis=NumericProperty()\n        #super(Controls, self).__init__(**kwargs)\n        #Clock.schedule_interval(self.set_value, 1)\n\n    def PID_an_aus(self, instance, value):\n        if value is True:\n           pass\n        else:\n            pass\n\n    def set_value(self, *args):\n        print(\"Temperature\",self.temp_solar, self.temp_pool )\n        print(\"Delta\",self.delta_value)\n        print(\"Max\", self.max_value)\n        print(self.hysteresis)\n\nclass Tempar():\n    def __init__(self):\n        self.temperature=[111,222]\n        self.temp_sensor = []\n        self.temp_solar=NumericProperty(0.0)\n        self.temp_pool=NumericProperty(0.0)\n        #self.temp_sensor.start()\n        #Clock.schedule_interval(self.read_temperature, 0)\n\n    def read_temperature(self, temperature):\n        self.temp_solar=self.temperature[0]\n        self.temp_pool=self.temperature[1]\n        self.tmp=[self.temp_solar,self.temp_pool]\n        return self.tmp\n\n\nclass PoolApp(App):\n    #create object for each class and exchange values\n    t=Tempar()\n    c=Controls()\n    c.temp_solar=t.read_temperature(t.temperature)[0]\n    c.temp_pool=t.read_temperature(t.temperature)[1]\n    print(c.temp_solar)\n    print(c.temp_pool)\n    #and here are your printouts\n    c.set_value()        \n\nif __name__ == '__main__':\n    PoolApp().run()\n","538":"import multiprocessing\n\nmultiprocessing.cpu_count()\n","539":"def toXPathStringLiteral(s):\n    if \"'\" not in s: return \"'%s'\" % s\n    if '\"' not in s: return '\"%s\"' % s\n    return \"concat('%s')\" % s.replace(\"'\", \"',\\\"'\\\",'\")\n\n\"\/\/span[@class='error'][contains(.,%s)]\" % toXPathStringLiteral(message)\n","540":">>> import numpy as np\n>>> from scipy import ndimage\n>>> a = np.array([[0,0,0,0,0,0,0,0],\n                  [0,0,0,0,0,0,0,0],\n                  [0,0,0,1,0,0,0,0],\n                  [0,0,0,0,0,0,0,0]], dtype=int)\n>>> ndimage.binary_dilation(a, structure=ndimage.generate_binary_structure(2, 2)).astype(a.dtype)\narray([[0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 1, 1, 1, 0, 0, 0],\n       [0, 0, 1, 1, 1, 0, 0, 0],\n       [0, 0, 1, 1, 1, 0, 0, 0]])\n","541":"import time\nendTime = time.time() + 12*60*60 # 12 hours from now\nwhile time.time() < endTime:\n    captureImage()\n    time.sleep(30)\n","542":"    F=open(\"Simple.png\",\"rb\")\n    ftp.storbinary('STOR image.png',F,1024)\n","543":"from sqlalchemy.orm.session import object_session\n# ...\n\ndef set_other_object_value(self, value):\n    if self.other_object is None:\n        value = OtherObject(...)\n    self.other_object.value = value\n    object_session(self).add(value)\n","544":">>> a1 = [1, 2, 3, 4, 5]\n>>> a2 = [10, 20, 30, 40, 50]\n>>> b1 = [5, 7, 3, 1]\n>>> b2 = [50, 20, 30, 20]\n>>> a12 = set(zip(a1, a2))\n>>> [i for i, e in enumerate(zip(b1, b2)) if e in a12]\n[0, 2]\n","545":"@app.route('\/users\/', methods=['POST'])\ndef get_users():\n    ids = request.form.getlist('user_ids', type=int)\n    users = []\n\n    for id in ids:\n        try:\n            user = whatever_user_method(id)\n            users.append(user)\n        except:\n            continue\n\n    returns users\n","546":"import datetime\n\nprojects = [{'code': 'demo',\n 'created_at': datetime.datetime(2008, 6, 11, 7, 35, 19),\n 'created_by': None,\n 'id': 4,\n 'image': 'https:\/\/website.com\/files\/0000\/0000\/blah.jpg',\n 'name': 'Demo Project',\n 'description': 'This is for demonstration purposes',\n 'due': '2009-05-30',\n 'start': '2009-05-06',\n 'status': 'Active',\n 'stype': 'Demo',\n 'tag_list': [],\n 'type': 'Project',\n 'updated_at': datetime.datetime(2009, 5, 27, 1, 41, 55),\n 'updated_by': {'id': 24, 'name': 'Test', 'type': 'HumanUser'},\n 'users': [{'id': 19, 'name': 'User 1', 'type': 'HumanUser'},\n           {'id': 18, 'name': 'User 2', 'type': 'HumanUser'},\n           {'id': 17, 'name': 'User 3', 'type': 'HumanUser'},\n           {'id': 16, 'name': 'User 4', 'type': 'HumanUser'},\n           {'id': 15, 'name': 'User 5', 'type': 'HumanUser'},\n           {'id': 14, 'name': 'User 6', 'type': 'HumanUser'},\n           {'id': 13, 'name': 'User 7', 'type': 'HumanUser'},\n           {'id': 12, 'name': 'User 8', 'type': 'HumanUser'},\n           {'id': 20, 'name': 'Client 1', 'type': 'HumanUser'}]},\n ]\n\nfrom lxml import etree\n\ndef E(tag, parent=None, content=None, children=None, **kw):\n  e = etree.Element(tag)\n  if not content is None:\n    e.text = str(content)\n  for k,v in kw.items():\n    e.set(k, str(v))\n  if not parent is None:\n    parent.append(e)\n  if not children is None:\n    for c in children:\n      e.append(c)\n  return e\n\ndef processProject(data):\n  attrs = ('name','type','id')\n  p = E('Project')\n  for item in attrs:\n    p.set(item,str(data[item]))\n  for k,v in [ x for x in data.items() if x[0] not in attrs ]:\n    if v is None:\n      E(k,parent=p)\n    elif isinstance(v,basestring):\n      E(k,content=v,parent=p)\n    elif isinstance(v,(float,long,int)):\n      E(k,content=str(v),parent=p)\n    elif isinstance(v,datetime.datetime):\n      E(k,content=v.strftime('%Y-%m-%d %H%M'),parent=p)\n    elif k == 'users':\n      users = E(k,parent=p)\n      for u in v:\n        E('user',parent=users,**dict([ (x,str(y)) for (x,y) in u.items()]))\n    elif k in ('updated_by','created_by'):\n      E(k,parent=p,**dict([ (x,str(y)) for (x,y) in v.items()]))\n    elif k == 'tag_list':\n      taglist = E(k,parent=p)\n      for t in v:\n        E('tag',parent=taglist,content=t)\n  return p\n\n>>> projxml = processProject(projects[0])\n>>> etree.dump(projxml)\n<Project name=\"Demo Project\" type=\"Project\" id=\"4\">\n  <status>Active<\/status>\n  <code>demo<\/code>\n  <created_at>2008-06-11 0735<\/created_at>\n  <due>2009-05-30<\/due>\n  <created_by\/>\n  <updated_at>2009-05-27 0141<\/updated_at>\n  <start>2009-05-06<\/start>\n  <image>https:\/\/website.com\/files\/0000\/0000\/blah.jpg<\/image>\n  <updated_by type=\"HumanUser\" id=\"24\" name=\"Test\"\/>\n  <users>\n    <user type=\"HumanUser\" id=\"19\" name=\"User 1\"\/>\n    <user type=\"HumanUser\" id=\"18\" name=\"User 2\"\/>\n    <user type=\"HumanUser\" id=\"17\" name=\"User 3\"\/>\n    <user type=\"HumanUser\" id=\"16\" name=\"User 4\"\/>\n    <user type=\"HumanUser\" id=\"15\" name=\"User 5\"\/>\n    <user type=\"HumanUser\" id=\"14\" name=\"User 6\"\/>\n    <user type=\"HumanUser\" id=\"13\" name=\"User 7\"\/>\n    <user type=\"HumanUser\" id=\"12\" name=\"User 8\"\/>\n    <user type=\"HumanUser\" id=\"20\" name=\"Client 1\"\/>\n  <\/users>\n  <tag_list\/>\n  <stype>Demo<\/stype>\n  <description>This is for demonstration purposes<\/description>\n<\/Project>\n","547":"# __package__ is not guaranteed to be defined or could be set to None\n# to represent that it's proper value is unknown\npackage = globals.get('__package__')\nif package is None:\n    package = globals['__name__']\n    if '__path__' not in globals:\n        package = package.rpartition('.')[0]\nmodule = _gcd_import(name, package, level)\n","548":"import csv \nwith open('speechurls.csv', 'r') as f:\n    for row in csv.reader(f):\n        if 'remarks-president' in row[0]:\n            with open('remarks-president_urls.csv','a') as f1: f1.write(\"{}\\n\".format(row[0]))\n        elif 'remarks-first-lady' in row[0]:\n            with open('remarks-first-lady_urls.csv', 'a') as f2: f2.write(\"{}\\n\".format(row[0]))\n        else:\n            pass\n","549":"<div id=\"right_pod\">\n{% for i in c %}\n    <div class=\"user_pod\">\n        {{ i.0.from_user }}\n    <\/div>\n{% endfor %}\n","550":"query.filter(...).having(...)\n","551":"private_key = private_key.replace('-----BEGIN RSA PRIVATE KEY-----', '')\nprivate_key = private_key.replace('-----END RSA PRIVATE KEY-----', '')\n","552":"RewriteEngine On\nRewriteRule ^\/test\/$ \/test.py \n","553":"def f(): \n    a = 1 \n    b = 2 \n    list_ = ['a', 'b'] \n    locals_ = locals()\n    dict_ = dict((x, locals_[x]) for x in list_)\n","554":"data = f.read()\nc = struct.unpack_from('<8H', data, 16)\n","555":"import watcher\nw = watcher.Watcher(dir, callback)\nw.flags = watcher.FILE_NOTIFY_CHANGE_FILE_NAME\nw.start()\n","556":"# setup x and y ranges and precision\nxx = np.arange(-0.5,5.5,0.01)\n\nmax_tolerance = 100.\nmin_tolerance = -100.\n\nyy = 1\/(xx-2)\nyy[yy > max_tolerance] = np.inf\nyy[yy < min_tolerance] = -np.inf\n\nax.plot(xx, yy, zorder=100, linewidth=3, color='red') \n","557":"myList = [1,9,16,24]\n\nnum = int(input(\"Enter a number: \"))\n\ncondition = True\n\nfor index, x in enumerate(myList):\n    if condition and num < x:\n        myList.insert(index, num)\n        condition = False\n\nif condition:\n    myList.append(num)\n\nprint(myList)\n","558":"def callback():\n    abc = askopenfilename()\n    execfile(\"abc.py\")\n","559":"A:   1.00 | 1.42 |  2.17 | 2.13\nB:   1.00 | 1.40 |  2.20 | 2.10\nA-B: 0.00 | 0.02 | -0.03 | 0.03\n\n0^2  + 0.02^2 + -0.03^2 + 0.03^2 = 0.0022\n","560":"from django.db import transaction\n\nwith transaction.atomic():\n    for i, row in df.iterrows():\n        mv = MeasureValue.objects.get(org=row.org, month=month)\n\n        if (row.percentile is None) or np.isnan(row.percentile): \n            # if it's already None, why set it to None?\n            row.percentile = None\n\n        mv.percentile = row.percentile\n        mv.save()\n","561":" import signal\n import sys\n\n def signal_handler(signal, frame):\n     print 'You pressed Ctrl+C - or killed me with -2'\n     #.... Put your logic here .....\n     sys.exit(0)\n\n signal.signal(signal.SIGINT, signal_handler)\n","562":"class notePanel(nukescripts.PythonPanel):\n    def __init__(self):\n        nukescripts.PythonPanel.__init__(self, 'Note Panel', 'com.ohufx.notePanel')\n\n        self.sgpage = nuke.PyScript_Knob('sgpage', 'Open SG page', '')\n\n    def knobChanged(self, knob):\n        if knob is self.sgpage:\n            self.launchSGPage()\n\n    def launchSGPage(self):\n        pr = self.proj.value()\n        sh = self.shot.value()\n        url = shotgun.getURL(pr,sh)\n        webbrowser.get('\/usr\/bin\/google-chrome %s').open(url)\n","563":"import tkinter as tk\nimport tkinter.font as tkFont\nimport tkinter.ttk as ttk\nfrom tkinter import *\ndef parse_csv(content, delimiter = ';'):  ##We use here \";\" to parse CSV because of the European way of dealing with excel-csv\n  csv_data = []\n  for line in content.split('\\n'):\n    csv_data.append( [x.strip() for x in line.split( delimiter )] ) # strips spaces also\n  return csv_data\n\ncanvas=parse_csv(open('canvas.csv','rU',encoding=\"ISO-8859-1\").read())\n#fediaf_requirements is a list containing where fediaf has a \nfediaf_requirements=[]\nfor i in range(0,len(canvas)):\n               if canvas[i][1]==\"FEDIAF\":\n                  fediaf_requirements.append(canvas[i][0])\n\ncar_header = ['Used Nutrients in the Profession', 'Nutrients used in this PetFood (Source : Official Website)', 'FEDIAF Requirement']\n\n\n#Create the Data to be put into the table\ndef FromCSV_to_Tree(liste_croq):\n    global car_list\n    car_list=[]\n    value=str(liste_croq.get(liste_croq.curselection()))\n    for i in range(0,len(Remplissage)):\n               if Remplissage[i][0]==\"Name\":\n                  for j in range(1,len(Remplissage[i])):\n                      if Remplissage[i][j]==value:\n                          for k in range(0,len(Remplissage)-1):\n                              if Remplissage[k][0] in fediaf_requirements :\n                                  a=\"Required\"\n                              else :\n                                  a=\"\"\n\n\n                              if Remplissage[k][j]!=\"ND\":\n                                     car_list.append([Remplissage[k][0],\"OK\",a])\n                              else:\n                                  car_list.append([Remplissage[k][0],\"\",a])\n\n\n\ndef CurSelet_croq(evt,container):\n    global car_list\n    FromCSV_to_Tree(liste_croq)\n    car_header = ['Used Nutrients in the Profession', 'Nutrients used in this PetFood (Source : Official Website)', 'FEDIAF Requirement']\n    print(car_list)\n\n\n    #create a treeview with dual scrollbars\n\n    #Container and container.pack detached to update the tree with the new datas. \n    container.pack(fill='both', expand=True)\n\n\n\n\n    tree = ttk.Treeview(columns=car_header, show=\"headings\")\n    vsb = ttk.Scrollbar(orient=\"vertical\",\n                        command=tree.yview)\n    hsb = ttk.Scrollbar(orient=\"horizontal\",\n                        command=tree.xview)\n    tree.configure(yscrollcommand=vsb.set,\n                   xscrollcommand=hsb.set)\n    tree.grid(column=0, row=0, sticky='nsew', in_=container)\n    vsb.grid(column=1, row=0, sticky='ns', in_=container)\n    hsb.grid(column=0, row=1, sticky='ew', in_=container)\n\n    container.grid_columnconfigure(0, weight=1)\n    container.grid_rowconfigure(0, weight=1)\n\n    def sortby(tree, col, descending):\n        \"\"\"sort tree contents when a column header is clicked on\"\"\"\n        # grab values to sort\n        data = [(tree.set(child, col), child) \\\n            for child in tree.get_children('')]\n        # if the data to be sorted is numeric change to float\n        #data =  change_numeric(data)\n        # now sort the data in place\n        data.sort(reverse=descending)\n        for ix, item in enumerate(data):\n            tree.move(item[1], '', ix)\n        # switch the heading so it will sort in the opposite direction\n        tree.heading(col, command=lambda col=col: sortby(tree, col, \\\n\n            int(not descending)))\n\n##Put data into the tree\n    for col in car_header:\n        tree.heading(col, text=col.title(),\n                     command=lambda c=col: sortby(tree, c, 0))\n        # adjust the column's width to the header string\n        tree.column(col,\n                    width=tkFont.Font().measure(col.title()))\n\n    for item in car_list:\n        tree.insert('', 'end', values=item)\n        # adjust column's width if necessary to fit each value\n        for ix, val in enumerate(item):\n            col_w = tkFont.Font().measure(val)\n            if tree.column(car_header[ix],width=None)<col_w:\n               tree.column(car_header[ix], width=col_w)\n\n\n\n\n\n\n\n\n\n\nRemplissage=parse_csv(open('Remplissage.csv','rU',encoding=\"ISO-8859-1\").read())\nroot = tk.Tk()\nroot.wm_title(\"Visualizer\")\n\ncontainer = ttk.Frame()\n\nliste_croq = Listbox(root,width=70, height=10)\nfor i in range(0,len(Remplissage)):\n               if Remplissage[i][0]==\"Name\":\n                  for j in range(1,len(Remplissage[i])):\n                      liste_croq.insert(i,Remplissage[i][j])\n                      liste_croq.bind('<<ListboxSelect>>', lambda evt, container=container : CurSelet_croq(evt,container))\n                      liste_croq.pack()\n\n\nroot.mainloop()\n","564":"  books = searchQuerySet().filter(content=haystack.inputs.AutoQuery(query))\n","565":"from itertools import zip_longest\n\nfiles = [open(filename) for filename in file_list]\n\nfor lines in zip_longest(*files, fillvalue=''):\n    print(\" \".join(lines))\n","566":"h1 = Image.open(\"image1\").histogram()\nh2 = Image.open(\"image2\").histogram()\n\nrms = math.sqrt(reduce(operator.add,\n    map(lambda a,b: (a-b)**2, h1, h2))\/len(h1))\n","567":"class Config(object):\n    setting1 = \"default_value\"\n    setting2 = \"default_value\"\n\n    @staticmethod\n    def load_config(json_file):\n        \"\"\" load settings from config file \"\"\"\n        with open(json_file) as f:\n            config = json.load(f)\n        for k, v in config.iteritems():\n            setattr(Config, k, v)\n","568":" from .Line import Line\n","569":"container\n    Has a __contains__ method\n\ngenerator\n    A function which returns an iterator.\n\niterable\n    An object with an __iter__() or __getitem__() method. Examples of\n    iterables include all sequence types (such as list, str, and\n    tuple) and some non-sequence types like dict and file. When an\n    iterable object is passed as an argument to the builtin function\n    iter(), it returns an iterator for the object. This iterator is\n    good for one pass over the set of values.\n\niterator\n    An iterable which has a next() method.  Iterators are required to\n    have an __iter__() method that returns the iterator object\n    itself. An iterator is good for one pass over the set of values.\n\nsequence\n    An iterable which supports efficient element access using integer\n    indices via the __getitem__() special method and defines a len()\n    method that returns the length of the sequence. Note that dict\n    also supports __getitem__() and __len__(), but is considered a\n    mapping rather than a sequence because the lookups use arbitrary\n    immutable keys rather than integers.  sequences are orderable\n    iterables.\n\n    deque is a sequence, but collections.Sequence does not recognize\n    deque as a sequence.\n    >>> isinstance(collections.deque(), collections.Sequence)\n    False\n","570":"result = ' ' * 8\nwidth = house.get_width() - 4 # subtract 4 to allow for 'CAT '\nfor i in range(house.get_cat_count()): # or xrange\n    result += 'CAT %-*c' % (width, ord('A') + i)\n","571":"def main():\n   run_wsgi_app(app2)\n","572":"#include<iostream>\n#include<string>\n#include<sstream>\n\nusing namespace std;\n\nstring compress(string data) {\n    int letter_counter = 1, i=0;\n    ostringstream new_data;\n    for (i; i<data.length()-1; i++) {\n        if (data[i] == data[i+1]) {\n            letter_counter += 1;\n        } else {\n            new_data<<letter_counter;\n            new_data<<data[i];\n            letter_counter = 1;\n        }\n    }\n    new_data<<letter_counter;\n    new_data<<data[i];\n\n    return new_data.str();\n}\n\nint main() {\n    string data = string(\"wwwwwbbbcdee\");\n    string data2 = string(\"wwwwwwwwwwwwww\");\n    cout << compress(data) <<endl;\n    cout << compress(data2) <<endl;\n}\n","573":"import signal, sys\n\n# install a SIGALRM handler \n\ndef handler(signum, frame):\n    print \"got signal, exiting\"\n    sys.exit(1)\n\nsignal.signal(signal.SIGALRM, handler)\n\n# emit SIGALRM after 5 secs\n\nsignal.setitimer(signal.ITIMER_REAL, 5)\n\n# do stuff\n\ni = 1\nwhile True:\n    if i % 100000 == 0:\n        print i\n    i += 1\n","574":"#no of tweets you want to request\nmax_tweets = 500\n#make initial request for most recent tweets (200 is the maximum allowed count)\nnew_tweets = api.GetUserTimeline(screen_name = screen_name,count=max_tweets)\n\n#save most recent tweets\nalltweets.extend(new_tweets)\n\n\n#save the id of the oldest tweet less one\noldest = alltweets[-1].id - 1\n#loop for remaining tweets\nwhile(len(alltweets)<max_tweets):\n    alltweets.extend(api.GetUserTimeline(screen_name = screen_name,count=(max_tweets-len(alltweets)),max_id=oldest))\n    oldest = alltweets[-1].id - 1\n","575":"def CreateLink():\n    excel.Worksheets(1).Cells(1,1).Value = '=HYPERLINK(A21,\"Cell A21\")'\n","576":"import datetime\nfrom dateutil.rrule import * \n\nnow = datetime.datetime.today().date()\ndays = rrule(MONTHLY, dtstart=now, bymonthday=25)\nprint (days[0])  # datetime.datetime(2016, 2, 25, 0, 0)\nprint (days[1])  # datetime.datetime(2016, 3, 25, 0, 0)\n","577":"import numpy as np\n\na = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n# get length of flat array\na_length, =  a.shape\n\n# reshape array \n#(column by row must respect number of elements)\nb = a.reshape(( 2, a_length\/2 ))\n\n# assign array except last column to a variable\nresult = b[:,:-1]\nprint result\n","578":"import urllib2\nfrom bs4 import BeautifulSoup\nimport csv\n\nurl = ('http:\/\/nflcombineresults.com\/nflcombinedata.php?year=2000&pos=&college=')\n\npage = urllib2.urlopen(url).read()\n\nsoup = BeautifulSoup(page)\ntable = soup.find('table')\n\nf = csv.writer(open(\"2000scrape.csv\", \"w\"))\nf.writerow([\"Name\", \"Position\", \"Height\", \"Weight\", \"40-yd\", \"Bench\", \"Vertical\", \"Broad\", \"Shuttle\", \"3-Cone\"])\n# variable to check length of rows\nx = (len(table.findAll('tr')) - 1)\n# set to run through x\nfor row in table.findAll('tr')[1:x]:\n    col = row.findAll('td')\n    name = col[1].getText()\n    position = col[3].getText()\n    height = col[4].getText()\n    weight = col[5].getText()\n    forty = col[7].getText()\n    bench = col[8].getText()\n    vertical = col[9].getText()\n    broad = col[10].getText()\n    shuttle = col[11].getText()\n    threecone = col[12].getText()\n    player = (name, position, height, weight, forty, bench, vertical, broad, shuttle, threecone, )\n    f.writerow(player)\n","579":"import os\nf = open('\/tmp\/test.txt', 'w')\nos.unlink(f.name)\n# You can still use f here, it's just only visible for people having a handle.\n# close it when you're finished.\n","580":"class Messages(ListResource):\n    name = \"Messages\"\n    key = \"messages\"\n    instance = Message\n\n    def create(self, from_=None, **kwargs):\n        \"\"\"\n        Create and send a Message.\n\n        :param str to: The destination phone number.\n        :param str `from_`: The phone number sending this message\n            (must be a verified Twilio number)\n        :param str body: The message you want to send,\n            limited to 1600 characters.\n        :param list media_url: A list of URLs of images to include in the\n            message.\n        :param status_callback: A URL that Twilio will POST to when\n            your message is processed.\n        :param str application_sid: The 34 character sid of the application\n            Twilio should use to handle this phone call.\n        \"\"\"\n        kwargs[\"from\"] = from_\n        return self.create_instance(kwargs)\n","581":"while True:\n    if select.select([sys.stdin], [], [], 10)[0]:\n        ...\n","582":"Back in Section 8.7 we mentioned ELink can be used to search for citations of a given paper. Unfortunately this only covers journals indexed for PubMed Central (doing it for all the journals in PubMed would mean a lot more work for the NIH). Let\u2019s try this for the Biopython PDB parser paper, PubMed ID 14630660:\n\n>>> from Bio import Entrez\n>>> Entrez.email = \"A.N.Other@example.com\"\n>>> pmid = \"14630660\"\n>>> results = Entrez.read(Entrez.elink(dbfrom=\"pubmed\", db=\"pmc\",\n...                                    LinkName=\"pubmed_pmc_refs\", from_uid=pmid))\n>>> pmc_ids = [link[\"Id\"] for link in results[0][\"LinkSetDb\"][0][\"Link\"]]\n>>> pmc_ids\n['2744707', '2705363', '2682512', ..., '1190160']\nGreat - eleven articles. But why hasn\u2019t the Biopython application note been found (PubMed ID 19304878)? Well, as you might have guessed from the variable names, there are not actually PubMed IDs, but PubMed Central IDs. Our application note is the third citing paper in that list, PMCID 2682512.\n\nSo, what if (like me) you\u2019d rather get back a list of PubMed IDs? Well we can call ELink again to translate them. This becomes a two step process, so by now you should expect to use the history feature to accomplish it (Section 8.15).\n\nBut first, taking the more straightforward approach of making a second (separate) call to ELink:\n\n>>> results2 = Entrez.read(Entrez.elink(dbfrom=\"pmc\", db=\"pubmed\", LinkName=\"pmc_pubmed\",\n...                                     from_uid=\",\".join(pmc_ids)))\n>>> pubmed_ids = [link[\"Id\"] for link in results2[0][\"LinkSetDb\"][0][\"Link\"]]\n>>> pubmed_ids\n['19698094', '19450287', '19304878', ..., '15985178']\nThis time you can immediately spot the Biopython application note as the third hit (PubMed ID 19304878).\n\nNow, let\u2019s do that all again but with the history \u2026TODO.\n\nAnd finally, don\u2019t forget to include your own email address in the Entrez calls.\n","583":"import matplotlib.pyplot as plt\nimport matplotlib.text as mpl_text\n\nclass AnyObject(object):\n    def __init__(self, text, color):\n        self.my_text = text\n        self.my_color = color\n\nclass AnyObjectHandler(object):\n    def legend_artist(self, legend, orig_handle, fontsize, handlebox):\n        print orig_handle\n        x0, y0 = handlebox.xdescent, handlebox.ydescent\n        width, height = handlebox.width, handlebox.height\n        patch = mpl_text.Text(x=0, y=0, text=orig_handle.my_text, color=orig_handle.my_color, verticalalignment=u'baseline', \n                                horizontalalignment=u'left', multialignment=None, \n                                fontproperties=None, rotation=45, linespacing=None, \n                                rotation_mode=None)\n        handlebox.add_artist(patch)\n        return patch\n\nobj_0 = AnyObject(\"A\", \"purple\")\nobj_1 = AnyObject(\"B\", \"green\")\n\nplt.legend([obj_0, obj_1], ['Model Name A', 'Model Name B'],\n           handler_map={obj_0:AnyObjectHandler(), obj_1:AnyObjectHandler()})\n\nplt.show()\n","584":"import numpy as np\na = np.random.rand(10,1)\nb = np.random.rand(10,1)\nc = b > 0.5\nd = a * b # Note that * in NumPy is always elementwise (use .dot for matrix multiplication)\ne = a + b\nf = a.mean() # Can also use np.mean(a)\ng = b.sum() # Can also use np.sum(b)\n","585":"{% get_max_votes poll.choice_set.all as leader %}\n{% for choice in poll.choice_set.all %}\n    {% ifequal choice leader %}\n    {% endif %}\n{% endfor %}\n","586":"class Program\n{\n    static void Main()\n    {\n        var secret = \"secret\";\n        var data = \"data\";\n        var hmac = new HMACSHA1(Encoding.UTF8.GetBytes(secret));\n        var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(data));\n        Console.WriteLine(BitConverter.ToString(hash));\n    }\n}\n","587":">>> class C:\n        def function(self):\n            text = inspect.stack()[1][4][0].strip().split('.')\n            return '{0} calls {1}'.format(*text)\n\n>>> myVar = C()\n>>> myVar.function()\n'myVar calls function()'\n","588":"re.search(\"([0-9]{2}\\-[0-9]{2}\\-[0-9]{4})\", fileName)\n","589":"values_sum = 0\nfor key in sorted(dict1,reverse=True):\n    values_sum +=dict1[key]\n    del dict1[key]\n    if values_sum >= 6:\n        break    \n","590":"import pandas as pd\nimport numpy as np\n# This will add the 'a' columns.\n>> pd.DataFrame({'a': range(4), 'b': range(2, 6)}).\\\n    combine(pd.DataFrame({'a': range(1, 5)}), func=lambda a, b: a + b)\n       a   b\n0  1 NaN\n1  3 NaN\n2  5 NaN\n3  7 NaN\n","591":"n = 600851475143\ni = 2\nwhile i * i < n:\n    while n % i == 0:\n        n = n \/ i\n    i = i + 1\nprint n\n","592":"question = Paragraph('What color is the sky?', style)\nanswer1 = Paragraph('Red', style)\nanswer2 = Paragraph('Green', style)\nanswer3 = Paragraph('Blue', style)\n\nStory.append(KeepTogether([question, answer1, answer2, answer3]))\n","593":"class ZipExhausted(Exception):\n    pass\n\ndef izip_longest(*args, **kwds):\n    # izip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-\n    fillvalue = kwds.get('fillvalue')\n    counter = [len(args) - 1]\n    def sentinel():\n        if not counter[0]:\n            raise ZipExhausted\n        counter[0] -= 1\n        yield fillvalue\n    fillers = repeat(fillvalue)\n    iterators = [chain(it, sentinel(), fillers) for it in args]\n    try:\n        while iterators:\n            yield tuple(map(next, iterators))\n    except ZipExhausted:\n        pass\n","594":"from itertools import islice\n\ndef window(seq, n=2):\n    \"\"\"\n    Returns a sliding window (of width n) over data from the iterable\n    s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   \n    \"\"\"\n    it = iter(seq)\n    result = list(islice(it, n))\n    if len(result) == n:\n        yield result    \n    for elem in it:\n        result = result[1:] + [elem]\n        yield result\n\ndef contains_sequence(all_values, seq):\n    return any(seq == current_seq for current_seq in window(all_values, len(seq)))            \n\ntest_iterable = [1,2,3]\nsearch_sequence = [1,2]\n\nresult = contains_sequence(test_iterable, search_sequence)\n","595":"#!\/usr\/bin\/env python\n\n# example eventbox.py\n\nimport pygtk\npygtk.require('2.0')\nimport gtk\n\nclass EventBoxExample:\n    def __init__(self):\n        window = gtk.Window(gtk.WINDOW_TOPLEVEL)\n        window.set_title(\"Event Box\")\n        window.connect(\"destroy\", lambda w: gtk.main_quit())\n        window.set_border_width(10)\n\n        # Create an EventBox and add it to our toplevel window\n        frame = gtk.EventBox() # gtk.Frame()\n        window.add(frame)\n        frame.show()\n        frame.set_border_width(2)\n        frame.modify_bg(gtk.STATE_NORMAL,\n                            frame.get_colormap().alloc_color(\"blue\"))\n\n        event_box = gtk.EventBox()\n        frame.add(event_box)\n        event_box.set_border_width(10)\n        event_box.show()\n\n        # Create a long label\n        label = gtk.Label(\"Click here to quit, quit, quit, quit, quit\")\n        event_box.add(label)\n        label.show()\n\n        # Clip it short.\n        label.set_size_request(110, 20)\n\n        # And bind an action to it\n        event_box.set_events(gtk.gdk.BUTTON_PRESS_MASK)\n        event_box.connect(\"button_press_event\", lambda w,e: gtk.main_quit())\n\n        # More things you need an X window for ...\n        event_box.realize()\n        event_box.window.set_cursor(gtk.gdk.Cursor(gtk.gdk.HAND1))\n\n        # Set background color to green\n        event_box.modify_bg(gtk.STATE_NORMAL,\n                            event_box.get_colormap().alloc_color(\"green\"))\n\n        window.show()\n\ndef main():\n    gtk.main()\n    return 0\n\nif __name__ == \"__main__\":\n    EventBoxExample()\n    main()\n","596":">>> from numpy import *\n>>>\n>>> data = loadtxt(\"myfile.txt\")                       # myfile.txt contains 4 columns of numbers\n>>> t,z = data[:,0], data[:,3]                         # data is 2D numpy array\n>>>\n>>> t,x,y,z = loadtxt(\"myfile.txt\", unpack=True)                  # to unpack all columns\n>>> t,z = loadtxt(\"myfile.txt\", usecols = (0,3), unpack=True)     # to select just a few columns\n>>> data = loadtxt(\"myfile.txt\", skiprows = 7)                    # to skip 7 rows from top of file\n>>> data = loadtxt(\"myfile.txt\", comments = '!')                  # use '!' as comment char instead of '#'\n>>> data = loadtxt(\"myfile.txt\", delimiter=';')                   # use ';' as column separator instead of whitespace\n>>> data = loadtxt(\"myfile.txt\", dtype = int)                     # file contains integers instead of floats\n","597":"mapper(User, users_table, include_properties=['user_id', 'user_name'])\n\nmapper(Address, addresses_table, exclude_properties=['street', 'city', 'state', 'zip'])\n","598":">>> import pandas as pd\n>>> df = pd.DataFrame({'foo': [1, 2, 3], 'bar': [1.0, 2.0, 3.0], 'baz': ['qux', 'quux', 'quuux']})\n>>> df.dtypes\nbar    float64\nbaz     object\nfoo      int64\ndtype: object\n","599":"regex_result += \"\\\\2\"\n","600":"for elem in data:\n    for val in elem.itervalues():\n        for item in val['data']:\n","601":">>> x = {0: 5, 1: 7, 2: 0}\n>>> max(k for k, v in x.iteritems() if v != 0)\n1\n","602":"from gi.repository import Gtk, Gdk, GdkPixbuf\n\nclass MyWindow(Gtk.Window):\n    def __init__(self):\n        Gtk.Window.__init__(self)\n        self.set_default_size(200, 200)\n\n        self.liststore = Gtk.ListStore(str, str)\n        self.treeview = Gtk.TreeView(model=self.liststore)\n\n        self.liststore.append([\"icon.png\", \"This is a symbol1\"])\n\n        px_renderer = Gtk.CellRendererPixbuf()\n        px_column = Gtk.TreeViewColumn('')\n        px_column.pack_start(px_renderer, False)\n        str_renderer = Gtk.CellRendererText()\n        px_column.pack_start(str_renderer, False)\n        # set data connector function\/method\n        px_column.set_cell_data_func(px_renderer, self.get_tree_cell_pixbuf)\n        px_column.set_cell_data_func(str_renderer, self.get_tree_cell_text)\n        self.treeview.append_column(px_column)\n\n        self.add(self.treeview)\n\n    def get_tree_cell_text(self, col, cell, model, iter, user_data):\n        cell.set_property('text', model.get_value(iter, 1))\n\n    def get_tree_cell_pixbuf(self, col, cell, model, iter, user_data):\n        cell.set_property('pixbuf', GdkPixbuf.Pixbuf.new_from_file(model.get_value(iter, 0)))\n\nif __name__ == '__main__':\n    win = MyWindow()\n    win.connect(\"delete-event\", Gtk.main_quit)\n    win.show_all()\n    Gtk.main()\n","603":">>> date = QtCore.QDate.fromString('20130916', 'yyyyMd')\n\n# PySide\n>>> date.toString('MMMM d, yyyy')\nu'September 16, 2013'\n\n# PyQt4\n>>> date.toString('MMMM d, yyyy')\nPyQt4.QtCore.QString(u'September 16, 2013')\n>>> unicode(date.toString('MMMM d, yyyy'))\nu'September 16, 2013'\n","604":"try:\n    import MySQLdb.converters\nexcept ImportError:\n    _connarg('conv')\n\ndef connect(host='abc.dev.local', user='abc', passwd='def', db='myabc', port=3306):\n\n    try:\n        orig_conv = MySQLdb.converters.conversions\n        conv_iter = iter(orig_conv)\n        convert = dict(zip(conv_iter, [str,] * len(orig_conv.keys())))\n        print \"Connecting host=%s user=%s db=%s port=%d\" % (host, user, db, port)\n        conn = MySQLdb.connect(host, user, passwd, db, port, conv=convert)\n    except MySQLdb.Error, e:\n        print \"Error connecting %d: %s\" % (e.args[0], e.args[1])\n    return conn\n","605":"In [1]: import networkx as nx\n\nIn [2]: G = nx.path_graph(4)\n\nIn [3]: I = nx.incidence_matrix(G,oriented=True)\n\nIn [4]: I.todense()\nOut[4]: \nmatrix([[-1.,  0.,  0.],\n        [ 1., -1.,  0.],\n        [ 0.,  1., -1.],\n        [ 0.,  0.,  1.]])\n\nIn [5]: L = nx.laplacian_matrix(G)\n\nIn [6]: L.todense()\nOut[6]: \nmatrix([[ 1, -1,  0,  0],\n        [-1,  2, -1,  0],\n        [ 0, -1,  2, -1],\n        [ 0,  0, -1,  1]])\n\nIn [7]: (I*I.T).todense()\nOut[7]: \nmatrix([[ 1., -1.,  0.,  0.],\n        [-1.,  2., -1.,  0.],\n        [ 0., -1.,  2., -1.],\n        [ 0.,  0., -1.,  1.]])\n","606":"soup = BeautifulSoup(htmlcontent, 'html5')\n","607":"from itertools import groupby\n\nwords = ['ct', 'cat', 'cbbt', 'caaabbct', 'cbbccaat',  'cbcbbaat', 'caaccbabbt']\nfor w in words:\n    match = False\n    if w.startswith('c') and w.endswith('t'):\n        temp = w[1:-1]\n        s = set(temp)\n        match = s <= set('abc') and len(s) == len(list(groupby(temp)))\n    print w, \"matches\" if match else \"doesn't match\"\n","608":">>> s = re.search(r\".*\\\/(app.*)\", \"\/home\/python\/app\/index.html\")\n>>> s.groups()[0]\n'app\/index.html'\n","609":"with open('test.csv') as in_file, open('new.csv', 'w') as out_file:\n    for line in csv.reader(in_file, delimiter='$'):\n        out_file.write(','.join(sorted(line)[2:])+'\\n')\n","610":"for location in locations:\n    try:\n        try_to_connect(location)\n        break\n    except IOError:\n        continue\nelse:\n    # this else is optional\n    # executes some code if none of the locations is valid\n    # for example raise an Error as suggested @eumiro\n","611":"while True:\n    files = os.path.listdir('.\/sub_directory\/')\n\n    if files != []:\n        do_something()\n","612":"x = {'cusip': np.array(['10553M10', '67085120', '67085140'], dtype='|S8'), \n     'vstop': np.array([dt.datetime(2012, 2, 28, 0, 0), dt.datetime(2014, 12, 22, 0, 0), dt.datetime(2020, 12, 31, 0, 0)], dtype=object),\n     'vstart': np.array([dt.datetime(2001, 11, 16, 0, 0),dt.datetime(2012, 2, 28, 0, 0), dt.datetime(2014, 12, 22, 0, 0)], dtype=object), \n     'id': np.array(['EQ0000000000041095', 'EQ0000000000041095', 'EQ0000000000041095'], dtype='|S18')}\n\nIn [27]:\ndf = pd.DataFrame(x)\ndf\nOut[27]:\ncusip                   id          vstart  vstop\n10553M10    EQ0000000000041095  2001-11-16  2012-02-28\n67085120    EQ0000000000041095  2012-02-28  2014-12-22\n67085140    EQ0000000000041095  2014-12-22  2020-12-31\n\nIn [25]:\ntype(df.vstart[0])\nOut[25]:\npandas.tslib.Timestamp\n\nIn [26]:\ntype(df.vstop[0])\nOut[26]:\npandas.tslib.Timestamp\n","613":"dist = sqrt((x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2)\n","614":"In [10]: df = pd.DataFrame({'A' : [0, 1], 'B' : [1, 6]})\n\nIn [11]: import StringIO\n\nIn [12]: s = StringIO.StringIO()\n\nIn [13]: df.to_csv(s)\n\nIn [14]: s.getvalue()\nOut[14]: ',A,B\\n0,0,1\\n1,1,6\\n'\n","615":"shortlen = 150\nshortset = set()\nfor i in xrange(len(seq)-shortlen+1):\n    shortset.add(seq[i:i+shortlen])\n\nfor line in short:\n    count1 += 1\n    if line in shortset:\n        count2 += 1\n","616":"class ProjectGroupMembershipInlineForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(ProjectGroupMembershipInlineForm, self).__init__(*args, **kwargs)\n        self.fields['group'].queryset = Group.objects.filter(some_filtering_here=self.instance)\n","617":"row = [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"01\",\"01\",\"01\",\"01\",\"01\",\"01\"]\nrandom.shuffle(row)\nprint (map(int, list(\"\".join(row)[1:])))\n","618":">>> map(lambda x: x.foo(), [B(1), C(1)])\n>>> [2, 0]\n","619":"# Python2\n>>> x = bytearray((32,33))\n>>> x\nbytearray(b' !')\n>>> bytes(x)\n' !'\n\n# Python3\n>>> x = bytearray((32,33))\n>>> x\nbytearray(b' !')\n>>> bytes(x)\nb' !'\n","620":"with open(fileName, 'rb') as inf, open(\"out_\"+fileName, 'wb') as outf:\n    reader = csv.reader(inf)\n    # find header row\n    for row in reader:\n        if '' not in row:\n            fieldnames = row\n            break\n    else:\n        # oops, *only* rows with empty cells found\n        raise ValueError('Unable to determine header row')\n\n    # rewind, switch to DictReader, skip past header\n    inf.seek(0)\n    reader = csv.DictReader(inf, fieldnames)\n    for row in reader:\n        if row.keys() == row.values()\n            break\n\n    # copy all rows across with extra two columns\n    writer = csv.DictWriter(outf, ['url_source','downloaded_at'] + fieldnames)\n    writer.writeheader()\n    writer.writerows(dict(r, url_source=csvUrl, downloaded_at=today)\n                     for r in reader)\n","621":"spawn helloworld.simple_app\nspawn helloworld.simple_app middleware.Upperware\n","622":"connect(checkbox, SIGNAL(stateChanged(int)), button, SLOT(buttonStateChanged(int)));\n","623":">>> import threading\n>>> import time\n>>> def func():\n...     global l\n...     i = 0\n...     while i < 15:\n...             l.append(i)\n...             i += 1\n...             time.sleep(1)\n>>> def foo(t):\n...     t.start()\n...     i = 20\n...     while i > 0:\n...             print(l)\n...             i -= 1\n...             time.sleep(0.5)\n>>> l = []\n>>> t = threading.Thread(target=func)\n>>> foo(t)\n[0]\n[0]\n[0]\n[0, 1]\n[0, 1]\n[0, 1, 2]\n[0, 1, 2, 3]\n[0, 1, 2, 3]\n[0, 1, 2, 3, 4]\n[0, 1, 2, 3, 4]\n[0, 1, 2, 3, 4, 5]\n[0, 1, 2, 3, 4, 5]\n[0, 1, 2, 3, 4, 5, 6]\n[0, 1, 2, 3, 4, 5, 6]\n[0, 1, 2, 3, 4, 5, 6, 7]\n[0, 1, 2, 3, 4, 5, 6, 7]\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n","624":"d[(d['x']>2) & (d['y']>7)]\n","625":"test = ['Item 1', [['Item 1.1', []], ['Item 1.2', []]]]\n\ndef convert(oldlist, newlist):\n    for i in range(len(oldlist)):\n        if type(oldlist[i]) == list and type(oldlist[i][0]) != list:\n            newlist.append(oldlist[i][0])\n        elif type(oldlist[i]) != list:\n            newlist.append(oldlist[i])\n        else:\n            newlist.append([])\n            convert(oldlist[i], newlist[-1])\n    return newlist\n\nprint(convert(test, []))\n","626":"from bs4 import BeautifulSoup\n\ntest_html = \"\"\"<div>\n    <div>\n        <p>Paragraph 1 Lorem ipsum dolor... long text... <\/p>\n        <p>Paragraph 2 Lorem ipsum dolor... long text... <\/p>\n        <p>Paragraph 3 Lorem ipsum dolor... long text... <\/p>\n    <\/div>\n<\/div>\"\"\"\n\ntest_html = test_html[0:50]\nsoup = BeautifulSoup(test_html, 'html.parser')\n\nprint(soup.prettify())\n","627":"COINS = ((\"Dollars\", 1.), \n         (\"Quarters\", .25), \n         (\"Dimes\",    .10), \n         (\"Nickels\",  .05), \n         (\"Pennies\",  .01))\n\ndef changeCalc(cost, pmt):\n    change = pmt - cost\n    print(\"Total Change: %.2f\" % change)\n    if (pmt - cost) < 0:\n        print(\"The customer needs to pay %.2f more.\" % abs(change))\n    else:\n        runningTotal = 0\n        for (name, value) in COINS:\n            number = int((change - runningTotal) \/ value)\n            if number > 0:\n                print(\"Number of %s: %d\" % (name, number))\n                runningTotal += number * value\n        print runningTotal, change, (runningTotal - change)\n","628":"while True:\n    eventlet.sleep(dispatcher.getTimerResolution())\n    try:\n        dispatcher.handleTimerTick(time.time())\n    except Exception:\n        print 'Error while handling dispatcher tick!'\n        raise\n","629":"def patterns(prefix, *args):\n    warnings.warn(\n        'django.conf.urls.patterns() is deprecated and will be removed in '\n        'Django 1.10. Update your urlpatterns to be a list of '\n        'django.conf.urls.url() instances instead.',\n        RemovedInDjango110Warning, stacklevel=2\n    )\n","630":"import inspect\nimport new\n\ndef f():\n    x, y = 1, 2\n    def get():\n        print 'get'\n    def post():\n        print 'post'\n\nfor c in f.func_code.co_consts:\n    if inspect.iscode(c):\n        f = new.function(c, globals())\n        print f # Here you have your function :].\n","631":"from IPython.display import display, HTML\n\n# Assuming that dataframes df1 and df2 are already defined:\nprint \"Dataframe 1:\"\ndisplay(df1)\nprint \"Dataframe 2:\"\nHTML(df2.to_html())\n","632":"from Tkinter import *\nfrom random import random\n\nroot = Tk()\nframe = Frame(root, height=200, width=200)\n\nfor i in range(10):\n    Button(frame, text=str(i)).place(x=random() * 150, y=random() * 180)\n\nframe.pack()\nroot.mainloop()\n","633":" arr2 = arr1.reshape((100,20))\n","634":"from django.db import connection\nprint connection.queries\nu'SELECT DISTINCT \"market_basket\".\"id\", \"market_basket\".\"weight\" FROM \"market_basket\" INNER JOIN \"market_fruit\" ON (\"market_basket\".\"id\" = \"market_fruit\".\"inbasket_id\") INNER JOIN \"market_fruitname\" ON (\"market_fruit\".\"ofkind_id\" = \"market_fruitname\".\"id\") WHERE (\"market_fruitname\".\"name\" IN (\\'apple\\') AND \"market_fruitname\".\"name\" IN (\\'banana\\')) LIMIT 21'\n","635":"token = Session.query(AuthToken).options(eagerload('user')).filter(...).one()\nuser = token.user\n","636":"  regex = re.compile(r'(?:3\\d){6}')\n  for root,dirname, files in os.walk(directory):\n     for file in files:\n       if file.endswith(\".log\") or file.endswith(\".txt\"):\n          f=open(os.path.join(root,file))\n          for i, line in enumerate(f.readlines()):\n              searchedstr = regex.findall(line)\n              for word in searchedstr:\n                 print \"String found: \" + word\n                 print \"Line: \"+str(i)\n                 print \"File: \" + os.path.join(root,file)\n                 break\n          f.close()\n","637":"# Monkey-patch functools.wraps\nimport functools\n\ndef no_op_wraps(func):\n    \"\"\"Replaces functools.wraps in order to undo wrapping.\n\n    Can be used to preserve the decorated function's signature\n    in the documentation generated by Sphinx.\n\n    \"\"\"\n    def wrapper(decorator):\n        return func\n    return wrapper\n\nfunctools.wraps = no_op_wraps\n","638":"import sys, random, pygame\nfrom pygame.locals import *\n\npygame.init()\n\nw = 640\nh = 480\n\nscreen = pygame.display.set_mode((w,h))\nmorphingShape = pygame.Surface((20,20))\nmorphingShape.fill((255, 137, 0)) #random colour for testing\nmorphingRect = morphingShape.get_rect()\n\n# clock object that will be used to make the animation\n# have the same speed on all machines regardless\n# of the actual machine speed.\nclock = pygame.time.Clock()\n\ndef ShapeSizeChange(shape, screen):\n    x = random.randint(-21, 20)\n    w = shape.get_width()\n    h = shape.get_height()\n    if w + x > 0 and h + x > 0:\n        shape = pygame.transform.smoothscale(shape, (w + x, h + x))\n    else:\n        shape = pygame.transform.smoothscale(shape, (w - x, h - x))\n    shape.fill((255, 137, 0))\n    rect = shape.get_rect()\n    screen.blit(shape, rect)\n    return shape\n\n\nwhile True:\n    # limit the demo to 50 frames per second\n    clock.tick( 50 );\n\n    # clear screen with black color\n    # THIS IS WHAT WAS REALLY MISSING...\n    screen.fill( (0,0,0) )\n\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n    morphingShape = ShapeSizeChange(morphingShape, screen)\n    pygame.display.update()\n","639":"from lxml import html\nt = html.fromstring(text)\ntds = t.xpath(\"table\/tbody\/tr[2]\/td\")\nfor td in tds:\n    if tds.text.startswith(\"0.\"):\n        td.getparent().remove(td)\ntext = html.tostring(t)\n","640":"from distutils.version import StrictVersion # Or LooseVersion, if you prefer\n\nif StrictVersion('10.2.3') > StrictVersion('10.2'):\n    print \"10.2.3 is newer\"\n","641":"import sys\nfrom Queue import Queue\nfrom PyQt4.QtCore import *\nfrom PyQt4.QtGui import *\n\n# The new Stream Object which replaces the default stream associated with sys.stdout\n# This object just puts data in a queue!\nclass WriteStream(object):\n    def __init__(self,queue):\n        self.queue = queue\n\n    def write(self, text):\n        self.queue.put(text)\n\n# A QObject (to be run in a QThread) which sits waiting for data to come through a Queue.Queue().\n# It blocks until data is available, and one it has got something from the queue, it sends\n# it to the \"MainThread\" by emitting a Qt Signal \nclass MyReceiver(QObject):\n    mysignal = pyqtSignal(str)\n\n    def __init__(self,queue,*args,**kwargs):\n        QObject.__init__(self,*args,**kwargs)\n        self.queue = queue\n\n    @pyqtSlot()\n    def run(self):\n        while True:\n            text = self.queue.get()\n            self.mysignal.emit(text)\n\n# An example QObject (to be run in a QThread) which outputs information with print\nclass LongRunningThing(QObject):\n    @pyqtSlot()\n    def run(self):\n        for i in range(1000):\n            print i\n\n# An Example application QWidget containing the textedit to redirect stdout to\nclass MyApp(QWidget):\n    def __init__(self,*args,**kwargs):\n        QWidget.__init__(self,*args,**kwargs)\n\n        self.layout = QVBoxLayout(self)\n        self.textedit = QTextEdit()\n        self.button = QPushButton('start long running thread')\n        self.button.clicked.connect(self.start_thread)\n        self.layout.addWidget(self.textedit)\n        self.layout.addWidget(self.button)\n\n    @pyqtSlot(str)\n    def append_text(self,text):\n        self.textedit.moveCursor(QTextCursor.End)\n        self.textedit.insertPlainText( text )\n\n    @pyqtSlot()\n    def start_thread(self):\n        self.thread = QThread()\n        self.long_running_thing = LongRunningThing()\n        self.long_running_thing.moveToThread(self.thread)\n        self.thread.started.connect(self.long_running_thing.run)\n        self.thread.start()\n\n# Create Queue and redirect sys.stdout to this queue\nqueue = Queue()\nsys.stdout = WriteStream(queue)\n\n# Create QApplication and QWidget\nqapp = QApplication(sys.argv)  \napp = MyApp()\napp.show()\n\n# Create thread that will listen on the other end of the queue, and send the text to the textedit in our application\nthread = QThread()\nmy_receiver = MyReceiver(queue)\nmy_receiver.mysignal.connect(app.append_text)\nmy_receiver.moveToThread(thread)\nthread.started.connect(my_receiver.run)\nthread.start()\n\nqapp.exec_()\n","642":"class MySpider(CrawlSpider):\n    ...\n    start_urls_crawlspider = (url1, url2,)\n    start_urls_basespider = (url3,)\n\n    def start_requests(self):\n        for url in self.start_urls_crawlspider :\n            yield Request(url, callback=self.parse) # \"parse\" is the default anyway\n\n        for url in self.start_urls_basespider:\n            yield Request(url, callback=self.parse_base)\n\n    def parse_base(self, response):\n        ...\n","643":"import wx\nclass MyFrame(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, -1, 'test frame',size=(790, 524))\n        self.Bind(wx.EVT_LEFT_DOWN, self.OnClick)\n        self.Bind(wx.EVT_PAINT, self.OnPaint)\n        self.clip = wx.Clipboard()\n        self.x = wx.BitmapDataObject()\n        self.bmp = None\n\n    def OnClick(self, evt):\n        self.clip.Open()\n        self.clip.GetData(self.x)\n        self.clip.Close()\n        self.bmp = self.x.GetBitmap()\n        self.Refresh()\n\n    def OnPaint(self, evt):\n        if self.bmp:\n            dc = wx.PaintDC(self)\n            dc.DrawBitmap(self.bmp, 20, 20, True)\n\nif __name__ == '__main__':\n    app = wx.App()\n    frame = MyFrame()\n    frame.Show()\n    app.MainLoop()\n","644":"import logging, os, time\n\nPING_HOST='10.10.10.10'  # some host on the other side of the VPN\n\nwhile True:\n    retcode = os.system('ping -c 1 %s' % PING_HOST)\n\n    if retcode:  \n       # perform action for lost connection\n       logging.warn('Lost visibility with %s' % PING_HOST)\n\n    time.sleep(10)  # sleep 10 seconds\n","645":"def PrintEntryDetails(entry):\n   print 'Video title: %s' % entry.media.title.text\n   print 'Video published on: %s ' % entry.published.text\n   print 'Video description: %s' % entry.media.description.text\n   print 'Video category: %s' % entry.media.category[0].text\n   print 'Video tags: %s' % entry.media.keywords.text\n   print 'Video watch page: %s' % entry.media.player.url\n   print 'Video flash player URL: %s' % entry.GetSwfUrl()\n   print 'Video duration: %s' % entry.media.duration.seconds\n","646":"def tree_max(node):\n    maxleft  = float('-inf') if not node.left  else tree_max(node.left)\n    maxright = float('-inf') if not node.right else tree_max(node.right)\n    return max(node.value, maxleft, maxright)\n","647":"In [26]:\n\ndf1.groupby(['A','B']).size().reset_index().rename(columns={0:'count'})\nOut[26]:\n     A    B  count\n0   no   no      1\n1   no  yes      2\n2  yes   no      4\n3  yes  yes      3\n","648":"import urllib\nfrom BeautifulSoup import BeautifulSoup as BS\n\nsoup = BS(urllib.urlopen(\"http:\/\/item.taobao.com\/item.htm?id=13015989524\"))\n\na = []\nfor textarea in soup.findAll(\"textarea\"):\n    textsoup = BS(textarea.text)  # parse the contents as html\n    a.extend(textsoup.findAll(\"a\", attrs={\"href\":\"http:\/\/item.taobao.com\/item.htm?id=13015989524\"}))\n\nfor tag in a:\n    print tag\n\n# outputs\n# <a href=\"http:\/\/item.taobao.com\/item.htm?id=13015989524\" target=\"_blank\"><img ...\n# <a href=\"http:\/\/item.taobao.com\/item.htm?id=13015989524\" title=\"901 ...\n","649":"\\d+(?=\\D*$)\n","650":">>> ord(u\"\u0107\")\n263\n>>> u\"caf\u00e9\"[2]\nu'f'\n>>> u\"caf\u00e9\"[3]\nu'\\xe9'\n>>> for c in u\"caf\u00e9\":\n...     print repr(c), ord(c)\n... \nu'c' 99\nu'a' 97\nu'f' 102\nu'\\xe9' 233\n","651":"@app.route('\/', methods=['GET', 'POST'])\ndef index():\n    form = NameForm()  # Auto-populates from request data.\n    name = None\n    age = None\n    if form.validate_on_submit():\n        name = form.name.data\n        age  = form.age.data\n\n        # Lets now create a form, but ignore the request data, so it's empty:\n        form = NameForm(formdata=None)\n    return render_template('index.html', form = form, name = name, age = age)\n","652":">>> from xml.etree.ElementTree import ElementTree\n>>> tree = ElementTree()\n>>> tree.parse(\"your_xml_file.xml\")\n","653":"def Timer(*args, **kwargs):\n    \"\"\"Factory function to create a Timer object.\n\n    Timers call a function after a specified number of seconds:\n\n        t = Timer(30.0, f, args=[], kwargs={})\n        t.start()\n        t.cancel()     # stop the timer's action if it's still waiting\n\n    \"\"\"\n    return _Timer(*args, **kwargs)\n\nclass _Timer(Thread):\n    \"\"\"Call a function after a specified number of seconds:\n\n            t = Timer(30.0, f, args=[], kwargs={})\n            t.start()\n            t.cancel()     # stop the timer's action if it's still waiting\n\n    \"\"\"\n\n    def __init__(self, interval, function, args=[], kwargs={}):\n        Thread.__init__(self)\n        self.interval = interval\n        self.function = function\n        self.args = args\n        self.kwargs = kwargs\n        self.finished = Event()\n","654":"   r.readline()\n   'This is the first line of the file.\\n'\n   r.readline()\n   'Second line of the file\\n'\n   r.readline()\n   ''\n","655":"def execute(func=None, *args, **kwargs):\n    if func:\n        func(*args, **kwargs)\n","656":"(6, lambda number: (\n    ungettext('%(value).1f million', '%(value).1f million', number),\n    ungettext('%(value)s million', '%(value)s million', number),\n)),\n","657":"<iframe width=\"560\" height=\"315\" src=\"http:\/\/www.youtube.com\/embed\/DU0Q0U08gAc\" frameborder=\"0\" allowfullscreen><\/iframe>\n","658":"<html>\n<body>\n<form action=\"\/submit.php\">\n<input type=\"text\" name=\"Name\"><\/input>\n<input type=submit\"><\/input>\n<\/body>\n<\/html>\n","659":"engine = create_engine(database_url)\n\ndef on_connect(conn, record):\n    conn.execute('pragma foreign_keys=ON')\n\nfrom sqlalchemy import event\nevent.listen(engine, 'connect', on_connect)\n","660":"self.widgets[-1].show()\n","661":"* OK [CAPABILITY IMAP4rev1 UIDPLUS CHILDREN NAMESPACE THREAD=ORDEREDSUBJECT THREAD=REFERENCES SORT QUOTA IDLE AUTH=PLAIN ACL ACL2=UNION ID] Courier-IMAP ready. Copyright 1998-2011 Double Precision, Inc.  See COPYING for distribution information.\n","662":"import Tkinter as tk\nimport tkFileDialog\n\nclass SampleApp(tk.Tk):\n    def __init__(self, *args, **kwargs):\n        tk.Tk.__init__(self, *args, **kwargs)\n        self.button = tk.Button(text=\"Pick a file!\", command=self.pick_file)\n        self.button.pack()\n        self.entry_frame = tk.Frame(self)\n        self.entry_frame.pack(side=\"top\", fill=\"both\", expand=True)\n        self.entry_frame.grid_columnconfigure(0, weight=1)\n\n    def pick_file(self):\n        file = tkFileDialog.askopenfile(title=\"pick a file!\")\n        if file is not None:\n            entry = tk.Entry(self)\n            entry.insert(0, file.name)\n            entry.grid(in_=self.entry_frame, sticky=\"ew\")\n            self.button.configure(text=\"Pick another file!\")\n\napp = SampleApp()\napp.mainloop()\n","663":"maximum = max(mydict, key=mydict.get)  # Just use 'min' instead of 'max' for minimum.\nprint(maximum, mydict[maximum])\n# D 87\n","664":"import os\nfilename, extn = os.path.splitext(kid.image_url)\nthumb_filename = filename + \".thumb\" + extn\n","665":"from django.core import serializers\ndata = serializers.serialize(\"xml\", SomeModel.objects.all())\n","666":"@auth_blueprint.route('\/login', methods=['GET', 'POST'])\ndef login():\n    form = LoginForm()\n    if form.validate_on_submit():\n\n        user = User.query.filter_by(username=form.username.data).first()\n\n        if user is not None and user.verify_password(form.password.data):\n            login_user(user, True)\n            next = request.args.get('next')\n            #if not next_is_valid('next'):\n            #    return abort(400)\n\n            return redirect(next or url_for('simple.index'))\n        flash('Invalid username or password')\n\n    return render_template('\/auth\/login.html', form=form)\n","667":">>> import urlparse\n>>> url = '\/url?q=http:\/\/www.amazon.com\/Quantitative-Trading-Build-Algorithmic-Business\/dp\/0470284889&sa=U&ei=P2ycT6OoNuasiAL2ncV5&ved=0CBIQFjAA&usg=AFQjCNEo_ujANAKnjheWDRlBKnJ1BGe'\n>>> data = urlparse.parse_qs(\n...     urlparse.urlparse(url).query\n... )\n>>> data\n{'ei': ['P2ycT6OoNuasiAL2ncV5'],\n 'q': ['http:\/\/www.amazon.com\/Quantitative-Trading-Build-Algorithmic-Business\/dp\/0470284889'],\n 'sa': ['U'],\n 'usg': ['AFQjCNEo_ujANAKnjheWDRlBKnJ1BGe'],\n 'ved': ['0CBIQFjAA']}\n>>> data['q'][0]\n'http:\/\/www.amazon.com\/Quantitative-Trading-Build-Algorithmic-Business\/dp\/0470284889'\n","668":"from tkinter import *\nimport ctypes, os\n\ndef callback():\n    active.set(False)\n    #root.destroy()         # Uncoment this to close the window\n\ndef sleep():\n    if not active.get(): return\n    root.after(1000, sleep)\n    timeLeft.set(timeLeft.get()-1)\n    timeOutLabel['text'] = \"Time Left: \" + str(timeLeft.get())  #Update the label\n    if timeLeft.get() == 0:                                     #sleep if timeLeft = 0\n        os.system(\"Powercfg -H OFF\")\n        os.system(\"rundll32.exe powrprof.dll,SetSuspendState 0,1,0\")\n        callback()\n\nroot = Tk()\nroot.geometry(\"400x268\")\nroot.title(\"Alert\")\nroot.configure(background='light blue')\n\ntimeLeft = IntVar()\ntimeLeft.set(10)            # Time in seconds until shutdown\n\nactive = BooleanVar()\nactive.set(True)            # Something to show us that countdown is still going.\n\nlabel = Label(root, text=\"ALERT this device will go to sleep soon!\",   fg=\"red\")\nlabel.config(font=(\"Courier\", 12))\nlabel.configure(background='light blue')\nlabel.pack()\ntimeOutLabel = Label(root, text = 'Time left: ' + str(timeLeft.get()), background='light blue') # Label to show how much time we have left.\ntimeOutLabel.pack()\nquitButton = Button(root, text=\"do not sleep!\", command=callback)\nquitButton.pack()   \nquitButton.place(x=150, y=150)      \n\nroot.after(0, sleep)\nroot.mainloop()  \n","669":"# You update your copy here, so the original will be used unchanged, which is not the \n# case if you don't have the copy\nvaluesCopy.update({state: convergedValue})\n\n# If you have the copy, you'll be using the old value stored in self.value here, \n# not the updated one\nqValue += probability * (reward + (self.discount * self.values[successor]))\n","670":"In [1]: orig = [1,2,3,4,5]\n\nIn [2]: sampled_vec = [3,1,3]\n\nIn [3]: indices = [orig.index(i) for i in sampled_vec]\n\nIn [4]: indices\nOut[4]: [2, 0, 2]\n","671":"def values_incremented(some_data):\n    return [{'value': current_sum, 'date': element['date']}\n      for element, current_sum\n      in zip(some_data,\n           reduce(lambda x, y: [y['value']] if not x else x + [x[-1] + y['value']], some_data, []))]\n","672":"def get_thread(msg):\n    messages = [] # empty message set\n\n    while msg.response_to:  \n         messages.append(msg)\n         msg = msg.response_to\n\n    messages.append(msg) # will append the original message\n\n    return messages\n","673":"import numpy as np\nfrom matplotlib import pyplot as plt\nfrom mpl_toolkits.axes_grid1 import ImageGrid\n\nfiguresizex = 9.0\nfiguresizey = 6.1\n\n# generate images\nimage1 = np.identity(5)\nimage2 = np.arange(16).reshape((4,4))\n\n\n\nfig = plt.figure(figsize=(figuresizex,figuresizey))\n\n# create your grid objects\ntop_row = ImageGrid(fig, 311, nrows_ncols = (1,3), axes_pad = .25,\n                    cbar_location = \"right\", cbar_mode=\"single\")\nmiddle_row = ImageGrid(fig, 312, nrows_ncols = (1,3), axes_pad = .25,\n                       cbar_location = \"right\", cbar_mode=\"single\")\nbottom_row = ImageGrid(fig, 313, nrows_ncols = (1,3), axes_pad = .25,\n                       cbar_location = \"right\", cbar_mode=\"single\")\n\n# plot the images            \nfor i in range(3):\n    vmin, vmax = image1.min(),image1.max()\n    ax = top_row[i]\n    im1 = ax.imshow(image1, vmin=vmin, vmax=vmax)\n\nfor i in range(3):\n    vmin, vmax = image2.min(),image2.max()\n    ax =middle_row[i]\n    im2 = ax.imshow(image2, vmin=vmin, vmax=vmax)\n\n# Update showing how to use identical scale across all 3 images\n# make some slightly different images and get their bounds\nimage2s = [image2,image2 + 5,image2 - 5]\n\n# inelegant way to get the absolute upper and lower bounds from the three images\ni_max, i_min = 0,0\nfor im in image2s:\n    if im.max() > i_max: \n        i_max= im.max()\n    if im.min() < i_min: \n        i_min = im.min()\n# plot these as you would the others, but use identical vmin and vmax for all three plots\nfor i,im in enumerate(image2s):\n    ax = bottom_row[i]\n    im2_scaled = ax.imshow(im, vmin = i_min, vmax = i_max)\n\n# add your colorbars\ncbar1 = top_row.cbar_axes[0].colorbar(im1)\nmiddle_row.cbar_axes[0].colorbar(im2)       \nbottom_row.cbar_axes[0].colorbar(im2_scaled)\n\n# example of titling colorbar1\ncbar1.set_label_text(\"label\"))\n\n# readjust figure margins after adding colorbars, \n# left and right are unequal because of how\n# colorbar labels don't appear to factor in to the adjustment\nplt.subplots_adjust(left=0.075, right=0.9)\n\nplt.show()\n","674":"def calculateCorrelation(data_1, data_2, dist):\n    \"\"\"\n    Fill the correlation matrix between data_1 and data_2\n    :param data_1: dictionary {key : [coordinates]}\n    :param data_2: dictionary {key : [coordinates]}\n    :param dist: minimum distance between coordinates to be considered, in kilometers.\n    :return: numpy array containing the correlation between each complaint category.\n    \"\"\"\n    pool = Pool(processes=20)\n    results = []\n\n    data_1 = collections.OrderedDict(sorted(data_1.items()))\n    data_2 = collections.OrderedDict(sorted(data_2.items()))\n    data_1_size = len(data_1)                                          \n    data_2_size = len(data_2)\n\n    corr = numpy.zeros((data_1_size, data_2_size))\n\n    for index_1, key_1 in enumerate(data_1):\n        for index_2, key_2 in enumerate(data_2):  # Forming pairs\n            type_1 = data_1[key_1]  # List of data in data_1 of type *i*\n            type_2 = data_2[key_2]  # List of data in data_2 of type *j*\n            result = pool.apply_async(correlation, args=[type_1, type_2, dist])\n            results.append((result, index_1, index_2))\n    for result, index_1, index_2 in results:\n        corr[index_1, index_2] = result.get()\n    pool.close()\n    pool.join()\n","675":"\nfrom distutils.core import setup\n\nsetup(\n    name='TowelStuff',\n    version='0.1dev',\n    packages=['towelstuff',],\n    license='Creative Commons Attribution-Noncommercial-Share Alike license',\n    long_description=open('README.txt').read(),\n)\n","676":"select s.name, t.value\nfrom Student s\nleft join Thing t on t.student = s.rollno\nwhere t.when == 'whenever'\n","677":"secret_word = \"python\"\ncorrect_word = \"yo\"\ncount = 0\n\nwhile count < len(secret_word):\n    print(secret_word[count] if secret_word[count] in correct_word else '_', end=\" \")\n    count += 1\n","678":"from urlparse import urljoin\nfrom bs4 import BeautifulSoup\nimport requests\n\n\nBASE_URL = \"http:\/\/genius.com\"\nartist_url = \"http:\/\/genius.com\/artists\/Andre-3000\/\"\n\nresponse = requests.get(artist_url, headers={'User-Agent': 'Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/35.0.1916.153 Safari\/537.36'})\n\nsoup = BeautifulSoup(response.text, \"lxml\")\nfor song_link in soup.select('ul.song_list > li > a'):\n    link = urljoin(BASE_URL, song_link['href'])\n    response = requests.get(link)\n    soup = BeautifulSoup(response.text)\n    lyrics = soup.find('div', class_='lyrics').text.strip()\n\n    # tokenize `lyrics` with nltk\n","679":"import pdb; pdb.set_trace()\n","680":">>> import csv\n>>> with open(\"hwa.csv\", \"rb\") as fp:\n...     reader = csv.DictReader(fp)\n...     data = next(reader)\n...     \n>>> data\n{'Age': '25', 'Weight': '78', 'Height': '6.0'}\n>>> data[\"Age\"]\n'25'\n>>> float(data[\"Age\"])\n25.0\n","681":"import rpy2.robjects.numpy2ri as rpyn\nvector=rpyn.ri2numpy(vector_R)\n","682":"from collections import defaultdict\n\nres = defaultdict(list)\nfor dic in data:\n    for key, value in dic.items():\n        old_value = res[key]\n        if isinstance(value, list):\n            old_value.extend(value)\n        else:\n            old_value.append(value)\n\n        # alternatively:\n        old_value += [value] if not isinstance(value, list) else value\n","683":"import os\nimport sys\nimport time\n\n# acquire: open file for write, create if possible, exclusive access guaranteed\nfname = 'my_lock_file.pid'\ntry:\n    fd = os.open(fname, os.O_CREAT|os.O_WRONLY|os.O_EXCL)\nexcept OSError:\n    # failed to open, another process is running\n    with open(fname) as f:\n        print \"other process running:\", f.readline()\n        sys.exit()\n\ntry:\n    os.write(fd, '%d\\n' % os.getpid())\n    os.fsync(fd)\n    # do something\n    time.sleep(5)\nfinally:\n    os.close(fd)\n    # release: delete file\n    os.remove(fname)\n","684":"def abc(hello, hi):\n    myli = []\n    for i in xrange(len(hello)):\n        for j in xrange(len(hi)):\n            myli.append([hello[i], hi[j], {\"Mydata\": str(j)}])\n    return myli\n\nhello = [\"hello \", \"cruel \"]\nhi = [\"hi\", \"world\"]\nprint abc(hello, hi)\n","685":"@mock.patch('os.path.exists')\ndef test_vm_exists(self, mock_exists):\n    mock_exists.return_value = True\n    fake_path = 'fake\/path'\n\n    response = self._VixConnection.vm_exists(fake_path)\n\n    mock_exists.assert_called_with(fake_path)\n    self.assertEqual(response, True)\n","686":"def incrementKeys(infilepath, outfilepath, keys, incrementBy):\n    with open(infilepath) as infile, open(outfilepath, 'w') as outfile:\n        for line in infile:\n            if any(line.startswith(key) for key in keys):\n                k, tail = line.split(',')\n                k, val = k.split(\":\")\n                val = int(val)+incrementBy\n                line = \"%s:%d,%s\\n\" %(k, val, tail)\n            outfile.write(line)\n","687":" import requests\n import json\n\n myurl= 'https:\/\/api.twitter.com\/1.1\/mutes\/users\/create.json'\n to_post = {\"label\":\"value\"}\n to_post = json.dumps(to_post)  #Convert to json if that is the correct content-type\n r = requests.post(myurl,data = to_post , auth = ('username', 'password'))\n","688":"\"def (\\w+)\\s*\\((.*?)\\):\"\n","689":"f.seek(-1, os.SEEK_CUR)\nf.write(\";\")\n","690":"parser.add_argument('-t', '--type', choices=('type1', 'type2', 'type3'), \n                    help='type1\/type2\/type3')\n","691":"from django.core.cache import cache\n\nCHOICES_CACHE_KEY = 'choice_cache_key'\n\ndef get_cached_choices():\n    choices = cache.get(CHOICES_CACHE_KEY)\n    if choices is None:\n        choices = ...  # Query the DB here\n        cache.set(CHOICES_CACHE_KEY, choices, None)  # None caches forever\n    return choices\n\ndef construct_forms(choices):\n    forms = ...  # build forms with choices\n    return forms\n\n@receiver((post_save, post_delete), sender=TheModel, dispatch_uid='change')\ndef clear_choices_cache(sender, **kwargs):\n    cache.delete(CHOICES_CACHE_KEY)\n\ndef some_view(request):\n    # Do something with the forms\n    forms = construct_forms(get_cached_choices())\n","692":">>> import itertools\n>>> l = [[['a','b','c'], '2'], [['d','e','f'], '3']]\n>>> [list(itertools.chain.from_iterable(i)) for i in l]\n[['a', 'b', 'c', '2'], ['d', 'e', 'f', '3']]\n","693":"table_name = \"TABLE 1\" \n\ntable = soup.find(text=lambda x: x and table_name in x).find_parent('table')\n","694":"process = subprocess.Popen(['cshift', str(file), str(x_c), str(y_c), str(area)], \n                           stdout=subprocess.PIPE)\noutput = process.stdout.read()\n","695":"import redis\n\nr = redis.Redis(host='localhost', port=6379, db=0)\np = r.pipeline()\nfor key in keys:\n    p.hgetall(key)\n\nfor h in p.execute():\n    print h\n","696":"q = (session.query(Parent)\n     .filter(Parent.children.any(Child.value.ilike('%{}%'.format(value1))))\n     .filter(Parent.children.any(Child.value.ilike('%{}%'.format(value2))))\n     .filter(~Parent.children.any(\n         db.or_(Child.value.ilike('%{}%'.format(value3)),\n                Child.value.ilike('%{}%'.format(value4)),\n                )\n     ))\n)\n","697":"import numpy as np\nfrom scipy.special import binom as binom \nfrom mpl_toolkits.mplot3d import Axes3D \nfrom matplotlib import pyplot\nplt = pyplot\nfrom matplotlib import cm\nimport matplotlib\n\n'''Define A_(pm)  (Gauss-laguerre polinomials) '''\n\ndef Ln(p,m,xj):\n    Ln=0.\n    for i in range(p+1):#el p+1 es por la indexacion\n        Ln=Ln+((-1)**i)*binom(p+m,p-i)*(xj**i)\/np.math.factorial(i)\n    return Ln\n\ndef A(p, m, r, phi):#defino G-L\n\n    A0=np.zeros((len(phi),len(r)))\n    for j, rn in enumerate(r):\n            A0[:,j]=np.exp(-rn**2)*Ln(p,0,2*rn**2)\n\n    A1=np.zeros_like(A0)\n    for j, rn in enumerate(r):\n         for k, phin in enumerate(phi):\n            A1[k,j]=2*((2*rn**2)**(m\/2))*np.sqrt(np.math.factorial(p)\/np.math.factorial(p+m))*np.exp(-rn**2)*Ln(p,m,2*(rn**2))*np.sin(m*phin)\n\n    A2=np.zeros_like(A0)\n\n    for j, rn in enumerate(r):\n        for k, phin in enumerate(phi):\n            A2[k,j]=2*(2*rn**2)**(m\/2)*np.sqrt(np.math.factorial(p)\/np.math.factorial(p+m))*np.exp(-rn**2)*Ln(p,m,2*rn**2)*np.cos(m*phin)\n\n\n    return A0, A1, A2\n\npi=np.pi\nr=np.linspace(0,6,50)\nphi=np.linspace(0,2*pi,40)\n\nA0, A1, A2=A(5,1,r,phi)#\n\nfig = pyplot.figure(figsize=(11,9), dpi=100)\nax = pyplot.subplot(111, projection='3d')\nR, P = np.meshgrid(r, phi)\nX, Y = R*np.cos(P), R*np.sin(P)\nax.plot_surface(X, Y, A0)\n\nplt.show()\n","698":"Px, Py, m = symbols(\"Px Py m\")\n","699":"decision = \"no\"\nwhile decision.lower() == \"no\":\n    example = input(\"Blah blah blah: \")\n    if 10 < example <= 20:\n        decision = raw_input(\"Are you sure this is your answer?: \")\n","700":"def f(x, y):\n    return x + y\nv = numpy.array([1,2,3])\n# vectorize the function\nvf = numpy.vectorize(f)\n# \"transposing\" the vector by producing a view with another shape\nvt = v.reshape((v.shape[0], 1)\n# calculate over all combinations using broadcast\nvf(v, vt)\n\nOutput:\narray([[ 2.,  3.,  4.],\n       [ 3.,  4.,  5.],\n       [ 4.,  5.,  6.]])\n","701":"x = pd.np.tile(xi, 3)\ny = pd.np.r_[df['A'], df['B'], df['C']]\n\nslope, intercept, r_value, p_value, std_err = stats.linregress(x, y)\nline4 = intercept + slope * xi\n\nplt.plot(line4,'k-')\n","702":"In [15]: import numpy as np\n\nIn [16]: x = np.array([(9,), (1,), (1, 12), (9,), (8,)])\n\nIn [17]: np.hstack(x)\nOut[17]: array([ 9,  1,  1, 12,  9,  8])\n","703":"myregex=re.compile('{} is (not)? very good at python'.format(mystring))\n\nmyregex=re.compile('{s} is (not)? very good at python'.format(s=mystring))\n\nmyregex=re.compile('%s is (not)? very good at python'% (mystring))\n\nmyregex=re.compile('%(mystring)s is (not)? very good at python' % locals())\n\nmyregex=re.compile(mystring+' is (not)? very good at python')\n\nmyregex=re.compile(' '.join([mystring,'is (not)? very good at python']))\n","704":"import subprocess\n\nos.environ['OMP_NUM_THREADS'] = '{:d}'.format(thread)\nproc = subprocess.Popen([\"numpy_test\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\nstdout, stderr = proc.communicate()\n","705":">>> df['q_date'].apply(\n        lambda x: pd.datetools.parse(x).strftime('%Y%m%dT%H:%M%SZ'))\n0    20120210T00:0000Z\n1    20120210T00:0000Z\n2    20120210T00:0000Z\n3    20120210T00:0000Z\n4    20120210T00:0000Z\nName: q_date, dtype: object\n","706":"def delete_used_id():\n    # open and save all ids\n    id_file_r = open('C:\/Users\/my.name\/Documents\/IDs.txt', 'r')\n    lines = id_file_r.readlines()\n    first_line_unf = lines[0][3:]\n    first_line = first_line_unf.strip()\n    id_file_r.close()\n    # reopen in write mode\n    id_file_w = open('C:\/Users\/my.name\/Documents\/IDs.txt','w')\n    for line in lines[1:]:\n        id_file_w.write(line)\n    id_file_w.close()\n    print(\"Deleting used ID: \" + first_line)\n","707":"p = subprocess.Popen(call, stdout=subprocess.PIPE, shell=True, universal_newlines=True)\nfor line in iter(p.stdout.readline, ''):\n    print(line, end='')\n","708":"    self.spb.valueChanged[int].connect(self.onValueChanged)\n    self.spb.valueChanged[str].connect(self.onValueChanged)\n    ...\n\ndef onValueChanged(self, x):\n    print(\"QSpinBox: value changed! \", x, type(x))\n","709":"csv = open('login.csv', 'r').read().split('\\n')[6].split(';')\nusername = input(\"Put your username here: \")\nif username == \"admin\" or username in csv:\n    print \"Username Found\"\nelse:\n    print \"Username Not Found\"\n","710":"file = open(\"user.txt\", \"r\")\nfor login in file:\n    login = login.split('#')\n    if user == login[2] and password == login[3]:\n        print 'Correct username\/password'\n        break\nelse:\n    print 'Invalid username\/password'\n","711":"season = ''\nfor line in data.splitlines():\n    if line.startswith('=== Season'):\n        season = line\n    elif season:\n        do something\n","712":"with open(EMCMD_INCORRECT_PARAMS, 'r') as fd_usage:\n    usageLines = fd_usage.read().replace('\\n', fd_usage.newline)\n","713":"re.findall(r\"\\d+(?=\\s)\", \"1323 323 434 \")\n","714":"from cpython cimport pycapsule\n\ncdef const char* CAPNAME = \"ExtClassName\" \ncdef void del_capsule(object o):\n  cdef ExtClass* cobject = <ExtClass*>pycapsule.PyCapsule_GetPointer(o, CAPNAME)\n  del cobject\n\ndef mk_cpp_object():\n  return pycapsule.PyCapsule_New(cp, CAPNAME, del_capsule)\n","715":">>> import regex\n>>> s = 'cuacducucibcl'\n>>> regex.sub(r'((?:a|(?<!^)\\G)[^abc\\n]*)c', r'\\1x', s)\n'cuaxduxuxibcl'\n","716":"from flask import Flask, session, abort, request, render_template\n\n@app.route('\/results', methods=['POST'])\ndef results():\n    if request.form['channelname'] in ALLOWED_CHANNELS:\n        session['channel'] = request.form['channelname']\n    if 'channel' in session:\n        return render_template('results.html', channel=session['channel'])\n    else:\n        abort(400)\n","717":"def Loans(x):\n    x = int(input(\"What is your FICO score? \"))\n    if x >= 760:\n           print (\"Rate = 3.080\")\n    elif x >= 700:\n           print (\"Rate = 3.302\")\n    elif x >= 680:\n           print (\"Rate = 3.479\")\n    elif x >= 660:\n           print (\"Rate = 3.693\")\n    elif x >= 640:\n           print (\"Rate = 4.123\")\n    elif x >= 620:\n           print (\"Rate = 4.66\")\n    else:\n           print ('Approval = No')\n\nLoans(10)\n","718":">>> from System.Diagnostics import Process\n>>> p = Process()\n>>> p.StartInfo.UseShellExecute = False\n>>> p.StartInfo.RedirectStandardOutput = True\n>>> p.StartInfo.FileName = 'uname'\n>>> p.StartInfo.Arguments = '-m -r'\n>>> p.Start()\nTrue\n>>> p.WaitForExit()\n>>> p.StandardOutput.ReadToEnd()\n'9.6.0 i386\\n'\n>>> p.ExitCode\n0\n>>>\n","719":"begin program.\nimport spss, spssaux\nimport os\nschoollist = ['brow']\nfor x in schoollist:\n   school = 'brow'\n   school2 = school + '06.sav'\n   #opens the file\n   filename = os.path.join(\"Y:\\...\\Data\", school2) #In this instance, Y:\\...\\Data\\brow06.sav\n   spssaux.OpenDataFile(filename)\n\n   #creates the variable\n   cur=spss.Cursor(accessType='w')\n   cur.SetVarNameAndType(['name'],[8])\n   cur.CommitDictionary()\n   for i in range(cur.GetCaseCount()):\n      cur.fetchone()\n      cur.SetValueChar('name', school)\n      cur.CommitCase()\n   cur.close()\n\n\n   spss.Submit(\"\"\"save outfile=\"%s\".\"\"\" % filename)\n\nend program.\n","720":"import csv\nimport os\nimport sys\n\ndef open_csv(filename, mode='r'):\n    \"\"\" Open a csv file in proper mode depending on Python verion. \"\"\"\n    return (open(filename, mode=mode+'b') if sys.version_info[0] == 2 else\n            open(filename, mode=mode, newline=''))\n\ndef process_file(filename, start_date=None, new_dir=None):\n    # Read the entire contents of the file into memory skipping rows before\n    # any start_date given (assuming row[0] is a date column).\n    with open_csv(filename, 'r') as f:\n        reader = csv.reader(f)\n        header = next(reader)  # Save first row.\n        contents = [row for row in reader if start_date and row[0] >= start_date\n                                                or not start_date]\n\n    # Create different output file path if new_dir was specified.\n    basename = os.path.basename(filename)  # Remove dir name from filename.\n    output_filename = os.path.join(new_dir, basename) if new_dir else filename\n    if new_dir and not os.path.isdir(new_dir):  # Create directory if necessary.\n        os.makedirs(new_dir)\n\n    # Open the output file and create a CSV writer for it.\n    with open_csv(output_filename, 'w') as f:\n        writer = csv.writer(f)\n\n        # Add name of new column to header.\n        header = ['Pipe'] + header  # Prepend new column name.\n        writer.writerow(header)\n\n        # Data for new column is the base filename without extension.\n        new_column = [os.path.splitext( os.path.split(basename)[1] )[0]]\n\n        # Process each row of the body by prepending data for new column to it.\n        writer.writerows((new_column+row for row in contents))\n","721":"# this is the new behavior (after code updates)\nn [340]: dfs = DataFrame(dict(A = 'foo', B = 'bar'),index=range(5))\n\nIn [341]: dfs\nOut[341]: \n     A    B\n0  foo  bar\n1  foo  bar\n2  foo  bar\n3  foo  bar\n4  foo  bar\n\n# A and B have a size of 30\nIn [342]: store.append('dfs', dfs, min_itemsize = 30)\n\nIn [343]: store.get_storer('dfs').table\nOut[343]: \n\/dfs\/table (Table(5,)) ''\n  description := {\n  \"index\": Int64Col(shape=(), dflt=0, pos=0),\n  \"values_block_0\": StringCol(itemsize=30, shape=(2,), dflt='', pos=1)}\n  byteorder := 'little'\n  chunkshape := (963,)\n  autoIndex := True\n  colindexes := {\n    \"index\": Index(6, medium, shuffle, zlib(1)).is_CSI=False}\n\n# A is created as a data_column with a size of 30\n# B is size is calculated\nIn [344]: store.append('dfs2', dfs, min_itemsize = { 'A' : 30 })\n\nIn [345]: store.get_storer('dfs2').table\nOut[345]: \n\/dfs2\/table (Table(5,)) ''\n  description := {\n  \"index\": Int64Col(shape=(), dflt=0, pos=0),\n  \"values_block_0\": StringCol(itemsize=3, shape=(1,), dflt='', pos=1),\n  \"A\": StringCol(itemsize=30, shape=(), dflt='', pos=2)}\n  byteorder := 'little'\n  chunkshape := (1598,)\n  autoIndex := True\n  colindexes := {\n    \"A\": Index(6, medium, shuffle, zlib(1)).is_CSI=False,\n    \"index\": Index(6, medium, shuffle, zlib(1)).is_CSI=False}\n","722":"# Stuff\n\nimport subprocess\n\n__version__ = '1.2.3'\n__build__ = subprocess.check_output('git describe --tags --always HEAD'\n                                    .split()).decode().strip()\n\nwith open('mypkg\/_version.py', 'w') as f:\n    f.write('''\\\n# I will destroy any changes you make to this file.\n# Sincerely,\n# setup.py ;)\n\n__version__ = '{}'\n__build__ = '{}'\n'''.format(__version__, __build__))\n\n# other stuff\n\nsettings.update(\n    version=__version__,\n# more stuff\n)\n","723":"a = np.array([  1.,  -1.,   np.nan,  0.,  np.nan], dtype=np.float32)\nsa = np.sort(a)[::-1]\nnp.roll(sa,-np.count_nonzero(np.isnan(a)))\n\narray([  1.,   0.,  -1.,  nan,  nan], dtype=float32)\n","724":"import certifi\nimport ssl\nimport requests\n\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.poolmanager import PoolManager\n\nclass Ssl3HttpAdapter(HTTPAdapter):\n    def init_poolmanager(self, connections, maxsize, block=False):\n        # specify the version of SSL you want to use below\n        self.poolmanager = PoolManager(num_pools=connections, maxsize=maxsize, block=block, \n                                       ssl_version=ssl.PROTOCOL_SSLv3)\n\ns = requests.Session()\n\n# May or may not need this. I needed it since I didn't need to route through a proxy to get to local services.\ns.trust_env = False\n\ns.verify = certifi.where()\ns.auth = (user, password)  # Basic-Auth username\/password\n\ns.mount(base_url_of_your_service, Ssl3HttpAdapter())\n\nreq = s.get(your_service_url)\nprint(req.text)\n","725":"import numpy\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import axes3d\n\ndef peaks(x,y):\n    return x * numpy.sin(y)\n\nfig = plt.figure()\nax = fig.gca(projection='3d')\nX = Y= numpy.arange(-3, 3, 0.1).tolist()\nX, Y = numpy.meshgrid(X, Y)\n\nZ = []\nfor i in range(len(X)):\n    Z.append(peaks(X[i],Y[i]))\n\nax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3)\ncset = ax.contour(X, Y, Z, zdir='z', offset=-8)\ncset = ax.contour(X, Y, Z, zdir='x', offset=-8)\ncset = ax.contour(X, Y, Z, zdir='y', offset=8)\n\nax.set_xlabel('X')\nax.set_xlim(-8, 8)\nax.set_ylabel('Y')\nax.set_ylim(-8, 8)\nax.set_zlabel('Z')\nax.set_zlim(-8, 8)\n\nplt.show()\n","726":"    inserted_code = input(\"insert postcode\")\n    import re\n    if re.match('^[1-9][0-9]{4}$', inserted_code): \n       print(\"Estonian postcode\")\n    else:\n       print(\"Not an estonian code\")\n","727":"cursor = conn.cursor (MySQLdb.cursors.DictCursor)\n","728":"cookie = http.cookies.BaseCookie(cookie_string)\n","729":"import gc\n\n\ndef run():\n    return 1\n\ns = run()\nprint len(gc.get_referrers(s))  # prints a rather big number, 41 in my case\n\nobj = object()\nprint len(gc.get_referrers(obj))  # prints 1\n\nlst = [obj]\nprint len(gc.get_referrers(obj))  # prints 2\n\nlst = []\nprint len(gc.get_referrers(obj))  # prints 1 again\n","730":"if pdForm.is_valid():\n    cleanform = pdForm.save(commit = False).\n    cleanform.resource = rd\n    cleanform.save()\n","731":"# Import 3rd Party libraries\nfrom selenium                                       import webdriver\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\n\nclass requester_firefox(object):\n    def __init__(self):\n        self.selenium_browser = webdriver.Firefox()\n        self.selenium_browser.set_page_load_timeout(30)\n\n    def __del__(self):\n        self.selenium_browser.quit()\n        self.selenium_browser = None\n\n    def __call__(self, url):\n        try:\n            self.selenium_browser.get(url)\n            the_page = self.selenium_browser.page_source\n        except Exception:\n            the_page = \"\"\n        return the_page\n\ntest = requester_firefox()\nprint test(\"http:\/\/www.seek.com.au\/jobs\/in-australia\/#dateRange=999&workType=0&industry=&occupation=&graduateSearch=false&salaryFrom=0&salaryTo=999999&salaryType=annual&advertiserID=&advertiserGroup=&keywords=police+check&page=1&isAreaUnspecified=false&location=&area=&nation=3000&sortMode=Advertiser&searchFrom=quick&searchType=\").encode(\"ascii\", \"ignore\")\n","732":"first_i, first_j = sequence_indices[0]\nboard[first_i][first_j]\n","733":">>> from ast import literal_eval\n>>> \n>>> literal_eval( \"['Ethnicity', 'Sex', 'Cause of Death', 'Count', 'Percent']\")\n['Ethnicity', 'Sex', 'Cause of Death', 'Count', 'Percent']\n","734":"# -*- coding: utf-8 -*-\nimport re\nimport xlrd\n\nbook = xlrd.open_workbook(\"liste1.xlsx\")\n\n# get the first worksheet\nfirst_sheet = book.sheet_by_index(0)\n\n# read a cell\ncell = first_sheet.cell(1,5)\n\ntext= re.sub(r\"[\\r\\n\\t\\x07\\x0b]\", \"\", cell.value)\nmatch = re.split(r' (?=\\d{2}-\\d{2}-\\d{4})', text)\n\nprint match[0]\nprint match[1]\nprint match[2]\n","735":"seen = set()\nres = []\nfor line in textlines:\n    if line not in seen:\n        res.append(line)\n        if not line.strip():\n            seen.add(line)\ntextlines = res\n","736":"import matplotlib.pyplot as plt\n\ndef close_event():\n    plt.close() #timer calls this function after 3 seconds and closes the window \n\nfig = plt.figure()\ntimer = fig.canvas.new_timer(interval = 3000) #creating a timer object and setting an interval of 3000 milliseconds\ntimer.add_callback(close_event)\n\nplt.plot([1,2,3,4])\nplt.ylabel('some numbers')\n\ntimer.start()\nplt.show()\nprint \"Am doing something else\"\n","737":"import requests\n\ntxtPdf(filename):\n    url = \"http:\/\/do.convertapi.com\/text2Pdf\"\n    archivo =  open(\"temp.pdf\", \"wb\")\n\n    response = requests.post(url,\n        files={'filename': open(filename,'rb')}\n    )\n\n    archivo.write(response.content)\n    archivo.close()\n\ntxtPdf('test.txt')\n","738":"awk -v text='.nmv-fas' '\n    \/<title>\/ {title=$0; gsub(\/<\\\/?title>\/, \"\", title); replace=1}\n    replace {gsub(text, title)}\n    {print}\n' file > file.tmp && mv file.tmp file\n","739":"class Home(object):\n    pass\n\nclass Club(object):\n    pass\n\nPLACES = {\n   'home': Home(),\n   'club': Club()\n}\n\nclass Manager(object):\n    def display_plot_and_get_option(self):\n        return raw_input('Where do you want to go?')\n   def get_next_place(self, place_name):\n        return PLACES[place_name]\n\nm = Manager()\nwhile 1:\n    place_name = m.display_plot_and_get_option()\n    m.get_next_place(place_name)\n","740":"def takes(*args):\n    def _takes(fcn):\n        fcn.params = args\n        return fcn\n    return _takes\n\n@takes(\"time\", \"temp\", \"time\")\ndef do_stuff(start_time, average_temp, stop_time):\n    pass\n","741":"features = Feature.gql(\"ORDER BY date_created\")\n\nif (self.request.get(\"add_a_new_feature\") == \"true\"):\n    if (Feature.gql(\"WHERE feature_name=:1 ORDER BY last_modified DESC LIMIT 1\", NEW_FEATURE_NAME).count() == 0):\n        new_feature = Feature(feature_name=NEW_FEATURE_NAME)\n        new_feature.put()\n        features.append(new_feature)\n...\n\nif (features.count() > 0):\n    features_list = features.fetch()\n    for feature in features_list:\n        ... # the list now contain the new_feature at the end\n","742":"subprocess.call(['\/dir6\/dir5\/dir4\/openssl', 'enc', '-d', '-aes-256-cbc', '-a', '-in', '\/home\/dir2\/dir3\/XXX.enc' ,'-pass' , 'pass:password'])\n","743":"out = set()\n\nfor inner in alist:\n    out.update(inner)\n\nout = map(int, out) # in your example you have a list of ints\n\n>>> print out\n[1, 2, 3, 5, 15, 657]\n","744":">>> my_list = [[1,2,3,1, 3], [1,3,2]]\n>>> [(i,j) for i,x in enumerate(my_list) for j,y in enumerate(x) if y == 3]\n[(0, 2), (0, 4), (1, 1)]\n","745":">>> import numpy as np\n>>> a = np.array([0,0,0,3,2,-1,0,0,7,9,13,0,0,0,0,0,0,0])\n>>> np.trim_zeros(a)\narray([ 3,  2, -1,  0,  0,  7,  9, 13])\n","746":"#!\/usr\/bin\/env python\n# encoding: utf-8\n\"\"\"\nlogClient2.py    \nCreated by Allister on 2010-11-30.\n\"\"\"\n\nimport wx\nimport sqlite3\n\nWINDOW_SIZE = (900,400)\n\nclass logClient(wx.Frame):\n    def __init__(self, parent, id, title):\n\n        wx.Frame.__init__(self, parent, id, title, size=WINDOW_SIZE)        \n\n        self.toolbar = self.CreateToolBar()\n        self.startLiveUpdate(None)\n\n        self.Show(True)\n\n    def startLiveUpdate(self, event):\n        self.createToolbarItem(\"Refresh\", \"refresh.jpg\", self.stopLiveUpdate)\n\n    def stopLiveUpdate(self, event):\n        self.createToolbarItem(\"Stop\", \"refresh2.jpg\", self.startLiveUpdate)\n\n\n    def createToolbarItem(self, label, imageName, method):\n        self.toolbar.RemoveTool(1)\n        self.toolbar.AddLabelTool(1, label, wx.Bitmap(imageName))\n        self.toolbar.Realize()\n        self.Bind(wx.EVT_TOOL, method, id=1)\n\n\nif __name__ == '__main__':\n    app = wx.App(False)\n    logClient(None, -1, \"Log Event Viewer\")\n    app.MainLoop()\n","747":"import wx\n\n########################################################################\nclass GenericPanel(wx.Panel):\n    \"\"\"\"\"\"\n\n    #----------------------------------------------------------------------\n    def __init__(self, parent, showChild=False):\n        \"\"\"Constructor\"\"\"\n        wx.Panel.__init__(self, parent)\n\n        if showChild:\n            btn = wx.Button(self, label=\"Show Child\")\n            btn.Bind(wx.EVT_BUTTON, self.onShowChild)\n\n    #----------------------------------------------------------------------\n    def onShowChild(self, event):\n        \"\"\"\"\"\"\n        frame = ChildFrame(self.GetParent())\n        frame.Show()\n\n########################################################################\nclass ChildFrame(wx.Frame):\n    \"\"\"\"\"\"\n\n    #----------------------------------------------------------------------\n    def __init__(self, parent):\n        \"\"\"Constructor\"\"\"\n        wx.Frame.__init__(self, parent, title=\"Child frame\", \n                          style=wx.FRAME_FLOAT_ON_PARENT|wx.DEFAULT_FRAME_STYLE)\n        panel = GenericPanel(self)\n        self.Show()\n\n########################################################################\nclass MainFrame(wx.Frame):\n    \"\"\"\"\"\"\n\n    #----------------------------------------------------------------------\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Frame.__init__(self, None, title=\"Main Frame\", size=(800,600))\n        panel = GenericPanel(self, showChild=True)\n        self.Show()\n\n#----------------------------------------------------------------------\nif __name__ == \"__main__\":\n    app = wx.App(False)\n    frame = MainFrame()\n    app.MainLoop()\n","748":"# algorithm\ndef average_point(rect, p1, p2, count=0):\n    returnArray = []\n    code_a = vcode(rect, p1)\n    code_b = vcode(rect, p2)\n    if math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y)) < EPS:\n        returnArray.append(count)\n        returnArray.append(p1)\n        returnArray.append(p2)\n        return returnArray\n    if not (code_a | code_b):\n        returnArray.append(count)\n        returnArray.append(p1)\n        returnArray.append(p2)\n        return returnArray\n    if code_a & code_b:\n        returnArray.append(count)\n        returnArray.append(p1)\n        returnArray.append(p2)\n        return returnArray\n    mid = Point((p2.x+p1.x)\/2.0, (p2.y+p1.y)\/2.0)\n    count += 1\n    returnArray = average_point(rect, p1, mid, count)\n    mid.x = mid.x+1\n    mid.y = mid.y+1\n    returnArray = average_point(rect, mid, p2, count)\n    return returnArray\n","749":"class FilePage(models.Model):\n    file = models.ForeignKey(File, on_delete=models.CASCADE, related_name='file_pages')\n    file_page_number = models.IntegerField()\n    patient = models.ManyToManyField(Patient, null=True, blank=True)\n    document_type = models.ManyToManyField(DocumentType, null=True, blank=True)\n","750":"for team in teams:\n    for event in team.client.rtm_read():\n        # process the event for that team\n","751":"with open('file.csv') as fh:\n    header = [h.strip() for h in fh.next().split(',')]\n    reader = csv.DictReader(fh, fieldnames=header)\n","752":"import os\nfor root, dirs, files in os.walk(r'path to open'):\n    for file in files:\n        if file.endswith('.log'):\n            with open(os.path.join(root, file)) as stream:\n                for lin in stream:\n                    # lin containg the content of each line in the file\n","753":"print eval('self.post.id') # Prints the value of self.post.id\n","754":">>> import urllib\n>>> from bs4 import BeautifulSoup\n>>> \n>>> url = \"http:\/\/aqicn.org\/city\/shenyang\/usconsulate\/json\"\n>>> soup = BeautifulSoup(urllib.urlopen(url), \"html.parser\")\n>>> soup.find(\"div\", class_=\"aqivalue\").get_text()\nu'171'\n","755":"def __RecursiveBinding(self, parent):\n    try:\n        parent.Bind(wx.EVT_CHAR, self.CharInputCallback)\n        parent.SetWindowStyleFlag(wx.WANTS_CHARS)\n        parent.Refresh()\n\n        children = parent.GetChildren()\n\n        if(children):\n            for child in children:\n                self.__RecursiveBinding(child)\n","756":"class MyTCPHandler(SocketServer.BaseRequestHandler):\n      def handle(self):\n            self.DriveSend = self.request.recv(1024).strip()\n            self.SteeringSend = self.request.recv(1024).strip()\n            MotorControl(self)\n            return (self.DriveSend,self.SteeringSend)\n\ndef MotorControl(motor_var):\n      print(motor_var.DriveSend)\n      print(motor_var.SteeringSend)\n      print('test')\n","757":"rows = []\nr = np.zeros((n,), dtype=np.int)\nrows.append(r)\nfor i in range(n):\n    r = np.zeros((n,), dtype=np.int)\n    r[i] = 1\n    rows.append(r)\n\nrows = np.array(rows)\n\narr = np.zeros((m,n), dtype=np.int)\nidx = [0]*m\nbase = np.array([(n+1)**j for j in range(m)])\nfor i in xrange(0, (n+1)**m):\n    idx = (i \/ base) % (n+1)\n    print rows[idx]\n","758":">>>lis = [\"foo\", \"foo\", \"bar\"]\n>>>lis=list(set(lis))\n>>>print(lis)\n['foo','bar']\n","759":"for every letter in the string:\n    check that it is one of \"0\", \"1\", \"2\", ..., \"9\"\n    if it is not, this is not a number, so return false\n\nif we are here, everything was satisfied, so return true\n","760":"tree_top = os.path.abspath(\n    os.path.expanduser(\n        os.path.expandvars(\n            sys.argv[1]\n        )\n    )\n)\n","761":">>> import csv\n>>>\n>>> with open('test.csv') as f:\n...     a = [{k: int(v) for k, v in row.items()}\n...          for row in csv.DictReader(f, skipinitialspace=True)]\n...\n>>> a\n[{'col2': 2, 'col3': 3, 'col1': 1}, {'col2': 5, 'col3': 6, 'col1': 4}]\n","762":"import os\n\ndef same_fs(file1, file2):\n    dev1 = os.stat(file1).st_dev\n    dev2 = os.stat(file2).st_dev\n    return dev1 == dev2\n","763":"Contest.objects.get(pk=id).image_set.annotate(score=Sum('vote__value')).order_by( 'score' )\n","764":"https:\/\/graph.facebook.com\/me\/friends will get a list of your friends then\nhttps:\/\/graph.facebook.com\/{{ID}}\/friends will get the friends of your friend with id {{ID}}\n","765":"for l in x:\n    print ', '.join(map(str, l))\n","766":" from operator import itemgetter\n    filenames = ['1.txt', '2.txt', '3.txt']\n    with open('output.txt', 'w') as outfile:\n        total_lines = []\n\n        for fname in filenames:\n            with open(fname) as infile:\n                total_lines += map(lambda s: s.strip(' '), infile.readlines())\n\n        for line in sorted(total_lines):\n            outfile.write(line)\n","767":"import numpy as np\nN = 100\n\nmean1, mean2, std1, std2 = 1, 5, 2, 3\nx0 = np.random.normal(loc=[mean1, mean2], scale=[std1, std2], size=(N, 2))\n\nmean3, mean4, std3, std4 = 2, -2, 1, 0.1\nx1 = np.random.normal(loc=[mean3, mean4], scale=[std3, std4], size=(N, 2))\n","768":">> a.im_self\n<__main__.test object at 0x782d0>\n>> a.im_self.b = 2\n>> obj.b\n2\n","769":"if re.search(r'(?<!\\.)\\.\\.(?!\\.)', s):\n    print 'Contain two dots'\n","770":"LOG.info('attr=%s, content=%s', dir(context), context.__dict__) \n","771":"authorList = ['Shakes.','Scott']\nalready_seen = {} # dict to keep track of what has been seen\n\nwith open('\/Users\/Adam\/Desktop\/Poetrylist.txt','w') as output_file:\n    with open('\/Users\/Adam\/Desktop\/2e.txt','r') as open_file:\n            the_whole_file = open_file.read()\n            for x in authorList:\n                start_position = 0 \n                while True:\n                   start_position = the_whole_file.find('<A>'+x+'<\/A>', start_position)\n                   if start_position < 0:\n                       break\n                   end_position = the_whole_file.find('<\/W>', start_position)\n                   author_data = the_whole_file[start_position:end_position+4]\n                   if author_data not in already_seen:\n                       output_file.write(author_data + \"\\n\")\n                       already_seen[author_data] = True\n                   start_position = end_position + 4\n","772":"   from matplotlib.font_manager import FontProperties\n\n   fontP = FontProperties()\n   fontP.set_size('small')\n   legend([plot1], \"title\", prop = fontP)\n","773":" a[3:5,4:7] += 1\n","774":"import wx\n\nclass Myframe(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None)\n        pan = wx.Panel(self)\n        self.cbx = wx.ComboBox(pan, -1, pos=(10,30),\n                                choices=[\"SEARCH\", \"SELECT\",\n                                         \"PASS\", \"LOG\", \"DATABASE\"],\n                                style=wx.CB_DROPDOWN )\n        self.cbx_2 = wx.ComboBox(pan, -1, pos=(10,60),\n                            choices=[\"LOOK\", \"GO\", \"FILL\"],\n                            style=wx.CB_DROPDOWN )\n\n        self.cbx.Bind(wx.EVT_MOUSEWHEEL, self.do_nothing)\n        self.cbx.Bind(wx.EVT_COMBOBOX, self.on_selection)\n        self.cbx_2.Bind(wx.EVT_MOUSEWHEEL, self.do_nothing)\n        self.cbx_2.Bind(wx.EVT_COMBOBOX, self.on_selection_2)\n\n    def on_selection(self, evt):\n        \"\"\"I do not want this to be executed inadvertently when \n         moving mousewheel\"\"\"\n        print self.cbx.GetStringSelection()\n\n    def on_selection_2(self, evt):\n        \"\"\"this is another combobox. dont mind if mouse move it or not\"\"\"\n        print self.cbx.GetStringSelection()\n\n    def do_nothing(self, evt):\n        print 'on events pit'\n\nif __name__ == \"__main__\":  \n    App = wx.PySimpleApp()\n    Myframe().Show()\n    App.MainLoop()\n","775":"def process_form_data(form_list):\n    form_data = [form.cleaned_data for form in form_list]\n\n    print form_data[0]\n    print form_data[1]\n\n    return form_data\nclass ReviewWizard(SessionWizardView):\n    template_name = \"review_form.html\"\n\n    def done(self, form_list, **kwargs):\n        form_data = process_form_data(form_list)\n\n        return render(\"done.html\", {\"form_data\": form_data})\n\n    def get_form_kwargs(self, step):\n        kwargs = super(ReviewWizard, self).get_form_kwargs(step)\n        kwargs['request'] = self.request\n        return kwargs\n","776":"try:\n    while True:\n        #Get the block hit events\n        blockHits = mc.events.pollBlockHits()\n        # if a block has been hit\n        if blockHits:\n            # for each block that has been hit\n            for blockHit in blockHits:\n                #Create and run the exploding block class in its own thread\n                # pass the position of the block, fuse time in seconds and blast radius\n                # threads are used so multiple exploding blocks can be created\n                explodingBlock = ExplodingBlock(blockHit.pos, 3, 3)\n                explodingBlock.daemon\n                explodingBlock.start()\n        time.sleep(0.1)\nexcept KeyboardInterrupt:\n    print(\"stopped\")\n","777":"dstk['dropflag'] = np.where(dstk.col <= criteria, 1, 0)\n","778":"#get auth cookie for sso\ndef getAuthCookie( self ):\n    buffer = BytesIO()\n    c = pycurl.Curl()\n    c.setopt(c.SSL_VERIFYPEER, False)\n    c.setopt(c.FOLLOWLOCATION, True)\n    c.setopt(c.TIMEOUT, 60)\n    c.setopt(c.USERPWD, self.user+\":\"+cred.getpasswd( self.encPasswd ) )\n    # curling sso.sample.com, which I assume promts a login dialog box and curl will set that with the varible provide above\n    c.setopt(c.URL, 'https:\/\/sso.sample.com')\n    # save the cookie to cookieDir\n    c.setopt(c.COOKIEJAR, self.cookieDir)\n    c.setopt(c.COOKIEFILE, self.cookieDir )\n    c.setopt(c.WRITEFUNCTION, buffer.write)\n    # perform all the previous curl commands\n    c.perform()\n    c.unsetopt(c.USERPWD)\n    # curl new site sample.com\n    c.setopt(c.URL, 'https:\/\/sample.com')\n    c.perform()\n    # save output as html var\n    html = str(buffer.getvalue())    \n\n----------------------------------------------------------\n# The following three if statments\n# if \"some string is found\" in varible-html: then do the lines indented lines that follow\nif \"RelayState\" in html:\n    # setup a regex to look for \"input type=\"hidden\" name=\"RelayState\" value=\"[and captures everything here this will become the RELAY var]\"\n    rex = re.compile( \"input type=\\\"hidden\\\" name=\\\"RelayState\\\" value=\\\"(.*)\\\"\" )\n    # this executes the regex expression on the html var\n    RELAY = rex.search( html ).groups()[0]\nif \"SAMLResponse\" in html:\n    rex = re.compile( \"input type=\\\"hidden\\\" name=\\\"SAMLResponse\\\" value=\\\"(.*)\\\"\" )\n    # same thing is happening here capturing the value as SAML\n    SAML =  rex.search( html ).groups()[0]\n    # contructing a new var with strings and the newly contructed vars\n    datastuff = {'SAMLResponse':SAML,'RelayState':RELAY,'redirect':'Redirect','show_button':'true'}\nif \"form method=\\\"POST\\\" action=\" in html:\n    rex = re.compile( \"form method=\\\"POST\\\" action=\\\"(.*)\\\" \" )\n    # again action=\"[postURL]\"\n    postUrl = rex.search( html ).groups()[0]\n---------------------------------------------------------- \n\n#post our saml obtained, get to our final dest\n    c.setopt(c.URL, postUrl ) # setup curl with url found above\n    c.setopt(c.POST, True) # use post method\n    c.setopt(c.POSTFIELDS, urlencode( datastuff )) # post fields found above with newly contructed vars\n    c.perform()\n    c.close()\n","779":">>> import glob\n>>> glob.glob(\"testdir\/*\")\n['testdir\/a.txt', 'testdir\/b.txt', 'testdir\/d.ext', 'testdir\/c.ExT2']\n>>> [f for f in glob.glob(\"testdir\/*\") if f.lower().endswith((\".ext\", \".ext2\"))]\n['testdir\/d.ext', 'testdir\/c.ExT2']\n","780":"with open(colA_file, \"rb\") as file_h:\n    noun_a = set(line.strip() for line in file_h)\n\nwith open(colB_file, \"rb\") as file_h:\n    noun_b = set(line.strip() for line in file_h)\n\nwith open(output_file, \"wb\") as outfile:\n    with open(input_file, \"rb\") as opened_input:\n        for line in opened_input:\n            split_line = line.split()\n            if split_line[0] in noun_a and split_line[1] in noun_b:\n                outfile.write(line)\n","781":"string $cons[] = `ls -type \"constraint\"`;\nfor ( $con in $cons ){\n    string $targetAttrString = ( $con+ \".target\" );\n    string $connections[] = `listConnections $targetAttrString`;\n    string $connectionsFlattened[] = stringArrayRemoveDuplicates($connections);\n    for ( $f in $connectionsFlattened )\n        if ( $f != $con )\n            print ( $f+ \" is a target\\n\" );\n}\n","782":"@pytest.fixture\ndef my_object(priority):\n    return MyObj(priority)    \n\ndef test_foo(my_object):\n    obj_1 = my_object(1)\n    assert something # 1\n    obj_2 = my_object(2)\n    assert something # 2\n","783":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\ncarr = np.array([[0,0,0,1],[0,0,1,1],[0,1,0,1]]) # RGBA color array\nax = plt.axes(projection='3d')\nh = ax.scatter([1,2,3],[1,2,3],[1,2,3], c=carr, edgecolors=carr)\nplt.show()\n","784":"import multiprocessing, copy\nfrom foo import really_expensive_to_compute_object\n\n## Create a really complicated object that is *hard* to initialise.\nT = really_expensive_to_compute_object(10) \n\ndef f(t, x):\n  return t.cheap_calculation(x)\n\nP = multiprocessing.Pool(processes=64)\nresults = P.map(f, (copy.deepcopy(T) for _ in range(1000000)), range(1000000))\n\nprint results\n","785":"d = {\n \"Laptop\": {\n            \"sony\": 1,\n            \"apple\": 2,\n            \"asus\": 5,\n          },\n \"Camera\": {\n            \"sony\": 2,\n            \"sumsung\": 1,\n            \"nikon\" : 4,\n           },\n}\nwith open(\"my.json\",\"w\") as f:\n    json.dump(d,f)\n","786":"for ext in extension_list:\n    mydict[ext] += 1\n","787":"import pandas as pd\nfrom collections import OrderedDict\n\nentity_dict = OrderedDict()\nentity_dict['bam'] = 1.0\nentity_dict['ham'] = 1.0\nentity_dict['jam'] = 0.82390874094431876\nentity_dict['kam'] = 1.0\nentity_dict['lam'] = 1.0\nentity_dict['mam'] = 0.82390874094431876\nentity_dict['pam'] = 1.0\nentity_dict['ram'] = 1.0\nentity_dict['sam'] = 0.82390874094431876\nentity_dict['tam'] = 1.0\n\nentity_df = pd.DataFrame.from_dict(entity_dict, orient='index').T \n\nprint(entity_df)\n","788":"import matplotlib as mlp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nx = y = np.arange(0, 1, 0.1)\nplt.plot(x, y, label='my function')\nplt.title('title')\nax.set_xlabel('xAxis')\nax.set_ylabel('yAxis')\n\n#print fig.get_size_inches()\nfig.set_size_inches(8, 6, forward=True)\nfig.tight_layout()\nplt.savefig('exact_size_test.png', dpi=100)\n","789":"import requests\nfrom multiprocessing import Pool\n\ndef process_html(url):\n    url_response = requests.get(url)\n    text = url_response.text\n    print(text[:500])\n    print('-' * 30)\n\nurls = [\n    'http:\/\/www.apple.com',\n    'http:\/\/www.yahoo.com',\n    'http:\/\/www.google.com',\n    'http:\/\/www.apple.com',\n    'http:\/\/www.yahoo.com',\n    'http:\/\/www.google.com',\n    'http:\/\/www.apple.com',\n    'http:\/\/www.yahoo.com',\n    'http:\/\/www.google.com',\n]\n\nwith Pool(None) as p:  #None => uses cpu.count()\n    p.map(process_html, urls)  #This blocks until all return values from process_html() have been collected.\n","790":"a = {'aaa': 1, 'bbb': 2, 'ccc': 3}\nb = ['aaa', 'bbb', 'ddd', 'eee']\nc = dict([(x, a.get(x, 0)) for x in a])\n\nprint \"%(aaa)s %(bbb)s %(ccc)s\" % c\n","791":"while any(flips_left.itervalues()):\n","792":"import re    \nline_inp = \"12.abd23yahoo 04\/44 231\"\nr = re.compile('^(.*[a-zA-Z])')\nm = re.match(r, line_inp)\nline_out = m.group(0) # 12.abd23yahoo\n","793":"def balanceable_rec(L, R, weights):\n\n    print(\"L =\", L, \"  R =\", R, \"  weights =\", weights)\n\n    if (L == 0  or  L==R  or L in weights):\n        return True\n    if (len(weights) == 0):\n        return False\n\n    w = weights.pop(0)\n    if balanceable_rec(L + w, R, weights[:]):  return True\n    if balanceable_rec(L, R, weights[:]):      return True\n    if balanceable_rec(L, R + w, weights[:]):  return True\n\n    return False\n","794":"import numpy as np\nimport pylab as pl\n\ndef threshold_plot(x, y, th, fmt_lo, fmt_hi):\n    idx = np.where(np.diff(y > th))[0]\n    x_insert = x[idx] + (th - y[idx]) \/ (y[idx+1] - y[idx]) * (x[idx+1] - x[idx])\n    y_insert = np.full_like(x_insert, th)\n\n    xn, yn = np.insert(x, idx+1, x_insert), np.insert(y, idx+1, y_insert)\n\n    mask = yn < th\n    pl.plot(np.ma.masked_where(mask, xn), np.ma.masked_where(mask, yn), fmt_hi, lw=2)\n\n    mask = yn > th\n    pl.plot(np.ma.masked_where(mask, xn), np.ma.masked_where(mask, yn), fmt_lo)\n    pl.axhline(th, color=\"black\", linestyle=\"--\")\n\nx = np.linspace(0, 3 * np.pi, 50)\ny = np.random.rand(len(x))\nthreshold_plot(x, y, 0.7, \"b\", \"r\")\n","795":"class Something:\n    def __init__(self):\n        self.parent = None\n\n    def setParent(self, parent=None):\n        self.parent = self if not parent else parent\n\ninst = Something()\nprint inst # prints <__main__.Something instance at 0xblah>\nprint inst.parent # prints None\ninst.setParent()\nprint inst.parent # prints <__main__.Something instance at 0xblah>\ninst.setParent(inst)\nprint inst.parent # prints <__main__.Something instance at 0xblah>\n","796":"queryresults = serializers.serialize(\"python\", queryset, fields=('jobmst_id', 'jobmst_prntid', 'jobmst_name', 'jobdtl_cmd'))\n#                                                                                                                    here--^\n","797":"import matplotlib.pyplot as plt\nfrom matplotlib.path import Path\nimport matplotlib.patches as patches\n\nimport numpy as np\nimport math\nimport time\n\nverts = np.array([[0.,0.],[0.,1.],[1.,1.],[1.,0.],[0.,0.]])\n\ncodes = [Path.MOVETO,\n         Path.LINETO,\n         Path.LINETO,\n         Path.LINETO,\n         Path.CLOSEPOLY,\n         ]\n\npath = Path(verts, codes)\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.set_xlim(-2,2)\nax.set_ylim(-2,2)\nplt.show(block=False)\ni=0.0\nwhile i<100:\n#for i in range(100):\n    ax.clear()\n    x=math.sin(i)\n    y=math.cos(i)\n\n    print x, y\n\n    verts2=np.copy(verts)\n    for j in range(len(verts)):\n        verts2[j]=verts[j]+np.array([x,y])\n    path = Path(verts2, codes)\n    patch = patches.PathPatch(path, facecolor='orange', lw=2)\n    ax.add_patch(patch)\n    plt.draw()\n    i+=0.1\n","798":"boost::python::scope().attr(\"Pi\") = Pi; \n","799":"#!\/usr\/bin\/python\nfrom reportlab.graphics.charts.lineplots import LinePlot\nfrom reportlab.graphics.shapes import Drawing\nfrom reportlab.lib import colors\nfrom random import randint\nfrom datetime import date, timedelta\n\n# Generate some testdata\ndata = [\n    [(x,randint(90,100)) for x in range(0,2001,100)],\n    [(x,randint(30,80)) for x in range(0,2001,100)],\n    [(x,randint(5,20)) for x in range(0,2001,100)],\n    ]\n\n# Create the drawing and the lineplot\ndrawing = Drawing(400, 200)\nlp = LinePlot()\nlp.x = 50\nlp.y = 50\nlp.height = 125\nlp.width = 300\nlp._inFill = 1\nlp.data = data\nfor i in range(len(data)):\n    lp.lines[i].strokeColor = colors.toColor('hsl(%s,80%%,40%%)'%(i*60))\n\n# Specify where the labels should be\nlp.xValueAxis.valueSteps = [5, 500, 1402, 1988]\n# Create a formatter that takes the value and format it however you like.\ndef formatter(val):\n    #return val\n    #return 'x=%s'%val\n    return (date(2010,1,1) + timedelta(val)).strftime('%Y-%m-%d')\n\n# Use the formatter\nlp.xValueAxis.labelTextFormat = formatter\ndrawing.add(lp)\n\nfrom reportlab.graphics import renderPDF\nrenderPDF.drawToFile(drawing, 'example.pdf', 'lineplot with dates')\n","800":"from billiard import current_process\nfrom celery import task\n\n@task\ndef print_info():\n    # This will print an int in [0..concurrency[\n    print current_process().index\n","801":"l1, = plt.plot(x_series, y_series_1, 'r-')\nl2, = plt.plot(x_series, y_series_2, 'c--')\n\n# Some time later...\nl1.set_color('b')\nl2.set_color('g')\n","802":"data = json.loads('[1, 2, 3, 4]')\n","803":"str_list = str1.split()\nnum = len(str_list)\nall_lines = [str_list[i:i+14] for i in range(0, num, 14)]\nall_lines = [\" \".join(line)+\"\\n\" for line in all_lines]\nfp = open(\"outfile.txt\", 'w')\nfp.writelines(all_lines)\nfp.close()\n","804":">>> a = [1,4,6,2,3]\n>>> [b[0] for b in sorted(enumerate(a),key=lambda i:i[1])]\n[0, 3, 4, 1, 2]\n","805":"import enum\n\nclass Color(enum.IntEnum):\n    green = 1\n    blue = 2\n    red = 3\n    yellow = 4\n\ncolor_code = 4\n# cast to enum\ncolor = Color(color_code)\n\n# cast back to int\ncolor_code = int(color)\n","806":"SeasonIdentifier =  ['Summer' if x in Summer else 'Winter' if x in Winter else 'Other' for x in GivenMonths]\n","807":"import matplotlib.pyplot as plt\nimport matplotlib.patheffects as pe\n\nplt.figure()\nax = plt.gca()\ntxt = ax.text(0.5, 0.5, \"test\",\n              size=20,\n              color='white',\n              path_effects=[pe.withStroke(linewidth=4, foreground=\"red\")])\nplt.show()\n","808":"root = Tk()\n\ndef move_window(event):\n    root.geometry('+{0}+{1}'.format(event.x_root, event.y_root))\n\nroot.overrideredirect(True) # turns off title bar, geometry\nroot.geometry('400x100+200+200') # set new geometry\n\n# make a frame for the title bar\ntitle_bar = Frame(root, bg='white', relief='raised', bd=2)\n\n# put a close button on the title bar\nclose_button = Button(title_bar, text='X', command=root.destroy)\n\n# a canvas for the main area of the window\nwindow = Canvas(root, bg='black')\n\n# pack the widgets\ntitle_bar.pack(expand=1, fill=X)\nclose_button.pack(side=RIGHT)\nwindow.pack(expand=1, fill=BOTH)\n\n# bind title bar motion to the move window function\ntitle_bar.bind('<B1-Motion>', move_window)\n\nroot.mainloop()\n","809":"VALUES = {-4: 0.1, -3: 0.2, -2: 0.3, -1: 0.4,\n    0: 0.5, 1: 0.6, 2: 0.7, 3:  0.8, 4: 0.9}\n\ndef sum_part(start_point, diff):\n    sum = 0.0\n    for i in range(start_point - diff, start_point + diff + 1):\n        try:\n            sum += VALUES[i]\n        except KeyError:\n            pass\n        #print('%d: %.2f' % (i, sum))\n    return sum\n\ndef test_sum(start_point, diff):\n    sum = sum_part(start_point, diff)\n    print('sum(%d, %d): %.2f' % (start_point, diff, sum))\n\ntest_sum(1, 3)\n","810":">>> class foo(object):\n    def __init__(self, val):\n        self.val = val\n\n    def __str__(self):\n        return \"str: %s\" % self.val\n    def __unicode__(self):\n        return \"unicode: %s\" % self.val\n\n\n>>> f = foo(\"bar\")\n>>> u'%s' % f\nu'unicode: bar'\n>>> unicode(f)\nu'unicode: bar'\n>>> '%s' % f\n'str: bar'\n","811":"f = open(\"template.file\", \"r\")\nt = open(\"File1\").read()\n\nfor line in f:\n    if line.rstrip() in t:\n        print \"found \" + line\n    else:\n        print line + \" Not found\"\n","812":"$Env:PY_PYTHON = 2\n","813":"    def download(request):\n        #Get object(file) using swiftclient\n        url = str(request.values['url'])\n        token = str(request.values['token'])\n        container = str(request.values['container'])\n        name = str(request.values['name'])\n        header, data = Client.get_object(url, token, container, object_name)\n\n        #Send object data to browser\n        result = data\n        response = Response(result)\n        response.headers['Content-Type'] = content['header']['content-type']\n        response.headers['Content-Disposition'] = 'attachment; filename=\"'+filename+'\"'\n        return response\n","814":"tempfile = request.POST['file']\nfile_path = 'uploaded_files\/' + tempfile.filename # for the original filename\npermanent_file = open( file_path, 'wb')\nshutil.copyfileobj(tempfile.file, permanent_file)\n","815":"rows = ...# your source data\n\ndef date_to_sortable_string(date):\n  # use datetime package to convert string to sortable date.\n  pass\n\n# Assume x[0] === patient_id and x[1] === encounter date\n\n# Sort by patient_id and date\nrows_sorted = sorted(rows, key=lambda x: \"%0.5d-%s\" % (x[0], date_to_sortable_string(x[1])))\n\nfor row in rows_sorted:\n  print row\n","816":"getattr(getattr(a, \"b\"), \"c\")\n","817":"writer = csv.writer(f, lineterminator=\"\\n\")\n","818":"# mylogger.py\nfrom twisted.python import log\n\ndef logger():\n    return log.PythonLoggingObserver().emit\n","819":"os.chdir(os.path.dirname(__file__))\n","820":"from threading import Thread\n\nt1 = Thread(target = firstFunction)\nt2 = Thread(target = secondFunction)\n\nt1.start()\nt2.start()\n","821":"from urllib import urlencode\nimport requests\nparams = {'search': '7420 Westlake Ter #1210 20817'}\nsearch_url = 'http:\/\/www.trulia.com\/submit_search\/?'\nurl = search_url + urlencode(params)\nr = requests.get(url)\n# now you get your desired response.\n","822":"from Tkinter import *\nimport time\n\nclass App():\n    def __init__(self):\n        self.window = Tk()\n        self.root = Frame(self.window, height=200,width=200)\n        self.root.pack()\n        self.root.pack_propagate(0)\n        self.window.title('Timer')\n        self.label = Label(text=\"\")\n        self.label.pack()\n        self.sec = 11\n        self.timerupdate()\n        self.root.mainloop()\n    def timerupdate(self):\n        if self.sec!=0:\n            self.sec-=1\n            self.label.configure(text=self.sec)\n            self.root.after(1000, self.timerupdate)\n        if self.sec == 0:\n          self.sec = 11\n\napp=App()\napp.mainloop()\n","823":">>> L = []\n>>> L[0] = 'a'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list assignment index out of range\n","824":"from itertools import repeat, cycle\n\nfor i in repeat('abcd'): print(i)\n# abcd, abcd, abcd, abcd, ...\n\nfor i in cycle('abcd'): print(i)\n# a, b, c, d, a, b, c, d, ...\n","825":"import sys\ngetattr(sys.modules[__name__], 'A')\n","826":"class ExampleModel(ndb.Model):\n    DEFAULT_CREATED = datetime(2000, 1, 1)\n    property1 = ndb.StringProperty()\n    property2 = ndb.StringProperty()\n    created = ndb.DateTimeProperty(auto_now_add=True)\n\n    def created2(self):\n        if self.created == DEFAULT_CREATED:\n            return None\n        else:\n            return self.created\n\n    def created2(self, value):\n        if value is None:\n            self.created = DEFAULT_CREATED\n        else:\n            self.value = value\n","827":"try:\n    from unittest.mock import patch\nexcept ImportError:\n    # Python < 3.4\n    from mock import patch\n\nwith patch('module.class1') as class1_mock:\n    mocked_instance = class1_mock.return_value\n    mocked_instance.method_to_be_called.return_value = 'Test return value'\n\n    method()\n\n    mocked_instance.method_to_be_called.assert_called_with('Foo', 'bar')\n","828":"Example:\nvar1 = '12591'\nvar2 = 'CNB'\nvar3 = 'YPR'\nvar4 = '2A'\nvar5 = 'GN'\nvar6 = '1'\nvar7 = '8'\nvar8 = '3A'\n\nkey = (\n    var1 + \"_\" + var2 + \"_\" + var3 + \"_\" + var4 + \"_\" + var5 + \"_\" + var6 + \"-\" + var7 + \"~\" +\n    var1 + \"_\" + var2 + \"_\" + var3 + \"_\" + var8 + \"_\" + var5 + \"_\" + var6 + \"-\" + var7 + \"~\")\n\nprint key\n","829":"min(max(x,lo),hi)\n","830":"from sqlalchemy import *\nfrom sqlalchemy.orm import *\nfrom sqlalchemy.ext.declarative import declarative_base\nimport random\n\nBase= declarative_base()\n\nclass Customer(Base):\n    __tablename__ = 'customer'\n    id = Column(Integer, primary_key=True)\n    name = Column(Unicode)\n    orders = relationship(\"Order\", backref=\"customer\")\n\nclass Order(Base):\n    __tablename__ = \"order\"\n\n    id = Column(Integer, primary_key=True)\n    customer_id= Column(Integer, ForeignKey('customer.id'))\n    amount = Column(Integer)\n\ne = create_engine(\"sqlite:\/\/\", echo=True)\nBase.metadata.create_all(e)\n\nsession = Session(e)\n\nsession.add_all([\n    Customer(name=\"c%d\" % i, orders=[\n        Order(amount=random.randint(10, 100))\n        for j in xrange(random.randint(0, 5))\n    ])\n    for i in xrange(100)\n])\n\namount_sum = func.sum(Order.amount).label('totalamount')\namount = session.query(Order.customer_id, amount_sum).\\\n            group_by(Order.customer_id).\\\n            order_by(amount_sum.desc()).\\\n            limit(10).\\\n            subquery()\n\nfor a, b in session.query(Customer, amount.c.totalamount).\\\n    join(amount, amount.c.customer_id==Customer.id):\n    print a.name, b\n","831":">>> a = [(u'we', 'PRP'), (u'saw', 'VBD'), (u'you', 'PRP'), (u'bruh', 'VBP'), (u'.', '.')]\n>>> import operator\n>>> a.sort(key = operator.itemgetter(1))\n>>> a\n[(u'.', '.'), (u'we', 'PRP'), (u'you', 'PRP'), (u'saw', 'VBD'), (u'bruh', 'VBP')]\n","832":"# Starts encoding in a subprocess\nproc = subprocess.Popen(['ffmpeg', '-i' 'myinput', 'myoutput'])\n\nduration = 3\nsleeptime = 0\nwhile proc.poll() is None and sleeptime < 3: \n    # Wait for the specific duration or for the process to finish\n    sleep(1)\n    sleeptime += 1\n\n# If process is not terminated\nif proc.poll() is None:\n    # Cancels process, waits for it to complete\n    proc.communicate(\"q\")\n","833":"def __init__(self, **kwargs):\n    self.__dict__.update( kwargs )\n","834":"import socket\n\naddress = ('', 7777)\nserver_socket = socket.socket(AF_INET, SOCK_STREAM)\nserver_socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)\ntry:\n    server_socket.bind(address)\nexcept Exception, e:\n    print colored(\"Address already in use\", 'red')\n\nserver_socket.listen(2)\n\nprint colored(\"Socket ready\", 'blue')\nwhile True:\n    client_socket, addr = server_socket.accept()\n    hostIP = addr[0]\n    port = addr[1]\n\n    try:\n        host = gethostbyaddr(hostIP)[0]\n    except:\n        host = hostIP\n    print colored(\"Got connection from: \" + host, 'blue')\n    while True:\n        try:\n            recv_data = client_socket.recv(2048)\n            if not recv_data:\n                break\n            print(\"Got: \" + recv_data)\n        except socket.error, e:\n            print \"nothing\"\n            recv_data = \"\" # this is because I test what it is later, but that's irrevlevant.\n","835":"virtualenv --python=\/path\/to\/python\/2.6 virtualenvname\n","836":"s = 'This is the                                     Sample text I need to get       all this               but only with single spaces'\n' '.join(s.split())\n#'This is the Sample text I need to get all this but only with single spaces'\n","837":">>> import struct\n>>> from collections import namedtuple\n>>> record = 'raymond   \\x32\\x12\\x08\\x01\\x08'\n>>> Student = namedtuple('Student', 'name serialnum school gradelevel')\n>>> Student._asdict(Student._make(struct.unpack('<10sHHb', record)))\n{'school': 264, 'gradelevel': 8, 'name': 'raymond   ', 'serialnum': 4658}\n>>> \n","838":">>> def f(x):\n...     result = []\n...     for part in x.split(','):\n...         if '-' in part:\n...             a, b = part.split('-')\n...             a, b = int(a), int(b)\n...             result.extend(range(a, b + 1))\n...         else:\n...             a = int(part)\n...             result.append(a)\n...     return result\n... \n>>> f('1,2,5-7,10')\n[1, 2, 5, 6, 7, 10]\n","839":"output = {}\n\nin_list = False\ncurrent_name = None\n\nfor line in open('actors.list'):\n    if in_list:\n        if line.startswith('-'):\n            break\n        if '\\t' not in line:\n            continue\n        name, title = line.split('\\t', 1)\n        name = name.strip()\n        title = title.strip()\n        if name:\n            if ',' in name:\n                name = name.split(',', 1)\n                name[0] = name[0].rstrip()\n                name[1] = name[1].lstrip()\n                name.reverse()\n                name = ' '.join(name)\n            current_name = name\n        if title:\n            output.setdefault(\n                current_name, []).append(title)\n    else:\n        if line.startswith('-'):\n            in_list = True\n","840":"from PyQt4.QtCore import *\nfrom PyQt4.QtGui import *\n\n\nclass AppForm(QMainWindow):\n    def __init__(self, parent=None):\n        QMainWindow.__init__(self, parent)\n        self.create_main_frame()       \n\n    def create_main_frame(self):        \n        page = QWidget()        \n\n        self.button = QPushButton('joy', page)\n        self.edit1 = QLineEdit()\n        self.edit2 = QLineEdit()\n\n        vbox1 = QVBoxLayout()\n        vbox1.addWidget(self.edit1)\n        vbox1.addWidget(self.edit2)\n        vbox1.addWidget(self.button)\n        page.setLayout(vbox1)\n        self.setCentralWidget(page)\n\n        self.connect(self.button, SIGNAL(\"clicked()\"), self.clicked)\n\n    def clicked(self):\n        QMessageBox.about(self, \"My message box\", \"Text1 = %s, Text2 = %s\" % (\n            self.edit1.text(), self.edit2.text()))\n\n\n\nif __name__ == \"__main__\":\n    import sys\n    app = QApplication(sys.argv)\n    form = AppForm()\n    form.show()\n    app.exec_()\n","841":"You are trying to add a non-nullable field 'name' to module without a default; we can't do that (the database needs something to populate existing rows).\nPlease select a fix:\n 1) Provide a one-off default now (will be set on all existing rows)\n 2) Quit, and let me add a default in models.py\nSelect an option: \n","842":"q1 = pyes.TermQuery(\"title\", \"rainbow\")\nq2 = pyes.TermQuery(\"artist\", \"kermit\")\nquery = BooleanQuery(must=[q1, q2])\nsearch = pyes.Search(query)\nresults = conn.search(search, index_name, doc_type)\n","843":">>> chainpos.append((chainid,x, y, z))\n>>> chainpos \n[('A', 1.719, -25.217, 8.694), ('A', 2.934, -21.997, 7.084)]\n>>> import itertools\n>>> for id, coor in itertools.groupby(chainpos,lambda x:x[0]):\n...     print(id, [c[1:] for c in coor])\n","844":"perl -pe 'print \"$ARGV,\"' a b c\n","845":">>> s = \"Hello, I am 12! I like plankton but I don't like Baseball.\"\n>>> index = 34 #points to the 't' in 'but'\n>>> index_of_2nd_I = s.rfind('I', 0, index)\n>>>\n>>> index_of_2nd_I\n16\n","846":"class MyDealModelView(ModelView):\n    form_excluded_columns = ('merchant_id',)\n\n    def on_model_change(form, model, is_created):\n        model.merchant_id = login.current_user.merchant_id;\n","847":"doodahs = (\n    (0, \"FOO\"),\n    (257, \"BAR\"),\n    (258, \"FISH\"),\n    (279, \"MOOSE\"),\n    (280, \"Darth Vader\"),\n    (65535, \"Death to all newbies\")\n)\n","848":"badwords = [\"love\", \"peace\", \"hello\"]\nmessage = \"hi I love you\"\nfor badword in badwords:\n  if (badword in message.lower()):\n   print \"oh thats bad \/ban\"\n","849":"Z_level, XD1, XD2, ... = list_sample\n","850":"import os\n\nTEST_FILENAME = os.path.join(os.path.dirname(__file__), 'test.txt')\n","851":"GPIO.setmode(GPIO.BCM)\nGPIO.Setup (17, GPIO.IN, pull_up_down = GPIO.PUD_DOWN)\nGPIO.Setup (18, GPIO.IN, pull_up_down = GPIO.PUD_DOWN)\nGPIO.Setup (21, GPIO.IN, Pull_up_down = GPIO.PUD_DOWN)\nGPIO.Setup (22, GPIO.IN, pull_up_down = GPIO.PUD_DOWN)\nGPIO.setup (23, GPIO.IN, pull_up_down = GPIO.PUD_DOWN)\nGPIO.Setup (24, GPIO.IN, pull_up_down = GPIO.PUD_DOWN) \n\nwhile True:\n    try:\n        if GPIO.input(17) == 1: # all `if` should be lowercase and the `try` \n            writeTexts(+1,-370,55) # don't need `()` in if statements.\n            writeTexts(today + difference1,-100,-200)\n        if GPIO.input(18) == 1:\n            WriteTexts(-1,-370,55)\n        if GPIO.input(21) == 1:\n            writeTexts(0,-370,55)\n        if GPIO.Input(22) == 1:\n            writeTexts(+1,280,55)\n        if GPIO.input(23) == 1:\n            writeTexts(-1,280,55)\n            writeTexts(today + difference1,550,-200)\n        if GPIO.input(24) == 1:\n            writeTexts(0,280,55)\n            sleep(.01)\n    except KeyboardInterrupt: # missing `:`\n        exit()\n\nGPIO.Cleanup ()\n","852":"import math, random\nname1 = \"\"\nname2 = \"\"\nstrength1 = 0\nstrength2 = 0\nskill1 = 0\nskill2 = 0\n\ndef Character1():\n    global strength1, skill1, name1\n    name1 = raw_input(\"Please enter a name for the first character : \")\n    strength1 = math.floor(random.randint(1,12)\/random.randint(1,4))+10\n    skill1 = math.floor(random.randint(1,12)\/random.randint(1,4))+10\n\ndef Character2():\n    global strength2, skill2, name2\n    name2 = raw_input(\"Please enter a name for the second character : \")\n    strength2 = math.floor(random.randint(1,12)\/random.randint(1,4))+10\n    skill2 = math.floor(random.randint(1,12)\/random.randint(1,4))+10\n\ndef printStats():\n    print \"The first character is called \" + name1 + \" and has a skill level of \" + str(skill1) + \" and a strength level of \" + str(strength1) \n    print \"The first character is called \" + name2 + \" and has a skill level of \" + str(skill2) + \" and a strength level of \" + str(strength2) \n\nCharacter1()\nCharacter2()\nprintStats()\n","853":"import os\npath = '\/path\/to\/repo' # or use input from command line\nsavedPath = os.getcwd()\n\n# do init stuff\n\nos.chdir(path)\n\n# do repo stuff\nrepo_path = '.'\nrepo_url = 'git@github.com:username\/myfolder.git'\nrepo = Gittle(repo_path, origin_uri=repo_url)\n\nprint repo.modified_files\n\n# finish repo stuff\n\nos.chdir(savedPath)\n\n# do other stuff\n","854":"#!\/usr\/bin\/python\n\nfrom scrapy.cmdline import execute\nexecute()\n","855":"try:\n  import readline\nexcept ImportError:\n  import pyreadline as readline\n","856":"from django.core.management import call_command\ncall_command('loaddata', 'data.json', stdout=out, verbosity=0)\n","857":">>> lst = []\n>>>\n>>> for i in xrange(4):\n...     lst.append({})\n...     lst[i]['a'] = False\n...\n>>> any(d['a'] for d in lst)\nFalse\n\n>>> lst[1]['a'] = True\n>>> any(d['a'] for d in lst)\nTrue\n","858":"def deleteList(listo1, listo2):\n    for insidelist in listo1:\n        if listo2[0] == insidelist[0]:\n             listo1.remove(insidelist)\n    print(listo1)\n\ndef main():\n    deleteList([[1000, 1],[2000, 2],[3000, 3]], [1000, 77])\n","859":"import matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\n\nclass InteractiveCircle(object):\n    def __init__(self):\n        self.fig, self.ax = plt.subplots()\n        self.ax.axis('equal')\n\n        self.circ = Circle((0.5, 0.5), 0.1)\n        self.ax.add_artist(self.circ)\n        self.ax.set_title('Click to move the circle')\n\n        self.fig.canvas.mpl_connect('button_press_event', self.on_click)\n\n    def on_click(self, event):\n        if event.inaxes is None:\n            return\n        self.circ.center = event.xdata, event.ydata\n        self.fig.canvas.draw()\n\n    def show(self):\n        plt.show()\n\n\nInteractiveCircle().show()\n","860":"from IPython import embed\nembed()\n","861":"# 'x' is [[1, 1, 1]\n#         [1, 1, 1]]\ntf.reduce_sum(x) ==> 6\ntf.reduce_sum(x, 0) ==> [2, 2, 2]\ntf.reduce_sum(x, 1) ==> [3, 3]\ntf.reduce_sum(x, 1, keep_dims=True) ==> [[3], [3]]\ntf.reduce_sum(x, [0, 1]) ==> 6\n","862":"$ python2.7\n>>> def f():\n...     temp = 'a' * 10\n...\n>>> f.__code__.co_consts\n(None, 'a', 10, 'aaaaaaaaaa')\n>>> import dis\n>>> dis.dis(f)\n  2           0 LOAD_CONST               3 ('aaaaaaaaaa')\n              3 STORE_FAST               0 (temp)\n              6 LOAD_CONST               0 (None)\n              9 RETURN_VALUE\n","863":"# Any reference properties not loaded yet\ncustomer = Customer.get_by_id(1)\nprint customer.name\nprint customer.address\n\n# Assuming customer.order is a ReferenceProperty, now is when it\n# would be loaded from the datastore.\nprint customer.order.created_at\n","864":"In [2]:\ndf = pd.DataFrame({'a': [1,2,3,4,5,6,7],\n                   'b': [1,1,1,0,0,0,0]})\n\u200b\ngrouped = df.groupby('b')\ngrouped.apply(lambda x: x.sample(frac=0.3))\n\nOut[2]:\n     a  b\nb        \n0 6  7  0\n1 2  3  1\n","865":"class Article(models.Model):\n    ....\n\n    class Meta:\n        ordering = ['surname', 'name']\n","866":"def replace(thelist,a,b):\n\n assert type(thelist)==list, `thelist` + ' is not a list'\n\n assert type(a)==int, `a` + ' is not an integer'\n\n assert type(b)==int, `b` + ' is not an integer'\n if len(thelist)==0:\n     return []\n return ([b] if thelist[0]==a else [thelist[0]])+replace(thelist[1:],a,b)\n","867":"\nimport ast\n\nclass LatexVisitor(ast.NodeVisitor):\n\n    def prec(self, n):\n        return getattr(self, 'prec_'+n.__class__.__name__, getattr(self, 'generic_prec'))(n)\n\n    def visit_Call(self, n):\n        func = self.visit(n.func)\n        args = ', '.join(map(self.visit, n.args))\n        if func == 'sqrt':\n            return '\\sqrt{%s}' % args\n        else:\n            return r'\\operatorname{%s}\\left(%s\\right)' % (func, args)\n\n    def prec_Call(self, n):\n        return 1000\n\n    def visit_Name(self, n):\n        return n.id\n\n    def prec_Name(self, n):\n        return 1000\n\n    def visit_UnaryOp(self, n):\n        if self.prec(n.op) > self.prec(n.operand):\n            return r'%s \\left(%s\\right)' % (self.visit(n.op), self.visit(n.operand))\n        else:\n            return r'%s %s' % (self.visit(n.op), self.visit(n.operand))\n\n    def prec_UnaryOp(self, n):\n        return self.prec(n.op)\n\n    def visit_BinOp(self, n):\n        if self.prec(n.op) > self.prec(n.left):\n            left = r'\\left(%s\\right)' % self.visit(n.left)\n        else:\n            left = self.visit(n.left)\n        if self.prec(n.op) > self.prec(n.right):\n            right = r'\\left(%s\\right)' % self.visit(n.right)\n        else:\n            right = self.visit(n.right)\n        if isinstance(n.op, ast.Div):\n            return r'\\frac{%s}{%s}' % (self.visit(n.left), self.visit(n.right))\n        elif isinstance(n.op, ast.FloorDiv):\n            return r'\\left\\lfloor\\frac{%s}{%s}\\right\\rfloor' % (self.visit(n.left), self.visit(n.right))\n        elif isinstance(n.op, ast.Pow):\n            return r'%s^{%s}' % (left, self.visit(n.right))\n        else:\n            return r'%s %s %s' % (left, self.visit(n.op), right)\n\n    def prec_BinOp(self, n):\n        return self.prec(n.op)\n\n    def visit_Sub(self, n):\n        return '-'\n\n    def prec_Sub(self, n):\n        return 300\n\n    def visit_Add(self, n):\n        return '+'\n\n    def prec_Add(self, n):\n        return 300\n\n    def visit_Mult(self, n):\n        return '\\\\;'\n\n    def prec_Mult(self, n):\n        return 400\n\n    def visit_Mod(self, n):\n        return '\\\\bmod'\n\n    def prec_Mod(self, n):\n        return 500\n\n    def prec_Pow(self, n):\n        return 700\n\n    def prec_Div(self, n):\n        return 400\n\n    def prec_FloorDiv(self, n):\n        return 400\n\n    def visit_LShift(self, n):\n        return '\\\\operatorname{shiftLeft}'\n\n    def visit_RShift(self, n):\n        return '\\\\operatorname{shiftRight}'\n\n    def visit_BitOr(self, n):\n        return '\\\\operatorname{or}'\n\n    def visit_BitXor(self, n):\n        return '\\\\operatorname{xor}'\n\n    def visit_BitAnd(self, n):\n        return '\\\\operatorname{and}'\n\n    def visit_Invert(self, n):\n        return '\\\\operatorname{invert}'\n\n    def prec_Invert(self, n):\n        return 800\n\n    def visit_Not(self, n):\n        return '\\\\neg'\n\n    def prec_Not(self, n):\n        return 800\n\n    def visit_UAdd(self, n):\n        return '+'\n\n    def prec_UAdd(self, n):\n        return 800\n\n    def visit_USub(self, n):\n        return '-'\n\n    def prec_USub(self, n):\n        return 800\n    def visit_Num(self, n):\n        return str(n.n)\n\n    def prec_Num(self, n):\n        return 1000\n\n    def generic_visit(self, n):\n        if isinstance(n, ast.AST):\n            return r'' % (n.__class__.__name__, ', '.join(map(self.visit, [getattr(n, f) for f in n._fields])))\n        else:\n            return str(n)\n\n    def generic_prec(self, n):\n        return 0\n\ndef py2tex(expr):\n    pt = ast.parse(expr)\n    return LatexVisitor().visit(pt.body[0].value)\n\n","868":"def test_view(request):\n  return HttpResponseRedirect('\/test\/%s\/%s\/%s\/' % request.POST['first'],\n                                                  request.POST['second'],\n                                                  request.POST['third])\n","869":"import string\n\nclass X(object):\n  def __getattr__(self, name):\n    if name in string.lowercase and len(name) == 1:\n      def call_into_module(arg):\n        return module.do(arg, name)\n      return call_into_module\n\n    return super(X, self).__getattr__(name)\n","870":"In [199]: df2.reset_index().to_dict(orient='list')\nOut[199]: \n{'date': ['2014-10-1', '2014-10-2', '2014-10-3', '2014-10-4', '2014-10-5'],\n 'foo': [8, 1, 8, 8, 1],\n 'temp': [10, 10, 8, 3, 10],\n 'time': [1, 2, 3, 4, 5]}\n","871":"def n_factors(x, lower, upper):\n    int_counter = 0 # integer counter\n    div_count = 0 # divisor counter\n    for i in range(lower, upper+1):\n        for j in range(1, i + 1):\n            if (i%j)==0:\n                div_count += 1\n        if div_count == x:\n            print i\n            int_counter += 1\n        div_count = 0\n    return int_counter\n","872":"dict((k, v) for (k, v) in somedict.iteritems() if not k.startswith('someprefix'))\n","873":"In [273]:\ndf.groupby(level='first', group_keys=False).apply(lambda d: d.drop_duplicates())\n\nOut[273]:\n              0  1\nfirst second      \nbar   one     1  1\nbaz   one     1  1\nfoo   one     1  1\nqux   one     1  1\n","874":"msg.attach(attachment)\n","875":"import ctypes\nMB_OK = 0x0\nMB_OKCXL = 0x01\nMB_YESNOCXL = 0x03\nMB_YESNO = 0x04\nMB_HELP = 0x4000\nICON_EXLAIM=0x30\nICON_INFO = 0x40\nICON_STOP = 0x10\n\nresult = ctypes.windll.user32.MessageBoxA(0, \"Your text?\", \"Your title\", MB_HELP| MB_YESNO | ICON_STOP)\n","876":">>> from heapq import nsmallest\n>>> s = [1,2,3,4,5,6,7]\n>>> nsmallest(3, s, key=lambda x: abs(x-6.5))\n[6, 7, 5]\n","877":"df1 = df1.merge(df2[['weeknum', 'datetime']], on=['weeknum'])\n","878":"def fib(n):\n    return n if n in (0, 1) else globals()['fib'](n-1) + globals()['fib'](n-2)\n","879":"with open('file.txt', 'r') as f:\n    print(len(f.readlines()))\n","880":"from collections import Counter\nimport random\n\ntups = [ (1,2), (3,4), (5,6), (1,2), (3,4) ]\nlst = Counter(tups).most_common()\nhighest_count = max([i[1] for i in lst])\nvalues = [i[0] for i in lst if i[1] == highest_count]\nrandom.shuffle(values)\nprint values[0]\n","881":"import re\nblockOfText = 'two thousand may be represented as 2000 2000.00 2,000 and 2k'\n' '.join([ ''.join(x[0]) for x in re.findall(r'(\\$?\\d+([,\\.]\\d+)?k?)', blockOfText) ])\n","882":">>> class A(object):\n...     pass\n... \n>>> a = A()\n>>> f = 'field'\n>>> setattr(a, f, 42)\n>>> a.field\n42\n","883":"import random\nimport time\n\ndef strTimeProp(start, end, format, prop):\n    \"\"\"Get a time at a proportion of a range of two formatted times.\n\n    start and end should be strings specifying times formated in the\n    given format (strftime-style), giving an interval [start, end].\n    prop specifies how a proportion of the interval to be taken after\n    start.  The returned time will be in the specified format.\n    \"\"\"\n\n    stime = time.mktime(time.strptime(start, format))\n    etime = time.mktime(time.strptime(end, format))\n\n    ptime = stime + prop * (etime - stime)\n\n    return time.strftime(format, time.localtime(ptime))\n\n\ndef randomDate(start, end, prop):\n    return strTimeProp(start, end, '%m\/%d\/%Y %I:%M %p', prop)\n\nprint randomDate(\"1\/1\/2008 1:30 PM\", \"1\/1\/2009 4:50 AM\", random.random())\n","884":"def edit_notification(request):\n    foo = request.GET.get('foo')\n    ...\n","885":"new_training_data = new_training_data.astype(np.float64)\nnew_training_data[new_training_data == 0] = -1\n","886":"def load_tests(loader, tests, pattern):\n    return suite()\n","887":">>> pd.crosstab(df.index, df['Crime type'])\nCrime type      Anti-social behaviour  Burglary  Other theft  Shoplifting  ...\n\nE01006687                           0         1            0            0\nE01007229                           3         1            2            1\nE01007230                           6         0            0            0\n","888":"url = NSURL.fileURLWithPath(path)\nfinder = SBApplication.applicationWithBundleIdentifier(\"com.apple.Finder\")\nitem = finder.items.objectAtLocation(url)\nitem.delete\n","889":"import numpy\nimport pandas\n\n# your data\n# ===================================\nnumpy.random.seed(0)\ndf1         = abs((pandas.DataFrame(numpy.random.randn(20, 8))*100).astype(int))\ndf1.columns = list('abcdefgh') \ndf1.index   = pandas.date_range('1\/1\/2014', periods=20)\n\n# processing\n# ===================================\n\ndf1['custom_min'] = pandas.concat([df1[df1.columns[:5]], df1[df1.columns[-3:]].shift(1)], axis=1).min(axis=1)\n\nprint(df1)\n\n              a    b    c    d    e    f    g    h  custom_min\n2014-01-01  176   40   97  224  186   97   95   15          40\n2014-01-02   10   41   14  145   76   12   44   33          10\n2014-01-03  149   20   31   85  255   65   86   74          12\n2014-01-04  226  145    4   18  153  146   15   37           4\n2014-01-05   88  198   34   15  123  120   38   30          15\n2014-01-06  104  142  170  195   50   43  125   77          30\n2014-01-07  161   21   89   38   51  118    2   42          21\n2014-01-08    6   30   63   36   67   35   81  172           2\n2014-01-09   17   40  163   46   90    5   72   12          17\n2014-01-10  113  123   40   68   87   57   31    5           5\n2014-01-11  116   90   46  153  148  189  117   17           5\n2014-01-12  107  105   40  122   20   97   35   70          17\n2014-01-13    1  178   12   40  188  134  127   96           1\n2014-01-14  117  194   41   74  192  148  186   90          41\n2014-01-15   86  191   26   80   94   15   61   92          26\n2014-01-16   37  109   29  132   69   14   43  184          15\n2014-01-17   67   40   76   53   67    3   63   67          14\n2014-01-18   57   20   39  109  149   43   16   63           3\n2014-01-19  238   94   91  111  131   46    6  171          16\n2014-01-20   74   82    9   66  112  107  114   43           6\n","890":"from itertools import chain\n\nA_1 = [1, 2, 3, 4]\nA_2 = [3, 4, 5, 6]\nA_3 = [3, 4, 7, 8]\n\n# Collect the input lists for use with chain below\nall_lists = [A_1, A_2, A_3]\n\nfor A in (A_1, A_2, A_3):\n  # Combine all the lists into one\n  super_list = list(chain(*all_lists))\n  # Remove the items from the list under consideration\n  for x in A:\n    super_list.remove(x)\n  # Get the unique items remaining in the combined list\n  super_set = set(super_list)\n  # Compute the unique items in this list and print them\n  uniques = set(A) - super_set\n  print(sorted(uniques))\n","891":"$mystring = system('python myscript.py myargs', $retval);\n","892":"individual_bytes = struct.unpack(\"BB\", struct.pack(\"<H\", 1024))\n","893":">>> import decimal\n>>> decimal.Decimal('1') \/ (decimal.Decimal('5') \/ decimal.Decimal('1000000'))\nDecimal('2E+5')\n","894":"io.use_plugin('pil', 'imread')\na = io.imread('C:\\Users\\Dimitrios\\Desktop\\polimesa\\\\arizona.jpg')\n\nB = np.zeros((len(a)\/2 +1, len(a[0])\/2 +1))\n\n\nfor i in xrange(0, len(a), 2):\n    for j in xrange(0, len(a[0]), 2):\n        x.append(a[i][j])\n        if i+1 < len(a):\n            x.append(a[i+1][j])\n        if j+1 < len(a[0]):\n           x.append(a[i][j+1])\n        if i+1 < len(a) and j+1 < len(a[0]):\n           x.append(a[i+1][j+1])\n        B[i\/2][j\/2] = np.std(x)\n        x[:] = []         \n","895":"$ python -V\nPython 2.7.1 \n$ python so18736473.py\nnames[0]: ('f_a', ([1, 1],))\ndone, elapsed wall clock time (win32) in seconds:  5.418259\n$ pypy -V\nPython 2.7.2 (341e1e3821fff77db3bb5cdb7a4851626298c44e, Jun 09 2012, 14:24:11)\n[PyPy 1.9.0]\n$ pypy so18736473.py\nnames[0]: ('f_a', ([1, 1],))\ndone, elapsed wall clock time (win32) in seconds:  0.648846\n","896":"$ awk 'p!=$1{p=$1; print}' file\n\n+   5     1364182    TTGC\n-   5     1364204    GATG\n+   1     9372980    TTCA\n-   1     9373028    GGAA\n+   2     14029383   ACCA\n-   2     14029437   ACCA\n+   4     13475195   AGCA\n-   4     13475251   TCTC\n+   1     9372980    TTCA\n-   1     9373028    GGAA\n+   2     14029383   ACCA\n","897":"import sys\nimport getopt\n\ndef main(argv):\n    try:\n        opts, args = getopt.getopt(argv,\"hi:\",[\"ifile=\"])\n    except getopt.GetoptError:\n      print 'test.py -i <inputfile>'\n      sys.exit(2)\n    for opt, arg in opts:\n        if opt in (\"-i\", \"--ifile\"):\n            inputfile = arg\n    print 'Input file is \"', inputfile\n\nif __name__ == \"__main__\":\n   main(sys.argv[1:])\n","898":"import os\n\ndef get_file_types(directory):\n    file_ext = set()\n    for root, directories, files in os.walk(directory):\n        for filename in files:\n            filepath = os.path.join(root, filename)\n            fileName, fileExtension = os.path.splitext(filepath)\n\n\n    return sorted(file_ext)  # Self-explanatory.\n\n\nfile_types = get_file_types(\"d:\\\\Development\\\\\")\nfor ty in file_types:\n    print ty\n","899":"[(k,i) for k,m in enumerate(ref, 1) for i,j in enumerate(m, 1) if 'yellow' in j]\n","900":"  1. nginx + gnunicorn\n  2. apache2 + mod-wsgi\n  3. something else\n  4. anything else\n  ...\nn-1. fcgi\n  n. cgi\n","901":">>> 1 + 1\n2\n>>> x = _\n>>> x\n2\n","902":"for block in iter(lambda: file_obj.read(4), \"\"):\n  use(block)\n","903":"import datetime\nfrom System import DateTime\ndatetime.datetime(DateTime.Now)\n","904":"import io\nfrom PIL import Image\n\nif response.status_code is requests.codes.ok:\n    io = io.BytesIO(response.content)\n    im = Image.open(io).convert('RGB').save('test.jpg)\n","905":"import string\nvalid_chars = \"-_.() %s%s\" % (string.ascii_letters, string.digits)\n\n[...]\n\n        data = c.recv(BUFFER_SIZE)\n        data=''.join(c for c in data if c in valid_chars)\n        print 'requested website: '+data\n        if len(data)>0:\n            try:\n                urllib2.urlopen('localhost:2020\/?id='+data ).read()\n                print x\n                c.send(x)\n            except:\n                pass\n        c.close()                # Close the connection\n","906":"import os\nfrom gi.repository import Gtk, Gio\n\n# This allows Ctrl+C to exit the program\nimport signal\nsignal.signal(signal.SIGINT, signal.SIG_DFL)\n\ndef callback(m, f, o, event):\n    # Without this check, multiple 'ok's will be printed for each file change\n    if event == Gio.FileMonitorEvent.CHANGES_DONE_HINT:\n        print ('ok')\n\ngio_file = Gio.File.new_for_path(os.environ['HOME']+'\/temp')\nmonitor = gio_file.monitor_file(Gio.FileMonitorFlags.NONE, None)\nmonitor.connect(\"changed\", callback)\n\nGtk.main()\n","907":"Free quota\nUsage is free for all users, up to 100 queries per day.\n","908":"def get_stats(group):\n    return {'mean': group.mean(), 'std': group.std(),\n            'hit_r': group.apply(lambda x: x >= 0).sum() \/ float(group.count())}\n","909":"chr = \"*\"\nsize = 5\nrow = 1\nwhile row <= size:\n    col = size - row + 1\n    while col <= size:\n        print ' ', \n        col = col + 1\n    col = 0\n    while col <= size-row:\n        print chr, \n        col = col + 1\n    row = row + 1\n    print ''\nprint ''\n","910":"    for i in d:\n    # The keys in D contain quotes and a newline which need                                                                                                                                                                              \n    # to be removed. In v3, newline = 1 char and in v2,                                                                                                                                                                                  \n    # newline = 2 char.                                                                                                                                                                                                                  \n    if sys.version_info[0] < 3:\n        if i[1:-3] != d[i].get('id'):\n            print('%s %s' % (i[1:-3], d[i].get('id')))\n    else:\n        if i[1:-2] != d[i].get('id'):\n             print('%s %s' % (i[1:-2], d[i].get('id')))\n","911":"class Student(models.Model):\n  name = models.CharField(max_length=128, unique=True)\n  friends = models.ManyToManyField('self', blank = True)\n","912":"class WSHandler(tornado.websocket.WebSocketHandler):\n    clients = []\n\n    def open(self):\n        self.clients.append(self)\n        print 'new connection'\n        self.write_message(\"Hello World\")\n\n    def on_message(self, message):\n        print 'message received %s' % message\n\n    def on_close(self):\n        self.clients.remove(self)\n        print 'closed connection'\n","913":">>> s = 'testing[\\x06I\"text in between 1\\x06;filler text[\\x06I\"text in between 2\\x06;more filler[\\x06I\"text in between \\n with some line breaks \\n included in the text\\x06;ending'\n\n>>> import re\n>>> p = re.compile('\\[\\x06I\"(.+?)\\x06;', re.DOTALL)\n>>> print(p.findall(s))\n['text in between 1', 'text in between 2', 'text in between \\n with some line breaks \\n included in the text']\n","914":"def create_closure_and_function(*args):\n    func = None\n    def create_function_closure():\n         return func\n\n    closure = create_function_closure.__closure__\n    func = types.FunctionType(*args[:-1] + [closure])\n    return func\n","915":"ax.set_xticks(x_range)\n","916":" result = tables.Column(verbose_name='The Result', empty_values=())\n","917":" plt.plot(input_amp, marker='d', color='blue', drawstyle='steps-pre')\n","918":"class QuestionForm(Form):\n    questions = ChoiceField()\n\n    def __init__(self, *args, **kwargs):\n        super(QuestionForm, self).__init__(*args, **kwargs)\n        self.fields['questions'].choices = set_up_choices() # function that creates list\n\n    clean_questions(self):\n        # do your validation of the question selection\n        # here you could check whether the option selected matches\n        # a correct value, if not throw a form validation exception\n        return self.cleaned['questions']\n","919":">>> string = \"^h^c^04^^^13\/     \\^d^b  \/   \\^u^u^u^u^u^u^u^l^l\\^o^b^r\/\"\n>>> import re\n>>> re.findall(r'\\^.+?(?=\\^|$)', string)\n['^h', '^c', '^04', '^^', '^13\/     \\\\', '^d', '^b  \/   \\\\', '^u', '^u', '^u',\n '^u', '^u', '^u', '^u', '^l', '^l\\\\', '^o', '^b', '^r\/']\n","920":"with open(file, 'r') as temp:\n    for num, line in enumerate(temp, 1):\n        for string in lookup:\n\n            # Regex\n            searchObj = re.finditer(string, line, re.M | re.I)\n\n            if searchObj:\n                for match in searchObj:\n\n                    # Find the start index of the keyword\n                    start = match.span()[0]\n\n                    # Find the end index of the keyword\n                    end = match.span()[1]\n\n                    # Truncate line to get only 'n' characters before and after the keyword\n                    tmp = line[start-n:end+n] + '\\n'            \n                    print tmp\n","921":"try:\n    from maya import cmds\nexcept ImportError:\n    print 'Not Maya'\n","922":"string = '123456789'\nsplitted = []\n\nprev = 0\nwhile True:\n    n = random.randint(1,3)\n    splitted.append(string[prev:prev+n])\n    prev = prev + n\n    if prev >= len(string)-1:\n        break\nprint splitted\n","923":"import matplotlib.pyplot as plt\nimport numpy as np\n\nsignal = 1.2*np.sin(np.linspace(0, 30, 2000))\npos_signal = signal.copy()\nneg_signal = signal.copy()\n\npos_signal[pos_signal <= 0] = np.nan\nneg_signal[neg_signal > 0] = np.nan\n\n#plotting\nplt.style.use('fivethirtyeight')\nplt.plot(pos_signal, color='r')\nplt.plot(neg_signal, color='b')\nplt.savefig('pos_neg.png', dpi=200)\nplt.show()\n","924":"n1=input('Enter first number ')\nn2=input('Enter second number ')\nprint sum(range(min(n1,n2)+1,max(n1,n2)))\n","925":"# I stole this decorator from another stackoverflow recipe :) \ndef returnthisclassfrom(specials):\n  specialnames = ['__%s__' % s for s in specials.split()]\n  def wrapit(cls, method):\n    return lambda *a: cls(method(*a))\n  def dowrap(cls):\n    for n in specialnames:\n      method = getattr(cls, n)\n      setattr(cls, n, wrapit(cls, method))\n    return cls\n  return dowrap\n\ndef int_getslice(self, i, j):\n    # NON-pythonic, will return everything inclusive i.e. x[5:3] returns 3 bits, not 2.\n    # Because that's what users normally expect.\n    # If you're a purist, modify below.\n    if i > 1000000 or j > 1000000:\n        raise ValueError, 'BitSize limited to 1 million bits'\n    lo = min(i,j)\n    hi = max(i,j)\n    mask = (1<<((hi-lo)+1))-1\n\n    return (self>>lo) & mask\n\ndef int_getitem(self, i):\n    # Safety limit\n    if i > 1000000:\n        raise ValueError, 'BitSize limited to 1 million bits'\n    return (self>>i)&1\n\ndef int_iter(self):\n    # since getitem makes it iterable, override\n    raise AttributeError, 'int object is not iterable'\n\n@returnthisclassfrom('abs add and div floordiv lshift mod mul neg or pow radd rand rdiv rdivmod rfloordiv rlshift rmod rmul ror rpow rrshift rshift rsub rxor rtruediv sub truediv xor trunc')\nclass BitSliceInt(long):\n  __getslice__ = int_getslice\n  __getitem__ = int_getitem\n  __iter__ = int_iter\n","926":"library(reshape)\nlibrary(ggplot2)\n\ndat <- data.frame(weather=c(\"Rain\",\"Hail\",\"Sunny\"), Germany = c(0,1,0), Italy = c(1,0,0))\n\nmelt.data<-melt(dat, id.vars=\"weather\", variable_name=\"country\")\n\nqplot(data=melt.data,\n      x=country,\n      y=weather,\n      fill=factor(value),\n      geom=\"tile\")+scale_fill_manual(values=c(\"0\"=\"white\", \"1\"=\"red\"))\n","927":"driver.switch_to.frame(driver.find_element_by_tag_name(\"iframe\"))\ndriver.find_element_by_id(\"user_email\").send_keys(\"username\")\ndriver.find_element_by_id(\"user_password\").send_keys(\"password\")\n\/\/ do whatever else\ndriver.switch_to.default_content()\n","928":"m = []\nfor i,(k, v) in enumerate(n):\n    n[i] = (str(k)+'B', str(v) + 'B')\n    m.append(n[i])\n","929":"import xlrd\ntry:\n    work_book = xlrd.open_workbook('file_name.xls', on_demand=True)\nfinally:\n    work_book.release_resources()\n","930":"def create(self, cr, uid, vals, context=None):\n    obj_master = super(parent_table,self).create(cr,uid, vals, context=context)\n    obj_child = self.pool.get('child.table') \n    obj_child.create(cr, uid,{'field_name':obj_child.field_value......})\n","931":"#!\/usr\/bin\/env\/python\npar = self.gui.get_widget('your_parent_window')\n\nmsg = gtk.MessageDialog(type=gtk.MESSAGE_INFO, buttons = gtk.BUTTONS_OK, parent=par)\nif msg.run():\n    msg.destroy()\n    return None\n","932":"format e: \/fs:NTFS \/p:2\n","933":"img = cv2.imread(\"D:\\\\img.jpg\")\ngray = cv2.cvtColor(img, cv.CV_BGR2GRAY)\n\nimg2 = np.zeros_like(img)\nimg2[:,:,0] = gray\nimg2[:,:,1] = gray\nimg2[:,:,2] = gray\n\ncv2.circle(img2, (10,10), 5, (255,255,0))\ncv2.imshow(\"colour again\", img2)\ncv2.waitKey()\n","934":"story = \"this is a very long story\"\nid = stories_col.find_one_and_update({\n    'story': story,\n}, {\n    '$setOnInsert': { 'story': story }\n}, upsert=True, return_document=ReturnDocument.AFTER)\n","935":"# Number of uniformly ditributed random numbers\nn = 2000\n\ndef func_vec(x1s, x2s):\n    return x1s * x1s + 4 * x2s * x2s\n\nnp.random.seed()\nx1s = np.random.uniform(-1, 1, n)\nx2s = np.random.uniform(-1, 1, n)\nys = func_vec(x1s, x2s)\n\nfig = plt.figure(22)\n\n# Scatter\nax1 = fig.add_subplot(1, 2, 1)\nax1.scatter(x1s, x2s, color = 'g', s = 2, edgecolor = 'none')\nax1.set_ylim([-1,1])\nax1.set_xlim([-1,1])\n\n# Contour\nxi = np.linspace(-1,1,20)\nyi = np.linspace(-1,1,20)\nzi = griddata((x2s, x1s), ys, (xi[None,:], yi[:,None]), method = 'cubic')\nax1.contour(xi, yi, zi, 6, linewidths = 1, colors = ('#0000ff', '#0099ff', '#009999', '#999900', '#ff9900', '#ff0000'))\n\n# 3D visualization\nax2 = fig.add_subplot(1, 2, 2, projection = '3d')\nX, Y = np.meshgrid(xi, yi)\nax2.plot_wireframe(X, Y, zi, rstride = 1, cstride = 1)\nax2.view_init(28, -144) \n\nplt.show()\n","936":"context = etree.iterparse(xmlfile, tag=\"yourSubTree\")\naction, elem = context.next()\netree.iterwalk(elem, ...)...\n","937":"import socket \nimport threading\n\nclass Client(threading.Thread):\n\n    def __init__(self):\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.connect(('127.0.0.1', 1234))\n        print('Client connected to server')\n\n        t = threading.Thread(target = self.read)\n        t.daemon = True # helpful if you want it to die automatically\n        t.start()\n\n        t2 = threading.thread(target = self.write)\n        t2.daemon = True\n        t2.start()\n\n    def read(self):\n        while True:\n            data = self.socket.recv(1024)\n            if data:\n                print('Received:', data)\n\n    def write(self):\n        while True:\n            message = input()\n            self.socket.send(bytes(message, 'utf-8'))\n\n\nclient = Client()\n","938":"f=open(\"somesettings.ini\", \"r\")\nfor l in f.readlines():\n    If \"Minimum Free Space\" in l:\n        index=l.find('=')\n        res=l[index+1:]\n        break\nf.close()\n","939":"while True:\n    N = input(\"Please input factorial you would like to calculate: \")\n    try: # try to ...\n        N = int(N) # convert it to an integer.\n    except ValueError: # If that didn't succeed...\n        print(\"Invalid input: not an integer.\")\n        continue # retry by restarting the while loop.\n    if N > 0: # valid input\n        break # then leave the while loop.\n    # If we are here, we are about to re-enter the while loop.\n    print(\"Invalid input: not positive.\")\n","940":"fig=plt.figure()\nax=fig.add_subplot(111)\nax.plot(x_data,y_data)\nax.set_xlim(xmin=0.0, xmax=1000)\nplt.savefig(filename)\n","941":"python filename.py -hashtags \\#one \\#two \\#three\n","942":"import matplotlib.pyplot as plt\ndef plot_something(x, y, **kwargs):\n    title  = kwargs.pop( 'title'  )\n    xlabel = kwargs.pop( 'xlabel' )\n    ylabel = kwargs.pop( 'ylabel' )\n    plt.figure()\n    plt.plot(x, y, **kwargs)\n    fig = plt.gcf()\n    for axis in fig.axes:\n        axis.set_title( title )\n        axis.xaxis.set_label( xlabel )\n        axis.yaxis.set_label( ylabel )\n    return axis\n\n\nplot_conf = {'title': 'Blabla', 'xlabel':'Time (s)', 'ylabel': 'Speed (m\/s)'}\nx = [1.,2.,3.]\ny = [1.,4.,9.]\naxis = plot_something(x=x,y=y, **plot_conf)\n","943":"data = ssn.query(models.MedicationLog.dose_date,\n                         func.sum(func.array_length(\n                             models.MedicationLog.dose_taken_times, ARRAY_DEPTH\n                         )).label('dose_taken_times')).order_by(models.MedicationLog.dose_date).\\\n        group_by(models.MedicationLog.dose_date).all()\n","944":"open('\\\\\\\\?\\\\C:\\\\whatever\\\\test.','w')\n","945":"spark.cores.max=<value>\n","946":"df = pd.DataFrame({'A': [30, 30, 26, 26, 26, 26], \n                   'B': [60538815980, 7410811099, 2238403510, \n                         2006613744, 2006618783, 2006613743]})\n\ngb = df.groupby('A')\ndf2 = pd.DataFrame([df.ix[gb.groups[n], 'B'].values for n in gb.groups], \n                   index=gb.groups.keys())\ndf2.columns = [\"C_\" + str(i + 1) for i in df2.columns]\ndf2.index.name = \"A\"\n\n>>> df2\n            C_1         C_2         C_3         C_4\nA\n26   2238403510  2006613744  2006618783  2006613743\n30  60538815980  7410811099         NaN         NaN\n","947":">>> s = set()\n","948":"import curses\n\nstdscr = curses.initscr()\n\ndef print_char(x, y, char):\n    stdscr.addch(y, x, char)\n","949":"import matplotlib.pyplot as plt\n\nfig=plt.figure()\nax1=fig.add_subplot(111)\nax2=ax1.twiny()\n\nax1.set_xlabel('xlabel 1')\nax2.set_xlabel('xlabel 2')\n\nax2.xaxis.set_label_coords(0.5,0.95)\n\nax1.set_title('my title')\n\nplt.show()\n","950":"def prepare_parser():\n    from pyparsing import Word, alphas, Optional, ...\n    # do stuff, and get the final thing to return\n    return ...\n\nparser = prepare_parser()\n","951":"def writetxt(phrase):\n    f = open(\"file.txt\", \"a\")\n    phrase = f.read()\n    palabras = phrase.split()\n    for word in palabras:\n        print (word)\n        f.write(word)\n    f.close()\n","952":"function_list = {0:{\"func\":power_off},\n                 1:{\"func\":image_capture, \"args\":(100,1000,100,100)},\n                 2:{\"func\":video_record, \"args\":(100,100)},\n                 3:{\"func\":image_settings},\n                 4:{\"func\":video_settings},\n                 5:{\"func\":device_settings} }\n\nf = function_list[current_selection]\nif \"args\" in f:\n    f[\"func\"](*f[\"args\"])\nelse:\n    f[\"func\"]()\n","953":"import os\n\ndata_path = '\/data'\n\n# option 1 using nested list comprehensions**\ndata_files = (os.path.join(root,f) for (root, dirs, files) in os.walk(data_path)\n                                   for f in files)   # can use [] instead of ()\n\n# option 2 using nested for loops\ndata_files = []\nfor root, dirs, files in os.walk(data_path):\n    for f in files:\n        data_files.append(os.path.join(root, f))\n\nfor data_file in data_files:\n    # ... process data_file ...\n","954":">>> chrmap = {'A': '\\x3a', 'B': '\\x3b', 'C': '\\x3c', 'D': '\\x3d', 'E': '\\x3e', 'F': '\\x3f'}\n>>> ''.join(chrmap.get(c, c) for c in '03FE5')\n'03?>5'\n","955":"Model.objects.filter(id=id).update(field=F('field') +1))\n","956":"import itertools\nA = [list(group) for val, group in itertools.groupby(zp, lambda x: x[1] > 1) if val]\n\n# [[(1.36, 2), (1.37, 3), (1.37, 4), (1.39, 5), (1.38, 6), (1.4, 7), (1.41, 8), (1.42, 9), (1.43, 10)], \n#  [(1.49, 2), (1.5, 3), (1.51, 4)],\n#  [(1.55, 2), (1.56, 3), (1.57, 4)], \n#  [(1.63, 2), (1.64, 3), (1.65, 4)], \n#  [(1.69, 2), (1.7, 3), (1.71, 4)]]\n","957":"import numpy as np\n\nimport matplotlib.pyplot as plt\n\n# Generate some data\nx = np.linspace(0, 10, 1000)\ny = np.sin(np.exp(0.3*x))\n\nfig, ax = plt.subplots()\n\nax.plot(x, y)\n\nax.set_ylim(-2,2)\n\nax.annotate('First maxima', \n            xy=(np.pi\/2., 2), \n            xytext=(np.pi\/2., 2.3), \n            arrowprops = dict(facecolor='black', shrink=0.05))\n\nplt.show()\n","958":"import cerealizer\n#import cPickle as cerealizer\n\ndef save(data, filename):\n    f = open(filename,\"wb\")\n    cerealizer.dump(data, f, protocol=2)\n    f.close()\n\ndef load(filename):\n    f = open(filename,\"rb\")\n    p = cerealizer.load(f)\n    f.close()\n    return(p)\n\nif __name__ == \"__main__\":\n    import PIL.Image\n    import cStringIO as StringIO\n\n    stringIO = StringIO.StringIO()\n    im = PIL.Image.open(\"picture.jpg\")\n    im.save(stringIO, \"JPEG\")\n\n    stringIO.seek(0)\n    save(stringIO.read(), \"testCerealizerIm.txt\")\n\n    binaryImageData = load(\"testCerealizerIm.txt\")\n\n    stringIO2 = StringIO.StringIO()\n    stringIO2.write(binaryImageData)\n\n    stringIO2.seek(0)\n    im = PIL.Image.open(stringIO2)\n    im.show()\n","959":"import autopy\nfrom time import sleep\n\ndef color_checker():\n    color_grabber = hex(autopy.bitmap.Bitmap.open(\"screen1.png\").get_color(292,115))\n    return color_grabber\n\ndef mouse_move_click():\n    autopy.mouse.smooth_move(433,320)\n    autopy.mouse.click()\n\ndef screen_grab():\n    autopy.bitmap.capture_screen().save(\"screen1.png\")  \n\ndef the_ifs(color):\n    if color == \"0xffcb05\":\n        mouse_move_click()\n\nwhile 1==1:\n    sleep(1)\n    screen_grab()\n    color = color_checker()\n    the_ifs(color)\n    print color\n","960":"import xml.etree.ElementTree as ET\n\ndef find_child(node, with_name):\n    \"\"\"Recursively find node with given name\"\"\"\n    for element in list(node):\n        if element.tag == with_name:\n            return element\n        elif list(element):\n            sub_result = find_child(element, with_name)\n            if sub_result is not None:\n                return sub_result\n    return None\n\ndef replace_node(from_tree, to_tree, node_name):\n    \"\"\"\n    Replace node with given node_name in to_tree with\n    the same-named node from the from_tree\n    \"\"\"\n    # Find nodes of given name ('car' in the example) in each tree\n    from_node = find_child(from_tree.getroot(), node_name)\n    to_node = find_child(to_tree.getroot(), node_name)\n\n    # Find where to substitute the from_node into the to_tree\n    to_parent, to_index = get_node_parent_info(to_tree, to_node)\n\n    # Replace to_node with from_node\n    to_parent.remove(to_node)\n    to_parent.insert(to_index, from_node)\n\ndef get_node_parent_info(tree, node):\n    \"\"\"\n    Return tuple of (parent, index) where:\n        parent = node's parent within tree\n        index = index of node under parent\n    \"\"\"\n    parent_map = {c:p for p in tree.iter() for c in p}\n    parent = parent_map[node]\n    return parent, list(parent).index(node)\n\nfrom_tree = ET.ElementTree(file='sample1.xml')\nto_tree = ET.ElementTree(file='sample2.xml')\n\nreplace_node(from_tree, to_tree, 'car')\n\n# ET.dump(to_tree)\nto_tree.write('output.xml')\n","961":"class A():\n    def __init__(self):\n        self.var1 = 12\n        self.var2 = C()\n\n    def start(self):\n        self.var1=11\n        B(self)             # pass this instance into the initialisation of B\n\nclass B():\n    def __init__(self, a):\n        self.a = a          # save reference to the A() instance\n\n    def doSomething(self):\n        varXX = self.a.var2 \n","962":"role = models.ForeignKey(UserRole, on_delete=models.CASCADE, default=None, blank=True, db_column='roleid')\n","963":"converts_time = time.strftime(\"%I\").lstrip('0') + str(\":\") + str(stop_time.split(\":\")[0]) + time.strftime(\"%p\")\n","964":"subjects = [allmyfilenames]\n    for subj in subjects:\n        with open('C:\/%s.txt' %subj, 'r') as datafile:\n            data = json.load(datafile)\n            if data[0]['parameter']['mean'] > 0.5:\n                print subj\n","965":"d = self.monster_deaths.pop(...)\nprint(\"{}! The {} {} {}\".format(self.monster.battlecry(),\n                                self.monster.color,\n                                type(self.monster).name,\n                                d))\n","966":"@app.route('\/index')\ndef index():\n    form = AddExpenses()\n    allnames = getSalesman()\n    form.salesperson.choices = [names for names in allnames]\n    ...\n","967":"import inspect\n\ndef first():\n    return second()\n\ndef second():\n    return inspect.getouterframes( inspect.currentframe() )[1]\n\nfirst()[3] # 'first'\n","968":">>> a.join(pd.DataFrame({6: [1,2]}))\n   4  0  1  2  3  6\n0  1  1  2  3  4  1\n1  2  2  3  5  4  2\n\n>>> a\n   4  0  1  2  3\n0  1  1  2  3  4\n1  2  2  3  5  4\n","969":"using System.Diagnostics;\n\n         Process p = new Process();\n\n         ProcessStartInfo pp = new ProcessStartInfo();\n\n         pp.Verb = \"runas\";\/\/Invoke as Admin\n\n         \/\/Do other initialzation.\n\n         p.StartInfo = pp;\n\n         p.Start();\n","970":"[names[0]] + [n for n in names[1:] if n != names[0]]\n","971":"import numpy as np\nimport pylab as plt\n\nX = np.linspace(0,5,100)\nY1 = X + 2*np.random.random(X.shape)\nY2 = X**2 + np.random.random(X.shape)\n\nplt.scatter(X,Y1,color='k')\nplt.scatter(X,Y2,color='g')\nplt.show()\n","972":"def replace_score(file_name, line_num, text):\n  f = open(file_name, 'r')\n  contents = f.readlines()\n  f.close()\n\n  contents[line_num] = text+\"\\n\"\n\n  f = open(file_name, \"w\")\n  contents = \"\".join(contents)\n  f.write(contents)\n  f.close()\n\nreplace_score(\"file_path\", 10, \"replacing_text\")\n","973":">>> from cStringIO import StringIO\n>>> f = StringIO('foo')\n>>> f.read()\n'foo'\n","974":"class FocusEmittingButton(QPushButton):\n    #...\n    def focusInEvent(self, event):\n        # emit your signal\n","975":"colNums = [0, 2, 6]\nto_write = [ col for i, col in enumerate(zip(*my_reader)) if i in colNums ]\n","976":"# These are not needed in your view method\nusername = form.clean_username()\nemail = form.clean_email()\npassword = form.clean_password2()\n","977":"class Configuration(object):\n    def __init__(self, config_parser):\n        self.optionA = config_parser.get(\"root\", \"AProperty\")\n        self.optionB = config_parser.get(\"root\", \"BProperty\")\n        self.optionX = config_parser.get(\"root\", \"XProperty\")\n\n    @property\n    def optionY(self):\n        return self.optionX == 'something' and self.optionA > 10\n\n\nclass FooClass(object):\n    def __init__(self, config):\n        self._config = config\n\n    def _foo_bar_method(self):\n        some_property = self._config.optionY\n        ....\n\nconfig = Configuration(config_parser)\nfoo = FooClass(config)\n","978":"df.groupby(['GridCode','DLang']).count().unstack().fillna(0)\n\n         User_ID            \nDLang         ca en es ja zh\nGridCode                    \n3              0  0  1  1  1\n4              0  0  1  0  0\n6              0  1  0  0  0\n9              3  1  0  0  0\n","979":"t_query = session.query(func.strftime('%Y-%m-%d', getattr(MyBaseClass, \"period\")),\n                        func.sum(getattr(MyBaseClass, \"foo\")),\n                        func.sum(getattr(MyBaseClass, \"other_name\") * getattr(MyBaseClass, \"value_one\"))\n                        )\n","980":"month_abbreviations = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4,\n                       'May': 5, 'Jun': 6, 'Jul': 7, 'Aug': 8,\n                       'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}\nyear = int(line[7:11])\nmonth = month_abbreviations[line[3:6]]\nday = int(line[0:2])\nhour = int(line[12:14])\nminute = int(line[15:17])\nsecond = int(line[18:20])\nnew_entry['time'] = datetime.datetime(year, month, day, hour, minute, second)\n","981":"kill_list = []\ntry:\n    while True:\n        kill_list.append(1)\nexcept MemoryError:\n    pass\n","982":"import urllib2, sys\n\ndef chunk_report(bytes_so_far, chunk_size, total_size):\n   percent = float(bytes_so_far) \/ total_size\n   percent = round(percent*100, 2)\n   sys.stdout.write(\"Downloaded %d of %d bytes (%0.2f%%)\\r\" % \n       (bytes_so_far, total_size, percent))\n\n   if bytes_so_far >= total_size:\n      sys.stdout.write('\\n')\n\ndef chunk_read(response, chunk_size=8192, report_hook=None):\n   total_size = response.info().getheader('Content-Length').strip()\n   total_size = int(total_size)\n   bytes_so_far = 0\n\n   while 1:\n      chunk = response.read(chunk_size)\n      bytes_so_far += len(chunk)\n\n      if not chunk:\n         break\n\n      if report_hook:\n         report_hook(bytes_so_far, chunk_size, total_size)\n\n   return bytes_so_far\n\nif __name__ == '__main__':\n   response = urllib2.urlopen('http:\/\/www.ebay.com');\n   chunk_read(response, report_hook=chunk_report)\n","983":"#First you need to see what is the response for your login call\nlogin_response = s.login(username, password)\nprint str(login_response)\n\n#if you wish to access some value in this response\nvalue = login_response.get(\"the_value\", {the default value})\n\nif value: #incase you want to make sure you logged in correctly   \n    json_response = s.add_friend(friend)\n    print str(json_response)\n","984":"-mapper '\/usr\/lib\/python_2.7.3\/bin\/python mapper.py myargs'\n","985":"MIDDLEWARE_CLASSES = (\n    '...',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.auth.middleware.RemoteUserMiddleware',\n    '...',\n)\n\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.RemoteUserBackend',\n)\n","986":"x=[\"fizz\",\"bear\",\"fizz\"]\n\ndef fizz_count(x):\n    count= 0\n    for e in x:\n        if e=='fizz':\n            count = count + 1\n    return count\n\nprint fizz_count(x)\n","987":"upper_frame.grid(row=0, column=0, sticky='ew')\n..\nmylabel.grid(row=0, column=0, sticky='ew')\n","988":"mail = email.message_from_string(email_body)\n    for part in mail.walk():\n        c_type = part.get_content_type()\n        c_disp = part.get('Content-Disposition')\n\n        if c_type == 'text\/plain' and c_disp == None:\n            body = body + '\\n' + part.get_payload()\n        else:\n            continue\n","989":"import socket\nfrom multiprocessing import Process, Queue, Value\nfrom ctypes import c_bool\n\nHOST = '198.51.100.0'\nPORT = 8080\n\n# This function will be run in a child process\ndef update_proc(data_queue, update_queue, quit_flag):\n    while not quit_flag.value:\n        data = data_queue.get()\n        # do something with the data...\n        update_queue.put(data)\n    print \"Closing child update process\"\n\n# This function will be run in a child process\ndef activate_proc(update_queue, quit_flag):\n    while not quit_flag.value:\n        data = update_queue.get()\n        # do something with the data...\n    print \"Closing child activate process\"\n\n# main process begins execution here, if module is run from the terminal\nif __name__ == \"__main__\":\n    # Connect to remote host over TCP\n    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client.connect((HOST,PORT))\n\n    # Set up a Queue to pass data to the update process, and another one\n    # for the two children to communicate\n    data_queue = Queue()\n    update_queue = Queue()\n\n    # The quit_flag Value is a *very* primitive way to signal the child \n    # processes to quit. I'm sure there are better ways to do this, but I'm \n    # tired and can't think of any right now.\n    quit_flag = Value(c_bool, False)\n\n    # Create two child processes, pass a reference to the Queue to each\n    update = Process(target=update_proc, args=(data_queue, update_queue, quit_flag))\n    activate = Process(target=activate_proc, args=(update_queue, quit_flag))\n\n    update.start()\n    activate.start()\n\n    # Read data from the TCP socket, push it onto the data_queue\n    while True:\n        client.sendall(\"loc\\n\")\n        data = client.recv(8192)\n        if not data:\n            print \"network connection closed by client\"\n            break\n        data_queue.put(data)\n\n    # Join with child processes before closing\n    print \"All done, closing child processes\"\n    update.join()\n    activate.join()\n","990":"List2 = {' '.join(x) for x in List2}\nisct = set(List1) & List2\n","991":"import re\n# must use raw strings for paths, otherwise we need to\n# escape \\ characters\ninput1 = r\"C:\\Users\\sony\\Desktop\\PBUSH1.BDF\" \ninput2 = r\"C:\\Users\\sony\\Desktop\\PBUSH2.BDF\"\n\nwith open(input1) as f1, open(input2) as f2:\n    dat1 = f1.read()\n    dat2 = f2.read()\n\n# use finditer instead of findall so that we will get \n# a match object for each match.\n# For each matching line we also have one subgroup, containing the\n# \"PBUSH   NNN     \" part, whereas the whole regex matches until\n# the next end of line\nmatches = re.finditer('^(PBUSH\\s+[0-9]+\\s+).*$', dat1, flags=re.MULTILINE)\n\nfor match in matches:\n    # for each match we construct a regex that looks like\n    # \"^PBUSH   123      .*$\", then replace all matches thereof\n    # with the contents of the whole line\n    dat2 = re.sub('^{}.*$'.format(match.group(1)), match.group(0), dat2, flags=re.MULTILINE)\n\nwith open(input2, 'w') as outf:\n    outf.write(dat2)\n","992":">>> u\"\\N{NO-BREAK SPACE}\"\nu'\\xa0'\n","993":"from functools import wraps\n\ndef require_auth(roles=(Roles.USER,), *args, **kwargs):\n\n    def call(f, *args, **kwargs):\n        return f(*args, **kwargs)\n\n    def deco(f):\n        @wraps(f)\n        def wrapped_f(request, *a, **kw):\n            # do your authentication here\n            return call(f, request, *a, **kw)\n\n        return wrapped_f\n\n    return deco\n","994":"from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route(\"\/\")\ndef hello():\n    all_args = request.args.lists()\n    return jsonify(all_args)\n","995":"from django.shortcuts import render\nfrom multiprocessing import Process\nimport time\n\ndef do_job(seconds):\n    \"\"\"\n    This is the function that will run your three-hour job.\n    \"\"\"\n    time.sleep(seconds)                     # just sleep to imitate a long job\n    print 'done!'                           # will go to stdout, so you will see this\n                                            # most easily in test on local server\n\ndef test(request):\n    \"\"\"\n    This is your view.\n    \"\"\"\n    # In place of this comment, check the database.\n    # If job already running, return appropriate template.\n    p = Process(target=do_job, args=(15,))  # sleep for 15 seconds\n    p.start()                               # but do not join\n    message = 'Process started.'\n    return render(request, 'test.html',\n                  {'message': message})\n","996":"import webbrowser\nurl = \"https:\/\/www.google.com.tr\/search?q={}\".format(\"Raspberry Pi\") \nb = webbrowser.get('lynx')\nb.open(url)\n","997":"sum = np.zeros(len(data[0]))\n\nfor vector in data[1:]:\n    vector = map(float, vector)\n    sum = np.add(vector, sum)\n","998":"from django.forms import forms\n\nclass MyBoundField(object):\n    pass\n\nforms.BoundField = MyBoundField\n","999":"def unique(*args):\n    result = set()  # A set guarantees the uniqueness of elements\n    result = result.union(*args)  # Include elements from all args\n    result = list(result)  # Convert the set object to a list\n    return result\n","1000":"In [29]: dic = {'bob':[0,5,1], 'annie':[2,4,0], 'charles':[0,7,0]}\n\nIn [30]: for k in sorted(dic.keys()):\n    print k, max(dic[k])\n   ....:     \nannie 4\nbob 5\ncharles 7\n","1001":">>> from datetime import datetime, timedelta\n>>> from pytz import timezone\n>>> import pytz\n>>> utc = pytz.utc\n>>> utc.zone\n'UTC'\n>>> eastern = timezone('US\/Eastern')\n>>> eastern.zone\n'US\/Eastern'\n>>> amsterdam = timezone('Europe\/Amsterdam')\n>>> fmt = '%Y-%m-%d %H:%M:%S %Z%z'\n\n>>> loc_dt = eastern.localize(datetime(2002, 10, 27, 6, 0, 0))\n>>> print loc_dt.strftime(fmt)\n2002-10-27 06:00:00 EST-0500\n\n>>> ams_dt = loc_dt.astimezone(amsterdam)\n>>> ams_dt.strftime(fmt)\n'2002-10-27 12:00:00 CET+0100'\n","1002":"class Group(models.Model):\n    name = models.CharField(max_length=64)\n\nclass User(models.Model):\n    name = models.CharField(max_length=64)\n    group = models.ForeignKey(Group)\n\ng = Group.objects.get(id=1)\nprint g.user_set.all()  # prints list of all users in the group\n","1003":"import csv\n\nwith open('linklist.csv', 'rb') as input_file, \\\n        open('Link Statements9.txt', 'w') as output_file:\n\n    for row in csv.reader(input_file, delimiter=',', quoting=csv.QUOTE_NONE):\n        link_name, from_unit, to_unit, rate = row\n        output_file.write(\"Establish link %s at %s Kbps to Unit %s.\\n\"\n                          % (link_name, rate, to_unit))\n        output_file.write(\"Establish link %s at %s Kbps from Unit %s.\\n\"\n                          % (link_name, rate, from_unit))\n","1004":"for i, (entry, exit, met) in enumerate(t.stats):\n    t.stats[i] = (entry, exit, 1)\n","1005":"simon@mymachine:~$ python\nPython 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) \n[GCC 4.4.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import ufw\n>>> ufw.__file__\n'\/usr\/lib\/python2.6\/dist-packages\/ufw\/__init__.pyc'\n>>> \n","1006":"context = {'books': Books.objets.all()}\n","1007":"import matplotlib, scipy\nfig = matplotlib.figure()\nax = fig.add_axes([0.1,0.1,0.8,0.8])\naxicon = fig.add_axes([0.4,0.4,0.1,0.1])\nax.plot(range(5), [4,2,3,5,1])\naxicon.imshow(scipy.randn(100,100))\naxicon.set_xticks([])\naxicon.set_yticks([])\nfig.show()\n","1008":"import sys\nimport threading\nimport unittest\nfrom unittest.mock import patch\n\nclass T(threading.Thread):\n    def __init__(self,  *args, **kwargs):\n        super(T, self).__init__(*args, **kwargs)\n        self._interrupt = threading.Event()\n        self.started = threading.Event() #Used to be sure that we test run() behavior \n        self.started.clear()\n        self.terminated = False\n\n    def interrupt(self):\n        self._interrupt.set()\n\n    def run(self, *args, **kwargs):\n        self._interrupt.clear()\n        self.started.set()\n        while not self._interrupt.is_set():\n            self._interrupt.wait(timeout=1)\n        self.terminated = True\n        sys.exit()\n\n\nclass TestInterrupt(unittest.TestCase):\n\n    @patch(\"sys.exit\", side_effect=Exception(\"Ignore it... just close thread\"))\n    def test_interrupt(self, mock_sys_exit):\n        t = T()\n        t.start()\n        if not t.started.is_set():\n            t.started.wait(timeout=0.2)\n        self.assertTrue(t.started.is_set(), \"t not started!\")\n        #Ok t is in run() main cycle: we can test interrupt\n        t.interrupt()\n        t.join(0.1)\n        self.assertTrue(t.terminated)\n        self.assertFalse(t.isAlive())\n","1009":">>> d= {('ALEXANDER', 'MALE'): {'2010': ('2619', None), '2011': ('2494', None), '2009': ('2905', None)}}\n>>> for mainKey in d:\n    print(mainKey)\n    for key,val in d[mainKey].items():\n        print(key,val[0])\n\n\n('ALEXANDER', 'MALE')\n2011 2494\n2009 2905\n2010 2619\n","1010":"import pexpect\n\nchild = pexpect.spawn('ssh myname@host.example.com')\nchild.expect('Password:')\nchild.sendline(mypassword)\nchild.interact()\n","1011":">>> re.findall(r'\\d+|[-+\/*()]', infix)\n['(', '22', '+', '33', ')', '*', '44', '\/', '300']\n","1012":"#!\/usr\/bin\/env bash\nCOUNTER=$1\nSERVER=$2\nCOMMAND=\"sudo reboot\"\nSLEEP_DURATION=60\n\necho \"Working on $SERVER $COUNTER times\"\n\nwhile (( $COUNTER > 0 )); do\n    ping -c 1 -t 5 $SERVER;\n    _ping_r=$?\n    if (( $_ping_r < 1 )); then\n        echo \"Rebooting $SERVER\"\n        ssh $SERVER $COMMAND;\n        let COUNTER=COUNTER-1\n    else\n        echo \"Couldn't ping $SERVER.  Taking a quick nap and trying again.\"\n        sleep 5\n    fi\n    sleep $SLEEP_DURATION;\ndone\n\necho \"Done working on $SERVER\"\n","1013":"while True:\n    inp = raw_input(\"Enter a value between 1 and 10 million: \")\n\n    if not inp.isdigit():\n        print \"Must be an integer value!\"\n        continue # each of these continue statements acts like a \"failed, try again\"\n\n    inp = int(inp)\n\n    if inp < 1:\n        print \"Must be higher than 1\"\n        continue # same for this one\n\n    if inp > 10000000:\n        print \"Must be less than 10.000.000\"\n        continue # and this one\n\n    # execute the rest of the code\n","1014":"account_ids = [item.pk for item in group.accounts]\naccounts_not_in_group = UserAccount.objects(_id__nin=account_ids)\n","1015":"import timeit as tt\n\nlst_size = 10**5\n\n# Set the percentages of input tried by user.\npercentages = {'ints': .10,\n               'floats': .10,\n               'strings': .80}\nassert 1 - sum(percentages.values()) < 0.00000001\n\nints_floats_strings = {k: int(v*lst_size) for k, v in percentages.items()}\n\nsetup = \"\"\"\nimport ast\n\ndef f(x):\n    try:\n        float(x)\n    except:\n        pass\n\ndef g(x):\n    try:\n        ast.literal_eval(x)\n    except:\n        pass\n\nl = [str(i) for i in range({ints})]\nl += [str(float(i)) for i in range({floats})]\nl += [']9' for _ in range({strings}\/\/2)] + ['a' for _ in range({strings}\/\/2)]\n\"\"\".format(**ints_floats_strings)\n\nstmt1 = \"\"\"\nfor i in l:\n    f(i)\n\"\"\"\n\nstmt2 = \"\"\"\nfor i in l:\n    g(i)\n\"\"\"\n\n\nreps = 10**1\nt1 = tt.timeit(stmt1, setup, number=reps)\nt2 = tt.timeit(stmt2, setup, number=reps)\n\nprint(t1)\nprint(t2)\n\nprint(t2\/t1)\n","1016":"import time\nprint hex(int(time.mktime(time.strptime('1999-12-31 15:00:00', '%Y-%m-%d %H:%M:%S'))) - time.timezone)\n","1017":"'{0:06b}'.format(63)\n","1018":"import matlplotlib is plt\n\nplt.plot([1000, 1001, 1002], [1, 2, 3])\nplt.gca().get_xaxis().get_major_formatter().set_useOffset(False)\nplt.draw()\n","1019":">>> lst = [6, 5, 4, 3, 2, 1]\n>>> variable = 3\n>>> if variable == 3:\n        del lst[1]\n>>> lst\n[6, 4, 3, 2, 1]\n","1020":"def foo3(a):\n    return a * (a >= 5)\n\nfoo3(4)\n=> 0\n\nfoo3(6)\n=> 6\n\nfoo3(np.array(3))\n=> 0\n\nfoo3(np.array(6))\n=> 6\n\nfoo3(np.array([1, 5]))\n=> array([0, 5])\n","1021":"def toCSVLine(data):\n  return ','.join(str(d) for d in data)\n\nlines = labelsAndPredictions.map(toCSVLine)\nlines.saveAsTextFile('hdfs:\/\/my-node:9000\/tmp\/labels-and-predictions.csv')\n","1022":"def get_initial(self):\n    if request.GET.get('codereview-get'):\n        initial = {'stream_name': 'TROI'}\n    else:\n        initial = {}\n    return initial\n","1023":">>> blah=\"ajsdlk akajl <ajksd@ajksldf.com>\"\n>>> blah.split('<')[1].split('>')[0]\n'ajksd@ajksldf.com'\n","1024":">>> import time\n>>> time.clock()\n0.11\n>>> time.clock()\n0.11\n>>> time.clock()\n0.11\n>>> for x in xrange(100000000): pass\n... \n>>> time.clock()\n7.7800000000000002\n>>> time.clock()\n7.7800000000000002\n>>> time.clock()\n7.7800000000000002\n","1025":"lists = random.sample(x, 2)\n# now we swap two random elements between lists[0], lists[1]\n","1026":"class SQLiteAlchemy(SQLAlchemy):\n    def apply_driver_hacks(self, app, info, options):\n        options.update({\n            'isolation_level': 'AUTOCOMMIT', \n            'encoding': 'latin1', \n            'echo': True\n        })\n        super(SQLiteAlchemy, self).apply_driver_hacks(app, info, options)\n\ndb = SQLiteAlchemy(app)\n","1027":"with open(\"hk_L1.ref\") as f:\n    data = numpy.array(f.read().split(), dtype=float).reshape(7000, 8)\n","1028":"import pygame\n\npygame.init()\n\nscreen = pygame.display.set_mode((800, 600), 0, 32)\n\nsurface1 = pygame.Surface((100,100))\nsurface1.set_colorkey((0,0,0))\nsurface1.set_alpha(128)\npygame.draw.circle(surface1, (0,255,0), (50,50), 50)\n\nsurface2 = pygame.Surface((100,100))\nsurface2.set_colorkey((0,0,0))\nsurface2.set_alpha(128)\npygame.draw.circle(surface2, (255,0,0), (50,50), 50)\n\nscreen.blit(surface1, (100,100))\nscreen.blit(surface2, (120,120))\n\npygame.display.update()\n\nRUNNING = True\n\nwhile RUNNING:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            RUNNING = False\n\npygame.quit()\n","1029":"In [8]: from bs4 import BeautifulSoup\n\nIn [9]: tree = BeautifulSoup('<html><body><div>Foo<\/div><div>Bar<\/div><para>Some text.<\/para><\/body><\/html>', 'xml')\n\nIn [10]: newpara = '<para>Some <emph type=\"bold\">new<\/emph> text.<\/para>'\n\nIn [11]: newpara = BeautifulSoup(newpara, 'xml')\n\n# here I use newpara.para as a shortcut to get the <para> element\n# as a new BeautifulSoup will include wrapping tags\nIn [12]: tree.find('para', text='Some text.').replaceWith(newpara.para)\nOut[12]: <para>Some text.<\/para>\n\nIn [13]: print tree\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<html><body><div>Foo<\/div><div>Bar<\/div><para>Some <emph type=\"bold\">new<\/emph> text.<\/para><\/body><\/html>\n","1030":"u'12.23.21.23'.encode('utf8')\n","1031":">>> df.pivot_table(index=['A','B','C'], columns='F', values=['D','E']).stack(0)\n\nF              2013-01-01  2013-02-01\nA     B C                            \none   A bar D         NaN   -0.326106\n            E         NaN   -0.882319\n        foo D    0.147015         NaN\n            E   -0.121944         NaN\n      B bar D    0.133723         NaN\n            E    0.182735         NaN\n        foo D         NaN    0.158913\n            E         NaN    0.365275\n      C bar D         NaN    0.495230\n            E         NaN    1.098515\n        foo D   -0.624333         NaN\n            E    0.214979         NaN\nthree A bar D         NaN    0.101431\n            E         NaN   -0.352368\n      B foo D         NaN    0.405091\n            E         NaN    0.389888\n      C bar D         NaN    0.804457\n            E         NaN   -0.572397\ntwo   A foo D    0.127069         NaN\n            E    0.105038         NaN\n      B bar D   -1.052195         NaN\n            E    0.728630         NaN\n      C foo D   -0.643464         NaN\n            E   -0.440381         NaN\n","1032":"{% for device in form.devices.field.choices.queryset %}\n    <input type=\"radio\" name=\"devices\" value=\"{{ device.pk }}\" class=\"radio-device\"\n        {% ifequal form.devices.value device.pk %}checked{% endifequal %}\n    \/>\n{% endfor %}\n","1033":"import Tkinter as tk\nfrom guiLoop import guiLoop # https:\/\/gist.github.com\/niccokunzmann\/8673951#file-guiloop-py\n\ndirection = 0\npos = 0 # the position should increase and decrease depending on left and right\n# I assume pos can be ... -3 -2 -1 0 1 2 3 ...\n\n@guiLoop\ndef move_dir():\n    global pos\n    while True: # edit 1: now looping always\n        print 'moving', direction \n        pos = pos + direction\n        yield 0.5 # move once every 0.5 seconds\n\ndef kp(event):\n    global direction # edit 2\n    if event.keysym == 'Right':\n        direction  = 1 # right is positive\n    elif event.keysym == 'Left':\n        direction = -1\n    elif event.keysym == 'Space':\n        direction = 0 # 0 is do not move\n    elif event.keysym == 'Escape':\n        root.destroy()\n\ndef kr(event):\n    global direction\n    direction = 0\n\nroot = tk.Tk()\nprint( \"Press arrow key (Escape key to exit):\" )\nroot.bind_all('<KeyPress>', kp)\nroot.bind_all('<KeyRelease>', kr)\nmove_dir(root)\nroot.mainloop()\n","1034":"import numpy as np\nimport matplotlib.pyplot as plt\n\n\nif __name__=='__main__':\n\n    rows = 144\n    columns = 175\n\n    camera_image = np.loadtxt(r'path\/to\/filename')\n    if(not camera_image.size == rows * columns):\n        raise Exception('Size mismatch!')\n\n    my_image = np.reshape(camera_image, (rows, columns)) \/ 255.0\n\n    figure = plt.figure()\n    axes = figure.add_subplot(1, 1, 1)\n\n    axes.imshow(my_image)\n\n    plt.show()\n","1035":"def ff7_checksum(data): # data used to be 'qw'\n  all_bits = 0xFFFF # a 16-bit value with all bits set.\n  result = all_bits # result used to be 'r'\n  pbit = 0x8000 # the highest-order bit in a 16-bit value.\n\n  for byte in data: # byte used to be 't'\n    result ^= byte << 8\n    for i in range(8):\n      result = (result << 1) ^ (0x1021 if result & pbit else 0)\n    result &= all_bits\n  return result ^ all_bits # the original &-mask is not necessary\n","1036":">>> regex = re.compile(ur\"\"\"\n...     ((?:\\w+\\s+)+?)((?:min|max|mon)\\.?)?\n...     ([0-9., ]+)(%|[^\\W\\d_]+\/[^\\W\\d_]+)\n...     \"\"\", re.X | re.I | re.U)\n>>> pprint(regex.findall(s))\n[(u'vitamin a ', u'min.', u' 14,053 ', u'iu\/kg'),\n (u'vitamin c ', u'', u'13,000', u'iu\/kg'),\n (u'vitamin d ', u'max.', u' 10,000', u'\\u03bc\/kg'),\n (u'copper ', u'', u'1', u'mg\/kg'),\n (u'vitamin e ', u'mon', u' 10.00', u'iu\/kg')]\n","1037":"df['sex'] = df.sex.str.lower()\n","1038":"od = OrderedDict({i:i for i in range(4)})\n# od = OrderedDict([(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)])\n\n# Replace the key and value for key == 0:\nd = OrderedDict(('replace','key') if key == 0 else (key, value) for key, value in od.items())\n# d = OrderedDict([('replace', 'key'), (1, 1), (2, 2), (3, 3), (4, 4)])\n\n# Single value replaces are done easily:\nd[1] = 20  # and so on..\n","1039":">>> import time\n>>> time.time()\n1336296696.824\n>>> _\n1336296696.824\n","1040":"for event in pygame.event.get():\n    if event.type == pygame.QUIT:\n       sys.exit()\n    elif event.type == KEYDOWN and event.key == K_ESCAPE:\n       sys.exit()\n    elif event.type == MOUSEBUTTONDOWN:\n        click_position = event.pos\n        if rock.point_collide(click_position):\n            print('Clicked within the rock')\n            clicks += 1\n            # Any other events that have to happen\n            #   when the rock is clicked\n","1041":"(filea,fileb).zipped.map((x,y)=> ((x.c_val+y.c_val)))\n","1042":"s = urllib2.urlopen(\"http:\/\/www.bing.com\/search?\"\n              + urllib.urlencode({ 'q' : u'\u6211\u7238\u662f\u674e\u521a' .encode('utf8') } )\n","1043":"import numpy as np\nfrom matplotlib import pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nx = np.linspace(-50,50,100)\ny = np.arange(25)\nX,Y = np.meshgrid(x,y)\nZ = np.zeros((len(y),len(x)))\n\nfor i in range(len(y)):\n    damp = (i\/float(len(y)))**2\n    Z[i] = 5*damp*(1 - np.sqrt(np.abs(x\/50)))\n    Z[i] += np.random.uniform(0,.1,len(Z[i]))\nax.plot_surface(X, Y, Z, rstride=1, cstride=1000, color='w', shade=False, lw=.5)\n\nax.set_zlim(0, 5)\nax.set_xlim(-51, 51)\nax.set_zlabel(\"Intensity\")\nax.view_init(20,-120)\nplt.show()\n","1044":"def floatstrcmp(left, right):\n   try:\n      return cmp(float(left), float(right))\n   except ValueError:\n      return cmp(left, right)\n","1045":"def func(self, args):\n    defaultargs = (1, 2, 3)\n    args = tuple(map(lambda x, y: y if y is not None else x, defaultargs, args))\n","1046":"In [170]:\nt=\"\"\"Date_Time,Open,High,Low,Close,Volume        \n2015-05-21 15:30,2128.00,2132.00,2127.25,2128.50,160643\n2015-05-21 14:30,2129.25,2130.25,2126.25,2128.25,68195\n2015-05-21 13:30,2128.50,2129.50,2125.75,2129.00,59661\n2015-05-21 12:30,2129.75,2130.75,2128.00,2128.25,40547\n2015-05-21 11:30,2130.00,2130.50,2127.75,2129.50,73274\"\"\"\n\u200b\nESData=pd.read_csv(io.StringIO(t), index_col=\"Date_Time\", parse_dates=[0])\ndf_initial_balance = ESData.between_time(start_time=\"12:30\",end_time=\"14:30\")\ndf_initial_balance\n\nOut[170]:\n                        Open     High      Low    Close  Volume        \nDate_Time                                                              \n2015-05-21 14:30:00  2129.25  2130.25  2126.25  2128.25           68195\n2015-05-21 13:30:00  2128.50  2129.50  2125.75  2129.00           59661\n2015-05-21 12:30:00  2129.75  2130.75  2128.00  2128.25           40547\n","1047":"data = json.load(data_file)\nfor obj in data:\n  pprint(obj['objectId'])\n","1048":"cursor = arcpy.SearchCursor(my_table)\nfor _ in cursor:\n    count += 1\nprint count\n","1049":"class SomeContainer(object):\n    def __iter__(self):\n        for elem in self._datastructure:\n            if elem.visible:\n                yield elem.value\n","1050":"datetime_column = [datetime.datetime.strptime('{} {}'.format(d, t),\n                                              '%Y-%m-%d %H:%M:%S')\n                   for d, t in zip(date, time)]\n","1051":"class Test():\n    def __init__(self):\n        self.base = numpy.zeros(6)\n        self.slice = slice(-3, self.base.size)\n        self.view = self.base[self.slice]\n\n    def __len__(self):\n        return len(self.view)\n\n    def update(self):\n        self.view[0] += 1\n\n    def add(self):\n        self.slice = slice(-len(self.view) - 1, self.base.size)\n        self.view = self.base[self.slice]        \n        self.view[0] = 1\n\n    def __getstate__(self):\n        return {'base': self.base, 'slice': self.slice}\n\n    def __setstate__(self, state):\n        self.base = state['base']\n        self.slice = state['slice']\n        self.view = self.base[self.slice]\n\n    def __repr__(self):\n        return str(self.view)\n","1052":">>> def CleanVSSET_apply(x):\n        # in my case CleanVSSET just returns the same values\n        d = CleanVSSET(*x.values)\n        r = d[0]\n        r['Cleaned'] = d[1]\n        return pd.Series(r)\n>>>\n>>> df_cleaned = df.apply(CleanVSSET_apply, axis=1)\n        BP Cleaned  Pain Pulse  RR  Temp\n0  111\/111    True     9    75  13  97.1\n1     None    True  None  None  18    98\n2   164\/87    True     6    79  15  None\n3   120\/72    True     5    77  18    97\n\n>>> pd.merge(df, df_cleaned, left_index=True, right_index=True, suffixes=['', 'cleaned'])\n        BP  Pain Pulse  RR  Temp BP_cleaned Cleaned Pain_cleaned  \\\n0  111\/111     9    75  13  97.1    111\/111    True            9   \n1     None  None  None  18    98       None    True         None   \n2   164\/87     6    79  15  None     164\/87    True            6   \n3   120\/72     5    77  18    97     120\/72    True            5   \n\n  Pulse_cleaned  RR_cleaned Temp_cleaned  \n0            75          13         97.1  \n1          None          18           98  \n2            79          15         None  \n3            77          18           97  \n","1053":"import argparse\nimport os\nimport glob\n\nversion = \"0.1.1\"\n\nparser = argparse.ArgumentParser(\n    description = 'cldir: clear a directory from .meta and other unwanted files')\n\n# arguments list\n\nparser.add_argument('-v', '--version', action='version', version = version)\n\nparser.add_argument('-d', '--directory', default=os.path.expanduser('~\/downloads'),\n                    help='directory to be cleaned')\n\nparser.add_argument('-e', default='meta', help='extension')\n\nargs = parser.parse_args()\nprint(args)\npath = os.path.join(args.directory)\nfiles = glob.glob(path + '*.{}'.format(args.e))\n\nif len(files) == 0:\n    print('No .meta files found in ~\/downloads')\nelse:\n    for f in files:\n        os.remove(f)\n    print('%d file(s) deleted' %len(files))\n","1054":"grouped_products = ['PLYC', 'PLYN']\ngb = (df[df.PRODUCT.isin(grouped_products)]\n      .groupby(['PERIOD', 'REGION2', 'REGION'])\n      .sum()\n      .reset_index())\ngb['PRODUCT'] = 'PLY'\n\nresult = pd.concat([gb, df.loc[~df.PRODUCT.isin(grouped_products), :]], ignore_index=True)\nresult.set_index(['PERIOD', 'REGION2', 'REGION', 'PRODUCT'], inplace=True)\n>>> result.loc[:, ['Production', 'NSLOG', 'CHIPS', 'SSAW']]\n                               Production  NSLOG  CHIPS     SSAW\nPERIOD REGION2 REGION PRODUCT                                   \n2010   FRANC   cw_eu  NaN             330  10.00  35.00      NaN\n2011   FINLA   n_eu   NaN            1000   1.00   4.00      NaN\n       FRANC   cw_eu  NaN             300  10.00   2.00      NaN\n2010   AUSTR   cw_eu  CWC             248  57.04  78.78      NaN\n                      CWF            1017    NaN    NaN    58.11\n                      DissP           282  93.60    NaN  1056.00\n","1055":"> x = df.ix[[0]]\n> y = df.ix[[1]]\n> type(x)\npandas.core.frame.DataFrame\n> type(y)\npandas.core.frame.DataFrame\n","1056":"b = bytearray(your_byte_data)\nbig_endian = (b[0] == 0x52)\noffset = 768 + big_endian\ncurrent_orientation = b[offset]  # get current orientation\nb[offset] = new_offset           # set it to something new\nopen('out_file', 'wb').write(b) \n","1057":"$string = 'my string'\n$encoded_string = md5($string);\n","1058":"from sqlalchemy import create_engine, Column, Integer, String, DateTime, Float, UnicodeText, VARCHAR, NVARCHAR, TEXT, DATE, distinct, ForeignKey, Table\nimport sqlalchemy\nfrom sqlalchemy.orm import sessionmaker, relationship\nfrom sqlalchemy.ext.declarative import declarative_base\nengine = create_engine(\"sqlite:\/\/\/.\/P_case.db\", \n                       echo=False)\n\nSession = sessionmaker( bind=engine )\nsession = Session()\n\nBase = declarative_base()\nmetadata = Base.metadata #########################\nclass Bus(Base):\n\n    __tablename__ = \"bus_info\"\n    id = Column( Integer, primary_key = True )\n\n    ## Bus\n    number = Column( Integer)\n\nmetadata.create_all( engine )    ######################\n","1059":"def _partial_move_for(self, cr, uid, move):\n    partial_move = {\n        'product_id' : move.product_id.id,\n\n        # Add product description\n        'product_description' : move.name,\n\n        'quantity' : move.product_qty if move.state in ('assigned','draft','confirmed') else 0,\n        'product_uom' : move.product_uom.id,\n        'prodlot_id' : move.prodlot_id.id,\n        'move_id' : move.id,\n        'location_id' : move.location_id.id,\n        'location_dest_id' : move.location_dest_id.id,\n    }\n    return partial_move\n\n# Add the product description to the wizard.\n# The values get filled in from stock_partial_picking._partial_move_for\nclass stock_partial_picking_line(osv.TransientModel):\n    _inherit = \"stock.partial.picking.line\"\n\n    _columns = {\n        'product_description': fields.char('Description'),\n    }\n","1060":"objective = (price[channel_id] * is_channel_assigned[channel_id])\n","1061":"import random\n\ndef die_roller(throws):\n    \"\"\"generates throws rolls of a die\"\"\"\n    for _ in xrange(throws):\n        yield random.randint(1, 6)\n\nroller = die_roller(10)\nprint type(roller)      # => <type 'generator'>\nprint list(roller)      # => [6, 6, 3, 1, 6, 3, 1, 5, 4, 4]\nprint sum(roller)       # roller was exhausted, generates null list thus 0 sum\n\nbig_roller = die_roller(10**5)\nprint sum(big_roller)   # => 3500238\n","1062":"layout->setStretchFactor(label, 15)\nlayout->setStretchFactor(line, 100)\n","1063":"@csrf_exempt\ndef save(request):\n    if request.method == 'POST':\n        rawdata1 = request.body\n        rawdata2 = json.loads(rawdata1)\n        length = len(rawdata2)\n        for i in range(0,length,1):\n            x = meterdata(time_elapsed=rawdata2[i]['time_elapsed'], volts=rawdata2[i]['volts'], amps=rawdata2[i]['amps'], kW=rawdata2[i]['kW'], kWh=rawdata2[i]['kWh'], session=rawdata2[i]['session'])\n            x.save()        \n    return HttpResponse(\"Success!\")\n","1064":"from config.TestClass import TestClass\nTestClass.add_key( \"mykey\", \"newvalue\" )\n","1065":"awk '{print NR\".\"$1}' file\n1.AAIT\n2.AAL\n3.AAME\n4.AAOI\n5.AAON\n","1066":"def getCbFun(queue): # closure\n    def cbFun(snmpEngine,stateReference,\n          contextEngineId, contextName,\n          varBinds,\n          cbCtx):\n        ...\n        queue.add(varBinds)\n        ...\n    return cbFun\n\n...\n\n# Shared queue object\nqueue = Queue()\n\n# Register SNMP Application at the SNMP engine\nntfrcv.NotificationReceiver(snmpEngine, getCbFun(queue))\n\n...\n","1067":"import csv\nwith open('desired-filename-here.csv', 'w', newline='') as csvfile:\n    csvwriter = csv.writer(csvfile, delimiter=' ',\n                           quotechar='|', quoting=csv.QUOTE_MINIMAL)\n    row_info = [productName.get_text(), productDesc.get_text(), \n                productPrice.get_text()]\n    csvwriter.writerow(row_info)\n","1068":" foreach (Process process in Process.GetProcesses().Where(p => \n                                                         p.ProcessName == \"calc\"))\n {\n     process.Kill();\n }\n","1069":"row = soup.find(\"tr\", class_=\"soup-target\")\nfor text_node in row.find_all(text=True, recursive=False):\n    text_node.extract()\n","1070":"sql = \"INSERT INTO {} ({}) VALUES ({})\".format(table, ','.join(columns), ','.join('[%s]' * len(columns)))\n# Generates: INSERT INTO my_table (column1,column2) VALUES (?,?)\ncursor.execute(sql, values)\n","1071":"elapsed_time = end - start\n\nif elapsed_time > 20:\n    # code\nelse:\n    # other code\n","1072":"from txsni.snimap import SNIMap\nfrom txsni.tlsendpoint import TLSEndpoint\n\nfrom twisted.web.server import Site\nfrom twisted.web.static import Data\nfrom twisted.internet import reactor\nfrom twisted.internet.ssl import Certificate, KeyPair, PrivateCertificate\nfrom twisted.internet.endpoints import serverFromString\n\ndef main(reactor):\n    root = Data(\"\", \"text\/plain\")\n    site = Site(root)\n\n    def load(key_path, cert_path):\n        with open(key_path) as key_file:\n            key = KeyPair.loadPEM(key_file.read())\n\n        with open(cert_path) as cert_file:\n             cert = cert.read()\n\n        return PrivateCertificate.fromCertificateAndKeyPair(cert, key)\n\n    snimap = SNIMap({\n        \"DEFAULT\": load('\/etc\/apache2\/ssl\/wc.key', '\/etc\/apache2\/ssl\/wc.crt').options(),\n        \"another.host.name\": load(another_key, another_cert).options(),\n        ...\n    })\n\n    endpoint = TLSEndpoint(serverFromString(reactor, \"tcp:80\"))\n    endpoint.listen(site)\n\n    reactor.run()\n","1073":"import random\n\nfor pixel in pic.get_pixels(): # Replace with appropiate way of getting the pixels\n    if random.random() < 0.25:\n        pixel.red = random.randint(256)\n        pixel.green = random.randint(256)\n        pixel.blue = random.randint(256)\n","1074":"import pygame\npygame.init()\nscreen = pygame.display.set_mode((490, 160))\nfont = pygame.font.SysFont('Arial', 150)\npattern = pygame.image.load('t.bmp').convert()\ntext = font.render('FooBar', True, (255, 255, 255), (0, 0, 0))\n\npattern.blit(text, (0, 0), special_flags = pygame.BLEND_MULT)\n\nscreen.blit(pattern, (0, 0))\npygame.display.flip();\nwhile True:\n    if pygame.event.get(pygame.QUIT):\n        break\n","1075":"list(glob.iglob('*'))\n","1076":"\"{0}\\\"\".format(str(round(x, 1) if x % 1 else int(x)))\n","1077":"In [205]: from pandas.io.json import json_normalize\n\nIn [206]: data = [{'state': 'Florida',\n   .....:           'shortname': 'FL',\n   .....:           'info': {\n   .....:                'governor': 'Rick Scott'\n   .....:           },\n   .....:           'counties': [{'name': 'Dade', 'population': 12345},\n   .....:                       {'name': 'Broward', 'population': 40000},\n   .....:                       {'name': 'Palm Beach', 'population': 60000}]},\n   .....:          {'state': 'Ohio',\n   .....:           'shortname': 'OH',\n   .....:           'info': {\n   .....:                'governor': 'John Kasich'\n   .....:           },\n   .....:           'counties': [{'name': 'Summit', 'population': 1234},\n   .....:                        {'name': 'Cuyahoga', 'population': 1337}]}]\n   .....: \n\nIn [207]: json_normalize(data, 'counties', ['state', 'shortname', ['info', 'governor']])\nOut[207]: \n         name  population info.governor    state shortname\n0        Dade       12345    Rick Scott  Florida        FL\n1     Broward       40000    Rick Scott  Florida        FL\n2  Palm Beach       60000    Rick Scott  Florida        FL\n3      Summit        1234   John Kasich     Ohio        OH\n4    Cuyahoga        1337   John Kasich     Ohio        OH\n","1078":">>> import glob\n>>> types = ('*.pdf', '*.cpp') # the tuple of file types\n>>> files_grabbed = []\n>>> for files in types:\n...     files_grabbed.extend(glob.glob(files))\n... \n>>> files_grabbed   # the list of pdf and cpp files\n","1079":"for line in fin1:\n    for word in line.split():\n","1080":"import wx\n\nclass TextFrame(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, -1, 'Text Editor', size=(300, 250))\n\n        self.panel = wx.Panel(self, -1) \n\n        self.multiText = wx.TextCtrl(self.panel, -1,\"\",size=(200, 100), style=wx.TE_MULTILINE|wx.EXPAND)\n\n        sizer = wx.BoxSizer()\n        sizer.Add(self.multiText, proportion=1, flag=wx.CENTER|wx.EXPAND)\n        self.panel.SetSizer(sizer)\n\n        self.CreateStatusBar()\n\n        self.multiText.Bind(wx.EVT_KEY_UP, self.updateLineCol)\n        self.multiText.Bind(wx.EVT_LEFT_DOWN, self.updateLineCol)\n\n    def updateLineCol(self, event):\n        #lineNum = len(self.multiText.GetRange( 0, self.multiText.GetInsertionPoint() ).split(\"\\n\"))\n        l,c = self.multiText.PositionToXY(self.multiText.GetInsertionPoint())\n\n        stat = \"col=%s, row=%s\" % (l,c)\n\n        self.StatusBar.SetStatusText(stat, number=0)\n\n        event.Skip()\n\napp = wx.App(False)\nframe = TextFrame()\nframe.Show()\napp.MainLoop()\n","1081":">>>re.findall(r'([\\d:]*)([A-Z]+)\\s*([A-Z]+)(?=<\/a>)','tabindex=\"1\" >Game: Wild at Blackhawks 8:00PM ET<\/a>')\n>>>[('8:00', 'PM', 'ET')]\n","1082":"result_map = {}\nfor item in response:\n    if item['country'] is None:\n        continue\n    if item['country'] not in result_map:\n        result_map[item['country']] = item['percent']\n    else:\n        result_map[item['country']] += item['percent']\n\nresults = [\n    {'country': country, 'percent': percent}\n    for country, percent in result_map.items()\n]\n","1083":"for row in csv_doc:\n     for cell in row:\n          csv_array.append(cell)\n","1084":"import re\n\nexpr = re.sub(r'\\b' + ip + r'\\b', \"(\"+ip+\".~\"+ip+\")\", expr)\n","1085":"self.sensor = tk.BooleanVar()\nself.sensor.trace(\"w\", self.on_sensor_change)\n...\ndef on_sensor_change(self, *args):\n    print \"the sensor changed:\", self.sensor.get()\n","1086":"widget = QWidget()    \nlayout = QVBoxLayout()\n\nbtn = QPushButton(\"To be removed\")\nlayout.addWidget(btn)\nwidget.setLayout(layout)\n\n# later\nbtn.setParent(None)\n","1087":"print df\n   C1  C2  C3  C4  C5\n0   1   1   1   1   4\n1   1   2   1   2   5\n2   1   1   3   1   4\n\nprint ~(df == 2)\n     C1     C2    C3     C4    C5\n0  True   True  True   True  True\n1  True  False  True  False  True\n2  True   True  True   True  True\n\ndf = df.loc[:, ~(df == 2).any(axis=0)]\nprint df\n   C1  C3  C5\n0   1   1   4\n1   1   1   5\n2   1   3   4\n\ndf = df.loc[~(df == 5).any(axis=1)]\nprint df\n   C1  C3  C5\n0   1   1   4\n2   1   3   4\n","1088":"for key,group in itertools.groupby(dirtup2,operator.itemgetter(2)):\n    newlist=sorted(group,key=operator.itemgetter(1),reverse=True)\n    tuple_with_max=newlist[0]\n    print tuple_with_max\n","1089":"import urllib\nself.redirect(\"sites.htm?%s\" % urllib.urlencode(dict(a=\"this and that\", b=\"back and forth)))\n","1090":"    No command 'pycclean' found, did you mean:\n     Command 'py3clean' from package 'python3-minimal' (main)\n     Command 'pyclean' from package 'python-minimal' (main)\n    pycclean: command not found\n","1091":"[m for m in abc if 'on' in m]\n","1092":"obj_width = xmax - xmin\nobj_height = ymax - ymin\nif (obj_width \/ obj_height > ratio)\n{\n    height_adjustment = ((obj_width \/ ratio) - (ymax - ymin)) \/ 2;\n    ymin -= height_adjustment;\n    ymax += height_adjustment;\n    if (ymin < 0)\n    {\n        ymax -= ymin;\n        ymin = 0;\n    }\n    if (ymax >= image_height)\n        ymax = image_height - 1;\n}\nelse if (obj_width \/ obj_height < ratio)\n{\n    width_adjustment = ((obj_height * ratio) - (xmax - xmin)) \/ 2;\n    xmin -= width_adjustment;\n    xmax += width_adjustment;\n    if (xmin < 0)\n    {\n        xmax -= xmin;\n        xmin = 0;\n    }\n    if (xmax >= image_width)\n        xmax = image_width - 1;\n}\n","1093":"import numpy as np\nimport scipy as sp\nimport scipy.stats\n\ndef mean_confidence_interval(data, confidence=0.95):\n    a = 1.0*np.array(data)\n    n = len(a)\n    m, se = np.mean(a), scipy.stats.sem(a)\n    h = se * sp.stats.t._ppf((1+confidence)\/2., n-1)\n    return m, m-h, m+h\n","1094":"n = 8\nn1 = 4\nfor x in itertools.combinations( xrange(n), n1 ) :\n    print [ 1 if i in x else 0 for i in xrange(n) ] \n\n[1, 1, 1, 1, 0, 0, 0, 0]\n[1, 1, 1, 0, 1, 0, 0, 0]\n[1, 1, 1, 0, 0, 1, 0, 0]\n[1, 1, 1, 0, 0, 0, 1, 0]\n...\n[0, 0, 0, 1, 1, 1, 0, 1]\n[0, 0, 0, 1, 1, 0, 1, 1]\n[0, 0, 0, 1, 0, 1, 1, 1]\n[0, 0, 0, 0, 1, 1, 1, 1]\n","1095":"import sendgrid\n\nsg = sendgrid.SendGridClient('sendgrid_apikey')\n\nmessage = sendgrid.Mail()\nmessage.add_to('John Doe <john@email.com>')\nmessage.set_subject('Example')\nmessage.set_html('Body')\nmessage.set_text('Body')\nmessage.set_from('Doe John <doe@email.com>')\n\n# This next section is all to do with Template Engine\n\n# You pass substitutions to your template like this\nmessage.add_substitution('-thing_to_sub-', 'Hello! I am in a template!')\n\n# Turn on the template option\nmessage.add_filter('templates', 'enable', '1')\n\n# Tell SendGrid which template to use\nmessage.add_filter('templates', 'template_id', 'TEMPLATE-ALPHA-NUMERIC-ID')\n\n# Get back a response and status\nstatus, msg = sg.send(message)\n","1096":"from BeautifulSoup  import BeautifulSoup\nfrom django import template\nfrom django.template.defaultfilters import stringfilter\nimport pygments\nimport pygments.formatters\nimport pygments.lexers\n\n\nregister = template.Library()\nwanted = {'br': '<br \/>', 'BR': '<BR \/>', 'nbsp': '&nbsp;', 'NBSP': '&NBSP;', '\/&gt;': ''}\n\ndef uglyfilter(html):\n    content = BeautifulSoup(html)\n    for node in content.findAll('span'):\n        data = ''.join(node.findAll(text=True))\n        if wanted.has_key(data):\n            node.replaceWith(wanted.get(data))\n    return unicode(content)     \n\n\n@register.filter\n@stringfilter\ndef pygmentized(html):\n    soup = BeautifulSoup(html)\n    codeblocks = soup.findAll('pre')\n    for block in codeblocks:\n        if block.has_key('class'):\n            try:\n                code = ''.join([unicode(item) for item in block.contents])\n                lexer = pygments.lexers.get_lexer_by_name(block['class'], stripall=True)\n                formatter = pygments.formatters.HtmlFormatter()\n                code_hl = pygments.highlight(code, lexer, formatter)\n                clean = uglyfilter(code_hl)\n                block.contents = [BeautifulSoup(clean)]\n                block.name = 'pre'\n            except:\n                raise\n    return unicode(soup)\n","1097":"<for loop:>\n    os.system('yes Y | <external command>')\n","1098":"with open (\"data.txt\", \"r\") as myfile:\n    data=myfile.read().replace('\\n', '')\n","1099":"#python 3\n#from tkinter import *\n#from tkinter import ttk\n\n#python 2\nfrom Tkinter import *\nimport ttk\n\nimport time\nimport subprocess\nimport paramiko\n\nimport threading\n\n# keep track of widgets for event handlers\nwidget_track = {}\n\n# event handler creates connect thread\ndef connect_evt():\n    t = threading.Thread(target=connect)\n    t.daemon = True\n    t.start()\n    widget_track['connect'].config(text=\"Connected\", state=\"disabled\", command=None)\n\ndef connect():\n  time.sleep(5)   # todo: temporary for test\n  return\n  ssh = paramiko.SSHClient()\n  ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n  ssh.connect('192.168.1.2', username='pi', password='raspberry')\n  stdin, stdout, stderr = ssh.exec_command('cd')\n  stdin, stdout, stderr = ssh.exec_command('roscore &')\n  time.sleep(20)\n  stdin, stdout, stderr = ssh.exec_command('\\n')\n  stdin, stdout, stderr = ssh.exec_command('cd scripts')\n  stdin, stdout, stderr = ssh.exec_command('python \/home\/pi\/scripts\/listener2.py')\n  return\n\n# event handler creates run thread\ndef run_evt():\n    t = threading.Thread(target=run)\n    t.daemon = True\n    t.start()\n    widget_track['run'].config(text=\"Running\", state=\"disabled\", command=None)\n\ndef run():\n  time.sleep(5)     # todo: temporary for test\n  return\n  stdin, stdout, stderr = ssh.exec_command('python ES96_Vivaldi\/talker2.py')\n\n\nroot = Tk()\n\nmainframe = ttk.Frame(root, padding=\"3 3 12 12\")\nmainframe.grid(column=0, row=0, sticky=(N, W, E, S))\nmainframe.columnconfigure(0, weight=1)\nmainframe.rowconfigure(0, weight=1)\n\n# connect button starts connect background thread\nbtn = ttk.Button(mainframe, text=\"Connect\", command=connect_evt)\nbtn.grid(column=1, row=3, sticky=S)\nwidget_track['connect'] = btn\n\n# run button start run background thread\nbtn = ttk.Button(mainframe, text=\"Run\", command=run_evt)\nbtn.grid(column=3, row=3, sticky=S)\nwidget_track['run'] = btn\n\nttk.Label(mainframe, text=\"Click 'Connect' to establish link.\").grid(column=1, row=1, sticky=W)\nttk.Label(mainframe, text=\"Click 'Run' to control using the arrow keys\").grid(column=1, row=2, sticky=W)\n\nfor child in mainframe.winfo_children(): child.grid_configure(padx=5, pady=5)\n\n\nroot.mainloop()\n","1100":"    import sys; print sys.version\n    import wx; print wx.version()\n\n\n    class TestFrame(wx.Frame):\n\n        def __init__(self):\n            wx.Frame.__init__(self, None, -1, \"hello frame\")\n            self.inspected = True\n            self.txt = wx.TextCtrl(self, style=wx.TE_PROCESS_ENTER)\n            self.txt.SetLabel(\"this box must contain the word 'hello' \")\n            self.txt.Bind(wx.EVT_TEXT_ENTER, self.onEnter)\n            self.txt.Bind(wx.EVT_KILL_FOCUS, self.onLostFocus)\n            self.txt.Bind(wx.EVT_TEXT, self.onText)\n\n        def onEnter(self, e):\n            self.inspectText()\n\n        def onLostFocus(self, e):\n            self.inspectText()\n\n        def onText(self, e):\n            self.inspected = False\n\n        def inspectText(self):\n            if not self.inspected:\n                self.inspected = not self.inspected\n                if 'hello' not in self.txt.GetValue():\n                    self.failedInspection()\n            else:\n                print \"no need to inspect or warn user again\"\n\n        def failedInspection(self):\n            dlg = wx.MessageDialog(self,\n                                   \"The word hello is required before hitting enter or changing focus\",\n                                   \"Where's the hello?!\",\n                                   wx.OK | wx.CANCEL)\n            result = dlg.ShowModal()\n            dlg.Destroy()\n            if result == wx.ID_OK:\n                pass\n            if result == wx.ID_CANCEL:\n                self.txt.SetLabel(\"don't forget the 'hello' !\")\n\n    mySandbox = wx.App()\n    myFrame = TestFrame()\n    myFrame.Show()\n    mySandbox.MainLoop()\n    exit()\n","1101":"firefox[.exe] -CreateProfile <profile_name>\n","1102":"len_counts = [\n    (1, 24), # 24 1-length words\n    (2, 39), # 39 2-length words\n    ...\n]\n","1103":"import os\nfrom win32com.client import GetObject\n\nos.startfile(r'C:\\path\\to\\ReutersExcel.exe')\nxlApp = GetObject(None, 'Excel.Application')\n","1104":"from string import punctuation, whitespace\nimport urllib2\nimport datetime\nimport re\nfrom bs4 import BeautifulSoup as Soup\n\ntoday = datetime.date.today()\nhtml = urllib2.urlopen(\"http:\/\/www.99acres.com\/property-in-velachery-chennai-south-ffid\").read()\n\nsoup = Soup(html)\nprint \"INSERT INTO Property (URL,Rooms, Place, Phonenumber1,Phonenumber2,Phonenumber3,Typeofperson, Name)\"\nprint \"VALUES (\"\nre_digit = re.compile('(\\d+)')\nproperties = soup.findAll('a', title=re.compile('Bedroom'))\n\nfor eachproperty in soup.findAll('div', {'class':'sT'}):\n  a      = eachproperty.find('a', title=re.compile('Bedroom'))\n  pdate  = eachproperty.find('i', {'class':'pdate'})\n  pdates = re.sub('(\\s{2,})', ' ', pdate.text)\n  div    = eachproperty.find('div', {'class': 'sT_disc grey'})\n  try:\n    project = div.find('span').find('b').text.strip()\n  except:\n    project = 'No project'        \n  area = re.findall(re_digit, div.find('i', {'class': 'blk'}).text.strip())\n  print today,\",\"+\"http:\/\"+ (a['href'] if a else '')+\",\", (a.string if a else '')+ \",\" +\",\".join(re.findall(\"'([a-zA-Z0-9,\\s]*)'\", (a['onclick'] if a else '')))+\",\"+ \", \".join([project] + area),\",\"+pdates\n","1105":"train['Year'] = train.Dates.dt.year\ntrain['Month'] = train.Dates.dt.month\n","1106":"In [6]:\n\ndf = pd.DataFrame({'a':randn(10), 'b':randn(10)})\ndf\nOut[6]:\n          a         b\n0 -0.498370  0.350204\n1 -0.484727 -0.977876\n2 -0.319675 -0.781217\n3  0.618511  0.416958\n4 -0.834304  1.606860\n5  0.768302 -0.394504\n6 -0.033161 -1.539782\n7 -0.062261  1.411695\n8 -0.227656 -0.527440\n9  0.843263  0.927568\nIn [7]:\n\nindex = [0, 7, 8, 9]\ndf[~df.index.isin(index)]\nOut[7]:\n          a         b\n1 -0.484727 -0.977876\n2 -0.319675 -0.781217\n3  0.618511  0.416958\n4 -0.834304  1.606860\n5  0.768302 -0.394504\n6 -0.033161 -1.539782\n","1107":"class mainWindow(QtGui.QWidget):\n    def __init__(self):\n        super(mainWindow, self).__init__()\n        self.layout = QtGui.QVBoxLayout()\n\n        self.label1 = QtGui.QLabel()\n        self.label1.setText(\"Name\")\n        self.lineEdit1 = QtGui.QLineEdit()\n        self.lineEdit1.setToolTip(\"This is a ToolTip\")\n\n        self.label2 = QtGui.QLabel()\n        self.label2.setText(\"Age\")\n        self.lineEdit2 = QtGui.QLineEdit()\n        self.lineEdit2.setToolTip(\"This is another ToolTip\")\n","1108":"(i for i,v in enumerate(l) if MyString in i).next()\n","1109":"for n in range(15): \n    if n == 100:\n        print(n)  \n        break\n","1110":"for pkg in given_pkg:\n    for module_or_class in pkg:\n        for attribute in module_or_class:\n","1111":"class MyForm(forms.Form):\n    def __init__(self, request, *args, **kwargs)\n        self.request = request\n        super(MyForm, self).__init__(*args, **kwargs)\n\n    def clean(self):\n        if not self.request.session.get('file_downloaded', False):\n            raise ValidationError('File not downloaded!')\n\ndef my_view(request):\n    form = MyForm(request, data=request.POST)\n","1112":"subprocess.Popen(whatever, stdin=sys.stdout, stdout=sys.stdin)\n","1113":"for arry, name in zip(pglist, deptNames5):\n    NewPdf = PdfFileWriter()\n    for page in arry:\n        pagenumber = pdfDoc.getPage(page)\n        NewPdf.addPage(pagenumber)\n    with open(name + b'.pdf', 'wb') as f:\n        NewPdf.write(f)\n","1114":"-r req-1.txt\n-r req-2.txt\n","1115":">>> from collections import Counter\n>>> myword = [{'a': 2}, {'b':3}, {'c':4}, {'a':1}]\n>>> c = Counter()\n>>> for d in myword:\n...     c.update(d)\n...\n>>> [{key: value} for key, value in c.items()]\n[{'a': 3}, {'c': 4}, {'b': 3}]\n\n>>> [{key: value} for key, value in sorted(c.items())]\n[{'a': 3}, {'b': 3}, {'c': 4}]\n","1116":">>> import difflib\n>>> s = difflib.SequenceMatcher(None, \"GHSKWITNIFSI\", \"GHSKWAGDITNIFSI\")\n>>> s.get_matching_blocks()[:-1]\n[(0, 0, 5), (5, 8, 7)]\n>>> s = difflib.SequenceMatcher(None, \"GHSKWITNIFSI\", \"GHSKWITNIFSI\")\n>>> s.get_matching_blocks()[:-1]\n[(0, 0, 12)]\n","1117":"from selenium import webdriver\n\n\ndriver = webdriver.Firefox()\nwhile True:\n    driver.get(\"http:\/\/www.nbe.gov.in\/asr\/neet_pdf\/\")\n\n    if 'NEET-PG' in driver.title:\n        break\n","1118":"sel.capture_entire_page_screenshot(\"entirePageScreenshot.png\", \"\")\n","1119":"def __iter__(self):\n    for k in self.keys():\n        yield k\n","1120":"def swap(a, i, j):\n    a[i], a[j] = a[j], a[i]\n\ndef permute(a, i, n):\n    if i == n:\n        print(a)\n        return\n    for j in range(i, n+1):\n        swap(a, i, j)\n        permute(a, i+1, n)\n        swap(a, i, j)  # backtrack\n\ndef main():\n    a = list('ABC')\n    permute(a, 0, 2)\n\nif __name__ == '__main__':\n    main()\n","1121":"with open('myfile', 'r') as f:\n    data = [line.split() for line in f]\n","1122":"def table_all():\n    for line in range(1,13):\n        for table in range(1,13):\n            print(line * table, end=\" \")\n        print(\"\\n\") \n","1123":"# Python_2\n\ndef copy_with_callback(sourceFile, destinationFile, callbackFunction):\n    chunk = 4*1024\n    sourceSize = os.path.getsize(sourceFile)\n    destSize = 0\n    with open(sourceFile, 'rb') as fSrc:\n        with open(destinationFile, 'wb') as fDest:\n            data = fSrc.read(chunk)\n            if len(data) == 0:\n                break\n            fDest.write(data)\n            destSize += len(data)\n            callbackFunction(sourceSize, destSize)\n\ndef example_callback_function(srcSize, dstSize):\n    ''' Just an example with print.  Your viewer code will vary '''\n    print 'Do something with these values:', srcSize, dstSize\n    print 'Percent?', 100.0 * dstSize \/ srcSize\n\ndef main():\n    src = '\/tmp\/A\/path\/to\/a\/file.txt'\n    dest = '\/tmp\/Another\/path\/to\/a\/file.txt'\n    copy_with_callback(src, dest, example_callback_function)\n","1124":"import Tkinter, random\n\nclass BubbleFrame:\n\n    def __init__(self, root):\n        root.title(\"Math Bubbles\")\n        Tkinter.Button(root, text=\"Add Bubbles\", width=8, command=self.bubble).pack()\n        Tkinter.Button(root, text=\"Quit\", width=8, command=quit).pack()\n        self.canvas = Tkinter.Canvas(root, width=800, height=650, bg = '#afeeee')\n        self.canvas.pack()\n        self.bubbles = {} # this will hold bubbles ids, positions and velocities\n\n    def bubble(self):\n        # add bubbles for numbers from 1 to 20\n        for number in range(1, 20+1):\n            xval = random.randint(5,765)\n            yval = random.randint(5,615)\n            s1 = self.canvas.create_oval(xval,yval,xval+30,yval+30, fill=\"#00ffff\",outline=\"#00bfff\",width=5)\n            s2 = self.canvas.create_text(xval+15,yval+15, text=number)\n            self.bubbles[(s1, s2)] = (xval, yval, 0, 0) # add bubbles to dictionary\n\n    def loop(self, root):\n        for (s1, s2), (x, y, dx, dy) in self.bubbles.items():\n            # update velocities and positions\n            dx += random.randint(-1, 1)\n            dy += random.randint(-1, 1)\n            # dx and dy should not be too large\n            dx, dy = max(-5, min(dx, 5)), max(-5, min(dy, 5))\n            # bounce off walls\n            if not 0 < x < 770: dx = -dx\n            if not 0 < y < 620: dy = -dy\n            # apply new velocities\n            self.canvas.move(s1, dx, dy)\n            self.canvas.move(s2, dx, dy)\n            self.bubbles[(s1, s2)] = (x + dx, y + dy, dx, dy)\n        # have mainloop repeat this after 100 ms\n        root.after(100, self.loop, root)\n\nif __name__ == \"__main__\":\n    root = Tkinter.Tk()\n    frame = BubbleFrame(root)\n    frame.loop(root)\n    root.mainloop()\n","1125":"print frame\n#   player_id  season_id   game_id  points  mean_to_date\n#0        200      21999  29900007      10             0\n#1        200      21999  29900023      20             0\n#2        200      21200  29900042      10             0\n#3        200      21200  29900059      20             0\n#4        200      21200  29900081      30             0\n#5        300      21999  29900089      10             0\n#6        300      22111  29900108      10             0\n#7        300      22111  29900118      20             0\n#8        300      22111  29900143      30             0\n\n\nframe['mean_to_date'] = frame.groupby(['player_id','season_id']).apply(\n          lambda x: pd.expanding_mean(x['points'], 1).shift(1)\n                                                     .fillna(0))\n                                                     .reset_index(drop=True)\nprint frame\n\n#   player_id  season_id   game_id  points  mean_to_date\n#0        200      21999  29900007      10             0\n#1        200      21999  29900023      20            10\n#2        200      21200  29900042      10             0\n#3        200      21200  29900059      20            10\n#4        200      21200  29900081      30            15\n#5        300      21999  29900089      10             0\n#6        300      22111  29900108      10             0\n#7        300      22111  29900118      20            10\n#8        300      22111  29900143      30            15\n","1126":"def __init__(self,parent,title,...):\n      wx.Frame.__init__(self, parent, title=title, style=wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER)\n      self.Bind(wx.EVT_CLOSE,self.OnClose)\n\ndef OnClose(self,evt):\n      print \"CLOSE!!!\"\n      self.Destroy()\n","1127":"def multiply_digits(lst):\n    res = []\n    for x in lst:\n        if res and res[-1] * x < 10:\n            res[-1] *= x\n        else:\n            res.append(x)\n    return res\n","1128":"class Impl(Base):\n    @ClassProperty\n    @classmethod\n    def foo(cls):\n        return 5\n\nIn [11]: Impl.foo\nOut[11]: 5\n","1129":"$ cat test.py\nimport os\nprint os.fstat(0) == os.fstat(1)\n$ python test.py\nTrue\n$ python test.py > f\n$ cat f\nFalse\n$\n","1130":">>> import sys\n>>> class Person(object):\n    pass\n\n>>> list1 = [Person() for _ in range(5)]\n>>> sys.getrefcount(list1[0])\n2  # list1 and getrefcount\n>>> list2 = list1[:]\n>>> sys.getrefcount(list2[0])\n3  # list1, list2 and getrefcount\n>>> del list1  # or just reassign e.g. list1 = None\n>>> sys.getrefcount(list2[0])\n2  # list2 and getrefcount\n","1131":"def to_seconds(s):\n    hr, min, sec = [float(x) for x in s.split(':')]\n    return hr*3600 + min*60 + sec\n","1132":"from threading import Thread\nfrom Queue import Queue\n\n\ndef produce(queue, n_items):\n    for d in range(n_items):\n        queue.put(d)\n        print \"put {0} in queue\".format(d)\n\ndef consume(queue, n_items):\n    d = 0\n    while d != n_items -1: # You need some sort of stop condition\n        d = queue.get()\n        print \"got {0} from queue\".format(d)\n\ndef start_producer_and_consumer(wait):\n    q = Queue()\n    consumer_thread = Thread(target = consume, args = (q, 10))\n    producer_thread = Thread(target = produce, args = (q, 10))\n    producer_thread.start()\n    consumer_thread.start()\n    if wait:\n        producer_thread.join()\n        consumer_thread.join()\n\nif __name__ == '__main__':\n    start_producer_and_consumer(True)\n","1133":"def f(...):\n    ...\nf = staticmethod(f)\n\n@staticmethod\ndef f(...):\n    ...\n","1134":"prompt = \"> \"\ndecision = \"What do you do?\"\nnot_assigned = \"Say wa?\"\n\nclass Game:\n\n    def __init__(self):\n        self.bodySearched = False\n        self.engine_room()\n\n    def engine_room(self):\n        print \"You are in a dark room with the sound of moaning engines.\"\n        print \"You see a corridor to your left and one to your right and an elevator straight ahead of you.\"\n        print decision\n        self.choice = raw_input(prompt)\n\n        if self.choice == \"go left\":\n            self.viewing_room()\n\n        elif self.choice == \"go right\":\n            self.right_corridor_dead_end()\n\n        elif self.choice == \"use elevator\":\n            print \"you get in the elevator and go up.\"\n            self.main_hallway()\n\n        else:\n            print not_assigned\n            self.engine_room()\n\n\n    def right_corridor_dead_end(self):\n        print \"You walk down the corridor only to be blocked by a collapsed ceiling.\"\n        print decision\n        self.choice = raw_input(prompt)\n\n        if choice == \"go back\":\n            self.engine_room()\n\n        else:\n            print not_assigned\n\n    def viewing_room(self): \n        print \"You walk down the corridor and enter and a large room with a window covering the size of the wall.\"\n        print \"Straight ahead is another door\"\n        print decision\n        self.choice = raw_input(prompt)\n\n        if not self.bodySearched:\n            if self.choice == \"open door\":\n                print \"The door is locked\"\n                self.viewing_room()\n\n            elif self.choice == \"go back\":\n                self.engine_room()\n\n            else:\n                print not_assigned\n\n        if self.bodySearched:\n            if self.choice == \"open door\":\n                print \"The door opens you walk through\"\n                self.storage_room()\n\n            else:\n                print not_assigned\n                self.viewing_room()\n\n\n    def main_hallway(self):\n            print \"You enter a large brightly lit room with 3 rooms connected to it and another elevator straight ahead.\"\n            print \"The rooms are named, the two on the left are the armoury and lab rooms and to the right are the cabins.\"\n            print decision\n            self.choice = raw_input(prompt)\n\n            if choice == \"go to lab room\":\n                self.lab_room()\n\n            elif choice == \"go back\":\n                self.engine_room()\n\n\n\n    def lab_room(self):\n        print \"You enter the lab room which is cluttered with unexplainable machines.\"\n        print \"To the back of the room you see the dead body of a man with no obvious cause\"\n        print \"He might have something useful on him\"\n        print decision\n        self.choice = raw_input(prompt)\n\n        if self.choice == \"search body\":\n            self.bodySearched = True\n            print \"You find a keycard that says 'storage' on it.\"\n            self.lab_room()\n\n        elif self.choice == \"go back\":\n            self.main_hallway()\n\nnewGame = Game()\n","1135":"def quickSrt(lst):\n    if len(lst) < 2:\n        return lst\n    pivot = lst[0]\n    l = quickSrt([x for x in lst[1:] if x < pivot])\n    r = quickSrt([x for x in lst[1:] if x >= pivot])\n    return l + [pivot] + r\n\nk = [1,2,3,5,3,1,6,3]\nd = {}\nfor i in k:\n if i in d:\n   d[i] += 1\n else:\n   d[i] = 1\n\nvalues = [value for key, value in d.items()]\nval = quickSrt(values)\n\nfor x,y in d.items():\n  if y == val[-1]:\n    print(x)\n","1136":"opener = urllib.FancyURLopener({})\nf = opener.open(\"http:\/\/london.mycompany\/mydir\/\")\nf.read()\n","1137":"class MyModelAdmin(admin.ModelAdmin):\n    list_display = ('get_sub_title',)\n\n    def get_sub_title(self, obj):\n        if obj.sub_title:\n            return obj.sub_title\n        else:\n            return 'Not Available'\n\n    get_sub_title.short_description = 'Subtitle'\n","1138":">>> from collections import defaultdict\n>>> d = defaultdict(list)\n>>> l = [('admincases', 'test_case_6'), ('admincases', 'test_case_8'),('admincases1', 'test_case_8'),('admincases1', 'test_case_9'),('admincases1', 'test_case_10')]\n>>> for k,v in l:\n...    d[k].append(v)\n... \n>>> d['admincases']\n['test_case_6', 'test_case_8']\n","1139":"In [1]: from collections import namedtuple\n\nIn [2]: Foo = namedtuple('Foo', ['item1', 'item2'], verbose=False)\n\nIn [3]: class ExtendedFoo(Foo):\n   ...:     def __hash__(self):\n   ...:         return hash(self.item1) * hash(self.item2)\n   ...: \n\nIn [4]: foo = ExtendedFoo(1, 2)\n\nIn [5]: hash(foo)\nOut[5]: 2\n","1140":"value_to_find = 0.15\nMin = df['A'] <= value_to_find\nMax = df['A'] >= value_to_find\nidx_Min = df.ix[Min, 'A'].idxmax()\nidx_Max = df.ix[Max, 'A'].idxmin()\ndf.ix[idx_Min:idx_Max, ['A','B']]\n\n       A   B\nA           \n0.1  0.1  11\n0.2  0.2  12\n","1141":"hourlist,minutelist,secondlist=[],[],[]\n\nf = open(\"newtext.txt\", 'r')\nfor line in f:\n    line = line.strip()\n    columns = line.split()\n    time = columns[0]\n    hourlist.append(int(time[0:2]))\n    minutelist.append(int(time[2:4]))\n    secondlist.append(int(time[4:6])) \nf.close()\n\nhour = int(time[0:2])\nminute = int(time[2:4])\nsecond = int(time[4:6])\n\nprint hourlist, minutelist,secondlist\n","1142":"for key in bucket.list():\n   akey = bucket.get_key(key.name)\n   print akey.get_metadata(\"company\")\n","1143":"mv server server.bk &&\nmkdir server &&\nawk -F, '\nNR==FNR { map[\"server.bk\/\"$2\".csv\"]=$1; next }\nFNR==1 { close(out); out=\"server\/\"map[FILENAME]\".csv\"; print \"date,\"map[FILENAME] > out }\n{ print > out }\n' servers.csv server.bk\/*.csv\n","1144":"from arcpy import mapping\n\n## Load the map from disk\nmxdFilePath = \"C:\\\\GIS_Maps_Folder\\\\MyMap.mxd\"\nmapDoc = mapping.MapDocument(mxdFilePath)\n\n## Load map elements\ndataFrame = mapping.ListDataFrames(mapDoc)[0]   #assumes you want the first dataframe; you can also search by name\nmxdLayers = mapping.ListLayers(dataFrame)\n\n## Adjust layers\nfor layer in mxdLayers:\n    if (layer.name == 'zip'):\n        zip_lyr = layer\n    elif(layer.name == 'sample_units'):\n        labels_lyr = layer\n\n## Print zip code map\nzip_lyr.visible = True\nzip_lyr.showLabels = True\nlabels_lyr.visible = False\nlabels_lyr.showLabels = False\n\nzip_path = \"C:\\\\Output_Folder\\\\Zips.pdf\"\nmapping.ExportToPDF(mapDoc, zip_path, layers_attributes=\"NONE\", resolution=150)\n\n## Print labels map\nzip_lyr.visible = False\nzip_lyr.showLabels = False\nlabels_lyr.visible = True\nlabels_lyr.showLabels = True\n\nlabels_path = \"C:\\\\Output_Folder\\\\Labels.pdf\"\nmapping.ExportToPDF(mapDoc, labels_path, layers_attributes=\"NONE\", resolution=150)\n\n## Combine files (if desired)\npdfDoc = mapping.PDFDocumentCreate(\"C:\\\\Output_Folder\\\\Output.pdf\"\")\npdfDoc.appendPages(zip_path)\npdfDoc.appendPages(labels_path)\npdfDoc.saveAndClose()\n","1145":"import numpy\nimport matplotlib.pyplot as plt\n\n#Random data\ndata = numpy.random.random((10, 10))\n\n#Set all data points equal to zero to NaN\n#data[data == 0.] = float(\"NaN\")\n\n#Set single data value to nan\ndata[2][2] = float(\"NaN\")\n\nfig = plt.figure()\nax = fig.add_subplot(1, 1, 1)\n\nax.imshow(data, interpolation = \"nearest\")\n\nplt.show()\n","1146":"cv2.getPerspectiveTransform(src, dst)\n","1147":">>> from itertools import product, combinations\n>>> lists = [['A', 'B'], ['1', '2'], ['x', 'y']]\n>>> for i in xrange(2, len(lists)+1):\n    for c in combinations(lists, i):\n        print list(product(*c))\n...         \n[('A', '1'), ('A', '2'), ('B', '1'), ('B', '2')]\n[('A', 'x'), ('A', 'y'), ('B', 'x'), ('B', 'y')]\n[('1', 'x'), ('1', 'y'), ('2', 'x'), ('2', 'y')]\n[('A', '1', 'x'), ('A', '1', 'y'), ('A', '2', 'x'), ('A', '2', 'y'), ('B', '1', 'x'), ('B', '1', 'y'), ('B', '2', 'x'), ('B', '2', 'y')]\n","1148":"def __init__(self, init_dict, init_val=0):\n    super().__init__()\n    self.init_val = init_val\n    self.update(init_dict)\n    # Here init_dict is a dictionary or a dictionary like object\n","1149":"3>> print(mystery)\n\n","1150":"from PyQt4 import Qt, QtCore, QtGui\nimport threading\nimport socket\nimport Queue\nimport time\n\n# Object of this class has to be shared between\n# the two threads (Python and Qt one).\n# Qt thread calls 'connect',   \n# Python thread calls 'emit'.\n# The slot corresponding to the emitted signal\n# will be called in Qt's thread.\nclass SafeConnector:\n    def __init__(self):\n        self._rsock, self._wsock = socket.socketpair()\n        self._queue = Queue.Queue()\n        self._qt_object = QtCore.QObject()\n        self._notifier = QtCore.QSocketNotifier(self._rsock.fileno(),\n                                                QtCore.QSocketNotifier.Read)\n        self._notifier.activated.connect(self._recv)\n\n    def connect(self, signal, receiver):\n        QtCore.QObject.connect(self._qt_object, signal, receiver)\n\n    # should be called by Python thread\n    def emit(self, signal, args):\n        self._queue.put((signal, args))\n        self._wsock.send('!')\n\n    # happens in Qt's main thread\n    def _recv(self):\n        self._rsock.recv(1)\n        signal, args = self._queue.get()\n        self._qt_object.emit(signal, args)\n\nclass PythonThread(threading.Thread):\n    def __init__(self, connector, *args, **kwargs):\n        threading.Thread.__init__(self, *args, **kwargs)\n        self.connector = connector\n        self.daemon = True\n\n    def emit_signal(self):\n        self.connector.emit(QtCore.SIGNAL(\"test\"), str(time.time()))\n\n    def run(self):\n        while True:\n            time.sleep(1)\n            self.emit_signal()\n\nif __name__ == '__main__':\n    app = QtGui.QApplication([])\n    mainwin = QtGui.QMainWindow()\n    label = QtGui.QLabel(mainwin)\n    mainwin.setCentralWidget(label)\n\n    connector = SafeConnector()\n    python_thread = PythonThread(connector)\n    connector.connect(QtCore.SIGNAL(\"test\"), label.setText)\n    python_thread.start()\n\n    mainwin.show()\n    app.exec_()\n","1151":"class SoapCall(object):\n    def __init__(self):\n        self.client = None\n        self.response = None\n\n    def setup_client(self):\n        credentials = {'username': 'stuff', 'password': 'stuff'}\n        url = 'stuff'\n        t = HttpAuthenticated(**credentials)\n        if self.client is None:\n            self.client = suds.client.Client(url, transport=t)\n\n    def use_client(self):\n        if self.client is None:\n            self.client = self.setup_client()\n\n        self.response = self.client.service.whatever\n        print self.response\n","1152":"git clone https:\/\/github.com\/tangentlabs\/django-oscar.git\nmake sandbox\npython sites\/sandbox\/manage.py runserver\n","1153":"import os\nimport sys\nfrom PySide import QtGui, QtCore\n\nclass Example(QtGui.QWidget):\n\n    def __init__(self):\n        super(Example, self).__init__()\n        self.initUI()\n\n    def initUI(self):\n        self.img_fold = r\"C:\\Users\\abhishek.garg\\Desktop\\New folder\"\n\n        self.widget_layout = QtGui.QVBoxLayout(self)\n        self.scrollarea = QtGui.QScrollArea()\n        self.scrollarea.setWidgetResizable(True)\n        self.widget_layout.addWidget(self.scrollarea)\n        self.widget = QtGui.QWidget()\n        self.layout = QtGui.QVBoxLayout(self.widget)\n        self.scrollarea.setWidget(self.widget)\n\n        self.layout.setAlignment(QtCore.Qt.AlignHCenter)\n\n        for img in os.listdir(self.img_fold):\n            img_path = os.path.join(self.img_fold, img)\n\n            pixmap = QtGui.QPixmap(img_path)\n            lbl = QtGui.QLabel(self)\n            lbl.setPixmap(pixmap)\n\n            self.layout.addWidget(lbl)\n\n\n        self.setGeometry(300, 300, 280, 170)\n        self.setWindowTitle('Image viewer')\n        self.show()\n\ndef main():\n\n    app = QtGui.QApplication(sys.argv)\n    ex = Example()\n    sys.exit(app.exec_())\n\n\nif __name__ == '__main__':\n    main()\n","1154":">>> df['in'].groupby((df['in'] != df['in'].shift()).cumsum()).cumsum()\n0    0\n1    1\n2    0\n3    0\n4    1\n5    2\n6    0\n7    1\n8    2\n9    3\ndtype: int64\n","1155":">>> df.groupby(['ser_no', 'CTRY_NM']).date.agg(\n        {'start_dt': min, \n         'end_dt': max, \n         'number_of_dt': 'count'})\n                number_of_dt   start_dt     end_dt\nser_no CTRY_NM                                    \n1      a                   2 2016-01-01 2016-01-02\n       b                   1 2016-03-01 2016-03-01\n2      a                   1 2016-06-05 2016-06-05\n       b                   1 2016-07-01 2016-07-01\n       e                   2 2016-01-01 2016-01-02\n3      b                   2 2016-01-01 2016-01-02\n       d                   1 2016-08-02 2016-08-02\n","1156":">>> class MetaInit(type):\n\n    def __call__(cls, *args, **kwargs):\n        if args or kwargs:\n            return super().__call__(*args, **kwargs)\n        return cls.__new__(cls)\n\n>>> class String(metaclass=MetaInit):\n\n    def __init__(self, string):\n        self.__string = tuple(string.split())\n        self.__simple = tuple(self.__simple())\n\n    def __simple(self):\n        letter = lambda s: ''.join(filter(lambda s: 'a' <= s <= 'z', s))\n        return filter(bool, map(letter, map(str.lower, self.__string)))\n\n    def __eq__(self, other):\n        assert isinstance(other, String)\n        return self.__simple == other.__simple\n\n    def __getitem__(self, key):\n        assert isinstance(key, slice)\n        string = String()\n        string.__string = self.__string[key]\n        string.__simple = self.__simple[key]\n        return string\n\n    def __iter__(self):\n        return iter(self.__string)\n\n>>> String('Hello, world!')[1:]\n<__main__.String object at 0x02E78830>\n>>> _._String__string, _._String__simple\n(('world!',), ('world',))\n>>> \n","1157":"child_pid = os.fork()\nif child_pid == 0:\n    print \"This is the child.\"\n    sys.exit(0)\nprint \"This is the parent.\"\n","1158":"from datetime import timedelta\n\nFPS = 24.0\nframe_count = 12345\ntd = timedelta(seconds=(frame_count \/ FPS))\n\n>>> print td\n0:08:34.375000\n","1159":"tree=et.fromstring(xml)\n\nfor bad in tree.xpath(\"\/\/fruit[@state=\\'rotten\\']\"):\n  bad.getparent().remove(bad)     # here I grab the parent of the element to call the remove directly on it\n\nprint et.tostring(tree, pretty_print=True, xml_declaration=True)\n","1160":">>> [list(x) for x in output.split('\\n')]\n[['S', '.', '#', '#', '.', '.', '.', '.', '.', '.'],\n ['#', '.', '#', '#', '.', '.', '#', '#', '#', '.'],\n ['#', '.', '#', '#', '#', '.', '#', '#', '#', '.'],\n ['#', '.', '.', '.', '.', '.', '#', '#', '#', '.'],\n ['#', '#', '#', '.', '#', '#', '#', '#', '#', 'S']]\n","1161":"from util import *\n","1162":"sum(1 for _ in iter(lambda: randint(0, 9), 5))\n","1163":"def anno_example(sigma, mu):\n    Sample = np.random.normal(mu, sigma, 10000)\n\n    figHS = plt.figure(figsize=(9,6)) \n    axHS = figHS.add_subplot(1, 1, 1)\n    n, histbins, patches = axHS.hist(Sample,100, histtype='step', normed=1) \n\n    axHS.plot(histbins, plt.mlab.normpdf(histbins, mu, sigma))\n\n    axHS.annotate(\"$\\mu=%.3f$ \\n $\\sigma=%.3f$ \\n $N=%i$\"%\n                  (Sample.mean(), Sample.std(), len(Sample)),\n                  xytext=(0.8, 0.85), bbox=dict(boxstyle=\"sawtooth\", fc=\"w\"),\n                  xy=(0.8, 0.85), xycoords=axHS.transAxes)\n    axHS.annotate(\" $\\mu=%.3f$ \\n $\\sigma=%.3f$ \\n $N=%s$\"%(mu,sigma,\"--\"),\n                  xytext=(0.6, 0.85), bbox=dict(boxstyle=\"round\", fc=\"w\"),\n                  xy=(0.6, 0.85), xycoords=axHS.transAxes)\n\nanno_example(0.12, 0.5)\nanno_example(0.1,  0.3)\nanno_example(0.05, 0.2)\n","1164":"text = \"$email = 'hello '.$user1_35.' we would like to annoy you '.$Tod-ay.' for 20 minutes.';\"\nres = re.findall(\"'\\.(\\$[\\w-]*)\\.'\", text)\nprint res #['$user1_35', '$Tod-ay']\n","1165":"from itertools import tee, islice, izip\nA = [1.10,1.11,1.12,1.21,1.22,1.48]\ngroups = izip(*[islice(el, n, None) for n, el in enumerate(tee(A, 3))])\nprint list(groups)\n# [(1.1, 1.11, 1.12), (1.11, 1.12, 1.21), (1.12, 1.21, 1.22), (1.21, 1.22, 1.48)]\n","1166":"cluster_to_tag = defaultdict(list)\n#May want to assert that length of tags and T is same\nfor tag,cluster in zip(tags, T):\n    cluster_to_tag[cluster].append(tag)\n\n#cluster_to_tag now maps cluster ti list of tags\n","1167":"    re.findall(r\"vcxproj.*?\\{(.*?)\\}\", text)\n","1168":"<YourRule@BoxLayout>:\n    text: 'something'  # define a property to hold the button text, \n                       # could also be done in python\n    Image:\n        size_hint_x: None\n        width: self.height  # make it square\n        source: 'whatever'\n    Label:\n        text_size: self.size  # the text wrapping bounds\n        text: root.text\n        halign: 'left'\n    Image:\n        size_hint_x: None\n        width: dp(10)\n        source: 'right_arrow.png'  # assuming you have a picture of the button arrow\n                                   # you could also draw one manually with kivy canvas instructions\n","1169":"import datetime\n\ndef getStatus(log_list, dt, tm):\n #filter the list\n log_list = [a_log_entry for a_log_entry in log_list if a_log_entry[0] == dt and a_log_entry[1] <= tm]\n\n    #sort it\n log_list.sort(cmp=lambda x,y: cmp(x[1], y[1]))\n if log_list is []:\n     return 'No status available for this day and time.'\n\n    #pull out the status\n status_to_return = log_list[-1][2].split('_')[-1].strip()\n\n return status_to_return\n\nif __name__ == '__main__':\n in_file = open('a.log', 'rU')\n a_list = []\n\n for line in in_file:\n  if line.strip() is not '': #handle whitespace\n   a_list.append(line.split(' '))\n\n #convert string dates and times to datetime objects\n a_list = [ [datetime.datetime.strptime(el[0], '%d\/%m\/%Y'),\n    datetime.datetime.strptime(el[1], '%H:%M:%S'), \n    el[2]] for el in a_list]\n\n\n a_date = datetime.datetime(2010, 7, 15)\n a_time = datetime.datetime(1900, 1, 1, 16, 1, 0)\n print getStatus(a_list, a_date, a_time)\n","1170":"data = list(Data.objects.all().values('deviceId','payload'))\n","1171":"POINT pt;\n    pt.x = 30; \/\/ This is your click coordinates\n    pt.y = 30;\n\nHWND hWnd = WindowFromPoint(pt);\nLPARAM lParam = MAKELPARAM(pt.x, pt.y);\nPostMessage(hWnd, WM_RBUTTONDOWN, MK_RBUTTON, lParam);\nPostMessage(hWnd, WM_RBUTTONUP, MK_RBUTTON, lParam);\n","1172":"def my_func(foo):\n    foo.append(3)  # now the source list also has the number 3\n    foo = [3]      # we've re-bound 'foo' to something else, severing the relationship\n    foo.append(4)  # the source list is unaffected\n    return foo\n\n\noriginal = [1, 2]\nnew = my_func(original)\n\nprint original     # [1, 2, 3]\nprint new          # [3, 4]\n","1173":">grep -Inr SECRET_KEY *\nconf\/global_settings.py:255:SECRET_KEY = ''\nconf\/project_template\/settings.py:61:SECRET_KEY = ''\ncontrib\/auth\/tokens.py:54:        hash = sha_constructor(settings.SECRET_KEY + unicode(user.id) +\ncontrib\/comments\/forms.py:86:        info = (content_type, object_pk, timestamp, settings.SECRET_KEY)\ncontrib\/formtools\/utils.py:15:    order, pickles the result with the SECRET_KEY setting, then takes an md5\ncontrib\/formtools\/utils.py:32:    data.append(settings.SECRET_KEY)\ncontrib\/messages\/storage\/cookie.py:112:        SECRET_KEY, modified to make it unique for the present purpose.\ncontrib\/messages\/storage\/cookie.py:114:        key = 'django.contrib.messages' + settings.SECRET_KEY\ncontrib\/sessions\/backends\/base.py:89:        pickled_md5 = md5_constructor(pickled + settings.SECRET_KEY).hexdigest()\ncontrib\/sessions\/backends\/base.py:95:        if md5_constructor(pickled + settings.SECRET_KEY).hexdigest() != tamper_check:\ncontrib\/sessions\/backends\/base.py:134:        # Use settings.SECRET_KEY as added salt.\ncontrib\/sessions\/backends\/base.py:143:                       settings.SECRET_KEY)).hexdigest()\ncontrib\/sessions\/models.py:16:        pickled_md5 = md5_constructor(pickled + settings.SECRET_KEY).hexdigest()\ncontrib\/sessions\/models.py:59:        if md5_constructor(pickled + settings.SECRET_KEY).hexdigest() != tamper_check:\ncore\/management\/commands\/startproject.py:32:        # Create a random SECRET_KEY hash, and put it in the main settings.\ncore\/management\/commands\/startproject.py:37:        settings_contents = re.sub(r\"(?<=SECRET_KEY = ')'\", secret_key + \"'\", settings_contents)\nmiddleware\/csrf.py:38:                % (randrange(0, _MAX_CSRF_KEY), settings.SECRET_KEY)).hexdigest()\nmiddleware\/csrf.py:41:    return md5_constructor(settings.SECRET_KEY + session_id).hexdigest()\n","1174":">>> import sys, os\n>>> _stderr = sys.stderr\n>>> _stdout = sys.stdout\n>>> null = open(os.devnull,'wb')\n>>> sys.stdout = sys.stderr = null\n>>> print \"Bleh\"\n>>> sys.stderr = _stderr\n>>> sys.stdout = _stdout\n>>> print \"Bleh\"\nBleh\n","1175":"table = Table('anExistingTable', Base.metadata, autoload=True, autoload_with=Session.bind)\nExtension = type('Extension', (BaseClass,), {\n    '__table__' : table,\n    '__mapper_args__' : {\n        'inherits': BaseClass,\n        'polymorphic_identity': 'extension'\n    }\n})\n","1176":"class A(object):\n    pass\n","1177":"import copy\n\nclass A:\n\n    def __init__(self):\n        self.x = 1\n\n    def changeX(self,num):\n        self.x = num\n\n\nclass B:\n\n    def __init__(self,classA):\n        self.x = classA\n\nclass C:\n    def __init__(self,classA):\n        self.x = classA\n\n    def ChangeA(self,num):\n        self.x.changeX(num)\n\nc_a = A()\nc_b = B(c_a)\nc_c = copy.deepcopy(C(c_a))\n\n\nc_c.ChangeA(2)\n\nc_a.x #1\nc_b.x.x #1\nc_c.x.x #2\n","1178":"import subprocess\n\nwith open(\"inputfile\", \"rb\") as f:\n    subprocess.call(f.read())\n","1179":"import datetime\nimport calendar\n\n\ndef validate_date(year, month, date):\n    \"\"\"Returns True if valid date else False\"\"\"\n    try:\n        datetime.datetime(year, month, date)\n        return True\n    except ValueError:\n        return False\n","1180":"r\"\"\"\n\\d{2}(?P<separator>[-:\\s]?)\n\\d{2}(?P=separator)\n\\d{3}(?P=separator)\n\\d{3}(?:(?P=separator)\\d{4})?\"\"\"\n","1181":"print user_alias\nfor user in user_alias:\n    for row in Dict_list:    \n        if user in row.values():\n            print row\n\nUserIDs = [] # This is the change.\nfor user in user_alias:\n    for row in Dict_list:\n        if row.has_key('_akq6p') and row.has_key('_cn6ca'):\n            if user == row['_akq6p'] or user == row['_chk2m']:\n                UserID = row['_cn6ca']\n                print UserID\n                UserIDs.append(UserID)\n\nprint UserIDs\n","1182":"In [1]: df = pd.DataFrame(columns = ['COL1', 'COL2'])\nIn [2]: df.ix['test1'] = [20, 30]\nIn [3]: df\nOut[3]:\n       COL1  COL2\ntest1    20    30\n\n[1 rows x 2 columns]\n","1183":">>> d = {1:'a',2:'b'}\n>>> d[3] = d.pop(1)\n>>> d\n{2: 'b', 3: 'a'}\n","1184":"y, x = a.shape\n","1185":"print min(timeit.Timer(\"\"\"\nl =list()\nfor i in range(5): \n    l.append((A(),A(),A()))\n    l[-1][0].s='foo'\n    l[-1][1].s='foo2'\nfor _ in sorted(l): pass \nprint A.eq_calls\nprint A.cmp_calls\"\"\", setup=setup).repeat(1, 1))\n","1186":"import lxml.html as html\nimport mechanize\n\nbr = mechanize.Browser()\npage = br.open(\"http:\/\/www.urbandictionary.com\/\")\n\nbr.select_form(nr=0)\nbr[\"term\"] = \"skid\"\nbr.submit()\n\nfragment = html.fromstring(br.response().read())\n\nprint fragment.find_class('definition')[0].text_content()\n","1187":"import _winreg\n\nkey = _winreg.OpenKey(\n    _winreg.HKEY_LOCAL_MACHINE,\n    r\"HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0\")\n\nvalue, type = _winreg.QueryValueEx(key, \"~MHz\")\nprint 'CPU speed is:', value\n","1188":"import datetime\ndatetime.datetime.strptime('2011-12-11T22:37:18Z', '%Y-%m-%dT%H:%M:%SZ')`\n","1189":"In [8]: df2 = df2.rename(columns={'B':'A'})\n\nIn [9]: df1.combine_first(df2)\nOut[9]:\n          A\n12\/1\/14   3\n12\/2\/14  20\n12\/2\/14  20\n12\/3\/14   2\n12\/4\/14  30\n12\/6\/14   5\n","1190":"class MyList(list):\n    def last_index(self):\n        return len(self)-1\n\n\n>>> l=MyList([1, 2, 33, 51])\n>>> l.last_index()\n3\n","1191":"class MyList(list):\n    #your stuff here\n\n    def __getslice__(self, i, j):\n        return MyList(list.__getslice__(self, i, j))\n","1192":"In [1]: import sympy as sp\nIn [2]: x, y, z = sp.symbols('x, y, z')\nIn [3]: rho, sigma, beta = sp.symbols('rho, sigma, beta')\nIn [4]: f1 = sigma * (y - x)\nIn [5]: f2 = x * (rho - z) - y\nIn [6]: f3 = x * y - beta * z\nIn [7]: sp.solvers.solve((f1, f2, f3), (x, y, z))\nOut[7]: \n[(0, 0, 0),\n (-sqrt(beta*rho - beta), -sqrt(beta*(rho - 1)), rho - 1),\n (sqrt(beta*rho - beta), sqrt(beta*(rho - 1)), rho - 1)]\n","1193":"@pytest.yield_fixture\ndef event():\n    ...\n    yield <event_properties>\n\n@pytest.yield_fixture\ndef listener(event):\n    ...\n    yield <listener_properties>\n","1194":"class foo(pygame.Surface):\n    def __init__(self):\n        pygame.Surface.__init__(self, (20, 20))\n        more_data = \"You should be able to extend this class freely\"\n","1195":"set1 = set((x.id,x.name,...) for x in list1)\ndifference = [ x for x in list2 if (x.id,x.name,...) not in set1 ]\n","1196":"In [37]:\n\na = np.array([calculate(a,b,c) for a,b,c in products])\nnp.savetxt(r'c:\\data\\lut.txt', a)\nIn [39]:\n\nb = np.loadtxt(r'c:\\data\\lut.txt')\nnp.all(a==b)\nOut[39]:\nTrue\n","1197":"py> import urlparse,socket\npy> p = urlparse.urlparse(\"http:\/\/stackoverflow.com\/questions\/1480183\")\npy> p\n('http', 'stackoverflow.com', '\/questions\/1480183', '', '', '')\npy> host=p[1]\npy> ai=socket.gethostbyname(host)\npy> socket.gethostbyname(host)\n'69.59.196.211'\n","1198":"pkts_rxd = []\ndef process_and_send(pkt):\n    pkts_rxd.append(pkt)\n    sendp(pkt, 'eth1')\nsniff(prn=process_and_send, iface='eth0', count=100)\n","1199":"from scipy.integrate import quad\nfrom math import sqrt\nfrom math import pi\n\ndef x_max(y,r):\n    return sqrt(r**2-y**2)\n\ndef x_min(y,r):\n    return max(-sqrt(r**2 - y**2), -sqrt(R**2 - y**2) + b) \n\ndef y_max(r):\n    if (R<b and b-R<r) or (R>b and b-R>r):\n        return sqrt( R**2 - (R**2-r**2+b**2)**2\/(4.*b**2) )\n    elif r+R<b:\n        return 0.\n    else: #r+b<R\n        return r\n\ndef z_max():\n    if R>b:\n        return R\n    else:\n        return sqrt(2.*b*R - b**2) \n\ndef delta_x(y, r):\n    return  x_max(y,r) - x_min(y,r)\n\ndef int_xy(z):\n    r = sqrt(R**2 - z**2)\n    return quad(delta_x, 0., y_max(r), args=(r))\n\ndef int_xyz():\n    return quad(lambda z: int_xy(z)[0], 0., z_max())\n\nR=1.\nRprim=1.\nb=0.5\nprint 4*int_xyz()[0]\n","1200":"In [126]: class myint(int):\n    def __add__(self,a):\n        print \"{0} plus {1}\".format(self,a)\n   .....:         \n\nIn [127]: a=myint(5)\n\nIn [128]: b=myint(6)\n\nIn [129]: a+b\n5 plus 6\n","1201":"from time import sleep\nfrom threading import Thread\n\n\ndef func():\n    your actual code code here\n\n\nif __name__ == '__main__':\n\n    Thread(target = func).start()\n    while True:\n        sleep(1800)\n        Thread(target = func).start()\n","1202":"for card in computer_hand[:]:\n","1203":"In [2]: '%.20f' % (3.3 + 1.1)\nOut[2]: '4.40000000000000035527'\n","1204":"import wx\nfrom wx.lib import sized_controls\n\n\nclass MultiMessageFrame(sized_controls.SizedFrame):\n\n    def __init__(self, *args, **kwargs):\n        super(MultiMessageFrame, self).__init__(*args, **kwargs)\n        pane = self.GetContentsPane()\n        text_ctrl = wx.TextCtrl(\n            pane, style=wx.TE_READONLY | wx.TE_CENTRE | wx.TE_MULTILINE)\n        text_ctrl.SetSizerProps(proportion=1, expand=True)\n        text_ctrl.SetBackgroundColour('White')\n        self.text_ctrl = text_ctrl\n\n        pane_btns = sized_controls.SizedPanel(pane)\n        pane_btns.SetSizerType('horizontal')\n        pane_btns.SetSizerProps(align='center')\n\n        button_ok = wx.Button(pane_btns, wx.ID_OK)\n        button_ok.Bind(wx.EVT_BUTTON, self.on_button_ok)\n\n    def append_msg(self, title_text, msg_text):\n        self.SetTitle(title_text)\n        self.text_ctrl.AppendText(msg_text)\n\n    def on_button_ok(self, event):\n        self.Close()\n\n\nclass MainFrame(sized_controls.SizedFrame):\n\n    def __init__(self, *args, **kwargs):\n        super(MainFrame, self).__init__(*args, **kwargs)\n        self.SetInitialSize((800, 600))\n        self.CreateStatusBar()\n        menubar = wx.MenuBar()\n        self.SetMenuBar(menubar)\n        menu_file = wx.Menu()\n        menu_file.Append(\n            wx.ID_NEW, 'Show msg', 'Add a new message to message frame')\n        menubar.Append(menu_file, '&File')\n        self.Bind(wx.EVT_MENU, self.on_new, id=wx.ID_NEW)\n\n        self.count = 1\n        self.multi_message_frame = None\n\n    def on_new(self, event):\n        title_text = 'MultiMessageFrame already exists'\n\n        if not self.multi_message_frame:\n            title_text = 'Newly created MultiMessageFrame'\n            self.multi_message_frame = MultiMessageFrame(\n                self, style=wx.DEFAULT_FRAME_STYLE | wx.FRAME_FLOAT_ON_PARENT)\n            self.multi_message_frame.Bind(\n                wx.EVT_CLOSE, self.on_multi_message_frame_close)\n            self.multi_message_frame.Center()\n            self.multi_message_frame.Show()\n\n        self.multi_message_frame.append_msg(\n            title_text, 'message no.{}\\n'.format(self.count))\n        self.count += 1\n\n    def on_multi_message_frame_close(self, event):\n        self.multi_message_frame = None\n        event.Skip()\n\n\nif __name__ == '__main__':\n    app = wx.App(False)\n    main_frame = MainFrame(None)\n    main_frame.Show()\n    app.MainLoop()\n","1205":"timer = core.CountdownTimer(TrialDuration)\nstepSize = 1\nfor eachPic in catPictures:\n    prevPos = 0  # keeps track of the slider position\n    rts=[]  # used to keep track of what the latest reaction time was. Reset in the beginning of every trial.\n\n    timer.reset()\n    event.clearEvents() # get rid of other, unprocessed events\n    while timer.getTime() > 0:\n    for key, rt in event.getKeys(timeStamped=timer):  # time keys to this clock\n        rts += [rt]  # add this reaction time to the list\n        if key in ['escape']:\n            core.quit() # quit if they press escape\n        if key in ['b']:\n            # add keypress to list for each keypress. then move cursor proportionally to length of this list\n            prevPos+=stepSize\n        if key in ['t']:\n            prevPos-=stepSize\n\n    # Log here instead of print\n    print rts[-1]\n","1206":"def bubble_sort_2nd_value(tuples_list):\n\n    NEWLIST = []\n    itemMoved=0\n    for i in tuples_list:\n        NEWLIST.append(i)\n    for i in range(len(NEWLIST)):\n         for j in range(i+1, len(NEWLIST)):\n             if(NEWLIST[j][1]<NEWLIST[i][1]):\n                 itemMoved=1\n                 NEWLIST[j],NEWLIST[i] = NEWLIST[i],NEWLIST[j]\n\n    if(itemMoved==0): print(\"None\")\n    else: print(NEWLIST)\n\ntuples_list = [(\"h1\",1),(\"h2\",2),(\"h3\", 3), (\"hi\" , 4)]\n\nbubble_sort_2nd_value(tuples_list)\n","1207":"In [8]: l\nOut[8]: \n[['a', 'b', 'c'],\n ['b', '', ''],\n ['a', '', ''],\n ['a', 'c', 'd'],\n ['b', 'c', ''],\n ['b', 'c', '']]\n\nIn [9]: [ filter(None, a) for a in l]\nOut[9]: [['a', 'b', 'c'], ['b'], ['a'], ['a', 'c', 'd'], ['b', 'c'], ['b', 'c']]\n","1208":">>> q = Queue()\n>>> q.put(1)\n>>> q.queue\ndeque([1])\n","1209":"In [47]: strs=\"4.500000+1 1.894719-3 4.600000+1 8.196721-3 4.700000+1 2.869539-3\"\n\nIn [48]: [float(x.replace(\"+\",\"e+\").replace(\"-\",\"e-\")) for x in strs.split()]\n\nOut[48]: [45.0, 0.001894719, 46.0, 0.008196721, 47.0, 0.002869539]\n","1210":"PermissionValidatorMap.objects.exclude(\n    validator_set__in=ValidatorMetaData.objects.exclude(id__in=validator_list))\n","1211":"subprocess.Popen(['python3', '-m', 'path.to.python.file', '--option1=OPTION_VALUE'])\n","1212":" text(x, y, s, fontdict=None, **kwargs)\n","1213":"execl(file, *args)\nexecle(file, *args, env)\nexeclp(file, *args)\nexeclpe(file, *args, env)\nexecv(path, args)\nexecve(path, args, env)\nexecvp(file, args)\nexecvpe(file, args, env)\n","1214":"import Tkinter as TK\n\nfont = ('Times New Roman', 14, 'bold')\nfont2 = ('Times New Roman',12, 'bold')\n\nclass example3(TK.Toplevel):\n    def __init__(self, parent):\n        TK.Toplevel.__init__(self)\n        self.geometry('380x100')\n        self.parent=parent\n        self.initalize()\n\n    def initalize(self):\n        self.grid()\n\n        def restart():\n            self.parent.do_restart = True\n            self.parent.destroy()\n\n        Yes = TK.Button(self, text = 'Yes', font = font2, command = restart)\n        Yes.grid(column = 0, row = 0, sticky = 'we', padx = (10, 10))\n\nclass example2(TK.Toplevel):\n    def __init__(self, parent):\n        TK.Toplevel.__init__(self)\n        self.geometry('770x150')\n        self.parent = parent\n        self.initalize()\n\n    def initalize(self):\n        self.grid()\n\n        #Creates Label Frame\n        MstepOne = TK.LabelFrame(self, font = font2)\n        MstepOne.grid(row=0, columnspan=7, sticky='w', padx=5, pady=5, ipadx=5, ipady=5)\n\n        def gatherinfo2():\n            #self.destroy() #Not sure why your do this\n            example3(self.parent) # You need to pass self.parent here\n\n        #Creates Label \n        MLabel1 = TK.Label(MstepOne, text = \"First Name\", font = font)\n        MLabel1.grid(column = 2, row = 0, sticky = 'w', padx = (10, 10))\n        MLabel2 = TK.Label(MstepOne, text = \"Last Name\", font = font)\n        MLabel2.grid(column = 4, row = 0, sticky = 'w', padx = (10, 10))\n\n        #Creates Button\n        MSubmit = TK.Button(self, text = 'Submit', font = font2, command = gatherinfo2)\n        MSubmit.grid(column = 3, row = 3, sticky = 'we', padx = (10, 10))\n\n\nclass example(TK.Tk):   \n    def __init__(self, parent):\n        TK.Tk.__init__(self, parent)\n        self.parent = parent\n        self.do_restart=True\n        self.initialize()\n\n    def initialize(self):\n        self.grid() \n\n        def gatherinfo():\n            example2(self)\n\n        def terminate(event=None):\n            self.do_restart = False\n            self.destroy()            \n\n        self.bind(\"<Escape>\", terminate) # Press ESC to escape the program\n        MSubmit = TK.Button(self, text = 'Submit', font = font2, command = gatherinfo)\n        MSubmit.grid(column = 3, row = 3, sticky = 'we', padx = (10, 10))\n\ndef main():\n    do_loop = True        # Loop so we can restart the program if not terminating it\n    while do_loop:\n        app = example(None)\n        app.geometry('400x400')\n        app.mainloop()\n        do_loop = app.do_restart # Gets if we should restart or terminate\n        if do_loop:\n            print(\"Restarting\")\n        else:\n            print(\"Terminating\")\n\nif __name__ == '__main__':\n    main()\n","1215":"a = models.Object1.get_or_create(f__pk=foreign_object_id)\n","1216":"output = StringIO.StringIO(r.content)\n","1217":">>> import re\n>>>\n>>> l = [\"2007 ford falcon xr8 ripcurl bf mkii utility 5.4l v8 cyl 6 sp manual bionic \", \"2004 nissan x-trail ti 4x4 t30 4d wagon 2.5l 4 cyl 5 sp manual twilight \", \"2002 subaru liberty rx my03 4d sedan 2.5l 4 cyl 5 sp manual silver\"]\n>>> for item in l:\n...     print(re.sub(r\"(\\b[0-9.]+l\\b|\\d+d (?:wagon|sedan)).*$\", \"\", item))\n... \n2007 ford falcon xr8 ripcurl bf mkii utility \n2004 nissan x-trail ti 4x4 t30 \n2002 subaru liberty rx my03 \n","1218":"soup.find(text=u'Pr\u00e9vu')\n","1219":"def prime_list(X, Y):\n    Z = []\n    while X <= Y:\n        if is_prime(X):\n            Z.append(X)\n        X = X + 1\n    return Z\n","1220":"[WordsUsed.index(word) for word in Phrase]\n","1221":"df.pivot(index='date', columns='variable', values='value')\n","1222":"import re\nt1 = 'Hilary Clinton'\nt2 = 'Clinton, Hilary'\nre.search(r'(?:\\s?Hilary()|\\s?Clinton(),?){2}', t1)\nre.search(r'(?:\\s?Hilary()|\\s?Clinton(),?){2}', t2)\n","1223":"payload = request.json\nprint payload\n#if using py3 print(payload)\n","1224":"initialize all menu variables\n\ndraw menu pix and selections\n\nwhile a selection has not been made:\n    look for key inputs (arrow keys\/enter\/esc)\n        if down arrow pressed:\n            move selection box to next option and note that the selection is on the next object down\n        if up arrow pressed:\n            move selection box to previous option and note that the selection is on the previous object up\n        if escape pressed:\n            quit the game\n        if enter pressed:\n            process which option in the menu was highlighted (quit of quit was selected, etc) and tell the while loop to stop\n\n    update the display\n\nset up the game variables and such\n\nmain while loop\n    run the game and get an A+\n","1225":">>> liste=[(0,1,45), (0,2,90), (0,3,60), (1,2,50), (1,3,20), (2,3,25)]\n>>> number_list=(0,2)\n>>> d = {str(x):[item for item in liste if x in item] for x in number_list}\n>>> d\n{'0': [(0, 1, 45), (0, 2, 90), (0, 3, 60)], '2': [(0, 2, 90), (1, 2, 50), (2, 3, 25)]}\n","1226":"poller = zmq.Poller()\npoller.register(sys.stdin, zmq.POLLIN)\npoller.register(mysocket, zmq.POLLIN)\nevts = dict(poller.poll(1000))\nstdin_ready = evts.get(sys.stdin.fileno(), False)\nsocket_ready = evts.get(mysocket, False)\n","1227":"class LRUCache2(LRUCache):\n    def __init__(self, maxsize, missing=None, getsizeof=None, evict=None):\n        LRUCache.__init__(self, maxsize, missing, getsizeof)\n        self.__evict = evict\n\n    def popitem(self):\n        key, val = LRUCache.popitem(self)\n        evict = self.__evict\n        if evict:\n            evict(key, val)\n        return key, val\n","1228":"pagination_urls = [\"http:\/\/google.com\"]\n\ndef oss(url):\n    data = url\n    return data\n\n\nfor url in pagination_urls:\n    data = oss(url)\n    spider = data\n    print spider\n","1229":"# To load only columns 1 (time), 19 (velocity x), and 21 (velocity z).\nnumpy.loadtxt('data.csv', delimiter=',', usecols=(1,19,21))\n","1230":">>> import re\ndef count(s):\n    return sum(1 for m in re.finditer(r'co.e', s))\n... \n>>> count('aaacodebbb')\n1\n>>> count('codexxcode')\n2\n>>> count('cozexxcope')\n2\n","1231":"In [294]: pd.get_dummies(df, prefix=['A', 'D'], columns=['A', 'D'])\nOut[294]: \n   B  C  A_x  A_y  D_j  D_l\n0  z  1  1.0  0.0  1.0  0.0\n1  u  2  0.0  1.0  0.0  1.0\n2  z  3  1.0  0.0  1.0  0.0\n","1232":"<span data-ng-repeat=\"field in  fields\">\n   {{ field.name.field_name }}<!-- this should print \"date\" at first -->\n    : {{ field.name[field.name.field_name] }} <!-- this should print \"00000\" at first -->\n<\/span>\n","1233":"import random\n\nx = random.randint(0,10)\ny = 7\nwhile x != y:\n    print(x)   #Print old (non-7) random number\n    x = random.randint(0,10)  #pick a new number.  I hope it's 7 so we can end this madness\n\nprint(\"You found {0}.  Congrats.  Go have a beer.\".format(y))\n","1234":"import itertools\nmydict = {'a': 10, 'b': 20, 'c':30}\nresult = [mydict[x] + mydict[y] for x, y in itertools.combinations(d, 2)]\n","1235":"docfile = instance.decoder(segments)\nresponse = HttpResponse()\nresponse.write(docfile)\nresponse['Content-Disposition'] = 'attachment; filename={0}'.format(file_name)\nreturn response\n","1236":"{'cursor': {'currentPageIndex': 0,\n            'estimatedResultCount': '168000000',\n            'moreResultsUrl': 'http:\/\/www.google.com\/search?oe=utf8&ie=utf8&source=uds&start=0&hl=en&q=cars',\n            'pages': [{'label': 1, 'start': '0'},\n                      {'label': 2, 'start': '4'},\n                      {'label': 3, 'start': '8'},\n                      {'label': 4, 'start': '12'},\n                      {'label': 5, 'start': '16'},\n                      {'label': 6, 'start': '20'},\n                      {'label': 7, 'start': '24'},\n                      {'label': 8, 'start': '28'}]},\n 'results': [ <<list of 4 dicts>> ]}\n","1237":"var callbacks = { 'output': $.proxy(output_area.handle_output, output_area) };\n","1238":"wget --mirror -w 2 -p --html-extension --convert-links -P folder_to_save_to http:\/\/mysite.com\n","1239":"import numpy as np\nfull = [line for line in open(\"foo4\",'r').readlines() if not line.startswith(\"#\")]\ndatablocks = np.split(np.array(full), len(full)\/4081)\nfor block in datablocks:\n    #lines is a dataset, sorted by first column\n    lines = sorted(block, key= lambda line : int(line.split()[0]))\n    print lines\n","1240":"import numpy as np\nimport matplotlib.pyplot as plt\n\nfig,ax = plt.subplots(1)\n\n# Generate some random data\nhist1,bins1 = np.histogram(np.random.normal(2,1,1000),bins=np.arange(-2,8,0.5))\nhist2,bins2 = np.histogram(np.random.normal(4,1,1000),bins=np.arange(0,10,0.5))\n\n# 'step' draws the lines, 'bar' fills them\nax.step(bins1[:-1],hist1,'k',linestyle='-',linewidth=2,where='post')\nax.bar(bins1[:-1],hist1,width=0.5,linewidth=0,facecolor='k',alpha=0.3)\nax.step(bins2[:-1],hist2,'k',linestyle='--',linewidth=2,where='post')\nax.bar(bins2[:-1],hist2,width=0.5,linewidth=0,facecolor='k',alpha=0.1)\n\nplt.show()\n","1241":"log = [line.split(',') for line in open('log.csv')]\n","1242":"FilePath = 'temp' # replace the temp with your file path\/name\nmodifiedTime = os.path.getmtime(FilePath) \n\ntimeStamp =  datetime.datetime.fromtimestamp(modifiedTime).strftime(\"%b-%d-%y-%H:%M:%S\")\nos.rename(FilePath,FilePath+\"_\"+timeStamp)\n","1243":"tk=Tk()\ntk.withdraw()\n\ndef fileupload():\n    while True:\n        uploadedfilenames = askopenfilenames(multiple=True)\n        if uploadedfilenames == '':\n            tkMessageBox.showinfo(message=\"File Upload has been cancelled program will stop\")\n            return\n        uploadedfiles = tk.splitlist(uploadedfilenames)\n        if len(uploadedfiles)!=2:\n           tkMessageBox.showinfo(message=\"2 files have not been selected!\")\n        else:\n            return uploadedfiles\n\nprint fileupload()\n","1244":"N = 10000\n\n# initialize an array of flags\nis_prime = [1 for num in xrange(N)]\nis_prime[0] = 0 # this is because indexing starts at zero\nis_prime[1] = 0 # one is not a prime, but don't mark all of its multiples!\n\ndef set_prime(num):\n    \"num is a prime; set all of its multiples in is_prime to zero\"\n    for x in xrange(num*2, N, num):\n        is_prime[x] = 0\n\n# iterate over all integers up to N and update the is_prime array accordingly\nfor num in xrange(N):\n    if is_prime[num] == 1:\n        set_prime(num)\n\nprimes = [num for num in xrange(N) if is_prime[num]]\n","1245":"with open('100temp.txt') as in_file, open('new_100temp.txt', 'w') as out_file:\n    for line1, line2, line3, line4 in grouper(in_file, 4):\n         # modify 4 lines\n         out_file.writelines([line1, line2, line3, line4])\n","1246":"#!\/usr\/bin\/python\n#Access the registry to find out what plugins are available\n#list elements within a plugin\n#list all elements within a Klass\nfrom gi.repository import Gst\nGst.init()\nreg = Gst.Registry.get()\n\nprint \"List Available Plugins\\n\"\nfor x in reg.get_plugin_list():\n    print x.get_name()\nprint \"End Available Plugins\\n\"\n\nprint \"List Plugins in AudioVisual\\n\"\nfor x in reg.get_feature_list_by_plugin(\"audiovisualizers\"):\n    print x.get_name(), \"\\t\", x.get_longname()\nprint \"END\\n\"\n\nprint \"All Available visualisations\\n\"\nvis_list = [filt for filt in reg.get_feature_list(Gst.ElementFactory) \\\n        if (filt.get_klass().find(\"Visualization\") >= 0)]\nfor x in vis_list:\n    short = x.get_name()\n    name = x.get_longname()\n    print (short + \"\\t\\t\" + name)\nprint \"END\\n\"\n\nprint \"All Available Audio filters\\n\"\naudio_filter_list = [filt for filt in reg.get_feature_list(Gst.ElementFactory) \\\n        if (filt.get_klass().find(\"Filter\/Effect\/Audio\") >= 0)]\nfor x in audio_filter_list:\n    short = x.get_name()\n    name = x.get_longname()\n    print (short + \"\\t\\t\" + name)\nprint \"END\\n\"\n","1247":" Example: Using the httplib module to post data\n\n# File: httplib-example-2.py\n\nimport httplib\n\nUSER_AGENT = \"httplib-example-2.py\"\n\ndef post(host, path, data, type=None):\n\n    http = httplib.HTTP(host)\n\n    # write header\n    http.putrequest(\"PUT\", path)\n    http.putheader(\"User-Agent\", USER_AGENT)\n    http.putheader(\"Host\", host)\n    if type:\n        http.putheader(\"Content-Type\", type)\n    http.putheader(\"Content-Length\", str(len(data)))\n    http.endheaders()\n\n    # write body\n    http.send(data)\n\n    # get response\n    errcode, errmsg, headers = http.getreply()\n\n    if errcode != 200:\n        raise Error(errcode, errmsg, headers)\n\n    file = http.getfile()\n    return file.read()\n\nif __name__ == \"__main__\":\n\n    post(\"www.spam.egg\", \"\/bacon.htm\", \"a piece of data\", \"text\/plain\")\n","1248":"import csv\nreader = csv.reader(open('IN.csv', 'r'))\nwriter = csv.writer(open('OUT.csv', 'w')\nfor row in reader:\n # do stuff to the row here\n # row is just a list of items\n writer.writerow(row)\n","1249":"import matplotlib\nimport numpy as np\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import interp2d\n\n# http:\/\/en.wikipedia.org\/wiki\/File:Bilininterp.png\nxi = np.array([0.0, 1.0])\nyi = np.array([0.0, 1.0])\nzi = np.array([[0.0, 1.0], [1.0, 0.5]])\n\n# Another example\nxi = np.array([0.0, 0.25, 1.0])\nyi = np.array([0.0, 0.75, 1.0])\nzi = np.array([[0.0, 0.5, 1.0], [0.5, 0.7, 0.5], [1.0, 1.0, 1.0]])\n\n# I want 20 \"levels\" to be shown\ncontour_breaks = 20\nticks = np.linspace(zi.min(), zi.max(), contour_breaks, endpoint=True)\n\n# Attempt 4 (interp2d does to correct bilinear interpolation)\nfig = plt.figure()\naxes = fig.add_subplot(111, aspect='equal')\nf = interp2d(xi, yi, zi, kind='linear')\nxi2 = np.linspace(0., 1., 100)\nyi2 = np.linspace(0., 1., 100)\nzi2 = f(xi2, yi2)\naxes.contour(xi2, yi2, zi2, ticks[1:-1], colors='k')\nfill = axes.contourf(xi2, yi2, zi2, ticks, cmap=cm.jet)\nfig.colorbar(fill, ticks=ticks)\n\n# Show the plots\nplt.show()\n","1250":"import mechanize\nimport lxml.etree as etree\n\nurl = 'something'\n\nbr = mechanize.Browser()\nresp = br.open(url)\nparser = etree.parser()\ntree = etree.parse(resp,parser)\nforms = list(br.forms())\nid_info = {}\nfor form in forms:\n    elements = form.controls\n    for element in elements:\n        id_info[element.attrs['id']]=''\n\ninputs = tree.findall('.\/\/input')\nfor i in inputs:\n    index = list(i.getparent()).index(i)\n    id_info[i.attrib['id']] = list(i.getparent)[index+1]\n\nfor j in id_info:\n    print j,id_info(j)\n","1251":"from pandas import DataFrame\ndf1 = DataFrame([[1]], columns=['a'])\ndf2 = DataFrame([[3],[4]], columns=['b'])\n\nIn [4]: df1\nOut[4]: \n   a\n0  1\n\nIn [5]: df2\nOut[5]: \n   b\n0  3\n1  4\n\nIn [6]: df1.join(df2)\nOut[6]: \n   a  b\n0  1  3\n\nIn [7]: df1.join(df2, how='outer')\nOut[7]: \n    a  b\n0   1  3\n1 NaN  4\n","1252":"class childclass(parentclass):\n    def somefunction(self):\n        with patch('somemodule.parentclass', childclass):\n            super(childclass, self).somefunction()\n","1253":"filename = \"NNa{0}b{1}.pk1\".format(a,b)\npickle.dump(nn, open(filename,'wb'))\n","1254":"In [78]: lst=[u'FACE     64:     48     49     50     51     52     54     64     74     84     94    104 \\n']\n\nIn [79]: [int(i) for i in lst[0].split(':')[1].split()]\nOut[79]: [48, 49, 50, 51, 52, 54, 64, 74, 84, 94, 104]\n","1255":"import Tkinter as tk\n\nclass Example(tk.Frame):\n    def __init__(self, parent):\n        tk.Frame.__init__(self, parent, borderwidth=1, relief=\"sunken\")\n        b = tk.Button(self, text=\"search\", command=self.add_one)\n\n        self.lb = tk.Listbox(self, borderwidth=0)\n        self.lb.pack(fill=\"both\", expand=True)\n        vsb = tk.Scrollbar(self, orient=\"vertical\", command=self.lb.yview)\n        hsb = tk.Scrollbar(self, orient=\"horizontal\", command=self.lb.xview)\n        self.lb.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)\n\n        b.grid(row=0, column=0, columnspan=2)\n        vsb.grid(row=1, column=1, sticky=\"ns\")\n        self.lb.grid(row=1, column=0, sticky=\"nsew\")\n        hsb.grid(row=2, column=0, sticky=\"ew\")\n        self.grid_rowconfigure(1, weight=1)\n        self.grid_columnconfigure(0, weight=1)\n\n    def add_one(self):\n        self.lb.insert(\"end\", \"hello world!\")\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    Example(root).pack(fill=\"both\", expand=True)\n    root.mainloop()\n","1256":"\"\"\"\nThis module implements Obj-C-style categories for classes for Python\n\nCopyright 2009 Ulrik Sverdrup <ulrik.sverdrup@gmail.com>\nLicense: Public domain\n\"\"\"\n\ndef Category(toclass, clobber=False):\n    \"\"\"Return a class decorator that implements the decorated class'\n    methods as a Category on the class @toclass\n\n    if @clobber is not allowed, AttributeError will be raised when\n    the decorated class already contains the same attribute.\n    \"\"\"\n    def decorator(cls):\n        skip = set((\"__dict__\", \"__module__\", \"__weakref__\", \"__doc__\"))\n        for attr in cls.__dict__:\n            if attr in toclass.__dict__:\n                if attr in skip:\n                    continue\n                if not clobber:\n                    raise AttributeError(\"Category cannot override %s\" % attr)\n            setattr(toclass, attr, cls.__dict__[attr])\n        return cls\n    return decorator\n","1257":"def my_sqrt(x):\n    root1 = math.sqrt(x)\n    root2 = -root1\n    return root1,root2\n","1258":">>> import re\n>>> s = '<2006-12-20 00:10:24 Cattle is a tree>'\n>>> re.sub(r'\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2} ', '', s)\n'<Cattle is a tree>'\n","1259":"def print_rect(l, w, c):\n    for a in range(w):\n        print(a*\" \", l*c)\n","1260":"import pythoncom, pyHook \n\ndef OnKeyboardEvent(event):\n  print 'MessageName:',event.MessageName\n  print 'Message:',event.Message\n  print 'Time:',event.Time\n  print 'Window:',event.Window\n  print 'WindowName:',event.WindowName\n  print 'Ascii:', event.Ascii, chr(event.Ascii)\n  print 'Key:', event.Key\n  print 'KeyID:', event.KeyID\n  print 'ScanCode:', event.ScanCode\n  print 'Extended:', event.Extended\n  print 'Injected:', event.Injected\n  print 'Alt', event.Alt\n  print 'Transition', event.Transition\n  print '---'\n\n# return True to pass the event to other handlers\n  return True\n\n# create a hook manager\nhm = pyHook.HookManager()\n# watch for all mouse events\nhm.KeyDown = OnKeyboardEvent\n# set the hook\nhm.HookKeyboard()\n# wait forever\npythoncom.PumpMessages()\n","1261":"FIELD_NAME_CHOICES = (\n    (1, Foo._meta.get_field('telephone_number')),\n    (2, Foo._meta.get_field('name')),\n    .\n    .\n)\n","1262":"def supplier_default_product(region, supplier=None):\n    if supplier is None:\n        supplier = region.default_supplier.id\n    default_product_instance = Product.objects.get(name=default_product, supplier=supplier)\n","1263":"class child(pandas.Panel4D):\n    def __init__ (self, d=None):\n        if isinstance(d, pandas.Panel4D):\n            d = d._data\n            super(child, self).__init__(d)\n        else:\n            super(child, self).__init__(d)\n","1264":">>> re.match(\"^[a-zA-Z0-9_.-]+$\", \"hello\")\n<_sre.SRE_Match object at 0xb7600250>\n>>> re.match(\"^[a-zA-Z0-9_.-]+$\", \"    \")\n>>> print re.match(\"^[a-zA-Z0-9_.-]+$\", \"    \")\nNone\n","1265":"mylist = [('Item A','CA','10'),('Item B','CT','12'),('Item C','CA','14')]\n\nfiltered_list = [item for item in mylist if item[1]=='CA']\n","1266":"x, y = np.random.rand(2, 1000)\nxbin = np.logspace(-1, 0, 101)\nybin = np.logspace(-1, 0, 201)\n\n# raw bin counts\ncounts, xe, ye = np.histogram2d(x, y, [xbin, ybin])\n\n# size of each bin in x and y dimensions\ndx = np.diff(xbin)\ndy = np.diff(ybin)\n\n# compute the area of each bin using broadcasting\narea = dx[:,  None] * dy\n\n# normalized counts\nmanual_norm = counts \/ area \/ x.shape[0]\n\n# using normed=True\ncounts_norm, xe, ye = np.histogram2d(x, y, [xbin, ybin], normed=True)\n\nprint(np.allclose(manual_norm, counts_norm))\n# True\n","1267":"import time\nimport threading\nclass App:\n    def function1(self):\n        pb = ttk.Progressbar(self.detail_frame1, orient='horizontal', mode='indeterminate')\n    pb.pack()\n    pb.start(1)\n\n    #get the paper code of the paper to be checked\n    input1 = self.input1.get()\n\n    # system call based on the value of input1\n    t = threading.Thread(target=call, args=\"\")\n    t.start()\n\n    self.function2()\n\n    def function2(self):\n        self.detail_frame1.pack_forget()\n        self.detail_frame2.pack()\ndef call():\n    time.sleep(2)\n","1268":"import gzip\nimport io\n\nwith io.TextIOWrapper(io.BufferedReader(gzip.open(filename))) as file:\n    for line in file:\n        print line,\n","1269":"def magicmethod(clazz, method):\n    if method not in clazz.__dict__:  # Not defined in clazz : inherited\n        return 'inherited'\n    elif hasattr(super(clazz), method):  # Present in parent : overloaded\n        return 'overloaded'\n    else:  # Not present in parent : newly defined\n        return 'newly defined'\n","1270":"import sys\nfrom PIL import Image, ImageDraw\n\nclass Region():\n    def __init__(self, x, y):\n        self._pixels = [(x, y)]\n        self._min_x = x\n        self._max_x = x\n        self._min_y = y\n        self._max_y = y\n\n    def add(self, x, y):\n        self._pixels.append((x, y))\n        self._min_x = min(self._min_x, x)\n        self._max_x = max(self._max_x, x)\n        self._min_y = min(self._min_y, y)\n        self._max_y = max(self._max_y, y)\n\n    def box(self):\n        return [(self._min_x, self._min_y), (self._max_x, self._max_y)]\n\ndef find_regions(im):\n    width, height  = im.size\n    regions = {}\n    pixel_region = [[0 for y in range(height)] for x in range(width)]\n    equivalences = {}\n    n_regions = 0\n    #first pass. find regions.\n    for x in xrange(width):\n        for y in xrange(height):\n            #look for a black pixel\n            if im.getpixel((x, y)) == (0, 0, 0, 255): #BLACK\n                # get the region number from north or west\n                # or create new region\n                region_n = pixel_region[x-1][y] if x > 0 else 0\n                region_w = pixel_region[x][y-1] if y > 0 else 0\n\n                max_region = max(region_n, region_w)\n\n                if max_region > 0:\n                    #a neighbour already has a region\n                    #new region is the smallest > 0\n                    new_region = min(filter(lambda i: i > 0, (region_n, region_w)))\n                    #update equivalences\n                    if max_region > new_region:\n                        if max_region in equivalences:\n                            equivalences[max_region].add(new_region)\n                        else:\n                            equivalences[max_region] = set((new_region, ))\n                else:\n                    n_regions += 1\n                    new_region = n_regions\n\n                pixel_region[x][y] = new_region\n\n    #Scan image again, assigning all equivalent regions the same region value.\n    for x in xrange(width):\n        for y in xrange(height):\n                r = pixel_region[x][y]\n                if r > 0:\n                    while r in equivalences:\n                        r = min(equivalences[r])\n\n                    if not r in regions:\n                        regions[r] = Region(x, y)\n                    else:\n                        regions[r].add(x, y)\n\n    return list(regions.itervalues())\n\ndef main():\n    im = Image.open(r\"c:\\users\\personal\\py\\ocr\\test.png\")\n    regions = find_regions(im)\n    draw = ImageDraw.Draw(im)\n    for r in regions:\n        draw.rectangle(r.box(), outline=(255, 0, 0))\n    del draw \n    #im.show()\n    output = file(\"output.png\", \"wb\")\n    im.save(output)\n    output.close()\n\nif __name__ == \"__main__\":\n    main()\n","1271":">>> [i for i in dir(__builtins__) if hasattr(getattr(__builtins__, i), \"__add__\")]\n['False', 'True', '__debug__', '__doc__', '__name__', 'bool', 'bytearray', 'bytes', 'complex', 'float', 'int', 'list', 'str', 'tuple']\n","1272":"In [194]: cache = {}\n\nIn [195]: df.groupby(lambda d: cache.setdefault(d.isocalendar()[:2], d)).agg(agg)\nOut[195]:\n             close    high     low    open     volume\n2012-02-13  0.3546  0.3592  0.3271  0.3476  648333934\n2012-02-20  0.3575  0.3682  0.3524  0.3590  264673454\n","1273":"for column in array.T:\n   some_function(column)\n","1274":"SELECT *\nFROM Timetable t\nWHERE in_dates = 0 OR\n  (\n    in_dates = 1 AND\n    EXISTS (\n     SELECT 1\n     FROM Dates d\n     WHERE d.subject = t.subject AND\n       d.date = t.date\n    )\n  )\n","1275":"def format_Dollar_sign(list):\n\n    lines=['book, 400.2\\n', 'pen, 5\\n', 'food,  200.5\\n', 'gas, 20\\n', \n            'food, 100\\n', 'pen, 10\\n', 'insurance, 171.35\\n', 'gas, 35\\n', \n            'book, 100\\n', 'pen, 12\\n', 'food, 320\\n', \n            'gas,23.55\\n', 'insurance, 110.25']\n\n    my_dictionary = {}\n    for line in lines:\n        item, price= line.strip().split(',')\n\n        my_dictionary[item.strip()] = my_dictionary.get(item.strip(),0) + float(price)\n\n    dic={}\n    for k,v in my_dictionary.items():\n        dic[k]='${0:.2f}'.format(round(v,2))\n\n    L=([(k,v) for k, v in dic.iteritems()])\n    L.sort()\n\n    return L\nprint(format_Dollar_sign(list))\n","1276":">>> import re\n>>> re.sub(r\"(\\w+) (\\w+)\", r\"john \\2\", \"Isaac Newton, physicist\")\n'john Newton, physicist'\n","1277":"import Tkinter as tk\nmaster = tk.Tk()\nvariable = tk.StringVar(master)\noptions = {\"one\": 1, \"two\": 2}\ntk.OptionMenu(master, variable, *options.keys()).pack()\n...\nwanted = options[variable.get()]\n","1278":"allcolors = range(0xFFFFFF+1):\n","1279":"class node(object):\n    def __init__(self, value, children = None):\n        self.value = value\n        self.children = children or []\n        self.parent = None\n        for child in self.children:\n            child.parent = self\n","1280":"from Queue import Queue\nimport time\nimport socket\n\n#wraps system ping command\ndef ping(i, q):\n    \"\"\"Pings address\"\"\"\n    while True:\n        subnet = q.get()\n        # each IP addresse in subnet \n        for ip in (subnet=str(x) for x in range(1,254)):\n            #print \"Thread %s: Pinging %s\" % (i, ip)\n            result = subprocess.call(\"ping -n 1 %s\" % ip, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n            #Avoid flooding the network with ping requests\n            time.sleep(3)\n            if result == 0:\n\n                try:\n                    hostname=socket.gethostbyaddr(ip)\n                    print \"%s (%s): alive\" % (ip,hostname[0]  \n                except:\n                    print \"%s: alive\"%ip\n                break\n        q.task_done()\n\nnum_threads = 100\nqueue = Queue()\n\n#Put all possible subnets on wireless network into a queue\nfor i in range(1,255):\n    queue.put('128.119.%s.'%i)\n\n#Spawn thread pool\nfor i in range(num_threads):\n    worker = Thread(target=ping, args=(i, queue))\n    worker.setDaemon(True)\n    worker.start()\n\n#Wait until worker threads are done to exit    \nqueue.join()\n","1281":"class Event(models.Model):\n    publicID = models.CharField(max_length=128)\n\n    @property\n    def time_data(self):\n        origins= self.origin.all()\n\n        return ' '.join([ str(x.time.value) for x in origins])\n\n\nclass EventsTable(tables.Table):\n    time = tables.Column(accessor='time_data')\n\n    class Meta:\n        model = Event\n        fields = ('time')\n","1282":"previous = lst[-1]           # j = len(lst) - 1\nfor current in lst:          # i = 0; i < len(lst); i++\n    print current, previous  # lst[i], lst[j]\n    # do stuff\n    previous = current       # j = i before incrementing\n","1283":"p = np.polyfit(np.log(xm), mcherryp, 1)\nax1.semilogx(xm, p[0] * np.log(xm) + p[1], 'r-')\n","1284":">>> urls = ['http:\/\/www.doopa.pl\/1','http:\/\/www.doopa.pl\/2',\n...     'http:\/\/www.dupa2.pl\/4\/php.pl', 'http:\/\/www.dupa3.pl\/4\/php?gfdgfd=44',\n...     'www.dupa4.pl\/4\/php.pl']\n>>> from urlparse import urlparse\n>>> dict((urlparse(u).netloc, u) for u in urls).values()\n['www.dupa4.pl\/4\/php.pl', 'http:\/\/www.dupa2.pl\/4\/php.pl', 'http:\/\/www.doopa.pl\/2', 'http:\/\/www.dupa3.pl\/4\/php?gfdgfd=44']\n","1285":"class pdf(object):\n    def __init__(self,path):\n      self.S_Linc = []\n      self.Short_Legal = []\n      self.Title_Number = []\n      self.Legal_Description = []\n\n       operations, mostly appends onto the above variables\n    ....\n","1286":"#!\/usr\/bin\/env python\n","1287":"class Meta:\n    unique_together = (('bar', 'name'),)\n","1288":"import re\nimport urllib\n\ninfile = open('test2.txt')\noutfile = open('test3.txt', 'w')\n\npattern = r'\"resource\": \"(?P<path>.+\/(?P<filename>.+)\\.jpg)\"'\nreplacement = '\"resource\": \"..\/img\/\\g<filename>.jpg\"'\nprog = re.compile(pattern)\n\nfor line in infile:\n    match = prog.match(line)\n    if match:\n        print (match.group('path'))\n    text = prog.sub(replacement, line)\n    outfile.write(text)\ninfile.close()\noutfile.close\n","1289":"def your_view_function(request):\n    # Function body\n\nyour_view_function = login_required(your_view_function)\n","1290":"BLOCK_SIZE_BYTES = 512 # usually?  always?  *shrug*\n\ndef get_disk_size(blockdev):\n    blocks = int(open('\/sys\/block\/{blockdev}\/size'.format(**locals())).read())\n    return blocks * BLOCK_SIZE_BYTES\n","1291":"def add(request):\n    # Do something\n    return redirect('\/register\/')\n","1292":"class le:\n    def __init__(self, n):\n        self.sn = (n, 0.6), \n        #                 ^ make self.sn a tuple of tuples in all cases\n\nclass lf:\n    def __init__(self, n, m, o):\n        self.sn = (n, 0.7), (m, 0.8), (o, 0.9)\n\nl1 = le(\"Ka\")\nl2 = le(\"La\")\nl3 = lf(\"Ma\",\"Na\",\"Oa\")\ntheList = [l1, l2, l3]\nresult = dict([tup for thing in theList for tup in thing.sn])\n# result == {'Na': 0.8, 'Ka': 0.6, 'Ma': 0.7, 'Oa': 0.9, 'La': 0.6}\n","1293":"In [18]:\ndf.columns.set_levels([df.columns.levels[0], ['a', 'b', 'c', 'd']])\nprint df\n    strategy              firm            \n           a   b   c   d     a   b   c   d\n0                                         \n2          1 NaN NaN NaN   NaN NaN NaN NaN\n3          1   1 NaN NaN     1   2 NaN NaN\n4          3   1 NaN NaN     2   3 NaN NaN\n5        NaN NaN   2 NaN     1   6   3 NaN\n6          1  13   1 NaN     1  13   6 NaN\n7        NaN  17  18 NaN     1   8  11 NaN\n8        NaN   5  16   1   NaN   7  23   2\n9        NaN   1  12   5   NaN NaN   6   5\n10       NaN   1 NaN   2   NaN NaN NaN   1\n","1294":"var js_array = [{% for f in filelist %}\"{{ f }}\",{% endfor %}];\n","1295":"In [45]: names = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']\n\nIn [46]: df = pd.read_csv(StringIO(data), header=None, names=names)\n\nIn [47]: mask = df.applymap(lambda x: x in ['X', 'XX', None, np.nan])\n\nIn [48]: df[-mask.any(axis=1)]\nOut[48]: \n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 5 entries, 0 to 9\nData columns:\na    5  non-null values\nb    5  non-null values\nc    5  non-null values\nd    5  non-null values\ne    5  non-null values\nf    5  non-null values\ng    5  non-null values\nh    5  non-null values\ni    5  non-null values\nj    4  non-null values\nk    5  non-null values\nl    5  non-null values\ndtypes: float64(6), int64(1), object(5)\n","1296":"def delete_keys_from_dict(dict_del, lst_keys):\n    for k in lst_keys:\n        try:\n            del dict_del[k]\n        except KeyError:\n            pass\n    for v in dict_del.values():\n        if isinstance(v, dict):\n            delete_keys_from_dict(v, lst_keys)\n\n    return dict_del\n","1297":"import re\ninp = 'data[0][value]=123&data[0][Type]=Range&data[1][value]=345&data[1][Type]=Fixed'\n\nmatches = re.findall(r'\\[([0-9]+)\\]\\[([a-zA-Z]+)\\]=([a-zA-Z0-9]+)', inp)\n\nout = {}\nfor match in matches:\n    index, key, value = match\n    if out.get(index) is None:\n        out[index] = {}\n    out[index][key] = value\n\ndata = out.values()\n","1298":"from Tkinter import *\nimport mp3play\nimport tkFileDialog\nimport Tkinter\nimport tkFont\nimport Tkinter as tk\n\nclass musicplay:\n    def __init__(self):\n        self.music = None\n        self.play_list = []\n        self.trackLocations = []\n\n        self.root = tk.Tk()\n        self.root.title(\"EmoPlayer\")\n\n        self.root.configure(background='black')\n        self.root.geometry('300x100+750+300')\n\n        self.filename = Tkinter.StringVar()\n        self.name = Tkinter.StringVar()\n        self.play_list = Tkinter.StringVar()\n\n        menubar = Menu(self.root)\n        filemenu = Menu(menubar, tearoff=0, bg=\"black\", fg=\"Orange\")\n        menubar.add_cascade(label='File', menu = filemenu)\n        filemenu.add_command(label='Open', command = self.open_file)\n        filemenu.add_separator()\n        filemenu.add_command(label='Exit', command = self.Exit)\n        self.root.config(menu=menubar)\n\n        open_file = Button(self.root, width = 6, height = 1,\n                           text = 'Mood',fg='Orange', bg='black')\n        open_file.grid(row=0, column=3)\n\n        play_button = Button(self.root, width = 5, height = 1, text='Play',\n                             fg='Orange', command = self.play, bg=\"black\")\n        play_button.grid(row=0, column=0, sticky = W)\n\n        stop_button = Button(self.root, width = 5, height = 1, text='Stop',\n                             fg='Orange', command = self.stop, bg=\"black\")\n        stop_button.grid(row=0, column=1, sticky = W)\n\n        pause_button = Button(self.root, width = 5, height = 1, text='Pause',\n                              fg='Orange', command = self.pause, bg=\"black\")\n        pause_button.grid(row=0, column=2)\n\n        self.volume_slider = Scale(self.root, label='Volume',\n                              orient = 'horizontal', fg = 'Orange', \n                              command = self.vol, bg=\"black\")\n        self.volume_slider.grid(row=0, column=4)\n\n        file_name_label = Label(self.root, font=('Comic Sans', 8),\n                                fg = 'Orange', wraplength = 300,\n                                textvariable=self.name, bg=\"black\")\n        file_name_label.grid(row=3, column=0, columnspan=8)\n\n        play_list_window = Toplevel(self.root, height = 150, width = 100)\n        play_list_window.title(\"Playlist\")\n        self.play_list_display = Listbox(play_list_window, selectmode=EXTENDED,\n                                    width = 50, bg=\"Dark Slate grey\",\n                                    fg=\"Orange\")\n        self.play_list_display.bind(\"<Double-Button-1>\", self.tune_changed)\n        self.play_list_display.pack()\n        play_list_window.mainloop()\n\n        self.root.mainloop()        \n\n    def open_file(self):                                \n        \"\"\"\n        Opens a dialog box to open .mp3 filemusic,\n        then sends filename to file_name_label.\n        \"\"\"\n        self.filename.set(tkFileDialog.askopenfilename(\n            defaultextension = \".mp3\",\n            filetypes=[(\"All Types\", \".*\"), (\"MP3\", \".mp3\")]))\n        self.playlist = self.filename.get()\n        playlist_pieces = self.playlist.split(\"\/\")\n        self.play_list.set (playlist_pieces[-1])\n        playl = self.play_list.get()\n        self.play_list_display.insert(END, playl)\n        print self.filename.get()\n        self.music = mp3play.load(self.filename.get())\n        pieces = self.filename.get().split(\"\/\")\n        self.trackLocations += [self.filename.get()]\n        self.name.set(pieces[-1])\n\n    def play(self):\n        \"\"\"Plays the .mp3 file\"\"\"\n        self.music.play()\n\n    def stop(self):\n        \"\"\"Stops the .mp3 file\"\"\"\n        self.music.stop()                \n\n    def pause(self):\n        \"\"\"Pauses or unpauses the .mp3 file\"\"\"\n        if self.music.ispaused():\n            self.music.unpause()\n        else:\n            self.music.pause()\n\n    def vol(self, event):\n        \"\"\"Allows volume to be changed with the slider\"\"\"\n        v = Scale.get(self.volume_slider)\n        try:\n            self.music.volume(v)\n        except:\n            pass\n\n    def tune_changed(self, event):\n        idx = event.widget.curselection()[0]\n        self.music = mp3play.load(self.trackLocations[int(idx)])\n        print (\"Now playing %s\" % event.widget.get(idx))\n\n    def Exit(self):\n        exit()\n\nif __name__ == \"__main__\":\n    musicplay()\n","1299":"import numpy as np\nrow, col = 10, 5\nmatrix = np.random.randint(2, size=(row,col))\n","1300":"[\n{\n    \"fields\": {\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\",\n        \"middle_name\": \"G\",\n        \"birthday\": \"1900-07-21\",\n        \"password\": \"goforit123\",\n        \"email\": \"John.Doe@gmail.com\"\n    },\n    \"model\": \"account_data.user\",\n    \"pk\": 1  \/\/ This is the pk you have to use\n},\n{\n    \"fields\": {\n        \"user\": 1,  \/\/ Use the pk, in this case you're referencing to John Doe\n        \"type\": \"dog\",\n        \"color\": \"blue\"\n    },\n    \"model\": \"account_data.pets\",\n    \"pk\": 1\n}\n]\n","1301":"def analizarRT():\n    timeline = []\n    fileRT = openFile('rt.txt')\n    for status in api.user_timeline('cnn', count='6'):\n        timeline.append(status)\n    for i in range(6):\n        for b in range(6):\n            if timeline[i].id == fileRT[b].id:\n                pass\n            else:\n                newlist.append(timeline[i].id)\n    print newlist\n","1302":"# When plotting initially, save the handle\nplot_handle, = self.map.plot(x,y,'ro') \n...\n\n# When changing the data, change the xdata and ydata and redraw\nplot_handle.set_ydata(new_y)\nplot_handle.set_xdata(new_x)\nself.figure.canvas.draw()\n","1303":"$(\"#feedback\").dialog({model:true,\n                height: 250,\n                width: 350,\n                autoOpen:false,\n                title:\"Candidate Feedback\",\n                Buttons:{\n                'Submit': function() {\n                 $(\"#myform\").submit();\n                 $(this).dialog('close');\n                 \/* submit = true;\n                  submitForm();*\/\n                  return true;\n                }\n                },\n","1304":"def multimap(value, f, count):\n    for _ in range(count):\n        value = f[value]\n        yield value\n\nprint(list(multimap('a', {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'a'}, 4)))\n","1305":"<select name=\"activity\">\n  {% for activity in activities %}\n      <option value=\"{{ activity }}\">{{ activity }}<\/option>\n  {% endfor %}\n<\/select>\n","1306":">>> import re\n>>> re.sub(r\"x(?=[^']*'([^']|'[^']*')*$)\", \"P\", \"axbx'cxdxe'fxgh'ixj'k\")\n\"axbx'cPdPe'fxgh'iPj'k\"\n","1307":"import json\nf = sc.textFile('\/path\/to\/file')\nd = lines.map(lambda line: json.loads(line))\n","1308":"#!\/usr\/bin\/env python\nimport sys\nfrom datetime import datetime\n\nknown_systems = {'MIDRANGE_PROD', 'MIDRANGE_TEST'}\n\ntry:\n    date_string, system_string = sys.argv[1:]\nexcept ValueError:\n    sys.exit('Usage: queue_cleaner <date> <system>')\n\nif system_string not in known_systems:\n   sys.exit('wrong system, expected: %s, got: %r' % (\n       ' or '.join(known_systems), system_string))\n\ntry:\n    input_date = datetime.strptime(date_string, '%Y%m%d').date()\nexcept ValueError:\n    sys.exit('expected date in YYYYMMDD format, got: %r' % date_string)\n","1309":">>> from dateutil.parser import parse\n>>> dt = parse('19981024103115+0100')\n>>> dt\ndatetime.datetime(1998, 10, 24, 10, 31, 15, tzinfo=tzoffset(None, 3600))\n>>> dt.utctimetuple()\ntime.struct_time(tm_year=1998, tm_mon=10, tm_mday=24, tm_hour=9, tm_min=31, tm_sec=15, tm_wday=5, tm_yday=297, tm_isdst=0)\n","1310":"a = ephem.separation((panel_az, panel_alt), (sun_az, sun_alt))\nprint a\n","1311":"import re\n\nxml = re.sub(r'.*<root>', '<root>', xml, flags=re.DOTALL)    # Remove leading junk\nxml = re.sub(r'\\\\par[^<]*<', '<', xml)                       # Middle junk\nxml = re.sub(r'<\/root>.*', '<\/root>', xml, flags=re.DOTALL)  # Trailing junk\n","1312":"class MyModel(models.Model):\n    # other fields\n    my_file = models.FileField(upload_to='uploaddir')\n\n    def save(self, *args, **kwargs):\n        new_name = 'file_name-random-chars.ext'\n        self.my_file.name = new_name\n        super(MyModel, self).save(*args, **kwargs)\n","1313":"ax.set_position((left, bottom, width, height))\n","1314":"import Queue\nimport threading, time\n\nclass MyThread(threading.Thread):\n    def __init__(self, theQueue=None):\n        threading.Thread.__init__(self)        \n        self.theQueue=theQueue\n\n    def run(self):\n        while True:\n            thing=self.theQueue.get()\n            self.process(thing) \n            self.theQueue.task_done()\n\n    def process(self, thing):\n        time.sleep(1)\n        print 'processing %s'%thing\n\nqueue=Queue.Queue()\nTHINGS = ['Thing%02d'%i for i in range(101)]\nAVAILABLE_CPUS=3\n\nfor OneOf in range(AVAILABLE_CPUS):\n    thread=MyThread(theQueue=queue)\n    thread.start() # thread started. But since there are no tasks in Queue yet it is just waiting.\n\nfor thing in THINGS:       \n    queue.put(thing) # as soon as task in added here one of available Threads picks it up\n","1315":"<body>\n  <table>\n    {%for row in a%}\n    <tr style=\"margin:10px\">\n      {%for item in row%}\n        {%if forloop.counter == 3 %}\n          <td style=\"margin:10px\" class=\"marked\">{{item}}<\/td>\n        {%else%}\n          <td style=\"margin:10px\">{{item}}<\/td>\n        {%endfor%}\n    <\/tr>\n    {%endfor%}\n  <\/table>\n<\/body>\n","1316":"import matplotlib\nimport matplotlib.mlab as mlab\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt\nimport numpy as np\n#%matplotlib inline\n\ndelta = 0.00025\nA=0\nx = np.arange(0, 0.10, delta)\ny = np.arange(0, 0.1, delta)\nX, Y = np.meshgrid(x, y)\nZ = A*(X**2+Y**2)+2*X*Y\n\nmanual_locations = [(0.1,0.1), (0.2,0.2), (0.3,0.3), \n                    (0.015, 0.015), (0.00255, 0.0025), (0.00005,0.00005)]\nline_widths = (1, 1, 1, 1, 1, 1)\n\nplt.figure()\nCS = plt.contour(X, Y, Z, 6,                        # add 6 contour lines\n                 linewidths=line_widths, \n                 #levels=np.linspace(0, .003, 20))   \n                 levels=np.logspace(-5, -2, 20))\n\nplt.clabel(CS, inline=1,                            # add labels\n          fontsize=10,\n          fmt=\"%.5f\")\nplt.title('Indifference Map')        # title\n\nplt.show()\n","1317":"df1 = df.resample(rule='5Min',how='last',closed='left').reset_index().fillna(method='ffill')\ndf2 = df.resample(rule='5Min',how='first',closed='left').reset_index().fillna(method='ffill')\n\ndt = df1.datetime - df2.datetime\npx_fld = df1.price + ...\n","1318":">>> import pysodium\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\/Library\/Python\/2.7\/site-packages\/pysodium\/__init__.py\", line 34, in <module>\n    sodium.crypto_pwhash_scryptsalsa208sha256_strprefix.restype = ctypes.c_char_p\n  File \"\/System\/Library\/Frameworks\/Python.framework\/Versions\/2.7\/lib\/python2.7\/ctypes\/__init__.py\", line 366, in __getattr__\n    func = self.__getitem__(name)\n  File \"\/System\/Library\/Frameworks\/Python.framework\/Versions\/2.7\/lib\/python2.7\/ctypes\/__init__.py\", line 371, in __getitem__\n    func = self._FuncPtr((name_or_ordinal, self))\nAttributeError: dlsym(RTLD_DEFAULT, crypto_pwhash_scryptsalsa208sha256_strprefix): symbol not found\n\n>>> import ctypes\n>>> import ctypes.util\n>>> \n>>> sodium = ctypes.cdll.LoadLibrary(ctypes.util.find_library('sodium') or ctypes.util.find_library('libsodium'))\n>>> sodium\n<CDLL 'None', handle fffffffffffffffe at 103e967d0>\n>>> ctypes.util.find_library('libsodium')\n>>> ctypes.util.find_library('sodium')\n","1319":"fig, axes = plt.subplots(2, 2, figsize=(8,6), sharex=True)\n\nfor ax, plot in zip(axes.flat, plots):\n    ax.plot(df.index, df[plot])\n    ma = pd.rolling_mean(df[plot], window)\n    ax.plot(df.index, ma)\n    mstd = pd.rolling_std(df[plot], window)\n    ax.fill_between(df.index, ma - 2*mstd, ma + 2*mstd, color='b', alpha=0.1)\n    ax.set_title(plot)\n    ax.yaxis.set_major_formatter(FuncFormatter(lambda x, p: '{:.0f}'.format(x)))\n    ax.xaxis.set_major_formatter(DateFormatter('%d-%H:%M')) # or '%d.%m.%y'\n\nfig.autofmt_xdate()  # This will rotate the xticklabels by 30 degrees so that all dates are readable.\nfig.tight_layout()  # no need to call this inside the loop.\n","1320":"#!\/usr\/bin\/python\n\nimport subprocess\n\ndef asExec(ascript):\n\n    osa = subprocess.Popen(['osascript', '-'],\n                           stdin=subprocess.PIPE,\n                           stdout=subprocess.PIPE)\n    return osa.communicate(ascript)[0]\n\ndef asConv(astr):\n\n    astr = astr.replace('\"', '\" & quote & \"')\n    return '\"{}\"'.format(astr)\n\ndef aScript(aspath):\n\n    ascript = '''\n    set posixPath to POSIX path of {0}\n    '''.format(asConv(aspath))\n    return ascript\n\naliasPath = \"Main HD:Users:sasha:Documents:SomeText.txt\"\nprint(asExec(aScript(aliasPath)))\n","1321":"from cStringIO import StringIO\nfrom PIL import Image, ImageOps, ImageDraw\n\nsize = (591, 608)\nmask = Image.new('L', size, 0)\ndraw = ImageDraw.Draw(mask)\ndraw.rectangle((0, 0) + size, fill=255)\n\n# From base64 to PIL\nimage_string = StringIO(my_image.decode('base64'))\nim = Image.open(image_string)\noutput = ImageOps.fit(im, mask.size, centering=(0.5, 0.5))\noutput.putalpha(mask)\n\n# From PIL to base64\noutput2 = StringIO()\noutput.save(output2, format='PNG')\nim_data = output2.getvalue()\nim_data = im_data.encode('base64')\n# data_url = 'data:image\/png;base64,' + im_data.encode('base64')\n","1322":"from django.core import validators\n\nclass StepTwoForm(forms.Form):\n    number = forms.CharField()\n\n    def __init__(self, *args, **kwargs):\n        config = kwargs.pop('config', {})\n        super(StepTwoForm, self).__init__(*args, **kwargs)\n        if 'MAX_LENGTH' in config:\n            validator = validators.MaxLengthValidator(config['MAX_LENGTH'])\n            self.fields['number'].validators.append(validator)\n","1323":"DECLARE @ TABLE (ID INT, start_date DATE, end_date DATE);\nINSERT @ VALUES (1,'2012-03-15','2012-04-02')\n, (1,'2012-04-05','2012-05-12')\n, (1, '2012-04-12', '2012-05-21')\n, (2, '2012-03-05', '2012-06-13')\n, (3, '2012-03-09', '2012-03-19')\n, (3, '2012-04-03', '2012-05-02')\n, (3, '2012-05-01', '2012-08-01')\n, (3, '2012-05-16', '2012-08-02')\n, (3, '2012-06-08', '2012-09-09');\n\nWITH T AS (\n    SELECT id, start_date, end_date, RN\n    FROM (\n        SELECT id, start_date, end_date, ROW_NUMBER() OVER (PARTITION BY id ORDER BY start_date) RN\n        FROM @) S\n    WHERE RN = 1\n\n    UNION ALL\n\n    SELECT S.id\n         , CASE WHEN DATEDIFF(dd, T.start_date, S.start_date) <= 31 THEN T.start_date ELSE S.start_date END\n         , CASE WHEN DATEDIFF(dd, T.start_date, S.start_date) <= 31 THEN T.end_date ELSE S.end_date END\n         , S.RN\n    FROM (\n        SELECT id, start_date, end_date, ROW_NUMBER() OVER (PARTITION BY id ORDER BY start_date) RN\n        FROM @) S\n    JOIN T ON T.id = S.id\n    WHERE S.RN = T.RN+1\n    )\nSELECT id, start_date, end_date\nFROM T\nGROUP BY id, start_date, end_date;\n","1324":"countries = ['foo', 'bar', 'baz']\ntakes = [re.compile(r'of\\s+(the)?\\s*%s$' % (c), re.I) for c in countries]\nsubs = [re.compile(r'%s$' % (c), re.I) for c in countries]\n\ndef remove_country(s):\n    for regex in takes:\n        if regex.search(s):\n            return s\n    for regex in subs:\n        s = regex.sub('', s)\n    return s\n\nprint remove_country('the bank of foo')\nprint remove_country('the bank of the baz')\nprint remove_country('the nation bar')\n\n''' Output:\n    the bank of foo\n    the bank of the baz\n    the nation\n'''\n","1325":">>> import re                                                             \n>>> r = re.compile(r'(?<=L).*(?=L)')                     \n>>> def rep(m):                                           \n    return m.group().replace('.', '#')\n... \n>>> zipped = (r.sub(rep, ''.join(x)) for x in zip(*chars))\n>>> for x in zip(*zipped):\n    print ''.join(x)\n...     \n.....U......\nL...L.######\n.S..#.#.....\n....L.......\n","1326":"query = User.select(User, fn.Count(Tweet.id).alias('num_tweets'))\nfor user in query:\n    print user.username, user.num_tweets\nusers = list(query)\n","1327":"import string\nreplace_punctuation = string.maketrans(string.punctuation, ' '*len(string.punctuation))\ntext = text.translate(replace_punctuation)\n","1328":"from django.db import models\nfrom django.contrib.contenttypes.models import ContentType\n\nclass BaseModel(models.Model):\n    type = models.ForeignKey(ContentType,editable=False)\n    # other base fields here\n\n    def save(self,force_insert=False,force_update=False):\n        if self.type_id is None:\n            self.type = ContentType.objects.get_for_model(self.__class__)\n        super(BaseModel,self).save(force_insert,force_update)\n\n    def get_instance(self):\n        return self.type.get_object_for_this_type(id=self.id)\n","1329":">>> a='alRfflkafdfaeGlkAYEuRFSbbvvcbF'\n>>> import re\n>>> r=re.compile(\"[A-Z]{3}[a-z][A-Z]{3}\")\n>>> r.findall(a)\n['AYEuRFS']\n","1330":"x=np.array([3,4,5])\ny=np.array([2,50,-1])\nz=np.array([30,0,3])\nmya = [x,y,z] \nmaximum = np.amax(mya, axis=0)\n# maximum will store a list as [maximumofx, maximumofy, maximumofz] -> [30,50,5]\n","1331":"def main():\n    number = int(sys.argv[1])  # this line will fail if you pass an argument that's not an integer\n    print(number)\n\nif __name__ == \"__main__\":\n    main()\n","1332":"bin(ord('P'))\n# 0b1010000\n","1333":"[[False], [True], [True], [True]]\n","1334":"from java import io\n\ndef saveObject(x, fname=\"object.bin\"):\n    outs = io.ObjectOutputStream(io.FileOutputStream(fname))\n    outs.writeObject(x)\n    outs.close()\n\ndef loadObject(fname=\"object.bin\"):\n    ins = io.ObjectInputStream(io.FileInputStream(fname))\n    x=ins.readObject()\n    ins.close()\n    return x\n","1335":"while not curr_node.nextSibling().isNull():\n     print curr_node, len(children)\n     children.append(curr_node.nextSibling())\n     curr_node = curr_node.nextSibling()\n","1336":"%typemap(out) std::vector<std::vector<int>>& \n{\n    for(int i = 0; i < $1->size(); ++i)\n    {       \n        int subLength = $1->data()[i].size();\n        npy_intp dims[] = { subLength };\n        PyObject* temp = PyArray_SimpleNewFromData(1, dims, NPY_INT, $1->data()[i].data());\n        $result = SWIG_Python_AppendOutput($result, temp);\n    }       \n}\n","1337":"from selenium.webdriver.support.select import Select\n\noption_value = \"Malicious E-mail\"\n\nselect_element = browser.find_element_by_xpath(\"\/\/select[option[@value = '%s']]\" % option_value)\nselect = Select(select_element)\nselect.select_by_value(option_value)\n","1338":"self.columnButton = \\\n    gtk.TreeViewColumn ('Enabled', self.buttonRenderer, \n                        active = 0)  # 0 is the tree store column index\n","1339":"import Tkinter\n\ncolor=\"red\"\ndefault_color=\"white\"\n\ndef main(n=10):\n    window = Tkinter.Tk()\n    last_clicked = [None]\n    for x in range(n):\n        for y in range(n):\n            b = Tkinter.Button(window, bg=default_color, activebackground=default_color)\n            b.grid(column=x, row=y)\n            # creating the callback with \"b\" as the default parameter bellow \"freezes\" its value pointing\n            # to the button created in each run of the loop.\n            b[\"command\"] = lambda b=b: click(b, last_clicked)\n    return window\n\ndef click(button, last_clicked):\n    if last_clicked[0]:\n        last_clicked[0][\"bg\"] = default_color\n        last_clicked[0][\"activebackground\"] = default_color\n    button[\"bg\"] = color\n    button[\"activebackground\"] = color\n    last_clicked[0] = button\n\nw = main()\nTkinter.mainloop()\n","1340":"import mechanize\n\nstore_url = 'http:\/\/store.nike.com'\ncart_url = 'http:\/\/store.nike.com\/us\/services\/jcartService?callback=nike_Cart_hanleJCartResponse&action=addItem&lang_locale=en_US&country=US&catalogId=1&productId=463712&price=00.0&siteId=null&line1=Nike+Air+Max+1+Ultra+Moire&line2=Men%27s+Shoe&passcode=null&sizeType=null&skuAndSize=10661133%3A10&qty=1&rt=json&view=3&skuId=10661133&displaySize=14&_=142655682313'\n\nbr = mechanize.Browser()\nresponse = br.open(store_url)\nresponse = br.open(cart_url)\ndata = response.read()\nprint data\n","1341":"h = \"#a7bd7a\"\nt = 167,189,122\n\"#%02x%02x%02x\" % t                              # color tuple to hex string\n[int(h[i:i+2], 16) for i in range(1, len(h), 2)] # hex string to color tuple\n","1342":"import xml.etree.ElementTree as ET\ndef to_parseable(tree):\n    t = ET.tostring(tree)\n    t = t.lower()\n    return ET.fromstring(t)\n","1343":"string = \"baggage\"\ncount = [0] * 256  # This should be big enough to hold counters for every 8 bit character\n\nfor x in string:\n    num_value = ord(x)\n    count[num_value] += 1\n\nfor i in range(256):  # loop through all the possible 8 numbers\n    if count[i]: \n        print chr(i)*count[i]\n\n# you can join them all back into a string like this\nnewstr = ''.join(chr(i)*c for i,c in enumerate(count))\n","1344":"def parseAndEvaluate(exp):\n        if gdb.VERSION.startswith(\"6.8.50.2009\"):\n            return gdb.parse_and_eval(exp)\n        # Work around non-existing gdb.parse_and_eval as in released 7.0\n        gdb.execute(\"set logging redirect on\")\n        gdb.execute(\"set logging on\")\n        gdb.execute(\"print %s\" % exp)\n        gdb.execute(\"set logging off\")\n        return gdb.history(0)\n","1345":"class GenAsyncHandler2(tornado.web.RequestHandler):\n    @tornado.web.asynchronous\n    @tornado.gen.engine\n    def get(self):\n        http_client = AsyncHTTPClient()\n        http_client.fetch(\"http:\/\/google.com\",\n                          callback=(yield tornado.gen.Callback(\"google\")))\n\n        http_client.fetch(\"http:\/\/python.org\",\n                          callback=(yield tornado.gen.Callback(\"python\")))\n\n        http_client.fetch(\"http:\/\/tornadoweb.org\",\n                          callback=(yield tornado.gen.Callback(\"tornado\")))\n        keys = set([\"google\", \"tornado\", \"python\"])\n        while keys:\n            key, response = yield tornado.gen.WaitAny(keys)\n            keys.remove(key)\n            # do something with response\n            self.write(str(key)+\"        \")\n            self.flush()\n        self.finish() \n","1346":"import Tkinter as tk\n\nclass Testing(tk.LabelFrame):\n    def __init__(self, parent, main):\n\n        self.buttonWidth = 10\n\n        self.parent=parent\n        self.main = main # save the instantiating class\n\n        tk.LabelFrame.__init__(self, self.parent, \n            text=\"Test Operations\",\n            padx=10,\n            pady=10\n        )\n\n        self.taskButton = tk.Button(\n            self, \n            text=\"Do A Task\", \n            width=self.buttonWidth,\n            command=self.doATask,\n        )\n\n        self.taskButton.pack()\n\n    def doATask(self):\n        #want to execute function in Results.getResult() but don't know how\n        self.main.results.getResult()  #<--what you can do\n\nclass Results(tk.LabelFrame):\n\n    def __init__(self, parent, main):\n        self.parent = parent\n        self.main = main # save the instantiating class\n        tk.LabelFrame.__init__(self, self.parent, text=\"Visual Results\")\n\n        self.resultLbl = tk.Label(self, text=\"Result\")\n\n        self.resultLbl.pack()\n\n    def getResult(self):\n        self.resultLbl.config(bg='yellow')\n\nclass Application(tk.Frame):\n\n    def __init__(self, parent):\n        self.parent = parent\n        tk.Frame.__init__(self, self.parent)\n\n        self.testing = Testing(self.parent, self)\n        self.results = Results(self.parent, self)\n\n        self.testing.pack(fill=tk.X)\n        self.results.pack(fill=tk.X)\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    root.title(\"Modular GUI App\")\n\n    Application(root).pack()\n    root.mainloop()\n","1347":">>> from operator import mul\n>>> reduce(mul, [1, 2, 3], 1)\n6\n","1348":"test = [[] for e in range(len(foobar)\/2)]\n","1349":"import threading\n\nclass MyApp(ttk.Frame):\n    def __init__(self, master):\n        ttk.Frame.__init__(self, master)\n        fname = 'test.txt'\n        self.build_ui()\n        self.process_file(fname)\n\n    def process_file(self, fname):\n        self.show_progress(True)\n\n        # Start thread to process file.\n        self.thread = threading.Thread(target=self.process_file_worker, args=(fname,))\n        self.thread.daemon = True # Allow the program to terminate without waiting for the thread to finish.\n        self.thread.start()\n\n        # Start checking the thread.\n        self.process_file_check()\n\n    def process_file_check(self):\n        if self.thread.is_alive():\n            # Thread is still running, check thread again in 10 milliseconds.\n            self.after(10, self.process_file_check)\n\n        else:\n            # Thread finished, handle processed results.\n            # Do something with `self.fdata`.\n            self.show_progress(False)\n\n    def process_file_worker(self, fname):\n        # This is run inside the thread.\n        fdata = self.read_file(fname)\n        fdata = self.spellcheck(fdata)\n        self.fdata = fdata\n\n    def show_progress(self, start):\n        if start:\n            self.prog_win = tk.Toplevel()\n            self.prog_win.title('Working...')\n            self.prog_win.resizable(0, 0)\n            self.progress_bar = ttk.Progressbar(self.prog_win,\n                                                orient=tk.HORIZONTAL,\n                                                mode='indeterminate',\n                                                takefocus=True)\n            self.progress_bar.grid()\n            self.progress_bar.start()\n        else:\n            self.progress_bar.stop()\n            self.prog_win.destroy()\n\n\nroot = tk.Tk()\nroot.update()\ngui = MyApp(root)\ngui.mainloop()\n","1350":"def qsort(inlist):\n    if inlist == []: \n        return []\n    else:\n        pivot = inlist[0]\n        lesser = qsort([x for x in inlist[1:] if x < pivot])\n        greater = qsort([x for x in inlist[1:] if x >= pivot])\n        return lesser + [pivot] + greater\n","1351":"img = Image()\n# any editing of 'img'\nimg.save( 'mytiff.tif' )\n","1352":"ln -s $(brew --cellar python) ~\/.pyenv\/versions\n","1353":"from subprocess import Popen, PIPE\n\nargs = ['\/usr\/bin\/apachectl','configtest']\n\nresult = Popen(args,stdout=PIPE,stderr=PIPE).communicate()\n# result[0] will be the standard output, result[1] will be the stderr output\n","1354":"from lxml import etree\n\nxmlschema_doc = etree.parse('schema.xsd')\nxml_doc = etree.parse('my.xml')\nxmlschema = etree.XMLSchema(xmlschema_doc)\n\nif xmlschema.validate(xml_doc):\n   print 'Valid xml'\nelse:\n   print 'Invalid xml'\n","1355":"In [1]: my_set = set([\"a\",\"b\",\"c\",\"d\",\"z\"])\nIn [2]: my_list=[{\"a\":0.5},{\"c\":0.6},{\"b\":0.9},{\"z\":0.5},{\"m\":0.0}]\nIn [3]: [d for d in my_list if all(k in my_set for k in d)]\nOut[3]: [{'a': 0.5}, {'c': 0.6}, {'b': 0.9}, {'z': 0.5}]\n","1356":"def c_to_nex(self, event):#Hitting 'Return' on 'c' calls this, setting focus back to 'dirdisplay' treeview, giving focus to child immediately below what was originally clicked.\n    #Do whatever with data in c\n    print('Focus acknowledged')\n    print(self.nextID)#Feedback to show me the nextID actually exists when I hit 'Return'\n    self.dirdisplay.focus_set()\n    self.dirdisplay.selection_set((self.nextID, self.nextID))\n    self.dirdisplay.focus(self.nextID)\n","1357":"child = pexpect.spawn('ftp ftp.openbsd.org')\nchild.expect('(?i)name .*: ')\nchild.sendline('anonymous')\nchild.expect('(?i)password')\nchild.sendline('pexpect@sourceforge.net')\nchild.expect('ftp> ')\n","1358":"dialogStatus = dlg.ShowModal()\nif dialogStatus == wx.ID_OK:\n    ...\n","1359":"import requests\n\ndef tide_on(url):\n    r = requests.get(url, stream=True, **kwargs)\n\n    for line in r.iter_lines():\n        # wish to stop after consuming just one line\n        print(line)\n        break\n\n    r.close()\n","1360":"([1, 2], [3, 4]) -> [1] + ([3, 4], [2])\n    ([3, 4], [2]) -> [3] + ([2], [4])\n        ([2], [4]) -> [2] + ([4], [])\n            ([4], []) -> return [4]  # lst2 is empty, return lst1\n        return [2] + [4]\n    return [3] + [2, 4]\nreturn [1] + [3, 2, 4]\n","1361":"from os.path import basename, dirname\nimport openpyxl\n\ndef crearlista (*arg, **kw):\n    inventario = openpyxl.Workbook(encoding = \"Utf-8\")\n    sheet = inventario.active\n    i = 1\n\n    for dirpath, subdirs, files in os.walk(\"\/\/media\/\/rayeus\/Datos\/Mis Documentos\/Nueva carpeta\/\", topdown=False):    \n        file_dir = basename(dirpath) or dirname(basename(dirpath))\n        for name in files:\n            sheet.cell(row=i, column=1).value = dirpath\n            sheet.cell(row=i, column=2).value = file_dir\n            sheet.cell(row=i, column=3).value = name\n            i += 1\n","1362":"var loaded = true;\nfor (var i = 0 ; loaded ; i++) {\n    var div = 'contentDiv' + i;\n    $(body).append('<div id=' + div + '><\/div>');\n    $('#contentDiv' + i).load('otherpage.html #' + div, function(response, status, xhr) { \n        if (status == 'error') {\n            loaded=false;\n        }});  \/\/ assumes you have the #contentDiv[i] already in otherpage.html\n}\n","1363":"import csv\nfrom itertools import izip\n\nwith open('source.csv') as f:\n    reader = csv.reader(f)\n    # filter data\n    data = (row for row in reader if row[1].strip() in ('5', '8'))\n    # make a new variable\n    data = (row + [int(row[2]) * 3] for row in data)\n    # transpose data\n    data = izip(*data)\n    # write data to a new csv file\n    with open('destination.csv', 'w') as fw:\n        csv.writer(fw).writerows(data)\n","1364":"p = subprocess.Popen(['path\/to\/long\/runnning\/process', 'arg1', 'arg2'])\n...\np.terminate()  # kill the process.\n","1365":"import random\nimport psutil # $ pip install psutil\n\np = psutil.Process(random.choice(psutil.pids()))\nprint(p.name())\nprint(p.cpu_times())\nprint(p.memory_info())\n","1366":"open(\"logfile.txt\", \"a\")\n","1367":"keys = list(d.keys())\nkeys.sort(reverse=True)\nincreased_k = keys[0] + 1  # use +1 to increment the largest key \nfor k in keys:\n    if k < new_key: break\n    d[increased_k] = d[k]\n    increased_k = k\n\nd[new_key] = new_value  # insert the new item\n","1368":"d={'Alyssa':22, 'Char':25, 'Dan':25, 'Jeff':20, 'Kasey':20, 'Kim':20, 'Mogran':25, 'Ryan':25, 'Stef':22}\nimport collections\nprint collections.Counter(d.values()).most_common()[-1][0]\n22\n","1369":"from itertools import islice, izip, cycle\n\nlist_1 = ['a','b','c']\nlist_2 = [1,2]\n\nlist(islice(izip(cycle(list_1), cycle(list_2)), len(list_1)*len(list_2)))\n","1370":"tn.expect([r\"\\w+ login: \"])\n","1371":"import csv\n\ncursor = arcpy.InsertCursor(pointFC)\nwith open('yourcsvfile.csv', 'rb') as csvfile:\n    reader = csv.reader(csvfile)\n    for row in reader:\n        point = arcpy.CreateObject(\"Point\")\n        point.X, point.Y = float(row[5]), float(row[27])  # take the 6th and 28th columns from the row\n        cursor.insertRow(point)        \n","1372":"from collections import defaultdict\n\ninput_list = [\n    \"test00_take1_00001.dpx\",\n    \"test00_take1_00002.dpx\",\n    \"another_take_ver1-0001_3.dpx\",\n    \"another_take_ver1-0002_3.dpx\"]\n\nresults_dict = defaultdict(lambda: defaultdict(list))\nmatches = (re.match(r\"(.*?[\\W_])\\d+([\\W_].*)\", item) for item in input_list)\nfor match in matches:\n    results_dict[match.group(1)][match.group(2)].append(match.group(0))\n\nresults_list = [d2 for d1 in results_dict.values() for d2 in d1.values()]\n\n>>> results_list\n[['another_take_ver1-0001_3.dpx', 'another_take_ver1-0002_3.dpx'], ['test00_take\n1_00001.dpx', 'test00_take1_00002.dpx']]\n","1373":">>> print \"foo\\\\nbar\\\\n\\\\tbaz\"\nfoo\\nbar\\n\\tbaz\n>>> print \"foo\\\\nbar\\\\n\\\\tbaz\".decode('string_escape')\nfoo\nbar\n        baz\n","1374":"error = 0\nwhile error < 2:\n  try:\n    motgift = spider_xml(motgift_url, extract_xml_item, motgift_xpath,   motgift_pipeline, motgift_table, motgift_model\n    break\n  except:\n    error += 1\n    sleep(10)\n","1375":"import re\npnumber = re.sub(\"[^0-9]\", \"\", input_number)\nif pnumber[0] == 1:\n    pnumber = pnumber[1:]#strip 1st char if it's a 1\n\n#insert the dashes\nif len(pnumber) == 10:\n    pnumber = \"%s-%s-%s\" % (pnumber[:3],pnumber[3:6],pnumber[6:])\nelse:\n    #throw error\n","1376":"import Tkinter\nimport threading\nimport Queue\n\nclass GuiPart:\n    def __init__(self, master, queue, endCommand):\n        self.queue = queue\n        # Do GUI set up here (i.e. draw progress bar)\n\n        # This guy handles the queue contents\n        def  processIncoming(self):\n            while self.queue.qsize():\n                try:\n                    # Get a value (email progress) from the queue \n                    progress = self.queue.get(0)\n                    # Update the progress bar here.\n\n                except Queue.Empty:\n                    pass\n\nclass ThreadedClient:\n    # Launches the Gui and does the sending email task\n    def __init__(self, master):\n        self.master = master\n        self.queue = Queue.Queue()\n\n        # Set up the Gui, refer to code recipe\n        self.gui = GuiPart(master, self.queue, ...)\n\n        # Set up asynch thread (set flag to tell us we're running)\n        self.running = 1        \n        self.email_thread = threading.Thread(target = self.send_emails)\n        self.email_thread.start()\n\n        # Start checking the queue\n        self.periodicCall()\n\n     def periodicCall(self):\n         # Checks contents of queue\n         self.gui.processIncoming()\n         # Wait X milliseconds, call this again... (see code recipe)\n\n     def send_emails(self): # AKA \"worker thread\"\n         while (self.running):\n             # Send an email\n             # Calculate the %age of email progress\n\n             # Put this value in the queue!\n             self.queue.put(value)\n\n     # Eventually run out of emails to send.\n     def endApplication(self):\n         self.running = 0\n\n\nroot = Tkinter.Tk()\nclient = ThreadedClient(root)\nroot.mainloop()\n","1377":"from collections import defaultdict\n\ndata = [['A','B','C','D','E'],\n        ['A','B','C'],\n        ['A','B','C','E'],\n        ['C','D','E'],\n        ['C','D','E','B','A']]\ncharacters = [i for j in data for i in j]\ncounts = {}\ncombinations = defaultdict(int)\nfor character in set(characters):\n    counts[character] = characters.count(character)\n    for character2 in set(characters):\n        for entry in data:\n            combination = [character, character2]\n            if \"\".join(combination) in \"\".join(entry):\n                combinations[tuple(combination)] += 1\nprobability = {i: combinations[i]\/float(counts[i[0]]) for i in combinations}\nprobability\n\n{('A', 'B'): 0.75,\n  ('B', 'A'): 0.25,\n  ('B', 'C'): 0.75,\n  ('C', 'D'): 0.6,\n  ('C', 'E'): 0.2,\n  ('D', 'E'): 1.0,\n  ('E', 'B'): 0.25}\n","1378":"class TypedWriter:\n    \"\"\"\n    A CSV writer which will write rows to CSV file \"f\",\n    which uses \"fieldformats\" to format fields.\n    \"\"\"\n\n    def __init__(self, f, fieldnames, fieldformats, **kwds):\n        self.writer = csv.DictWriter(f, fieldnames, **kwds)\n        self.formats = fieldformats\n\n    def writerow(self, row):\n        self.writer.writerow(dict((k, self.formats[k] % v) \n                                  for k, v in row.iteritems()))\n\n    def writerows(self, rows):\n        for row in rows:\n            self.writerow(row)\n","1379":"def _foreign_id_rel(Cls):\n    return relationship(\n        Cls,\n        uselist=False,\n        lazy=False,  # This is just my use case, not needed\n        primaryjoin=lambda: and_(\n            Diff.foreign_table == Cls.__tablename__,\n            foreign(Diff.foreign_id) == Cls.id,\n        ),\n        backref=backref(\n            'diffs',\n            uselist=True,\n            lazy=True,  # This is just my use case, not needed\n            primaryjoin=lambda: and_(\n                Diff.foreign_table == Cls.__tablename__,\n                foreign(Diff.foreign_id) == Cls.id,\n            ),\n        ),\n    )\n\n\nclass Diff(Model):\n    ...\n\n    foo = _foreign_id_rel(Foo)\n    bar = _foreign_id_rel(Bar)\n    baz = _foreign_id_rel(Baz)\n\n    @property\n    def foreign(self):\n        if self.foreign_table:\n            return getattr(self, self.foreign_table)\n\n    @foreign.setter\n    def foreign(self, value):\n        if value is None:\n            self.foreign_table = None\n            self.foreign_id = None\n        else:\n            tbl_name = value.__tablename__\n            self.foreign_table = tbl_name\n            setattr(self, tbl_name, value)\n","1380":"In [7]: str(decimal.Decimal('0.1'))\nOut[7]: '0.1'\n\nIn [13]: \"{0:0.6f}\".format(decimal.Decimal('0.1'))\nOut[13]: '0.100000'\n","1381":"from collections import OrderedDict\n\nd = OrderedDict([(\"name\", \"David\"), (\"year\", 2016)])\n\nvalues_tuple = tuple([v for v in d.values()])\nq = r'INSERT INTO myTable (%s'\nfor i in range(len(values_tuple)-1):  # I added first one above so -1\n    q += r', %s'\nq += ')'\n\ncursor.execute(q, values_tuple)\n","1382":"date = {}\ndata = urllib2.urlopen(url)\ndata_obj = json.loads(data.read())\ns = json.dumps(data_obj, sort_keys=True, indent=4)\nprint s\n","1383":"from time import time, sleep\nfrom Tkinter import *\n\ndef empty_textbox():\n    textbox.delete(\"1.0\", END)\n\nroot = Tk()\n\nframe = Frame(root, width=300, height=100)\ntextbox = Text(frame)\n\nframe.pack_propagate(0)\nframe.pack()\ntextbox.pack()\n\ntextbox.insert(END, 'This is a test')\ntextbox.after(5000, empty_textbox)\n\nroot.mainloop()\n","1384":">>> import os\n>>> os.path.abspath(\"mydir\/myfile.txt\")\n","1385":"def pytest_generate_tests(metafunc):\n    [...]\n    if warning_condition:\n        metafunc.config._warn(\"Warning condition encountered.\")\n    [...]\n","1386":"import json\nimport sys\nimport os\ndata = []\nif os.stat(\"data.txt\").st_size != 0 :\n    file = open('data.txt', 'r')\n    data = json.load(file)\n    print(data)\n\nchoice = input(\"What's your choice ?\")\nif choice == 'a':\n    # Add a new joke.\n    # See Point 3 of the \"Requirements of admin.py\" section of the assignment brief.\n    jokeSetup = input('Enter setup of joke: ')\n    jokePunchLine = input('Enter punchline of joke: ')\n    entry = {'setup': jokeSetup , 'punchline': jokePunchLine}\n    data.append(entry)\n    file = open('data.txt', 'w')\n    json.dump(data, file)\n    file.close()\n    print('Joke Added.')\n    pass\n\n\nelif choice == 's':\n    # Search the current jokes.\n    # See Point 5 of the \"Requirements of admin.py\" section of the assignment brief.\n    searchTerm = input('Enter search term: ')\n    file = open('data.txt', 'r')\n    data = json.load(file)\n    file.close()\n\n    for sub_dict in data:\n        if searchTerm in sub_dict['setup']:\n            print(sub_dict['punchline'])\n    pass\n# or you could modify the last for loop, like this:\n    for dict in data:\n        if searchTerm in dict['setup'] or searchTerm in dict['punchline']:\n            print('found!')\n    pass\n","1387":"with open(filename,'wb') as fp:\n    pickle.dump(dict1,fp)\n    pickle.dump(dict2,fp)\n    pickle.dump(dict3,fp)\n\nwith open(filename,'rb') as fp:\n    d1=pickle.load(fp)\n    d2=pickle.load(fp)\n    d3=pickle.load(fp)\n","1388":"df1.set_index(['id', 'noteId'], inplace=True)\ndf1.update(df2)\n","1389":"businesses = Business.objects.extra(\n  select={\n    \"lat\": \"SELECT latitude FROM property_table WHERE  business_table.address = property_table.address\",\n    \"lon\": \"SELECT longitude FROM property_table WHERE business_table.address = property_table.address\"\n  }\n)\n","1390":"char **list_to_argv_array(PyObject *lst)\n{\n  assert (PyList_Check(lst));       \/\/ use better error handling here\n  size_t cnt = PyList_GET_SIZE(lst);\n  char **ret = new char*[cnt + 1];\n  for (size_t i = 0; i < cnt; i++) {\n    PyObject *s = PyList_GET_ITEM(lst, i);\n    assert (PyString_Check(s));     \/\/ likewise\n    size_t len = PyString_GET_SIZE(s);\n    char *copy = new char[len + 1];\n    memcpy(copy, PyString_AS_STRING(s), len + 1);\n    ret[i] = copy;\n  }\n  ret[cnt] = NULL;\n  return ret;\n}\n","1391":"session.query(A).options(subqueryload(A.b).subqueryload(B.c))\n","1392":">>> fmts =[\"12 sheet\",\"4 sheet\",\"48 sheet\",\"6 sheet\", \"busrear\", \"phonebox\",\"train\"]\n>>> fmts.sort(key=lambda x: (int(x.split(None, 1)[0]) if x[:1].isdigit() else 999, x))\n>>> fmts\n['4 sheet', '6 sheet', '12 sheet', '48 sheet', 'busrear', 'phonebox', 'train']\n","1393":"event = {\n    'summary': calendar_event_form.cleaned_data['name'],\n    'location': calendar_event_form.cleaned_data['location'],\n    'description': calendar_event_form.cleaned_data['description'],\n    'start': {\n        'date': start_string, #date here\n        'timeZone': tz_str,\n    },\n    'end': {\n        'date': end_string, #date here\n        'timeZone': tz_str,\n    },\n}\n","1394":"from collections import Counter\nfrom itertools import combinations\n\nd  = Counter()\nfor sub in a:\n    if len(a) < 2:\n        continue\n    sub.sort()\n    for comb in combinations(sub,2):\n        d[comb] += 1\n\nprint(d.most_common())\n[(('Jennifer', 'John'), 3), (('John', 'Mark'), 2), (('Jennifer', 'Mark'), 2), (('Anna', 'John'), 1), (('Joe', 'Mark'), 1), (('Anna', 'Jennifer'), 1)]\n","1395":"list = [1,2,3]\nlist. # auto-complete will recognize list is a list\n","1396":"import numpy as np\n\ndef local_max(a, start, finish):\n    local = a[start:finish+1]\n    loc_max = max(local)\n    loc_pos = local.index(loc_max) + start\n    return loc_max, loc_pos\n\ndata = [3, np.nan, 5.3, 7.0, 8, 5.0, 0, 1, 3, 5.0, 2.4, 0.1, 0.3, 0.5]\n\nprint local_max(data, 7, 11)\nprint local_max(data, 0, 5)\n","1397":"import numpy as np\nimport matplotlib.pyplot as plt\n\ndef _profile(ax, x, y):\n    ln, = ax.plot(x, y)\n    # return the Artist created\n    return ln\n\n\ndef profile_matrix(n, m):\n    fig, ax_array = plt.subplots(n, m, sharex=True, sharey=True)\n    for ax in np.ravel(ax_array):\n        _profile(ax, np.arange(50), np.random.rand(50))\n\nprofile_matrix(3, 3)\n","1398":"class FixtureSuite(unittest.TestSuite):\n    def run(self, result, debug=False):\n        socket.setdefaulttimeout(30)\n        super().run(result, debug)\n        socket.setdefaulttimeout(None)\n...\nsuite1 = unittest.TestSuite(testCases)\nsuite2 = FixtureSuite(testCases)\nfullSuite = unittest.TestSuite([suite1,suite2])\nunittest.TextTestRunner(verbosity=2).run(fullSuite)\n","1399":"import scrapy\nfrom selenium import webdriver\n\nclass product_spiderItem(scrapy.Item):\n    title = scrapy.Field()\n    price=scrapy.Field()\n    pass\n\nclass ProductSpider(scrapy.Spider):\n    name = \"product_spider\"\n    allowed_domains = ['ebay.com']\n    start_urls = ['http:\/\/www.ebay.com\/sch\/i.html?_odkw=books&_osacat=0&_trksid=p2045573.m570.l1313.TR0.TRC0.Xpython&_nkw=python&_sacat=0&_from=R40']\n\n    def __init__(self):\n        self.driver = webdriver.Firefox()\n\n    def parse(self, response):\n        self.driver.get(response.url)\n\n        while True:\n\n            sel = scrapy.Selector(text=self.driver.page_source)\n\n            for prod in sel.xpath('\/\/ul[@id=\"GalleryViewInner\"]\/li\/div\/div'):\n                item = product_spiderItem()\n                item['title'] = prod.xpath('.\/\/div[@class=\"gvtitle\"]\/h3\/a\/text()').extract()\n                item['price'] = prod.xpath('.\/\/div[@class=\"prices\"]\/\/span[@class=\" bold\"]\/text()').extract()\n                yield item\n\n            next = self.driver.find_element_by_xpath('\/\/td[@class=\"pagn-next\"]\/a')\n\n            try:\n                next.click()\n\n            except:\n                break\n\n    def closed(self, reason):\n        self.driver.close()\n","1400":">>> import win32file\n>>> win32file.GetVolumeNameForVolumeMountPoint(\"C:\\\\\")\n'\\\\\\\\?\\\\Volume{50c800a9-c62e-11df-b5bb-806e6f6e6963}\\\\'\n>>> win32file.GetVolumeNameForVolumeMountPoint(\"K:\\\\\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\npywintypes.error: (87, 'GetVolumeNameForVolumeMountPoint', \n                       'The parameter is incorrect.')\n","1401":"import xml.etree.ElementTree as ET\n\nstr = \"<sec>John<\/sec> said hi to a woman (named <sec>Mary<\/sec>)\"\n\ndoc = ET.fromstring(\"<root>\" + str + \"<\/root>\")\nresult = [x.text for x in doc.findall(\".\/\/sec\")]\n\n# >>> ['John', 'Mary']\n","1402":">>> dict1 = {\"good authors\": {\"john\" : {}, \"jack\" : {}}, \"average authors\" : {\"kim\" : {}, \"peter\" : {}} }\n\n>>> dict2 = {\"john\" : [{\"2008\" : \"book1\"}, {\"2009\" : \"book2\"}], \"peter\" : [{\"2008\" : \"book3\"}, {\"2009\" : \"book4\"}]}\n>>> for key, value in dict1.items():\n...     for dict2key, dict2value in dict2.items():\n...         if dict2key in value:\n...             value[dict2key] = dict2value\n...\n>>> dict2\n{'john': [{'2008': 'book1'}, {'2009': 'book2'}], 'peter': [{'2008': 'book3'}, {'2009': 'book4'}]}\n","1403":"In [70]: s.str.split(',').map(lambda x: ','.join(sorted(x)))\nOut[70]:\n0    abc,def,ghi\n1        abc,ghi\ndtype: object\n","1404":"assert_equal(mock.call.method_to_be_mocked.call_count, 2)\n","1405":"out = initial_input\nfor func in [function1, function2, function3, function4]:\n    out = func(out)\n","1406":"#!\/usr\/bin\/env python\nimport numpy\nimport pylab\nfrom mpi4py import MPI\n\nclass Robot(object):\n    def __init__(self, id, x, y, vx, vy, mass):\n        self.id = id\n        self.x = x\n        self.y = y\n        self.vx = vx\n        self.vy = vy\n        self.ax = 0.\n        self.ay = 0.\n        self.mass = mass\n    def rPrint(self):\n        print \"Robot \",self.id,\" at (\",self.x,\",\",self.y,\")\"\n    def interact(self, robot2):\n        dx = (self.x-robot2.x)\n        dy = (self.y-robot2.y)\n        eps = 0.25\n        idist3 = numpy.power(numpy.sqrt(dx*dx +dy*dy + eps*eps),-3)\n        numerator = -self.mass*robot2.mass\n        self.ax += numerator*dx*idist3\n        self.ay += numerator*dy*idist3\n        robot2.ax -= numerator*dx*idist3\n        robot2.ay -= numerator*dy*idist3\n    def updatePos(self, dt):\n        self.x += 0.5*self.vx*dt\n        self.y += 0.5*self.vy*dt\n        self.vx += self.ax*dt\n        self.vy += self.ay*dt\n        self.x += 0.5*self.vx*dt\n        self.y += 0.5*self.vy*dt\n        self.ax = 0.\n        self.ay = 0.\n\n\n\ndef init(nRobots):\n    myRobotList = []\n    vx = 0.\n    vy = 0.\n    mass = 1.\n    for i in range(nRobots):\n        randpos = numpy.random.uniform(-3,+3,2)\n        rx = randpos[0]\n        ry = randpos[1]\n        myRobotList.append(Robot(i, rx, ry, vx, vy, mass))\n    return myRobotList\n\ndef selfForces(robotList):\n    nRobots = len(robotList)\n    for i in range(nRobots-1): \n       for j in range (i+1, nRobots):\n            robotList[i].interact(robotList[j])\n\ndef otherRobotForces(myRobotList, otherRobotList):\n    for i in myRobotList:\n        for j in otherRobotList:\n            i.interact(j)\n\ndef plotRobots(robotList):\n    xl = []\n    yl = []\n    vxl = []\n    vyl = [] \n    for i in robotList:\n       xl.append(i.x)\n       yl.append(i.y)\n       vxl.append(i.vx)\n       vyl.append(i.vy)\n    pylab.subplot(1,1,1)\n    pylab.plot(xl,yl,'o')\n    pylab.quiver(xl,yl,vxl,vyl)\n    pylab.show()\n\nif __name__ == \"__main__\":\n    comm = MPI.COMM_WORLD\n    nprocs = comm.Get_size()\n    rank   = comm.Get_rank()\n\n    if (nprocs != 2):\n        print \"Only doing this for 2 for now..\"\n        sys.exit(-1)\n    neigh = (rank + 1) %  nprocs\n\n    robotList = init(50)\n\n    for i in range (10):\n        print \"[\",rank,\"] Doing step \", i\n        selfForces(robotList)\n\n        request = comm.isend(robotList, dest=neigh, tag=11)\n        otherRobotList = comm.recv(source=neigh, tag=11)\n\n        otherRobotForces(robotList,otherRobotList)\n\n        request.Wait()\n\n        for r in robotList:\n            r.updatePos(0.05)\n\n\n\n    if (rank == 0):\n        print \"plotting Robots\"\n        plotRobots(robotList + otherRobotList)\n","1407":"# create an empty list\na = [];\n# take limt as input\nlim = raw_input(\"Enter limit\")\n\n# this is python style of for loop\n# here i will start from 0 and will go upto limit\nfor i in range (0, int(lim)):\n    # take input from user one by one and append to list\n    elem = raw_input(\"\")\n    a.append(int(elem))\n","1408":"result = re.sub(r\"\"\"(?x)\n    (?<!\\\\)     # Make sure that there is no backslash before the current position\n    \\\\          # Match a backslash\n    (?=         # only if...\n     (?:\\\\\\\\)*  # an even number of backslashes follows (including zero)\n     (?!\\\\)     # and no further backslashes follow after that\n    )           # (End of lookahead assertion)\"\"\", \n    r\"\\\\\\\\\", subject)\n","1409":"In [212]: df = pd.DataFrame([['a', 1], ['b', 2], ['c', 3], ['d', 4]],\n                            columns=['col1', 'col2'])\n\n\nIn [213]: df['col1'].isin(['a', 'b', 'c'])\nOut[213]:\n0     True\n1     True\n2     True\n3    False\nName: col1, dtype: bool\n\nIn [214]: df.ix[df['col1'].isin(['a', 'b', 'c']), :]\nOut[214]:\n  col1  col2\n0    a     1\n1    b     2\n2    c     3\n","1410":"set $country $cookie_country;\n\nif ($country == '') {\n    set $country $geoip_country_code;\n    add_header Set-Cookie country=$geoip_country_code; \n}\n\nuwsgi_param GEOIP_COUNTRY $country;\n","1411":"PREFIX dbpedia-owl: <http:\/\/dbpedia.org\/ontology\/>\nPREFIX geo: <http:\/\/www.w3.org\/2003\/01\/geo\/wgs84_pos#>\nSELECT ?subject,\n?longitude_counter,\n?latitude_counter,\n(group_concat(?latitude ; separator = \"||\") AS ?latitude_set),\n(group_concat(?longitude ; separator = \"||\") AS ?longitude_set)\nWHERE\n{\n    {\n        SELECT DISTINCT * WHERE\n        {\n            SELECT DISTINCT ?subject (COUNT(?latitude) as ?latitude_counter) (COUNT(?longitude) as ?longitude_counter) \n            WHERE \n            {\n                ?subject geo:lat ?latitude; geo:long ?longitude .\n            }\n        } \n    }\n    ?subject geo:lat ?latitude; geo:long ?longitude .\n    FILTER(?latitude_counter > 1 or ?longitude_counter > 1)\n}\nORDER BY DESC(?longitude_counter)\n","1412":"# Sorry but was not able to check code below\ndef get_diff(fileObj1, fileObj2):\n    f1Diff = []\n    f2Diff = []\n    outputData = []\n    # x is one row\n    f1Data = set(x.strip() for x in fileObj1)\n    f2Data = set(x.strip() for x in fileObj2)\n    f1Column1 = set(x.split('\\t')[0] for x in f1Data)\n    f2Column1 = set(x.split('\\t')[0] for x in f2Data)\n    l1Col1Diff = f1Column1 ^ f2Column1\n    l2Col1Diff = f2Column1 ^ f1Column1\n    commonPart = f1Column1 & f2column1\n    for line in f1Data.union(f2Data):\n        lineKey = line.split('\\t')[0]\n        if lineKey in common:\n            outputData.append(line)\n        elif lineKey in l1ColDiff:\n            f1Diff.append(line)\n        elif lineKey in l2ColDiff:\n            f2Diff.append(line)\n    return outputData, f1Diff, f2Diff\n\noutputData, file1Missed, file2Missed = get_diff(open(file1, 'r'), open(file2, 'r'))\n","1413":"small_list_set = set(small_list)\nfor line in big_list:\n    for item in line:\n        if item in small_list_set:\n            bucket.append(line)\n","1414":"import os, glob\nfiles = glob.glob('*.jpg')\nfiles = [os.path.join(\"C:\\\\data\", file) for file in files]\nresult = \"( \" + \" \".join(files) + \" )\"\nprint result  # Prints ( C:\\data\\a.jpg C:\\data\\b.jpg C:\\data\\c.jpg )\n","1415":"ScrollView:\n\n    GridLayout:\n        cols: 1\n        padding: 10\n        spacing: 10\n        size_hint: None, None\n        width: 500\n        height: self.minimum_height\n","1416":"IDE Settings\n    |\n    Editor\n       |\n       Colors & Fonts\n           |\n           General\n              |\n              Caret Row\n","1417":"s = stream.Stream()\nn = note.Note('C4') # qtr note default\ns.append(n)\n\nc = chord.Chord('E4 G4') # qtr\ns.insertIntoNoteOrChord(0.0, c)\ns.show('t')\n{0.0} <music21.chord.Chord C4 E4 G4>\n","1418":"import os\nimport shutil\n\nsrcfile = 'a\/long\/long\/path\/to\/file.py'\ndstroot = '\/home\/myhome\/new_folder'\n\n\nassert not os.path.isabs(srcfile)\ndstdir =  os.path.join(dstroot, os.path.dirname(srcfile))\n\nos.makedirs(dstdir) # create all directories, raise an error if it already exists\nshutil.copy(srcfile, dstdir)\n","1419":"from numpy import *\n\nhit_idx = (0,4)\n\n# Define a graph by edge list\nedges = [[0,1],[1,2],[2,3],[2,4]]\n\n# Create adj. matrix\nA = zeros((5,5))\nA[zip(*edges)] = 1\n# Undirected condition\nA += A.T\n\n# Make the final state an absorbing condition\nA[hit_idx[1],:] = 0\nA[hit_idx[1],hit_idx[1]] = 1\n\n# Make a proper Markov matrix by row normalizing\nA = (A.T\/A.sum(axis=1)).T\n\nB = A.copy()\nZ = []\nfor n in xrange(100):\n    Z.append( B[hit_idx] )\n    B = dot(B,A)\n\nfrom pylab import *\nplot(Z)\nxlabel(\"steps\")\nylabel(\"hit probability\")\nshow()    \n","1420":"class MyHandler(tornado.web.RequestHandler):\n    def get(self, *args, **kwargs):\n        components = [x for x in self.request.path.split(\"\/\") if x]\n        # results in ['myroute', 'something']\n","1421":"n,m = map(int,raw_input().split())\ns = n\naux = 0\nwhile n>=m:\n    n, aux = divmod(n, m)\n    s +=n\n    n +=aux\nprint s\n","1422":"class Employee(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    employee_name = db.Column(db.String(120))\n    parent = db.Column(db.Integer, db.ForeignKey('employee.id'), index=True)\n    # implements nested intervals with fractions\n    created = db.Column(db.DateTime, index=True)\n    left_num = db.Column(db.Integer, nullable=False)\n    left_den = db.Column(db.Integer, nullable=False)\n    right_num = db.Column(db.Integer, nullable=False)\n    right_den = db.Column(db.Integer, nullable=False)\n    level = db.Column(db.Integer, nullable=False)\n\n    def __init__(self, employee_name, parent):\n        self.created = datetime.datetime.now()\n        self.employee_name = employee_name\n        self.parent = parent\n\n        # handle case of first addition\n        if not parent:\n            self.level = 1\n            left_node_num = 0\n            left_node_den = 1\n            right_node_num = 1\n            right_node_den = 1\n        else:\n            parent_employee = Employee.query.get(self.parent)\n            # if the parent exists, set level to 1 more\n            self.level = parent_employee.level + 1\n            # find the most recent sibling\n            most_recent_sibling = Employee.query\\\n                .filter_by(parent=self.parent)\\\n                .order_by(Employee.id.desc())\\\n                .first()\n            if not most_recent_sibling:\n                # if no sibling, use parent boundaries\n                left_node_num = parent_employee.left_num\n                left_node_den = parent_employee.left_den\n            else:\n                left_node_num = most_recent_sibling.right_num\n                left_node_den = most_recent_sibling.right_den\n            right_node_num = parent_employee.right_num\n            right_node_den = parent_employee.right_den\n        left_boundary = fractions.Fraction(numerator=left_node_num + right_node_num,\n                                           denominator=left_node_den + right_node_den)\n        right_boundary = fractions.Fraction(numerator=left_boundary.numerator + right_node_num,\n                                            denominator=left_boundary.denominator + right_node_den)\n        self.left_num = left_boundary.numerator\n        self.left_den = left_boundary.denominator\n        self.right_num = right_boundary.numerator\n        self.right_den = right_boundary.denominator\n","1423":"from ansible.plugins.callback import CallbackBase\nimport os\nimport time\nimport sqlite3\n\ndbname = '.\/test.db'\nTIME_FORMAT='%Y-%m-%d %H:%M:%S'\n\ntry:\n    con = sqlite3.connect(dbname)\n    cur = con.cursor()\n    cur.execute('CREATE TABLE `test` (`now` TEXT, `host` TEXT UNIQUE)')\n    con.commit()\nexcept:\n    pass\n\ndef log(host, data):\n\n    if type(data) == dict:\n        invocation = data.pop('invocation', None)\n        if invocation.get('module_name', None) != 'setup':\n            return\n\n    facts = data.get('ansible_facts', None)\n\n    now = time.strftime(TIME_FORMAT, time.localtime())\n\n    try:\n        # `host` is a unique index\n        cur.execute(\"REPLACE INTO test (now, host) VALUES(?,?);\",\n        (\n            now,\n            facts.get('ansible_hostname', None)\n        ))\n        con.commit()\n    except:\n        pass\n\nclass CallbackModule(CallbackBase):\n    def runner_on_ok(self, host, res):\n        log(host, res)\n","1424":"for node in page.xpath('.\/\/table[@class=\"gridtable\"]\/tr'):\n","1425":"with open(\"input.csv\", \"r\") as input_file:\n    header = input_file.readline()[:-1] #this is to remove trailing '\\n'\n    header += \",Table exists?\"\n    output_lines = [header]\n\n    for line in input_file:\n         output_lines.append(line[:-1])\n         if 'table' in line.split(\",\")[3]:\n             output_lines[-1]+=\",table exists\"\n         else:\n             output_lines[-1]+=\",No table found\"\n\nwith open(\"output.csv\", \"w\") as output_file:\n    output_file.write(\"\\n\".join(output_lines))\n","1426":">>> def inversio(interes_fix_anual):\n...     interes_fix_anual=float(interes_fix_anual)\n...     money = input('Write here your credit ')\n...     interes = interes_fix_anual \/ 100.0\n...     years = 0\n...     inversion = money\n...     while inversion <= (money * 2):\n...         inversion = inversion + (inversion * interes)\n...         years = years+1\n...         print 'money=' + str(money) + ' inversion=' + str(inversion) + ' years=' + str(years)\n...     return years\n...\n>>> inversio(4)\nWrite here your credit 100\nmoney=100 inversion=104.0 years=1\nmoney=100 inversion=108.16 years=2\nmoney=100 inversion=112.4864 years=3\nmoney=100 inversion=116.985856 years=4\nmoney=100 inversion=121.66529024 years=5\nmoney=100 inversion=126.53190185 years=6\nmoney=100 inversion=131.593177924 years=7\nmoney=100 inversion=136.856905041 years=8\nmoney=100 inversion=142.331181242 years=9\nmoney=100 inversion=148.024428492 years=10\nmoney=100 inversion=153.945405632 years=11\nmoney=100 inversion=160.103221857 years=12\nmoney=100 inversion=166.507350731 years=13\nmoney=100 inversion=173.16764476 years=14\nmoney=100 inversion=180.094350551 years=15\nmoney=100 inversion=187.298124573 years=16\nmoney=100 inversion=194.790049556 years=17\nmoney=100 inversion=202.581651538 years=18\n18\n","1427":"class A:\n    pass\n\na = A() # instantiate an object of class A\n","1428":"import pickle\ndata = [int(el) for el in raw_input().split()]\ntry:\n    new = pickle.load(open(\"save.p\", \"rb\")) + data\nexcept IOError:\n    new = data\npickle.dump(new, open(\"save.p\", \"wb\"))\nprint pickle.load(open(\"save.p\", \"rb\"))\n","1429":"from numpy import allclose,zeros_like\nfrom numpy.random import rand    \nfrom numpy.linalg import solve\n\n# generate the 5 vectors as random arrays\nmat = rand(5,5)\nv1,v2,v3,v4,v5 = mat.T\nv0 = rand(5)\nx= solve(mat,v0)\n\n#first check\nassert allclose(dot(mat,x),v0)\n\n#2nd check, which is the equation of the OP\nres = zeros_like(v0)\nfor xj,vj in zip([v1,v2,v3,v4,v5],x):\n    res+= xj*vj\n\nassert allclose(res,v0)\n","1430":"from subprocess import Popen, PIPE\n\ndf = Popen('df -P \/Volumes\/link\/to\/some\/folder', shell=True, stdout=PIPE)\nserverAddress = df.stdout.readlines()[1:][0]\nserverAddress = serverAddress.split('@')[1]\nserverAddress = serverAddress.split('\/')[0]\nprint serverAddress\n","1431":"x = np.array([1,2,3,4,5])\nindex = np.argwhere(x==3)\ny = np.delete(x, index)\nprint(x, y)\n","1432":"driver.find_element_by_css_selector('description').click()\n\n# extract the data\n\ndriver.back()\n","1433":"In [5]: !echo {filename}.bak\nmytxtfile.txt.bak\n","1434":"mqttc = mqtt.Client(machine_id, clean_session=False)\nmqttc.username_pw_set(mqtt_user, mqtt_pwd)\nmqttc.connect(mqtt_host, mqtt_port)\nmqttc.subscribe(mqtt_topic, qos=1)\n\ndef on_disconnect(client, userdata, rc):\n    if rc != 0:\n        print \"Unexpected MQTT disconnection. Will auto-reconnect\"\n\nmqttc.on_connect = on_connect\nmqttc.on_message = on_message\nmqttc.on_disconnect = on_disconnect\nmqttc.loop_forever()\n","1435":"data = [\n    {'id':u'1','name':u'Jeff'},\n    {'id':u'2','name':'Carlo'},\n]\n\nimport xlwt\n\nw = xlwt.Workbook()\nws = w.add_sheet('sheet1')\n\ncolumns = list(data[0].keys()) # list() is not need in Python 2.x\nfor i, row in enumerate(data):\n    for j, col in enumerate(columns):\n        ws.write(i, j, row[col])\n\nw.save('data.xls')\n","1436":"# input data\nlst = [{'A':'BBB', 'C':'DDD', 'D':'EEE'},\n       {'A':'BBB', 'C':'DDD', 'D':'ESS'},\n       {'A':'BBB', 'C':'ASD', 'D':'EEE'},\n       {'C':'ASD', 'D':'EEE'}]\n\n# list of filters\nflt = [('A', 'BBB'), ('D', 'EEE')]\n\n# a list comprehension + all() will do the trick\n[x for x in lst if all(x.get(k, None) == v for k, v in flt)]\n=> [{'A': 'BBB', 'C': 'DDD', 'D': 'EEE'}, {'A': 'BBB', 'C': 'ASD', 'D': 'EEE'}]\n","1437":"dictionary['screen_name'] = tweet['user']['screen_name']\n","1438":"other_lists = {\n    'bannana': [\"white\", \"red\", \"blue\"],\n    'tomato': [\"red\", \"shiny\", \"grey\"],\n    'peach': [\"s\u00e9ch\u00e9\", \"mure\", \"moisi\"]\n}\n\nrandomlist = random.choice(['bannana', 'tomato', 'peach'])\nfor i in other_lists[randomlist]:\n    if i in ab:\n        if 'bannana' == randomlist:  # use 'in' for substring\n            ...\n","1439":"strlist = [u''.join(unichr(c) for c in h5file[obj_ref]) for obj_ref in dataset])\n","1440":"Run_program.bat:\n\npython script1.py\npython script2.py\nrun_program.exe\n","1441":"numservers = 15 # put anything you want here\nfor i in range(1,numservers+1):\n    print('server{}'.format(i))\n    if i%5 == 0:\n        print('*'*22)            \n","1442":"import pandas as pd\nimport numpy as np\n\n# I use python3.4\n# if your python version is 2.x, replace it with 'import StringIO'\nimport io\n\n\n# generate some 'large' tsv\nraw_data = pd.DataFrame(np.random.randn(10000, 5), columns='A B C D E'.split())\nraw_tsv = raw_data.to_csv(sep='\\t') \n# start to read csv in chunks, 50 rows per chunk (adjust it to the potential of your PC)\n# the use of StringIO is just to provide a string buffer, you don't need this\n# if you are reading from an external file, just put the file path there\nfile_reader = pd.read_csv(filepath_or_buffer=io.StringIO(raw_tsv), sep='\\t', chunksize=50)\n# try to show you what's inside each chunk\n# if you type:      list(file_reader)[0]\n# exactly 50 rows\n# don't do this in your real processing, file_reader is a lazy generator\n# and it can only be consumed once\n\n    Unnamed: 0       A       B       C       D       E\n0            0 -1.2553  0.1386  0.6201  0.1014 -0.4067\n1            1 -1.0127 -0.8122 -0.0850 -0.1887 -0.9169\n2            2  0.5512  0.7816  0.0729 -1.1310 -0.8213\n3            3  0.1159  1.1608 -0.4519 -2.1344  0.1520\n4            4 -0.5375 -0.6034  0.7518 -0.8381  0.3100\n5            5  0.5895  0.5698 -0.9438  3.4536  0.5415\n6            6 -1.2809  0.5412  0.5298 -0.8242  1.8116\n7            7  0.7242 -1.6750  1.0408 -0.1195  0.6617\n8            8 -1.4313 -0.4498 -1.6069 -0.7309 -1.1688\n9            9 -0.3073  0.3158  0.6478 -0.6361 -0.7203\n..         ...     ...     ...     ...     ...     ...\n40          40 -0.3143 -1.9459  0.0877 -0.0310 -2.3967\n41          41 -0.8487  0.1104  1.2564  1.0890  0.6501\n42          42  1.6665 -0.0094 -0.0889  1.3877  0.7752\n43          43  0.9872 -1.5167  0.0059  0.4917  1.8728\n44          44  0.4096 -1.2913  1.7731  0.3443  1.0094\n45          45 -0.2633  1.8474 -1.0781 -1.4475 -0.2212\n46          46 -0.2872 -0.0600  0.0958 -0.2526  0.1531\n47          47 -0.7517 -0.1358 -0.5520 -1.0533 -1.0962\n48          48  0.8421 -0.8751  0.5380  0.7147  1.0812\n49          49 -0.8216  1.0702  0.8911  0.5189 -0.1725\n\n[50 rows x 6 columns]\n\n# set up your HDF5 file with highest possible compress ratio 9\nh5_file = pd.HDFStore('your_hdf5_file.h5', complevel=9, complib='blosc')\n\nh5_file\nOut[18]: \n<class 'pandas.io.pytables.HDFStore'>\nFile path: your_hdf5_file.h5\nEmpty\n\n\n# now, start processing\nfor df_chunk in file_reader:\n    # must use append method\n    h5_file.append('big_data', df_chunk, complevel=9, complib='blosc')\n\n# after processing, close hdf5 file\nh5_file.close()\n\n\n# check your hdf5 file, \npd.HDFStore('your_hdf5_file.h5')\n# now it has all 10,000 rows, and we did this chunk by chunk\n\nOut[21]: \n<class 'pandas.io.pytables.HDFStore'>\nFile path: your_hdf5_file.h5\n\/big_data            frame_table  (typ->appendable,nrows->10000,ncols->6,indexers->[index])\n","1443":"class MyApp(wx.App):\n    def OnInit(self):\n        # Set application name before anything else\n        self.SetAppName(\"My App Name\")\n        mainframe = MyMainFrame(None, wx.ID_ANY, \"\")\n        self.SetTopWindow(mainframe)\n        mainframe.Show()\n        return 1\n\nif __name__ == '__main__':\n    myapp = MyApp()\n    myapp.MainLoop()\n","1444":"import re\nfrom datetime import timedelta\n\n\nregex = re.compile(r'((?P<hours>\\d+?)hr)?((?P<minutes>\\d+?)m)?((?P<seconds>\\d+?)s)?')\n\n\ndef parse_time(time_str):\n    parts = regex.match(time_str)\n    if not parts:\n        return\n    parts = parts.groupdict()\n    time_params = {}\n    for (name, param) in parts.iteritems():\n        if param:\n            time_params[name] = int(param)\n    return timedelta(**time_params)\n\n\n>>> from parse_time import parse_time\n>>> parse_time('12hr')\ndatetime.timedelta(0, 43200)\n>>> parse_time('12hr5m10s')\ndatetime.timedelta(0, 43510)\n>>> parse_time('12hr10s')\ndatetime.timedelta(0, 43210)\n>>> parse_time('10s')\ndatetime.timedelta(0, 10)\n>>> \n","1445":"object.__setattr__(self, name, value)\n","1446":"A = coo_matrix((values, coords.T))\n","1447":"import csv\nimport re\n\ndata = [ ['9-1', '9-2', '9-3'] ]\n\n\ndef quoteCsvData(data):\n    for x, row in enumerate(data):\n        for y, item in enumerate(row):\n             if data[x][y] != '':\n                 data[x][y] = r'=\"' + data[x][y] + r'\"'\n    return data\n\ndef unquoteCsvData(data):\n    for x, row in enumerate(data):\n        for y, item in enumerate(row):\n            if data[x][y] != '':\n                m = re.match(r'=\"([^\"]*)\"',data[x][y])\n                if m:\n                    data[x][y] =  m.group(1)\n    return data\n\n\nfd = open('test2.csv', 'wb')\ndata = quoteCsvData(data)\ntry:\n    writer = csv.writer(fd, delimiter=',',\n                            quotechar='|', \n                            quoting=csv.QUOTE_NONE, \n                            escapechar='\\\\')\n    writer.writerows(data)\n\nfinally:\n    fd.close()\n\nfd = open('test2.csv', 'rb')\ntry:\n    reader = csv.reader(fd, delimiter=',', \n                            quotechar='|', \n                            quoting=csv.QUOTE_NONE, \n                            escapechar='\\\\')\n    data = []\n    for row in reader:\n        data.append(row)\n\nfinally:\n    fd.close()\n\ndata = unquoteCsvData(data)\n\nprint data\n","1448":"  def _addition(self, cr, uid, ids, fields, arg, context):\n      r = {}\n      for record in self.browse(cr, uid, ids):\n          r[record.id] = record.num1 + record.num2\n      return r\n\n  'num1' : fields.integer('Num1'),\n  'num2' : fields.float('Num2'),\n  'total' : fields.function(_addition, string='Tot',type='float'),\n","1449":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\nimport simplejson as json\nfrom xml import sax\ntry:\n    from cStringIO import StringIO\nexcept ImportError:\n    from StringIO import StringIO\n\nxml_string = '''<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<n1:products xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\" xmlns:n7=\"http:\/\/foo.bar.tld\" xmlns:n1=\"http:\/\/foo.bar.tld\">\n  <n1:product>\n    <n1:status>\n      <n7:created>2005-02-08T18:18:30.53<\/n7:created>\n      <n7:updated>2008-09-18T10:29:58.26<\/n7:updated>\n    <\/n1:status>\n    <n1:productid>28321503<\/n1:productid>\n    <n1:producttext>\n      <n7:text>Some product info<\/n7:text>\n      <n7:type>Info<\/n7:type>\n    <\/n1:producttext>\n    <n1:terms>\n      <n7:term>\n        <n7:number>1<\/n7:number>\n        <n7:name>Term1<\/n7:name>\n      <\/n7:term>\n      <n7:term>\n        <n7:number>2<\/n7:number>\n        <n7:name>Term2<\/n7:name>\n      <\/n7:term>\n    <\/n1:terms>   \n  <\/n1:product>\n<\/n1:products>\n'''\n\ndef display(data):\n    import pprint\n    pp = pprint.PrettyPrinter(depth=10)\n    pp.pprint(data)\n\nclass Element:\n    def setData(self, key, value):\n        self.__dict__[key] = value\n\n    def setObject(self, key, object):\n        if key in self.__dict__ and not isinstance(self.__dict__[key], (list, tuple)):\n            prev_object = self.__dict__[key]\n            self.__dict__[key] = []\n            self.__dict__[key].append(prev_object)\n            self.__dict__[key].append(object)\n        elif key in self.__dict__:\n            self.__dict__[key].append(object)\n        else:\n            self.__dict__[key] = object\n\n    def jsonable(self):\n        return self._traverse(self.__dict__)\n\n    # http:\/\/stackoverflow.com\/questions\/1036409\/recursively-convert-python-object-graph-to-dictionary\/1118038#1118038\n    def _traverse(self, obj):\n        if isinstance(obj, dict):\n            for k in obj.keys():\n                obj[k] = self._traverse(obj[k])\n            return obj\n        elif hasattr(obj, \"__iter__\"):\n            return [self._traverse(v) for v in obj]\n        elif hasattr(obj, \"__dict__\"):\n            data = dict([(key, self._traverse(value))\n                for key, value in obj.__dict__.iteritems()\n                if not callable(value) and not key.startswith('_')])\n            return data\n        else:\n            return obj\n\nclass ObjBuilder(sax.ContentHandler):\n    def __init__(self, node):\n        sax.ContentHandler.__init__(self)\n        self.obj = []\n        self.node = node\n        self.fetch = False\n        self.__buffer = ''\n\n    def startElementNS(self, name, qname, attrs):\n        (ns, localname) = name\n        if self.node == localname:\n            self.fetch = True\n            o = Element()\n            self.rootobject = o\n            self.obj.append(o)\n        elif self.fetch:\n            self.__buffer = ''\n            o = Element()\n            self.obj[-1].setObject(localname, o)\n            self.obj.append(o)\n\n    def characters(self,contents):\n        if self.fetch:\n            self.__buffer += contents.strip()\n\n    def endElementNS(self, name, qname):\n        (ns, localname) = name\n        if self.node == localname:\n            self.fetch = False\n            display(self.rootobject.jsonable())\n            data = self.rootobject.jsonable()\n        elif self.fetch:\n            if self.__buffer != '':\n                self.obj[-2].setData(localname, self.__buffer)\n            del self.obj[-1]\n            self.__buffer = ''\n\nif __name__ == '__main__':\n    parser = sax.make_parser()\n    parser.setContentHandler(ObjBuilder('product'))\n    parser.setFeature(sax.handler.feature_namespaces, 1)\n\n    inpsrc = sax.xmlreader.InputSource()\n    inpsrc.setByteStream(StringIO(xml_string))\n    parser.parse(inpsrc)\n","1450":"import numpy as np\na = np.random.rand(100,100)\nb = np.random.rand(100,100)\nc = np.random.rand(100,100)\nd = np.dstack((a,b,c))\nresult = np.median(d,axis=2)\n","1451":">>> class Foo:\n...     def bar(hello=None):\n...          return hello\n...     def baz(world=None):\n...          return baz\n...\n>>> import inspect\n>>> members = inspect.getmembers(Foo)\n>>> print members\n[('__doc__', None), ('__module__', '__main__'), ('bar', <unbound method Foo.bar>\n), ('baz', <unbound method Foo.baz>)]\n>>> inspect.getargspec(members[2][1])\n(['hello'], None, None, (None,))\n>>> inspect.getargspec(members[3][1])\n(['world'], None, None, (None,))\n","1452":"import Tkinter\nfrom Tkinter import *\nfrom PIL import Image, ImageTk\n\nroot = Tk()\n\nmake_frame = LabelFrame(root, text=\"Sample Image\", width=100, height=100)\nmake_frame.pack()\n\nstim_filename = \"image.png\"\n\n# create the PIL image object:\nPIL_image = Image.open(stim_filename)\n\nwidth = 100\nheight = 100\n\n# You may prefer to use Image.thumbnail instead\n# Set use_resize to False to use Image.thumbnail\nuse_resize = True\n\nif use_resize:\n    # Image.resize returns a new PIL.Image of the specified size\n    PIL_image_small = PIL_image.resize((width,height), Image.ANTIALIAS)\nelse:\n    # Image.thumbnail converts the image to a thumbnail, in place\n    PIL_image_small = PIL_image\n    PIL_image_small.thumbnail((width,height), Image.ANTIALIAS)\n\n# now create the ImageTk PhotoImage:\nimg = ImageTk.PhotoImage(PIL_image_small)\nin_frame = Label(make_frame, image = img)\nin_frame.pack()\n\nroot.mainloop()\n","1453":"def play_music():\n    while True:\n        if not ch.get_queue():\n            for x in range(BUFFERSIZE):\n                    if x % BLOCKSIZE == 0:\n                        outbuf = m.process(inbuf)\n                    samples[selector][x][0] = outbuf[(x % BLOCKSIZE) * 2]\n                    samples[selector][x][1] = outbuf[(x % BLOCKSIZE) * 2 + 1]\n            ch.queue(sounds[selector])\n            selector = int(not selector)\n        libpd_release()\n\nplay_music_thread = threading.Thread(target=play_music)\nplay_music_thread.daemon = True\nplay_music_thread.start()\n\nwhile True:\n    command = raw_input().lower()\n\n    if command == \"commands\":\n        print '\"look around\"'\n        print '\"explore\"'\n        print '\"inventory\"'\n        print '\"examine\"'\n        print '\"take\"'\n        print '\"combine\"'\n        print '\"quit\"'\n    elif command == \"look\" or command == \"look around\":\n        char.look()\n","1454":"def create(self, request, *args, **kwargs):\n    data = request.data\n    cart = Cart.objects.get(id=data['id'],user_id=data['user_id'])\n    serializer = self.get_serializer(data=data)\n    serializer.is_valid(raise_exception=True)\n    order = Order.objects.create(**serializer.validated_data)\n    cart.to_be_deleted = True\n    cart.save()\n    headers = self.get_success_headers(serializer.data)\n    return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n","1455":"if isinstance(iterable, basestring):\n    iterable = iterable.split(',')\n","1456":"d = {}  \nd[(Character1, Room1)] = (10, 4)\n","1457":"@property\ndef myattr(self):\n    \"\"\"This is the doc string.\"\"\"\n    return self._half * 2\n\n@myattr.setter\ndef myattr(self, value):\n    self._half = value \/ 2\n\n@myattr.deleter\ndef myattr(self):\n    del self._half\n","1458":"def combos(data):\n    for i in xrange(1, len(data) + 1):\n        for item in itertools.combinations(data, i):\n            for j in itertools.product(*item):\n                yield j\n","1459":"PTAUchar.setData(string data)\n","1460":">>> c = [0.50, 0.52, 0.54, 0.56, 0.58, 0.60]\n>>> a = np.array(c)\n>>> a[(0.5 < a) & (a < 0.6)]\narray([0.52, 0.54, 0.56,  0.58])\n","1461":"resp = urllib2.urlopen('http:\/\/www.google.com')\nfile_read = resp.read(max_wanted_size)\nif resp.read(1) != '':\n    #file is bigger than expected code\n","1462":"#include <ges\/ges.h>\n\nint main (int argc, gchar ** argv)\n{\n  GESAsset *src_asset;\n  GESPipeline *pipeline;\n  GESTimeline *timeline;\n  GESClip *source;\n  GESLayer *layer;\n  GMainLoop *mainloop;\n  GError **error;\n  gchar *uri;\n  GESUriClipAsset *asset;\n  \/* Initialize GStreamer (this will parse environment variables and commandline\n   * arguments. *\/\n  gst_init (&argc, &argv);\n\n  \/* Initialize the GStreamer Editing Services *\/\n  ges_init ();\n\n  \/* Setup of a A\/V timeline *\/\n\n  \/* This is our main GESTimeline *\/\n  timeline = ges_timeline_new_audio_video ();\n\n  \/* We are only going to be doing one layer of clips *\/\n  layer = ges_layer_new ();\n\n  \/* Add the tracks and the layer to the timeline *\/\n  if (!ges_timeline_add_layer (timeline, layer))\n    return -1;\n\n  \/* We create a simple asset able to extract GESTestClip *\/\n  uri = gst_filename_to_uri (argv[1], NULL);\n  asset = ges_uri_clip_asset_request_sync(uri,error);\n  src_asset = GES_ASSET(asset);\n\n  \/* Add sources to our layer *\/\n  ges_layer_add_asset (layer, src_asset, 0, 0, 4*GST_SECOND,\n      GES_TRACK_TYPE_UNKNOWN);\n\n  \/* In order to view our timeline, let's grab a convenience pipeline to put\n   * our timeline in. *\/\n  pipeline = ges_pipeline_new ();\n\n  \/* Add the timeline to that pipeline *\/\n  if (!ges_pipeline_set_timeline (pipeline, timeline))\n    return -1;\n\n  \/* The following is standard usage of a GStreamer pipeline (note how you haven't\n   * had to care about GStreamer so far ?).\n   *\n   * We set the pipeline to playing ... *\/\n  gst_element_set_state (GST_ELEMENT (pipeline), GST_STATE_PLAYING);\n\n  \/* .. and we start a GMainLoop. GES **REQUIRES** a GMainLoop to be running in\n   * order to function properly ! *\/\n  mainloop = g_main_loop_new (NULL, FALSE);\n\n  \/* Simple code to have the mainloop shutdown after 4s *\/\n  g_timeout_add_seconds (4, (GSourceFunc) g_main_loop_quit, mainloop);\n  g_main_loop_run (mainloop);\n\n  return 0;\n}\n","1463":"def palindrome(s):\n    i = 0\n    while i <= len(s) \/ 2:\n        if s[i] != s[-i - 1]:\n            return False\n        i += 1\n    return True\n","1464":"import schedule\nimport time\n\ndef job():\n    print(\"I'm working...\")\n\nschedule.every(10).minutes.do(job)\nschedule.every().hour.do(job)\nschedule.every().day.at(\"10:30\").do(job)\n\nwhile 1:\n    schedule.run_pending()\n    time.sleep(1)\n","1465":"import lxml.etree as et\nimport csv\n\n\nxml=\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OASISReport>\n    <MessageHeader>\n        <TimeDate>2015-11-05T07:50:48-00:00<\/TimeDate>\n        <Source>OASIS<\/Source>\n        <Version>v20131201<\/Version>\n    <\/MessageHeader>\n    <MessagePayload>\n        <RTO>\n            <name>CAISO<\/name>\n            <REPORT_ITEM>\n                <REPORT_HEADER>\n                    <SYSTEM>OASIS<\/SYSTEM>\n                    <TZ>PPT<\/TZ>\n                    <REPORT>PRC_LMP<\/REPORT>\n                    <MKT_TYPE>DAM<\/MKT_TYPE>\n                    <UOM>US$\/MWh<\/UOM>\n                    <INTERVAL>ENDING<\/INTERVAL>\n                    <SEC_PER_INTERVAL>3600<\/SEC_PER_INTERVAL>\n                <\/REPORT_HEADER>\n                <REPORT_DATA>\n                    <DATA_ITEM>LMP_PRC<\/DATA_ITEM>\n                    <RESOURCE_NAME>TH_SP15_GEN-APND<\/RESOURCE_NAME>\n                    <OPR_DATE>2015-10-12<\/OPR_DATE>\n                    <INTERVAL_NUM>2<\/INTERVAL_NUM>\n                    <INTERVAL_START_GMT>2015-10-12T08:00:00-00:00<\/INTERVAL_START_GMT>\n                    <INTERVAL_END_GMT>2015-10-12T09:00:00-00:00<\/INTERVAL_END_GMT>\n                    <VALUE>29<\/VALUE>\n                <\/REPORT_DATA>\n                <REPORT_DATA>\n                    <DATA_ITEM>LMP_PRC<\/DATA_ITEM>\n                    <RESOURCE_NAME>TH_SP15_GEN-APND<\/RESOURCE_NAME>\n                    <OPR_DATE>2015-10-12<\/OPR_DATE>\n                    <INTERVAL_NUM>12<\/INTERVAL_NUM>\n                    <INTERVAL_START_GMT>2015-10-12T18:00:00-00:00<\/INTERVAL_START_GMT>\n                    <INTERVAL_END_GMT>2015-10-12T19:00:00-00:00<\/INTERVAL_END_GMT>\n                    <VALUE>35.67227<\/VALUE>\n                <\/REPORT_DATA>\n<\/REPORT_ITEM>\n<REPORT_ITEM>\n    <REPORT_HEADER>\n        <SYSTEM>OASIS<\/SYSTEM>\n        <TZ>PPT<\/TZ>\n        <REPORT>PRC_LMP<\/REPORT>\n        <MKT_TYPE>DAM<\/MKT_TYPE>\n        <UOM>US$\/MWh<\/UOM>\n        <INTERVAL>ENDING<\/INTERVAL>\n        <SEC_PER_INTERVAL>3600<\/SEC_PER_INTERVAL>\n    <\/REPORT_HEADER>\n    <REPORT_DATA>\n        <DATA_ITEM>LMP_PRC<\/DATA_ITEM>\n        <RESOURCE_NAME>TH_SP15_GEN-APND<\/RESOURCE_NAME>\n        <OPR_DATE>2015-10-12<\/OPR_DATE>\n        <INTERVAL_NUM>2<\/INTERVAL_NUM>\n        <INTERVAL_START_GMT>2015-10-12T08:00:00-00:00<\/INTERVAL_START_GMT>\n        <INTERVAL_END_GMT>2015-10-12T09:00:00-00:00<\/INTERVAL_END_GMT>\n        <VALUE>29<\/VALUE>\n    <\/REPORT_DATA>\n    <REPORT_DATA>\n        <DATA_ITEM>LMP_PRC<\/DATA_ITEM>\n        <RESOURCE_NAME>TH_SP15_GEN-APND<\/RESOURCE_NAME>\n        <OPR_DATE>2015-10-12<\/OPR_DATE>\n        <INTERVAL_NUM>12<\/INTERVAL_NUM>\n        <INTERVAL_START_GMT>2015-10-12T18:00:00-00:00<\/INTERVAL_START_GMT>\n        <INTERVAL_END_GMT>2015-10-12T19:00:00-00:00<\/INTERVAL_END_GMT>\n        <VALUE>35.67227<\/VALUE>\n    <\/REPORT_DATA>\n<\/REPORT_ITEM>\n<REPORT_ITEM>\n    <REPORT_HEADER>\n        <SYSTEM>OASIS<\/SYSTEM>\n        <TZ>PPT<\/TZ>\n        <REPORT>PRC_LMP<\/REPORT>\n        <MKT_TYPE>DAM<\/MKT_TYPE>\n        <UOM>US$\/MWh<\/UOM>\n        <INTERVAL>ENDING<\/INTERVAL>\n        <SEC_PER_INTERVAL>3600<\/SEC_PER_INTERVAL>\n    <\/REPORT_HEADER>\n    <REPORT_DATA>\n        <DATA_ITEM>LMP_PRC<\/DATA_ITEM>\n        <RESOURCE_NAME>TH_SP15_GEN-APND<\/RESOURCE_NAME>\n        <OPR_DATE>2015-10-12<\/OPR_DATE>\n        <INTERVAL_NUM>2<\/INTERVAL_NUM>\n        <INTERVAL_START_GMT>2015-10-12T08:00:00-00:00<\/INTERVAL_START_GMT>\n        <INTERVAL_END_GMT>2015-10-12T09:00:00-00:00<\/INTERVAL_END_GMT>\n        <VALUE>29<\/VALUE>\n    <\/REPORT_DATA>\n    <REPORT_DATA>\n        <DATA_ITEM>LMP_PRC<\/DATA_ITEM>\n        <RESOURCE_NAME>TH_SP15_GEN-APND<\/RESOURCE_NAME>\n        <OPR_DATE>2015-10-12<\/OPR_DATE>\n        <INTERVAL_NUM>12<\/INTERVAL_NUM>\n        <INTERVAL_START_GMT>2015-10-12T18:00:00-00:00<\/INTERVAL_START_GMT>\n        <INTERVAL_END_GMT>2015-10-12T19:00:00-00:00<\/INTERVAL_END_GMT>\n        <VALUE>35.67227<\/VALUE>\n    <\/REPORT_DATA>\n<\/REPORT_ITEM>\n<DISCLAIMER_ITEM>\n    <DISCLAIMER>The contents of these pages are subject to change without notice.  Decisions based on information contained within the California ISO's web site are the visitor's sole responsibility.<\/DISCLAIMER>\n    <\/DISCLAIMER_ITEM>\n    <\/RTO>\n    <\/MessagePayload>\n<\/OASISReport>\"\"\"\n\ntree = et.fromstring(xml)\n\n\n\nitms = tree.xpath(\"\/\/REPORT_ITEM\")\n\ndata = []      \nfor i in itms:\n    d= [[k.text for k in j] for j in i]\n    print d\n    data.append(d)\n\n\n\nfor item in data:\n    for i in range(len(data)):\n        with open(\"D:\\\\_\" + str(i) + \".csv\", 'w') as f:\n            csv_writer = csv.writer(f)\n            csv_writer.writerows(item)\n","1466":"class BaseDataType(object):\n    parent_operation = relationship(Operation, backref=\"datatype\")\n\nclass DataTypeA(Base, BaseDataType):\n    id = Column(Integer, primary_key=True)\n\nclass DataTypeB(Base, BaseDataType):\n    id = Column(Integer, primary_key=True)\n","1467":">>> import abc\n>>> class B(object):\n...     __metaclass__ = abc.ABCMeta\n...     @abc.abstractmethod\n...     def foo(self):\n...             print 'In B'\n... \n>>> class C(B):\n...     def foo(self):\n...             super(C, self).foo()\n...             print 'In C'\n... \n>>> C().foo()\nIn B\nIn C\n","1468":">>> import os\n>>> help(os.path.split)\nHelp on function split in module ntpath:\n\nsplit(p)\n    Split a pathname.\n\n    Return tuple (head, tail) where tail is everything after the final slash.\n    Either part may be empty.\n\n>>> os.path.split(r'c:\\users\\sony\\desktop\\f.html')\n('c:\\\\users\\\\sony\\\\desktop', 'f.html')\n>>> path,filename = os.path.split(r'c:\\users\\sony\\desktop\\f.html')\n>>> path\n'c:\\\\users\\\\sony\\\\desktop'\n>>> filename\n'f.html'\n","1469":"import time\nclass something(object):\n    def __init__(self,c):\n        self.c=c\n    def inc(self):\n        new = self.c+1 \n        # if the thread is interrupted by another inc() call its result is wrong\n        time.sleep(0.001) # sleep makes the os continue another thread\n        self.c = new\n\n\nx = something(0)\nimport threading\n\nfor _ in range(10000):\n    threading.Thread(target=x.inc).start()\n\nprint x.c # ~900 here, instead of 10000\n","1470":"from flask import send_from_directory\n\n@app.route('\/js\/<path:filename>')\ndef serve_static(filename):\n    root_dir = os.path.dirname(os.getcwd())\n    return send_from_directory(os.path.join(root_dir, 'static', 'js'), filename)\n","1471":"s = numpy.sum((A[:,:,0:3]-B[:,:,0:3])**2)\n","1472":"output = np.column_stack((arrA.flatten(),arrB.flatten(),arrC.flatten()))\nnp.savetxt('output.dat',output,delimiter=',')\n","1473":"class BaseTask(object):\n    '''change object to BaseProject whenever you figure out what your `Project`\n    class should be, or if you need it at all'''\n\n    def __init__(self, title):\n        self.title = title\n        self.description=\"\"\n\nclass Task(BaseTask):\n    def __init__(self, title):\n        super(Task, self).__init__(title)\n        self.subtasks = []\n        self.default_hours = 1\n\n    @property\n    def hours(self):\n        if len(self.subtasks) < 1:\n            return self.default_hours\n        return sum(subtask.hours for subtask in self.subtasks)\n\nclass SubTask(BaseTask):\n    def __init__(self, title):\n        super(SubTask, self).__init__(title)\n        self.hours = 0\n","1474":"df['team_tuple'] = df.apply(\n    lambda row: tuple(\n        sorted((row['Team A'], row['Team B']))\n    ), \n    axis='columns'\n)\ndf\nOut[17]: \n          DATE     Team A     Team B          team_tuple\n0  24-May-1983      India  Australia  (Australia, India)\n1  24-May-1983  Australia      India  (Australia, India)\n\nduplicates = df.loc[:, ['DATE', 'team_tuple']].duplicated()\ncleaned_df = df.loc[~ duplicates, :]\nIn [16]: cleaned_df\nOut[16]: \n          DATE Team A     Team B          team_tuple\n0  24-May-1983  India  Australia  (Australia, India)\n","1475":">>> a\narray([2, 5, 4, 4, 4, 2, 1, 1, 2, 2, 5, 4, 1, 4, 0, 0, 5, 1, 4, 1])\n>>> np.nonzero(a == a.max())[0]\narray([ 1, 10, 16])\n>>> a[_]\narray([5, 5, 5])\n","1476":"def close_far(a, b, c):\n  x, y, z = sorted([a, b, c])\n  delta_close, delta_far = sorted([y - x, z - y])\n  return delta_close <= 1 and delta_far >= 2\n","1477":"import re\ninput = 'ABC @XYZ ABC @Python ABC http:\/\/www.stackoverflow.com ABC'\noutput = re.sub(r'(http|@)\\S*\\s', '', input) \nprint output  # 'ABC ABC ABC ABC'\n","1478":"from itertools import imap\nfrom operator import mul\ndef sumsquared(arr):\n    return sum(imap(mul, arr, arr))\n","1479":"from pyPdf import PdfFileWriter, PdfFileReader\n\noutput = PdfFileWriter()\ninput1 = PdfFileReader(file(\"document1.pdf\", \"rb\"))\nwatermark = PdfFileReader(file(\"watermark.pdf\", \"rb\"))\n\npage4.mergePage(watermark.getPage(0))\n\n# finally, write \"output\" to document-output.pdf\noutputStream = file(\"document-output.pdf\", \"wb\")\noutput.write(outputStream)\noutputStream.close()\n","1480":"import numpy as np\nA = np.ndarray(shape=(2,2), dtype=float, order='F')\nB = np.ndarray(shape=(2,2), dtype=float, order='F')\nC = np.ndarray(shape=(2,2), dtype=float, order='F')\nD = np.ndarray(shape=(2,2), dtype=float, order='F')\n\nT = np.array([[A,B],[C,D]])\n","1481":"class Game(threading.Thread):\n    def update(self):\n        pygame.display.update()\n        self.screen.fill(self.fillcolour)\n\n    def setup(self):\n        \"\"\"Placeholder for setup\"\"\"\n        pass\n\n    def frame(self):\n        \"\"\"Placeholder for frame\"\"\"\n        pass\n\n    def handleEvent(self, event):\n        \"\"\"Placeholder for input handling\"\"\"\n        pass\n\n    def handleInputs(self):\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                self.quit()\n            self.handleEvent(event)\n\n    def run(self):\n        self.setup()\n\n        while True:\n            if self.FRAMERATE:\n                self.clock.tick(self.FRAMERATE)\n\n            self.frame()\n            self.update()\n            self.handleInputs()\n","1482":"# setup redirect uri in order to load strategy\n    uri = redirect_uri = \"social:complete\"\n    if uri and not uri.startswith('\/'):\n        uri = reverse(redirect_uri, args=(backend,))\n\n    # load the strategy\n    try:\n        strategy = load_strategy(\n            request=request, backend=backend,\n            redirect_uri=uri, **kwargs\n        )\n    except MissingBackend:\n        raise Http404('Backend not found')\n","1483":"import urllib2          \nreq = urllib2.urlopen(\"http:\/\/example.com\/file.zip\")\ntotal_size = int(req.info().getheader('last-modified'))\n","1484":"l = []\nfor m in Message.objects.filter(dst=p).order_by('-date_last_modif'):\n    for c in m.conversations.all():\n        if c not in l:\n            l.append(c.pk)\nconversations_read = [c for c in Conversation.objects.filter(pk__in=l)]\n","1485":"# form snippet\n<input type=\"submit\" value=\"Edit Summary\" name=\"summary\" \/>\n<input type=\"submit\" value=\"Edit Due Date\" name=\"due_date\" \/>\n\n# view snippet\nif request.POST.get('summary'):\n    print('user clicked summary')\nelif request.POST.get('due_date'):\n    print('user clicked due date')\n","1486":"import sys\nsys.path.insert(0, '\/my\/path\/file.zip')\nimport my_module\nmy_module.caLL_something()\n","1487":"from sqlalchemy import *\nfrom sqlalchemy.orm import *\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Content(Base):\n    __tablename__ = 'contents'\n\n    grandma_id = Column(Integer, primary_key=True)\n    author_id = Column(Integer, primary_key=True)\n\n\ns = Session()\n\nunique_users_contents = s.query(Content).distinct(\n                            Content.grandma_id, Content.author_id).\\\n                            subquery('c')\n\nq = s.query(\n        Content,\n        func.row_number().over(\n                partition_by=Content.grandma_id,\n                order_by=func.random()).label(\"row_number\")\n    ).select_entity_from(unique_users_contents).subquery()\n\nq = s.query(Content).select_entity_from(q).filter(q.c.row_number <= 4)\n\nprint q\n","1488":"Py_NoSiteFlag = 1;  \/\/ Disable importing site.py\nPy_Initialize();    \/\/ Create a python interpreter\n","1489":"import wx\n\nclass Frame(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self,None)\n        self.resized = False # the dirty flag\n        self.Bind(wx.EVT_SIZE,self.OnSize)\n        self.Bind(wx.EVT_IDLE,self.OnIdle)\n\n    def OnSize(self,event):\n        self.resized = True # set dirty\n\n    def OnIdle(self,event):\n        if self.resized: \n            # take action if the dirty flag is set\n            print \"New size:\", self.GetSize()\n            self.resized = False # reset the flag\n\napp = wx.PySimpleApp()\nframe = Frame().Show()\napp.MainLoop()\n","1490":"words_s1 = nltk.regexp_tokenize(s1, r'(?u)\\d+(?:\\.\\d+)?|\\w+')\n","1491":"list_col_b, list_col_c = zip(*MyModel.objects.values_list('col_b', 'col_c'))\n","1492":"In [10]: months = ['Jan', 'Feb', 'Mar', 'Apr']\n\nIn [11]: df.loc[:, months].apply(lambda x: pd.algos.is_monotonic_float64(-x)[0],\n                                       axis=1)\nOut[11]:\n0    False\n1     True\n2    False\n3     True\n4    False\ndtype: bool\n","1493":"results = soup.findAll('div', class_='name')\nfor each in results:\n    if each.text:\n        worksheet.write(row,1,each.text)\n        row += 1\n","1494":"class Server(object):\n    _cp_config = {\n        'tools.sessions.on': True,\n        'tools.auth.on': True\n    }   \n    auth = AuthController()      \n    @cherrypy.expose\n    @require()\n    def index(self):\n        f = open (\"file.txt\",\"r\")\n        link = f.read()\n        f.close()\n        myText = \"Hello World\" \n        html = \"\"\"\n        <html>\n            <body>\n                <p>%s<\/p>          \n                <a href=\"%s\" ><img src=\"images\/go_online.png\"><\/a>\n            <\/body>\n        <\/html>\n        \"\"\" %(myText, link)        \n        return html\n    index.exposed = True\n","1495":"file.write(\"My String\\n\");\n","1496":"# Read the whole \"second file\" into a set X.\nwith open('foo') as fp:\n    names = set(fp)\n\n# Read the \"first\" file line by line.\nwith open('bar') as fp:\n    for line in fp:\n\n        # For each line, extract the part before the comma.\n        name = line.split(',')[0]\n\n        # If this part is in the set X, print whatever is desired.\n        if name in names:\n             print line\n","1497":"str_location = '({0}, {1}, {2})'.format(x, y, z)\n","1498":"x = 4.12121212\nprint '%.2f' % x\n","1499":"var users = require('org\/arangodb\/users');\ncontroller.post('\/checkpw', function (req, res) {\n  var credentials = req.params('credentials');\n  res.json({\n    valid: users.isValid(\n      credentials.username,\n      credentials.password\n    )\n  });\n})\n.bodyParam('credentials', joi.object({\n  username: joi.string().required(),\n  password: joi.string().required()\n}).required());\n","1500":"N = { 'd' : 3 }\nfour = Template(u'number:{{ d + 1 }}').render(**N)\n","1501":"@click.command(context_settings=dict(\n    ignore_unknown_options=True,\n    allow_extra_args=True,\n))\n@click.pass_context\ndef runner(ctx, tgt, fun):\n    d = dict()\n    for item in ctx.args:\n        d.update([item.split('=')])\n    req = pyaml.p(meh.PostAdapter(tgt, fun, d))\n    click.echo(req)\n","1502":">>> url.find(lambda tag: tag.name == 'span' and tag.get('class', []) == ['bday'])\n<span class=\"bday\">1899-08-04<\/span>\n","1503":">>> from numpy.lib.stride_tricks import as_strided\n>>> mask = np.random.randint(2, size=(101, 100)).astype(bool)\n>>> mask_view  = as_strided(mask, shape=(500,)+mask.shape,\n...                         strides=(0,)+mask.strides)\n>>> mask_view.shape\n(500, 101, 100)\n>>> np.array_equal(mask_view[0], mask_view[499])\nTrue\n>>> np.all(mask_view == 0)\nFalse\n>>> mask[:] = 0\n>>> np.all(mask_view == 0)\nTrue\n","1504":">>> import numpy as np\n>>> N=2\n>>> np.zeros((N,)*1)\narray([ 0.,  0.])\n>>> np.zeros((N,)*2)\narray([[ 0.,  0.],\n       [ 0.,  0.]])\n>>> np.zeros((N,)*3)\narray([[[ 0.,  0.],\n        [ 0.,  0.]],\n\n       [[ 0.,  0.],\n        [ 0.,  0.]]])\n","1505":"source = im.split()\nmask = source[2].point(lambda i: i < 100 and 255)\nim = Image.merge(im.mode, source)\n","1506":"Help on class defaultdict in module collections:\n\nclass defaultdict(__builtin__.dict)\n |  defaultdict(default_factory) --> dict with default factory\n |  \n |  The default factory is called without arguments to produce\n |  a new value when a key is not present, in __getitem__ only.\n |  A defaultdict compares equal to a dict with the same items.\n |  \n","1507":"local_path = tempfile.mkdtemp().decode(\"utf-8\")\nself.addCleanup(shutil.rmtree, local_path)\nacl = \"d:u:{0}:rwX\".format(os.geteuid())\nsubprocess.check_call([\"setfacl\", \"-m\", acl, local_path])\n","1508":"N = 4\n\ndef supers(number):\n    zeros = sum(1 for bit in xrange(N) if (number >> bit) & 1 == 0)\n    return 2**zeros\n\n\ndef solve(a,b,c):\n    total = supers(a) + supers(b) + supers(c)\n    total -= supers(a | b) # counted twice, remove one\n    total -= supers(b | c) # counted twice, remove one\n    total -= supers(a | c) # counted twice, remove one\n    total += supers(a | b | c) # counted three times, removed three times, add one\n\n    return total\n\n\nprint solve(0b1001,0b0011,0b0110)\n","1509":"from websocket import create_connection\nws = create_connection(\"wss:\/\/coinsecure.in\/websocket\")\nws.send('{\"method\": \"recentbuytrades\"}')\n\nwhile True:\n  result =  ws.recv()\n  print (\"Received '%s'\" % result)\n\nws.close()\n","1510":"def initialize(self):\n    \"\"\"Hook for subclass initialization.\n\n    A dictionary passed as the third argument of a url spec will be\n    supplied as keyword arguments to initialize().\n\n    Example::\n\n        class ProfileHandler(RequestHandler):\n            def initialize(self, database):\n                self.database = database\n\n            def get(self, username):\n                ...\n\n        app = Application([\n            (r'\/user\/(.*)', ProfileHandler, dict(database=database)),\n            ])\n    \"\"\"\n    pass\n","1511":"heroku config:set QUOTE_REST_API=https:\/\/quote-api.herokuapp.com\/\n","1512":"_dict = {\"foo\" : 1234}\n_dict[\"bar\"] = _dict[\"foo\"] + 1\n","1513":"x = input()\nNUM_LETTERS = 26 #Can't import modules I'm using a web based grader\/compiler\ndef SpyCoder(S, N):\n   y = \"\"\n   for i in S:\n      if(i.isupper()):\n         x = ord(i)\n         x += N\n         if x > ord('Z'):\n            x -= NUM_LETTERS\n         elif x < ord('A'):\n            x += NUM_LETTERS\n         y += chr(x)\n      else:\n         y += \" \"\n   return y\n\ndef GoodnessFinder(S):\n   y = 0\n   for i in S:\n      if i.isupper():\n         x = ord(i)\n         x -= ord('A')\n         y += letterGoodness[x]\n      else:\n         y += 1\n   return y\n\ndef GoodnessComparer(S):\n   goodnesstocompare = GoodnessFinder(S)\n   goodness = 0\n   v = ''\n   best_v = S\n   for i in range(0, 26):\n     v = SpyCoder(S, i)\n     goodness = GoodnessFinder(v)\n     if goodness > goodnesstocompare:\n         best_v = v\n         goodnesstocompare = goodness\n   return best_v\n\n\nprint(GoodnessComparer(x))\n","1514":"for label in wizard.findChildren(QLabel):\n    label.setOpenExternalLinks(True)\n","1515":"ind_set = set(ind)\nretain = [i for i in range(len(d1)) if i not in ind_set]\nd2 = [[d1[k][j] for j in retain] for k in retain]\n","1516":"def makeHTMLRow(d, 'title'):\n    s =  \"<tr>\\n\\t\"\n    s += \"<td>%(year)d<\/td>\\n\\t\"\n    s += \"<td>%(director)s<\/td>\\n\"\n    s += \"<\/tr><tr>\\n\\t\"\n    s += \"<td>%(title)s><\/td>\\n\"\n    s += \"<\/tr>\"\n    return s % d\n","1517":"from matplotlib.figure import Figure\n\nclass FlightData(QtGui.QDialog, Ui_Dialog):\n    def __init__(self, parent=None):\n        QtGui.QDialog.__init__(self, parent)\n        self.setupUi(self)\n        self.figs = {}\n        self.canvas = {}\n        self.axs = {}\n        plot_names = ['speed', 'height', 'map', 'angle']\n        for pn in plot_names:\n            fig = Figure()\n            self.canvas[pn] = FigureCanvas(fig)\n            ax = fig.add_subplot(1, 1, 1)\n\n            self.figs[pn] = fig\n            self.axs[pn] = ax\n\n        # -------------------------------------------------------------\n        self.speedLayout.addWidget(self.canvas['speed'])\n        self.heightLayout.addWidget(self.canvas['height'])\n        self.mapLayout.addWidget(self.canvas['map'])\n        self.angleLayout.addWidget(self.canvas['angle'])\n\n    def draw_plot(self, target, data):\n        self.axs[target].plot(data, '-*')\n        self.canvas[target].draw_idle()\n","1518":"for k, v in dict.iteritems():\n        for item in v:\n            print item, k\n","1519":"import inspect\ninspect.getsource(random.gauss)\n","1520":"import re\nstr = '12-1 abcd fadf adfad'\nm   = re.search('(\\d+-\\d+)', str)\nif m:\n    found = m.group(0)\n    print found\n","1521":"from celery import Celery\nfrom kombu import Exchange\n\nresults_exchange = Exchange('myres', type='fanout')\n\napp = Celery()\n\n@app.task(ignore_result=True)\ndef something():\n    res = do_something()\n    with app.producer_or_acquire(block=True) as producer:\n        producer.send(\n            {'result': res},\n            exchange=results_exchange,\n            serializer='json',\n            declare=[results_exchange],\n        )\n","1522":"infile = open(\"bowlingscores.txt\", \"r\")\nname=0\nscore=0\naveragescore=0\ncount=0\nbowlersinfo=[]\nfor line in infile:\n   bowler,score= line.split()\n   score = int(score)\n   averagescore += score\n   bowlersinfo.append([bowler,score])\nprint (bowlersinfo)\n\n\ninfile.close()\n\naveragescore \/= float(len(bowlersinfo))\n\noutfile = open(\"bowlingaverages.txt\", \"w\")\n\nfor name,score in bowlersinfo:\n if score==300:\n     outcome= \"Perfect\"\n elif score > averagescore:\n     outcome= \"Above Average\"\n elif score== averagescore:\n     outcome= \"Average\"\n else:\n     outcome= \"Below Average\"\n print (\"%s, %0.0f, %s\" % (name, float(score), outcome))\n outfile.write(name+\": \" ) \n outfile.write(outcome+\"\\n\")\noutfile.close()\n","1523":"q_sum = (session.query(\n            Projects.id.label(\"project_id\"),\n            func.sum(case([(Tasks.complete == True, 1)], else_=0)).label(\"x\"),\n            func.sum(case([(and_(\n                Tasks.deadline != None,\n                Tasks.completeDate != None,\n                Tasks.deadline > Tasks.completeDate), 1)],\n                else_=0)).label(\"y\"),\n            func.count(Tasks.id).label(\"total\"),\n            )\n        .join(Goals, Projects.goals)\n        .join(Strategies, Goals.strategies)\n        .join(Tasks, Strategies.tasks)\n        .group_by(Projects.id)\n        )\n\n# (project_id, x, y, total)\nfor p in q_sum:\n    print(p)\n","1524":"if imagename[0].lower().endswith((\".jpg\", \".jpeg\", \".png\")):\n    # whatever\n","1525":"codfiscal_in_f1_set = set()\nwith open(\"file1.csv\", 'r') as f1:\n    for line in f1:\n        line = line.strip()\n        if not line:\n            continue\n\n        codfiscal_in_f1_set.add(line.split(\";\")[1])\n\nwith open(\"file2.csv\", 'r') as f2, open(\"file3.csv\", \"w\") as output_file:\n    for line in f2:\n        line = line.strip()\n        if not line:\n            continue\n\n        codfiscal = line.split(\";\")[1]\n        if codfiscal not in codfiscal_in_f1_set:\n            output_file.write(line + \"\\n\")\n","1526":">>> import regex\n>>> m = regex.findall('(ATCT){e<=1}', 'ATCGATCGGCATGCAGTGCAGAAGTGACGAT')\n>>> print(m)\n['ATCG', 'ATCG']\n","1527":"from suds.xsd.sxbasic import Import\n\nfile_url = 'file:\/\/<path to xml.xsd>'\nImport.bind('http:\/\/www.w3.org\/XML\/1998\/namespace', file_url)\n","1528":"dictionary[\"territory\"], dictionary[\"numeric_id\"], dictionary[\"continent\"] = line.split(',')\n","1529":"#!\/usr\/bin\/python2\n\nimport sys, os\nimport subprocess\nimport fcntl\n\ndump = open(\"\/tmp\/dump\", \"w\")\ndump.write(\"### starting %s ###\" % \" \".join(sys.argv))\n\nproc = subprocess.Popen([\"<real app>\"] + sys.argv[1:], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\ndef nonblocking(fd):\n  fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n  fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\nnonblocking(proc.stdin)\nnonblocking(proc.stdout)\nnonblocking(proc.stderr)\n\nnonblocking(sys.__stdin__)\nnonblocking(sys.__stdout__)\nnonblocking(sys.__stderr__)\n\ndef me_to_proc():\n  x_to_y(sys.__stdin__, proc.stdin, \"~in> \")\n\ndef proc_to_me():\n  x_to_y(proc.stdout, sys.__stdout__, \"<out~ \")\n\ndef proc_to_me_err():\n  x_to_y(proc.stderr, sys.__stderr__, \"<err~ \")\n\ndef x_to_y(x, y, prefix=\"\"):\n  try:\n    while True:\n       line = x.readline()\n       to_dump = \"%s%s\" % (prefix, line)\n       print >> dump, to_dump\n       print to_dump\n       y.write(line)\n       y.flush()\n       dump.flush()\n  except:\n    pass\n\nrecode = None\nwhile recode is None:\n  proc_to_me()\n  #proc_to_me_err()\n  me_to_proc()\n\n  retcode = proc.poll()\n\nexit(retcode)\n","1530":"class StaticGetter(object):\n    def __init__(self, attr):\n        self.attr = attr\n    def __get__(self, instance, owner):\n        # owner is the class, your getter code here\n        return getattr(owner, attr)\n\nclass Test(object):\n    __staticField = 0\n    staticField = StaticGetter('_Test__staticField')\n","1531":"def loadDictionaryFromAFile( aFile ):\n    dictionary = {}\n    for line in aFile:\n        fields = line.split('\\t')\n        dictionary[fields[0]]= fields\n\ndict2 = loadDictionaryFromAFile( open(\"file2\",\"r\" )\ndict3 = loadDictionaryFromAFile( open(\"file3\",\"r\" )\n\nfor line in open(\"file1\",\"r\"):\n    fields = line.split(\"\/t\")\n    d2= dict2.get( fields[0], None )\n    d3= dict3.get( fields[0], None )\n    print fields, d2, d3\n","1532":"from sqlalchemy import *\nfrom sqlalchemy.orm import *\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBaseModel = declarative_base()\n\nassociation = Table(\"message_component_association\", BaseModel.metadata,\nColumn(\"message_id\", Integer, ForeignKey(\"message.id\")),\nColumn(\"component_id\", Integer, ForeignKey(\"component.id\")))\n\nclass Message(BaseModel):\n    __tablename__ = \"message\"\n    id = Column(Integer, primary_key=True)\n    components = relationship(\"Component\", secondary=association, backref=\"messages\")  # backref instead of back_populates\n\nclass Component(BaseModel):\n    __tablename__ = \"component\"\n    __mapper_args__ = dict(polymorphic_on=\"type\")  # Polymorphic identity removed\n    id = Column(Integer, primary_key=True)\n    type = Column(String(32))\n\n    # relationship removed\n\nclass Component1(Component):\n    __tablename__ = \"component1\"\n    __mapper_args__ = dict(polymorphic_identity=\"component1\")\n    id = Column(Integer, ForeignKey(\"component.id\"), primary_key=True)\n\n    # relationship removed\n\nengine = create_engine(\"sqlite:\/\/\", echo=True)\nBaseModel.metadata.create_all(engine)\nsession = Session(engine)\n\ncomponent_1 = Component1(id=1)\nsession.commit()\n","1533":"import hashlib\nimport time\n\nhash = hashlib.sha1()\nhash.update(str(time.time()))\nprint hash.hexdigest()\nprint hash.hexdigest()[:10]\n","1534":"DF.eval('Percent = Earned \/ Total')\n","1535":"| # month | day | sign\n| 1       | 1   | capricorn\n| 1       | 20  | capricorn\n| 1       | 21  | aquarius\n| 5       | 1   | taurus\n| 5       | 21  | taurus\n| 5       | 22  | gemini\n","1536":"import zmq\n\nif __name__=='__main__':\n    context = zmq.Context()\n    socket = context.socket(zmq.ROUTER)       # Changed\n    socket.setsockopt(zmq.IDENTITY, \"R1\")\n    socket.connect(\"tcp:\/\/127.0.0.1:6660\")\n    while True:\n        print(\"Wating for request...\")\n\n        me = socket.recv()       # New\n        empty = socket.recv()    # New\n        toAddr = socket.recv()\n        empty = socket.recv()\n        req = socket.recv()\n        print(\"%s received!\" % str(req))\n\n        socket.send(me, zmq.SNDMORE)       # New\n        socket.send(empty, zmq.SNDMORE)    # New\n        socket.send(toAddr, zmq.SNDMORE)\n        socket.send(empty, zmq.SNDMORE)\n        socket.send(\"Reply to %s\" % str(req))\n","1537":"import re\ns = \"('-1259656819525938837', 598679497)\\t0.036787946\"\nre.findall(r'[-+]?[0-9]*\\.?[0-9]+', s)\n% gives: ['-1259656819525938837', '598679497', '0.036787946']\n","1538":"#!\/bin\/sh\n#Kill my python process called myPython\nkill `ps -A | grep myPython | nawk '{ print $1}'`\n# Or\nkill `ps -U myname | grep myPython | nawk '{ print $1}'`\n","1539":"data.join(rate, data.col1 == rate.id)\n  .rdd.map(lambda row: (row.id, (row.value, row.target, row.rate))\n  .groupByKey()\n  .map(lambda (k, v): RandomOperation(v))\n","1540":"def sim_function(row_set, set_from_listofsets): # Note that the arguments are reversed from what you had before\n    pass\n\ndef find_similar(db, num, listofsets):\n    pool = Pool()\n    threshold = 0.49\n\n    similar_db_rows=[]\n    for row in db.execute(\"SELECT thing1, thing2, thing3 FROM table WHERE num !={n};\".format(n=num)):\n            func = partial(sim_function, set(row[3].strip().split(',')))\n            list_process_results = pool.map(func, listofsets)\n            print list_process_results\n\n            if any(t < threshold for t in list_process_results):\n                #print \"appending a row\"\n                similar_db_rows.append(row)\n    pool.close()\n    pool.join()\n","1541":"from Tkinter import Tk, Button, GROOVE\n\nroot = Tk()\n\ndef appear(index, letter):\n    # This line would be where you insert the letter in the textbox\n    print letter\n\n    # Disable the button by index\n    buttons[index].config(state=\"disabled\")\n\nletters=[\"A\", \"T\", \"D\", \"M\", \"E\", \"A\", \"S\", \"R\", \"M\"]\n\n# A collection (list) to hold the references to the buttons created below\nbuttons = []\n\nfor index in range(9): \n    n=letters[index]\n\n    button = Button(root, bg=\"White\", text=n, width=5, height=1, relief=GROOVE,\n                    command=lambda index=index, n=n: appear(index, n))\n\n    # Add the button to the window\n    button.grid(padx=2, pady=2, row=index%3, column=index\/3)\n\n    # Add a reference to the button to 'buttons'\n    buttons.append(button)\n\nroot.mainloop()\n","1542":"lst_lvl1 = [] # Top level list\n\nfor i, project in enumerate(root):\n    projects[i] = project\n\n    print(project.get('name'))\n    lst_lvl1.append(project.get('name')) # Append to the top level list\n\n    lst_lvl2 = [] # Create an empty 2nd level list\n\n    for u, design in enumerate(project):\n        designs[u] = design\n        print(design.get('name'))\n        lst_lvl2.append(design.get('name')) # Append to the 2nd level list\n\n        lst_lvl3 = [] # Create a 3rd level list...\n        for x, param in enumerate(design):\n            params[x] = param\n            print(param.get('name'))\n            lst_lvl3.append(param.get('name'))\n            lst_lvl4 = []\n            for x, info in enumerate(param):\n                print(info.text)\n                lst_lvl4.append(info.text)\n            lst_lvl3.append(lst_lvl4) # At the end of level 4, append what you got to the level-3 list\n        lst_lvl2.append(lst_lvl3) # At the end of level 3, append what you got to the level-2 list... etc\n    lst_lvl1.append(lst_lvl2)\n\nprint lst_lvl1\n","1543":"import re\n\nm = re.search(r\"(NM_\\d+)\\s+range\", name2)\nif m:\n   print(m.group(1))\n","1544":"In [21]: np.repeat(np.array([1,5,2]), np.array([2,3,4]))\nOut[21]: array([1, 1, 5, 5, 5, 2, 2, 2, 2])\n","1545":"x = int(input(\"What would you like x to be? \"))\nwhile x<0:\n    print(\"Sorry, x must be positive. Please try again.\")\n    x = int(input(\"What would you like x to be? \"))\ny = int(input(\"What would you like y to be? \"))\nwhile y<0:\n    print(\"Sorry, y must be positive. Please try again.\")\n    y = int(input(\"What would you like y to be? \"))\nz = int(input(\"What would you like z to be? \"))\nwhile z<0:\n    print(\"Sorry, z must be positive. Please try again. \")\n    z = int(input(\"What would you like z to be? \"))\n","1546":"unoconv -p p4ssw0rd -f csv  protectedFile.xls\n","1547":"from PIL import Image\n\nim = Image.open(\"sweet_pic.ppm\")\nim.save(\"sweet_pic.jpg\")\n","1548":">>> x = b\"\\u00f3\"\n>>> print x\n\\u00f3\n>>> print x.decode('unicode_escape')\n\u00f3\n","1549":"import matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np\n\ndef plot_matrix(rm, title='Robot World', cmap=plt.cm.Blues):\n    plt.imshow(rm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.tight_layout()\n    plt.show()\n\ncmap = colors.ListedColormap(['k','b','y','g','r'])\nbounds=[0,1,2,3,4]\nnorm = colors.BoundaryNorm(bounds, cmap.N)\n\nrm = np.random.randint(0,4,(5,5))\nplot_matrix(rm,cmap=cmap)\n","1550":"\"%s%d\" % (\"&nbsp;\" * (4 - len(str(y))), y)\n","1551":"source_list = new QListWidget();\ndest_list = new QListWidget();\nnew QListWidgetItem(tr(\"Oak\"), source_list);\nnew QListWidgetItem(tr(\"Birch\"), source_list);\nconnect(source_list, SIGNAL(clicked(QModelIndex)), this, SLOT(swapEntry(QModelIndex)));\n\n\nvoid MyWidget::swapEntry(QModelIndex index)\n{\n    dest_list->insertItem(dest_list->count(), source_list->takeItem(index.row()));\n}\n","1552":"from subprocess import call\ncall([\"pdfdetach\", \"-saveall\", \"file.pdf\"])\n","1553":"import wx\n\nclass NoteBookPage(wx.Panel):\n    def __init__(self,parent,message):\n        wx.Panel.__init__(self,parent)\n        sizer= wx.BoxSizer(wx.VERTICAL)\n        message= wx.StaticText(self,label=message)\n        sizer.Add(message,1,wx.ALIGN_CENTRE)\n        self.SetSizer(sizer)\n\n\nclass AppFrame(wx.Frame):\n    def __init__(self,parent,id=-1,title='program'):\n        wx.Frame.__init__(self,parent,id,title,size=((400,400)))\n        # Panels\n        self.AppPanel = wx.Panel(self,-1)\n        self.AppPanel.SetBackgroundColour('grey')\n\n        main_sizer= wx.BoxSizer(wx.HORIZONTAL)\n\n        button_sizer= wx.BoxSizer(wx.VERTICAL)\n\n        #buttons\n        self.button1= wx.Button(self.AppPanel,label=\"Button 1\")\n        button_sizer.Add(self.button1,0,wx.EXPAND)\n        self.button2= wx.Button(self.AppPanel,label=\"Button 2\")\n        button_sizer.Add(self.button2,0,wx.EXPAND)\n        self.button3= wx.Button(self.AppPanel,label=\"Button 3\")\n        button_sizer.Add(self.button3,0,wx.EXPAND)\n        main_sizer.Add(button_sizer,0,wx.ALL,5)\n\n        #notebook\n        self.Notebook= wx.Notebook(self.AppPanel)\n        page1= NoteBookPage(self.Notebook,\"I'm on page 1\")\n        page2= NoteBookPage(self.Notebook,\"I'm on page 2\")\n        self.Notebook.AddPage(page1,\"Page 1\")\n        self.Notebook.AddPage(page2,\"Page 2\")\n        main_sizer.Add(self.Notebook,1,wx.ALL|wx.EXPAND,5)\n\n        #panel on the right (I'm just re-using the NoteBookPage panel to save making a new one)\n        right_panel= NoteBookPage(self.AppPanel,\"right panel\")\n        main_sizer.Add(right_panel,0,wx.ALL,5)\n\n        self.AppPanel.SetSizer(main_sizer)\n\n        self.Show()\n\nif __name__ == \"__main__\":\n    app= wx.App(False)\n    frame= AppFrame(None)\n    app.MainLoop()\n","1554":"db.events.aggregate([\n    { '$match':\n        { 'end':\n            { '$gte': datetime.utcnow() - timedelta(days=3) } \n        }\n    },\n    { '$project':\n        {\n            'timeDelta': { \n                '$subtract': ['$end', datetime.utcnow()]\n            }\n        }\n    },\n    { '$project':\n        {               \n            'absTimeDelta' : { \n                '$cond' : [\n                    { '$lte': ['$timeDelta', 0] },\n                    { '$multiply' : ['$timeDelta', -1 ] },\n                    '$timeDelta'\n                ]\n            }\n        }\n    },\n    { '$sort':\n        {\n            'absTimeDelta' : 1\n        }\n    }\n])\n","1555":"foo_list = [ (ele - k) \/ j for ele in foo_list]\n","1556":"...\n>>> print out.getvalue()\n\ndigraph Tree {\n0 [label=\"X[2] <= 2.4500\\nerror = 0.666667\\nsamples = 150\\nvalue = [ 50.  50.  50.]\", shape=\"box\"] ;\n1 [label=\"error = 0.0000\\nsamples = 50\\nvalue = [ 50.   0.   0.]\", shape=\"box\"] ;\n0 -> 1 ;\n2 [label=\"X[3] <= 1.7500\\nerror = 0.5\\nsamples = 100\\nvalue = [  0.  50.  50.]\", shape=\"box\"] ;\n0 -> 2 ;\n3 [label=\"X[2] <= 4.9500\\nerror = 0.168038\\nsamples = 54\\nvalue = [  0.  49.   5.]\", shape=\"box\"] ;\n2 -> 3 ;\n4 [label=\"X[3] <= 1.6500\\nerror = 0.0407986\\nsamples = 48\\nvalue = [  0.  47.   1.]\", shape=\"box\"] ;\n3 -> 4 ;\n5 [label=\"error = 0.0000\\nsamples = 47\\nvalue = [  0.  47.   0.]\", shape=\"box\"] ;\n4 -> 5 ;\n6 [label=\"error = 0.0000\\nsamples = 1\\nvalue = [ 0.  0.  1.]\", shape=\"box\"] ;\n4 -> 6 ;\n7 [label=\"X[3] <= 1.5500\\nerror = 0.444444\\nsamples = 6\\nvalue = [ 0.  2.  4.]\", shape=\"box\"] ;\n3 -> 7 ;\n8 [label=\"error = 0.0000\\nsamples = 3\\nvalue = [ 0.  0.  3.]\", shape=\"box\"] ;\n7 -> 8 ;\n9 [label=\"X[0] <= 6.9500\\nerror = 0.444444\\nsamples = 3\\nvalue = [ 0.  2.  1.]\", shape=\"box\"] ;\n7 -> 9 ;\n10 [label=\"error = 0.0000\\nsamples = 2\\nvalue = [ 0.  2.  0.]\", shape=\"box\"] ;\n9 -> 10 ;\n11 [label=\"error = 0.0000\\nsamples = 1\\nvalue = [ 0.  0.  1.]\", shape=\"box\"] ;\n9 -> 11 ;\n12 [label=\"X[2] <= 4.8500\\nerror = 0.0425331\\nsamples = 46\\nvalue = [  0.   1.  45.]\", shape=\"box\"] ;\n2 -> 12 ;\n13 [label=\"X[0] <= 5.9500\\nerror = 0.444444\\nsamples = 3\\nvalue = [ 0.  1.  2.]\", shape=\"box\"] ;\n12 -> 13 ;\n14 [label=\"error = 0.0000\\nsamples = 1\\nvalue = [ 0.  1.  0.]\", shape=\"box\"] ;\n13 -> 14 ;\n15 [label=\"error = 0.0000\\nsamples = 2\\nvalue = [ 0.  0.  2.]\", shape=\"box\"] ;\n13 -> 15 ;\n16 [label=\"error = 0.0000\\nsamples = 43\\nvalue = [  0.   0.  43.]\", shape=\"box\"] ;\n12 -> 16 ;\n}\n","1557":"class UploadImageForm(forms.ModelForm):\n    class Meta:\n        model = GallryImage\n...\n# Sample view\ndef upload_file(request):\n    if request.method == 'POST':\n        form = UploadImageForm(request.POST, request.FILES)\n        if form.is_valid():\n            form.save()\n            return HttpResponseRedirect('\/success\/url\/')\n    else:\n        form = UploadImageForm()\n    return render_to_response('upload.html', {'form': form})\n","1558":"10\/3  -> floor(3.33)  ->  3\n-10\/3 -> floor(-3.33) -> -4\n","1559":"1 and 2 will evaluate to 2\n1 or 2 will evaluate to 1 (short-circuit)\n1 and \"hello\" will evaluate to \"hello\"\n","1560":"import urllib2\n\nlistOfStocks = [\"AAPL\", \"MSFT\", \"GOOG\", \"FB\", \"AMZN\"]\n\nurls = []\n\nfor company in listOfStocks:\n    urls.append('http:\/\/real-chart.finance.yahoo.com\/table.csv?s=' + company + '&d=6&e=28&f=2015&g=m&a=11&b=12&c=1980&ignore=.csv')\n\nOutput_File = open('C:\/Users\/rshuell001\/Historical_Prices.csv','w')\n\nNew_Format_Data = ''\n\nfor counter in range(0, len(urls)):\n\n    Original_Data = urllib2.urlopen(urls[counter]).read()\n\n    if counter == 0:\n        New_Format_Data = \"Company,\" + urllib2.urlopen(urls[counter]).readline()\n\n    rows = Original_Data.splitlines(1)\n\n    for row in range(1, len(rows)):\n\n        New_Format_Data = New_Format_Data + listOfStocks[counter] + ',' + rows[row]\n\nOutput_File.write(New_Format_Data)\nOutput_File.close()\n","1561":"class Thing(object): # New-style class\n    def __init__(self, whatever):\n        self._whatever = whatever\n\n    @property\n    def whatever(self):\n        return self._whatever # Insert complicated calculation here\n","1562":"def dotProduct(x,y):\n    prod=0\n    for i in range(len(x)):\n        prod=prod+x[i]*y[i]\n    return prod\n","1563":"import x as y\n","1564":"import atexit\nimport weakref\n\nclass CallableMethodWeakRef:\n    def __init__(self, object, method_name):\n        self.object_ref = weakref.ref(object)\n        self.method_name = method_name\n    def __call__(self):\n        object = self.object_ref()\n        if object:\n            getattr(object, self.method_name)()\n\nclass Recorder:\n    def __init__(self, *args):\n        atexit.register(CallableMethodWeakRef(self, 'flush'))\n\n    def flush(self):\n        print 'flushing'\n","1565":"class StateManager(threading.Thread):\n    def __init__(self, lock, state):\n        threading.Thread.__init__(self)\n        self.lock = lock\n        self.state = state            \n\n    def run(self):\n        lock = self.lock\n        state = self.state\n        while True:\n            lock.acquire()\n            self.updateState(state)\n            lock.release()\n            time.sleep(60)\n","1566":"#!\/usr\/bin\/python\n# Circuit:\n# * A Piezo is connected to pin 12 on header P8.        - GPIO1_12\n# * A LED is connected to pin 14 on header P8.          - GPIO0_26\n# * A button is connected to pin 45 on header P8.       - GPIO2_6\n#   Use a pull-down resistor (around 10K ohms) between pin 45 and ground. \n#       3.3v for the other side of the button can be taken from pins 3 or 4 \n#       on header P9. Warning: Do not allow 5V to go into the GPIO pins.\n# * GND - pin 1 or 2, header P9.\n\ndef setup(): # this function will run once, on startup\n    pinMode(PIEZO, OUTPUT) # set up pin 12 on header P8 as an output - Piezo\n    pinMode(LED, OUTPUT) # set up pin 14 on header P8 as an output - LED\n    pinMode(BUTTON, INPUT) # set up pin 45 on header P8 as an input - Button\n\ndef loop(): # this function will run repeatedly, until user hits CTRL+C\n    if (digitalRead(BUTTON) == HIGH): \n        # was the button pressed? (is 3.3v making it HIGH?) then do:\n            buzz()\n    delay(10) # don't \"peg\" the processor checking pin\n\ndef delay(j):  #need to overwrite delay() otherwise, it's too slow\n    for k in range(1,j):\n            pass\n\ndef buzz():    #this is what makes the piezo buzz - a series of pulses\n               # the shorter the delay between HIGH and LOW, the higher the pitch\n    limit = 500     # change this value as needed; \n                    # consider using a potentiometer to set the value\n    for j in range(1, limit):\n            digitalWrite(PIEZO, HIGH)\n            delay(j)\n            digitalWrite(PIEZO, LOW)\n            delay(j)\n            if j==limit\/2:\n                    digitalWrite(LED, HIGH)\n    digitalWrite(LED, LOW) # turn it off\n\nrun(setup, loop)\n","1567":"import bcrypt\n\n# Hash a password for the first time\nhashed = bcrypt.hashpw(password, bcrypt.gensalt())\n\n# gensalt's log_rounds parameter determines the complexity\n# the work factor is 2**log_rounds, and the default is 12\nhashed = bcrypt.hashpw(password, bcrypt.gensalt(10))\n\n# Check that an unencrypted password matches one that has\n# previously been hashed\nif bcrypt.hashpw(plaintext, hashed) == hashed:\n    print \"It matches\"\nelse:\n    print \"It does not match\"\n","1568":"while True:\n    while queue:\n        queue.pop()()\n","1569":"from __future__ import division\nimport scipy as sp\nfrom scipy import stats\nimport pylab as pl\n\nx = [1.81,1.715,1.78,1.613,1.629,1.714,1.62,1.738,1.495,1.669,1.57,1.877,1.385,2.129, \\\n     2.016,1.606,1.444,2.103,1.397,1.854,1.327,1.377,1.798,1.684,2.186,2.079,1.32, \\\n     1.452,2.272,1.313,1.762,2.308,2.285,2.328,2.288,2.345,2.237,2.078,2.057,1.505, \\\n     2.595,2.176,2.501,0.942,2.424,2.49,2.65,1.303,2.43,2.241,0.897,1.731,2.464,1.638, \\\n     0.867,2.392,3.248,2.608,2.733,0.745,2.715,3.078,2.571,0.771,1.071,2.574,3.343, \\\n     2.835,2.629,3.421,0.642,2.571,2.698,0.595,2.912,0.563,2.832,2.636,3.149,2.522, \\\n     0.836,0.894,0.447,1.304,1.132,2.488,3.363,2.961,1.317,2.387,0.036,2.199,0.356, \\\n     3.036,2.103,2.894,-0.097,0.069,2.688,-0.083,0.653,3.247,3.045,3.197,2.963,2.473, \\\n     2.571,3.333,3.009,1.281,3.257,3.116,2.673,2.901,2.903,2.634,-0.291,-0.29,0.212]\ny = [0.924,0.915,0.914,0.91,0.909,0.905,0.905,0.893,0.886,0.881,0.873,0.873,0.844, \\\n     0.838,0.83,0.817,0.811,0.809,0.807,0.803,0.802,0.792,0.777,0.774,0.774,0.77,0.748, \\\n     0.746,0.742,0.734,0.729,0.726,0.722,0.677,0.676,0.672,0.635,0.62,0.62,0.608,0.605, \\\n     0.587,0.586,0.578,0.571,0.569,0.549,0.544,0.535,0.53,0.529,0.513,0.499,0.497, \\\n     0.496,0.496,0.49,0.486,0.482,0.476,0.474,0.473,0.471,0.47,0.459,0.444,0.438,0.435, \\\n     0.428,0.419,0.411,0.4,0.396,0.384,0.378,0.368,0.362,0.362,0.361,0.357,0.347,0.346, \\\n     0.344,0.33,0.322,0.319,0.318,0.305,0.296,0.296,0.289,0.288,0.288,0.288,0.287, \\\n     0.286,0.283,0.283,0.278,0.274,0.264,0.259,0.248,0.244,0.241,0.239,0.238,0.237, \\\n     0.23,0.222,0.221,0.218,0.214,0.212,0.207,0.205,0.196,0.19,0.182]\n\nxmin, xmax = min(x), max(x)\nymin, ymax = min(y), max(y)\n\n# Generate KDE\nx1, y1 = sp.mgrid[xmin:xmax:100j, ymin:ymax:100j]\npositions = sp.vstack([x1.ravel(), y1.ravel()])\nvalues = sp.vstack([x, y])\nkernel = stats.gaussian_kde(values)\nkde = sp.reshape(kernel(positions).T, x1.shape)\n\n# plotting\nCS = pl.contour(x1,y1,kde)\n\n# ----------------------------------- our solution ------------------------------------\n# processing the distances\nfor i,clc in enumerate(CS.collections):\n    for j,pth in enumerate(clc.get_paths()):\n        cts = pth.vertices\n        d = sp.spatial.distance.cdist(cts,cts)\n        x,y = cts[list(sp.unravel_index(sp.argmax(d),d.shape))].T\n        pl.plot(x,y,':o')\n        print 'Contour Level %d, Part %d'%(i,j)\n# ----------------------------------- our solution ------------------------------------\n\npl.clabel(CS, inline=1, fontsize=10, zorder=6)\npl.axis('image')                   # don't forget using this to fix aspect ratio to 1,1\n\npl.show()\n","1570":"function( cython_add_module _name _dynamic_lookup )\n  set( pyx_module_sources \"\" )\n  set( other_module_sources \"\" )\n  foreach( _file ${ARGN} )\n    if( ${_file} MATCHES \".*\\\\.py[x]?$\" )\n      list( APPEND pyx_module_sources ${_file} )\n    else()\n      list( APPEND other_module_sources ${_file} )\n    endif()\n  endforeach()\n  compile_pyx( ${_name} generated_file ${pyx_module_sources} )\n  include_directories( ${PYTHON_INCLUDE_DIRS} )\n  python_add_module( ${_name} ${generated_file} ${other_module_sources} )\n  ### Added here ##\n  if( ${_dynamic_lookup} )\n    message( STATUS \"Not linking target ${_name} against libpython\" )\n    set_target_properties( ${_name} PROPERTIES LINK_FLAGS \"-undefined dynamic_lookup\")\n  else()\n    target_link_libraries( ${_name} ${PYTHON_LIBRARIES} )\n  endif()\nendfunction()\n","1571":"import matplotlib.pyplot as plt\nimport numpy as np\n\ndata = {'Alex': 20, 'Jason': 35}\nx = np.arange(len(data))\ny = data.values()\n\nplt.bar(x, y)\nplt.xticks(x + 0.5, data.keys(), rotation='vertical')\nplt.show()\n","1572":"# generate grid\n    a = [ ]\n    allZeroes = []\n    allOnes = []\n\n    for i in range(0,800):\n        allZeroes.append(0)\n        allOnes.append(1)\n\n    # append 400 rows of 800 zeroes per row.\n    for i in range(0, 400):\n        a.append(allZeroes)\n\n    # append 400 rows of 800 ones per row.\n    for i in range(0,400):\n        a.append(allOnes)\n\n\n#So this is a 2D 800 x 800 array of zeros on the top half, ones on the bottom half.\narray = numpy.array(a)\n\n# Need to flip the array so my other code that draws \n# this array will draw it right-side up\narray = numpy.flipud(array)\n","1573":"(gdb) python print int(gdb.Value(0))\n0\n(gdb) python print float(gdb.Value(0.0))\n0.0\n","1574":"In [2]: dginvdy\nOut[2]: 2*(y**2)**(1\/3)\/(3*y)\nIn [3]: factor(dginvdy)\nOut[3]: 2\/(3*y**(1\/3))\n","1575":"def get_user(self, user_id):\n    try:\n        return User.objects.get(pk=user_id)\n    except User.DoesNotExist:\n        return None\n","1576":"#include <boost\/python.hpp>\n#include <string>\n#include <iostream>\n\nusing namespace boost::python;\nusing namespace std;\n\nclass World\n{\nprivate:\n    string name;\npublic:\n    void set(string name) {\n        this->name = name;\n    }\n    void greet() {\n        cout << \"hello, I am \" << name << endl;\n    }\n};\n\ntypedef boost::shared_ptr< World > world_ptr;\n\nBOOST_PYTHON_MODULE(hello)\n{\n    class_<World>(\"World\")\n        .def(\"greet\", &World::greet)\n        .def(\"set\", &World::set)\n    ;\n};\n\nint main(int argc, char **argv)\n{\n    Py_Initialize();\n    try {\n        PyRun_SimpleString(\n            \"class Person:\\n\"\n            \"    def sayHi(self):\\n\"\n            \"        print 'hello from python'\\n\"\n            \"    def greetReset(self, instance):\\n\"\n            \"        instance.set('Python')\\n\"\n          );\n\n        world_ptr worldObjectPtr (new World);\n        worldObjectPtr->set(\"C++!\");\n\n        inithello();\n        object o_main \n            = object(handle<>(borrowed(PyImport_AddModule(\"__main__\"))));\n        object o_person_type = o_main.attr(\"Person\");\n        object o_person = o_person_type();\n        object o_func1 = o_person.attr(\"sayHi\");\n        o_func1();\n        object o_func2 = o_person.attr(\"greetReset\");\n        o_func2(boost::python::ptr(worldObjectPtr.get()));\n        worldObjectPtr->greet();\n    }\n    catch (error_already_set) {\n        PyErr_Print();\n    }\n\n    Py_Finalize();\n\n    return 0;\n}\n","1577":"class DocTest(unittest.TestCase):\n    source_dir = u'docs\/source'\n    config_dir = u'docs\/source'\n    output_dir = u'docs\/build'\n    doctree_dir = u'docs\/build\/doctrees'\n    all_files = 1\n\n    def test_html_documentation(self):\n        app = Sphinx(self.source_dir,\n                     self.config_dir,\n                     self.output_dir,\n                     self.doctree_dir,\n                     buildername='html',\n                     warningiserror=True,\n        )\n        app.build(force_all=self.all_files)\n        # TODO: additional checks here if needed\n\n    def test_text_documentation(self):\n        # The same, but with different buildername\n        app = Sphinx(self.source_dir,\n                     self.config_dir,\n                     self.output_dir,\n                     self.doctree_dir,\n                     buildername='text',\n                     warningiserror=True,\n        )\n        app.build(force_all=self.all_files)\n        # TODO:  additional checks if needed\n\n    def tearDown(self):\n        # TODO: clean up the output directory\n        pass\n","1578":"xl = Dispatch( \"Excel.Application\")\n\nxl.Visible = False\n\nxlFile = \"C:\/tab_colour.xls\"\n\nwkb = xl.Workbooks.Open(xlFile)\n\nsheet = xl.Worksheets.Item(\"SVP INFO\")\n\nsheet.Tab.Color = 255\n\nwkb.Save()\n\nwkb.Close()\n\nxl.Quit()\n\nxl = None\n","1579":"#!\/usr\/bin\/env python\n\nimport glob, gzip, re\n\ndata_files = [ gzip.open(name) for name in sorted(\n    glob.glob('*_txt.gz')\n) ]\n\n# we'll use the two header columns from the first file\nfirstf = data_files.pop(0)\n\noutf = gzip.open('all_c_all_k_concatenated.txt.gz', 'w')\nfor recnum,fline in enumerate( firstf ):\n\n    print 'record', recnum+1\n\n    # output header columns plus first batch of data\n    outf.write( fline.rstrip() )\n\n    # separate first file's values from others\n    outf.write( ' ' )\n\n    # for each input, read one line of data, write values\n    for dataf in data_files:\n        # read line with headers and values\n        line = dataf.next()\n\n        # zap two header columns\n        line = re.sub(r'^\\S+\\s+\\S+\\s+', '', line)\n\n        outf.write( line.rstrip() )\n\n        # separate this file's values from next\n        outf.write( ' ' )\n\n    # finish the line of data\n    outf.write( '\\n' )\n\noutf.close()\n","1580":"import itertools\n\nfor start, stop in itertools.combinations(zipList, 2):\n    print start, stop\n    # now pass start, stop to your function\n","1581":"    self.socket = self.context.socket(zmq.DEALER)\n    self.socket.setsockopt(zmq.SNDHWM, 200000)\n","1582":"combo = {k: {i: eval(i)[k] for i in dicts} for k in eval(dicts[0]).keys()} \n","1583":"import re\n\npin_pattern = re.compile(r'^(\\d{1,2})(\\d{3})(\\d{4})(\\d{3})?$')\n\npin_formats = {\n    3: '{0:02d}-{1:03d}-{2:04d}',\n    4: '{0:02d}-{1:03d}-{2:04d}-{3:03d}'\n}\n\ndef parse_pin(s):\n    groups = [int(d) for d in pin_pattern.search(s).groups() if d is not None]\n    return pin_formats[len(groups)].format(*groups)\n","1584":"import signal, os\n\ndef handler(signum, frame):\n    print 'Signal handler called with signal', signum\n    raise IOError(\"Couldn't open device!\")\n\n# Set the signal handler and a 5-second alarm\nsignal.signal(signal.SIGALRM, handler)\nsignal.alarm(5)\n\n# This open() may hang indefinitely\nfd = os.open('\/dev\/ttyS0', os.O_RDWR)\n\nsignal.alarm(0)          # Disable the alarm\n","1585":"import csv\nfrom ftplib import FTP\nfrom cStringIO import StringIO\n\n...\nftp = FTP(host, user, passwd)\nftp.login()\noutput = StringIO()\ndata = csv.writer(output)\ndata.writerow([\"data\"] * 5)\noutput.seek(0)\nftp.storbinary(\"STOR data.txt\", output)\n...\n","1586":"def UploadResourceSample(filename, filepath, fullpath):\n  \"\"\"Upload a document, and convert to Google Docs.\"\"\"\n  client = CreateClient()\n  doc = gdata.docs.data.Resource(type='document', title=filename)\n\n  path = fullpath\n  print 'Selected file at: %s' % path\n\n  # Create a MediaSource, pointing to the file\n  media = gdata.data.MediaSource()\n  media.SetFileHandle(path, 'application\/pdf')\n\n  # Pass the MediaSource when creating the new Resource\n  create_uri = gdata.docs.client.RESOURCE_UPLOAD_URI + '?ocr=true&ocr-language=de'\n  doc = client.CreateResource(doc, create_uri=create_uri, media=media)\n  print 'Created, and uploaded:', doc.title.text, doc.resource_id.text\n","1587":"import matplotlib.pyplot as plt\nimport numpy as np\n\nfrom matplotlib.table import Table\n\ndef table_plot(data):\n    fig, ax = plt.subplots()\n    ax.set_axis_off()\n\n    tb = Table(ax, bbox=[0,0,1,1])\n\n    nrows, ncols = data.shape\n    width, height = 1.0 \/ ncols, 1.0 \/ nrows\n\n    for (i, j), val in np.ndenumerate(data):\n        tb.add_cell(i, j, width, height, text=str(val) if val else '', loc='center')\n\n    for i in range(data.shape[0]):\n        tb.add_cell(i, -1, width, height, text=str(i), loc='right',\n                    edgecolor='none', facecolor='none')\n    for i in range(data.shape[1]):\n        tb.add_cell(-1, i, width, height\/2, text=str(i), loc='center',\n                    edgecolor='none', facecolor='none')\n\n    tb.set_fontsize(16)\n    ax.add_table(tb)\n    return fig\n\ncoords = ((1,2), (2,5), (1,2), (5, 5), (4, 5))\n\n# get maximum value for both x and y to allocate the array\nx, y = map(max, zip(*coords))\ndata = np.zeros((x+1, y+1), dtype=int)\n\nfor i, j in coords:\n    data[i,j] += 1\n\ntable_plot(data)\nplt.show()\n","1588":"ServicePointManager.ServerCertificateValidationCallback = (a, b, c, e) => true ;\n","1589":">>> import re\n>>> re.sub(\"&#(\\d+);\",lambda x:unichr(int(x.group(1),10)),\"&#58; or &#46;\")\nu': or .'\n","1590":"def f_a(s): pass\ndef f_b(s): pass\n\nconsumers = [f_a, f_b]\n\nwhile True:\n    chunk = process.stdout.read(100)\n    if chunk == '': break # or something like that\n    for c in consumers: c(chunk)\n","1591":"colours = np.array(colours)\ncolours[indices, :] = (1, 0, 0, 1)\n","1592":"text  = \"The Dormouse's story. Once upon a time there were three little sisters; and their names were Elsie, Lacie and Tillie; and they lived at the bottom of a well....badword...\"\n\nbadwords = set([\"badword\", \"badword1\", ....])\n\ntextwords = set(word for word in text.split())\nfor badword in badwords.intersection(textwords):\n    print(\"The bad word '{}' was found in the text\".format(badword))\n","1593":"import re\nr = re.compile(r'^[a-zA-Z0-9]') # match @ beginning anything that's not alpha numeric \ns = '#abc\\ndef\\nghi'\nl = [r.sub('', x) for x in s.split()]\n# join this list with comma (if that's required else you got the list already)\n','.join(l)\n","1594":"{{ article.content|safe }}\n","1595":">>> res = [\"FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'KIDS' & count_EVENT_GENRE >= 1\",\n\"FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'FANTASY' & count_EVENT_GENRE >= 1\",\n\"FAV_VENUE_CITY_NAME =='Mumbai' & EVENT_GENRE == 'FESTIVAL' & count_EVENT_GENRE >= 1\",\n\"FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'WORKSHOP' & count_EVENT_GENRE >= 1\",\n\"FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'EXHIBITION' & count_EVENT_GENRE >= 1\",\n\"FAV_VENUE_CITY_NAME == 'Mumbai' & FAV_GENRE == '|DRAMA|'\",\n\"FAV_VENUE_CITY_NAME = 'Mumbai' &  & FAV_GENRE == '|ACTION|ADVENTURE|SCI-FI|'\",\n\"FAV_VENUE_CITY_NAME == 'Mumbai' & FAV_GENRE == '|COMEDY|'\",\n\"FAV_VENUE_CITY_NAME == 'Mumbai' & FAV_LANGUAGE == 'Hindi'\"]\n>>> [' & '.join(x for x in i.split(' & ') if not x.startswith('count_')) for i in res]\n[\"FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'KIDS'\", \"FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'FANTASY'\", \"FAV_VENUE_CITY_NAME =='Mumbai' & EVENT_GENRE == 'FESTIVAL'\", \"FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'WORKSHOP'\", \"FAV_VENUE_CITY_NAME == 'Mumbai' & EVENT_GENRE == 'EXHIBITION'\", \"FAV_VENUE_CITY_NAME == 'Mumbai' & FAV_GENRE == '|DRAMA|'\", \"FAV_VENUE_CITY_NAME = 'Mumbai' &  & FAV_GENRE == '|ACTION|ADVENTURE|SCI-FI|'\", \"FAV_VENUE_CITY_NAME == 'Mumbai' & FAV_GENRE == '|COMEDY|'\", \"FAV_VENUE_CITY_NAME == 'Mumbai' & FAV_LANGUAGE == 'Hindi'\"]\n","1596":"def htmlentities(string):\n  def char_htmlentities(c):\n    return '&#%d;' % ord(c) if c in html_symbols else c\n\n  html_symbols =  set(',\\'\".<>?;:')\n  return ''.join(map(char_htmlentities, string))\n","1597":"list_display = ('email', 'first_name', 'last_name','userprofile')\n","1598":"def half_list(l):\n    return l[:len(l)\/2]\n","1599":"import os,glob,fileinput\nroot=\"\/tmp\"\npath=os.path.join(root,\"dir\")\nalines=[\"line 1\\n\",\"line 2\\n\",\"line 3\\n\",\"line 4\\n\"]\nos.chdir(path)\n# for clients\nfor clientfile in glob.glob(\"*.client.log\"):\n    data=open(clientfile).readlines()\n    data.append(alines)\n    open(\"temp\",\"w\").write(''.join(data))\n    os.rename(\"temp\",clientfile)\nfor svrfile in glob.glob(\"*.server.log\"):\n    f=0\n    for line in fileinput.FileInput(svrfile,inplace=1):\n         ind=line.find(\"After-this\")\n         if ind!=-1 and not f:\n             line=line[:ind+10] + ''.join(alines) + line[ind+10:]\n             f=1\n         print line\n","1600":"class MyButton(QPushButton):\n\n    BigSwitch = SomeQObjectThatDefinesTheSignal()\n\n    def __init__(self, ...):\n        ...\n        BigSwitch.the_signal.connect(self.some_slot)\n\n    def some_slot(self, ...):\n        #handle the change of the property\n\n    @classmethod\n    def enable(cls):\n        cls.BigSwitch.the_signal.emit(...)\n","1601":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import animation\nfrom matplotlib import sankey\nimport subprocess\n\nN = 10\ntime = np.linspace(0, np.pi * 2, N)\nflow_in = 4 * np.ones_like(time)\nflow_out_a = 2 + np.sin(time)\nflow_out_b = flow_in - flow_out_a\n\nfig, ax = plt.subplots()\nsk = sankey.Sankey(ax=ax, scale=1 \/ max(flow_in), format=u'%0.3g')\ndiags_text = ax.text(0.05, 0.9, '', transform=ax.transAxes)\n\ndef init():\n    a = flow_in[0]\n    b = -flow_out_a[0]\n    c = -flow_out_b[0]\n    sk.add(flows=[a, b, c],\n           orientations=[0, 0, -1],\n           alpha=0.2, lw=2.0, trunklength=1, pathlengths=[1, 1, 1])\n    diags = sk.finish()\n    return []\n\ndef anim(idx):\n    for diag in sk.diagrams:\n        # remove called instead of set_visible(False) to keep \n        # `len(ax.get_children())` constant\n        diag.patch.remove()\n        diag.text.remove()\n        for txt in diag.texts:\n            txt.remove()\n    sk.diagrams = []\n\n    a = flow_in[idx]\n    b = -flow_out_a[idx]\n    c = -flow_out_b[idx]\n\n    sk.add(flows=[a, b, c],\n           orientations=[0, 0, -1],\n           alpha=0.2, lw=2.0, trunklength=1, pathlengths=[1, 1, 1])\n    diags = sk.finish()\n    diags_text.set_text('len(sk.diagrams) = {l} | len(ax.get_children()) = {gc}'\n                        .format(l=len(sk.diagrams), gc=len(ax.get_children())))\n    ax.set_xlim(-2, 3)\n    ax.set_ylim(-3, 2)\n    fig.savefig('frame_{:03d}.png'.format(idx))\n    return []\n\nax.set_xlim(-2, 3)\nax.set_ylim(-3, 2)\n\nanim = animation.FuncAnimation(fig, anim, init_func=init, repeat=False,\n                               frames=N, interval=20, blit=True)\n\n# anim.save('mymovie.mp4', writer='mencoder')\nplt.show()\nsubprocess.call(['convert', '-delay', '10', '-loop', '0', '*.png', 'out.gif'])\n","1602":"import os\n\n# no more than 100 million items in memory at a time\nMAXINMEM = int(1e8)\n\nclass bigarray(object):\n  def __init__(self):\n    self.f = open('afile.dat', 'w+')\n    self.a = array.array('L')\n  def append(self, n):\n    self.a.append(n)\n    if len(self.a) > MAXINMEM:\n      self.a.tofile(self.f)\n      del self.a[:]\n  def pop(self):\n    if not len(self.a):\n      try: self.f.seek(-self.a.itemsize * MAXINMEM, os.SEEK_END)\n      except IOError: return self.a.pop()  # ensure normal IndexError &c\n      try: self.a.fromfile(self.f, MAXINMEM)\n      except EOFError: pass\n      self.f.seek(-self.a.itemsize * MAXINMEM, os.SEEK_END)\n      self.f.truncate()\n    return self.a.pop()\n","1603":"if __name__ == '__main__':\n    unittest.main(defaultTest='suite')\n","1604":"g4ur4v@g4ur4v:~$ cat .\/r.py \n#!\/usr\/bin\/env python\nprint 'hii'    \n\ng4ur4v@g4ur4v:~$ sudo .\/r.py\nsudo: .\/r.py: command not found\n\ng4ur4v@g4ur4v:~$ sudo \/home\/g4ur4v\/Desktop\/junk\/r.py\nsudo: \/home\/g4ur4v\/Desktop\/junk\/r.py: command not found\n\ng4ur4v@g4ur4v:~$ pwd\n\/home\/g4ur4v\/Desktop\/junk\n\ng4ur4v@g4ur4v:~$ ll \/home\/g4ur4v\/Desktop\/junk\/r.py\n-rw-rw-r-- 1 g4ur4v g4ur4v 33 Sep 22 03:29 \/home\/g4ur4v\/Desktop\/junk\/r.py\n\ng4ur4v@g4ur4v:~$ chmod +x \/home\/g4ur4v\/Desktop\/junk\/r.py\n\ng4ur4v@g4ur4v:~$ sudo \/home\/g4ur4v\/Desktop\/junk\/r.py\nhii\n\ng4ur4v@g4ur4v:~$ sudo .\/r.py\nhii\n","1605":"def listpage(self, response):\n    # Parses the entries on the page, and stores them\n    sel = Selector(response)\n    entries = sel.xpath(\"\/\/table[@id='gv_Subsribers']\").css(\"tr\")\n    items = []\n    for entry in entries:\n        item = Contact()\n        item['name'] = entry.xpath('\/td[0]\/text()')\n        yield item\n\n    # remember get next has to return Request with callback=self.listpage\n    yield self.getNext10()\n","1606":">>> import argparse\n>>> parser = argparse.ArgumentParser()\n>>> parser.add_argument('-i', nargs='+')\n>>> parser.parse_args('-i input1.txt input2.txt input3.txt'.split())\nNamespace(i=['input1.txt', 'input2.txt', 'input3.txt'])\n","1607":"email =('email')\npwd  = ('pwd')\ndata = urllib.parse.urlencode({'email': email, 'pwd':pwd, 'service': 'nudge'})\ndata = data.encode('utf-8')\nrequest = urllib.request.Request(\"https:\/\/jawbone.com\/user\/signin\/login\")\n# adding charset parameter to the Content-Type header.\nrequest.add_header(\"Content-Type\",\"application\/x-www-form-urlencoded;charset=utf-8\")\nf = urllib.request.urlopen(request, data)\n\n#print(f.read().decode('utf-8'))\nj=(f.read().decode('utf-8'))\nb=json.loads(j)\n","1608":"numTimes = dict()\ntarget = (len(a)\/\/2)+1\n\nfor ele in a:\n    if ele not in numTimes:\n        numTimes[ele] = 1\n    else:\n        numTimes[ele] +=1\n\n    if numTimes[ele] == target:\n        return ele\n","1609":"import inspect\ndef lfmt(s):\n    caller = inspect.currentframe().f_back\n    return s.format(**caller.f_locals)\n\na = 3\nb = 'foo'\nc = dict(mykey='myval')\n\nprint(lfmt('a is {a}, b is {b}, mykey is {c[mykey]}'))\n# a is 3, b is foo, mykey is myval\n","1610":"{% for fieldset in adminform %}\n    {% for field in fieldset.fields %}\n    <li> {{ field }} <\/li>\n        {% if \"nanoadded\" in field  %}\n            <li> nanoadded is here <\/li>\n        {% else %}\n            <li> nanoadded is NOT here <\/li>\n        {% endif %}       \n    {% endfor %} \n{% endfor %}\n","1611":"import tarfile\narchive = tarfile.TarFile('\/path\/to\/my\/tarfile.tar')\nmax_size = 0\nmax_name = None\nfor file in archive.getmembers():\n    if file.size > max_size:\n        max_size = file.size\n        max_name = file.name\n\nprint(max_size)\nprint(max_name)\n","1612":"from django.db import connection\ntables = connection.introspection.table_names()\nseen_models = connection.introspection.installed_models(tables)\n","1613":"from itertools import count\n\ndef next_available(base):\n    for ext in count(start=1):\n        name = '{}.{:03d}'.format(base, ext)\n        if not os.path.exists(name):\n            return name\n","1614":"import dns.resolver\n\nanswers = dns.resolver.query('WSCLUSTER', 'A')\nfor rdata in answers:\n    print rdata\n","1615":"# example code:\nstring_with_newlines = \"\"\"something\nsomeotherthing\"\"\"\n\nimport re\n\nprint re.match('some', string_with_newlines) # matches\nprint re.match('someother', \n               string_with_newlines) # won't match\nprint re.match('^someother', string_with_newlines, \n               re.MULTILINE) # also won't match\nprint re.search('someother', \n                string_with_newlines) # finds something\nprint re.search('^someother', string_with_newlines, \n                re.MULTILINE) # also finds something\n\nm = re.compile('thing$', re.MULTILINE)\n\nprint m.match(string_with_newlines) # no match\nprint m.match(string_with_newlines, pos=4) # matches\nprint m.search(string_with_newlines, \n               re.MULTILINE) # also matches\n","1616":"def displayTrack(position):\n\n    output='|'#value given to output\n    track=[' ']*20# track is initially just a bunch of empty spaces\n    track[position]= 'r'#AND track also contains an r icon\n    print(' -'*20)#these are the top and bottom borders\n    print(' 0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J')#these represent each individual cell\n\n    for i in range(len(track)):\n        output= output +track[i] +'|'#append a \"|\" before and after each empty space \" \"\n    print (output)#print the result\n    print(' -'*20)\n","1617":"<div id=\"pcraSpecs\">\n  <script type=\"text\/javascript\">...<\/script>\n  <TABLE cellpadding=\"0\" cellspacing=\"0\" class=\"specification\">\n    <TR>\n      <TD colspan=\"2\" class=\"title\">Model<\/TD>\n    <\/TR>\n    <TR>\n      <TD class=\"name\">Brand<\/TD>\n      <TD class=\"desc\"><script type=\"text\/javascript\">document.write(neg_specification_newline('Intel'));<\/script><\/TD>\n    <\/TR>\n    <TR>\n      <TD class=\"name\">Processors Type<\/TD>\n      <TD class=\"desc\"><script type=\"text\/javascript\">document.write(neg_specification_newline('Desktop'));<\/script><\/TD>    \n    <\/TR>\n    ...\n  <\/TABLE>\n<\/div>\n","1618":">>> timeit.timeit(\"sum([1 for i in permutations([1, 2, 3, 4, 5])])\", setup=\"from itertools import permutations\", number=1000)\n0.0829811965812155\n\n>>> timeit.timeit(\"sum([1 for i in perms([1, 2, 3, 4, 5])])\", setup=\"from test import perms\", number=1000)\n0.4672438746438843\n","1619":"from sqlalchemy import func, desc\nsession.query(\n    func.count(tablename.id).label('qty')\n    ).group_by(tablename.category\n    ).order_by(desc('qty'))\n","1620":"intweight = 0\nwhile True:\n    try: \n        weight = float(input())\n    except ValueError:\n        print \"Please enter a number\"\n    else:\n        break\n        intweight = weight\n","1621":"class TopToolbar(plugins.PluginBase):\n    \"\"\"Plugin for moving toolbar to top of figure\"\"\"\n\n    JAVASCRIPT = \"\"\"\n    mpld3.register_plugin(\"toptoolbar\", TopToolbar);\n    TopToolbar.prototype = Object.create(mpld3.Plugin.prototype);\n    TopToolbar.prototype.constructor = TopToolbar;\n    function TopToolbar(fig, props){\n        mpld3.Plugin.call(this, fig, props);\n    };\n\n    TopToolbar.prototype.draw = function(){\n      \/\/ the toolbar svg doesn't exist\n      \/\/ yet, so first draw it\n      this.fig.toolbar.draw();\n\n      \/\/ then change the y position to be\n      \/\/ at the top of the figure\n      this.fig.toolbar.toolbar.attr(\"y\", 2);\n\n      \/\/ then remove the draw function,\n      \/\/ so that it is not called again\n      this.fig.toolbar.draw = function() {}\n    }\n    \"\"\"\n    def __init__(self):\n        self.dict_ = {\"type\": \"toptoolbar\"}\n","1622":"import requests\nimport http.cookiejar\n\n\nclass Parent:\n\n    CookieFile = 'tmp\/cookies.txt'\n\n    def __init__(self):\n        self.cj = http.cookiejar.LWPCookieJar(Parent.CookieFile)\n        self.cj.load(ignore_discard=True)\n        self.session = requests.Session()\n        self.session.cookies = self.cj\n\n    def save_cookies(self):\n        self.cj.save(Parent.CookieFile, ignore_discard=True)\n\n\nclass Child(Parent):\n\n    def __init__(self):\n        Parent.__init__(self)\n\n    def main(self):\n        # Do stuff, connect if necessary\n        self.save_cookies()\n\na = Child\na.main()\n","1623":"Enter Input Directory's full path [eg. c:\\vid\\]: C:\\Users\\Dino\\ \nIn: C:\\Users\\Dino\\ \nOut: C:\\Users\\Dino\\ipod\\ \nC:\\Users\\Dino\\x.avi\n-i \"C:\\Users\\Dino\\x.avi\" -t 1 -c 1 -o \"C:\\Users\\Dino\\ipod\\x.mp4\" --preset=\"iPod\"\n","1624":"class Monster(yaml.YAMLObject):\n    yaml_tag = u'!Monster'\n    def __init__(self, name, hp, ac, attacks):\n        self.name = name\n        self.hp = hp\n        self.ac = ac\n        self.attacks = attacks\n    def __repr__(self):\n        return \"%s(name=%r, hp=%r, ac=%r, attacks=%r)\" % (\n            self.__class__.__name__, self.name, self.hp, self.ac, self.attacks)\n\nprint yaml.load(\"\"\"\n--- !Monster\nname: Cave spider\nhp: [2,6]    # 2d6\nac: 16\nattacks: [BITE, HURT]\n\"\"\")\n","1625":"with open('example.csv', 'rb') as csvfile:\n\n    #detect the delimiter used\n    dialect = csv.Sniffer().sniff(csvfile.read(1024))\n\n    #return to the beginning of the file\n    csvfile.seek(0)\n\n    #file should now open with the correct delimiter.\n    reader = csv.reader(csvfile, dialect)\n","1626":"#-*- coding: utf-8 -*-\n#!python\n\nfrom ctypes import *\nfrom ctypes.wintypes import *\n\n# stick to unicode version\nLPWSTR = POINTER(WCHAR)\nHINTERNET = LPVOID\n\nINTERNET_PER_CONN_FLAGS = 1\nINTERNET_PER_CONN_AUTOCONFIG_URL = 4\nINTERNET_PER_CONN_AUTODISCOVERY_FLAGS = 5\nINTERNET_OPTION_REFRESH = 37\nINTERNET_OPTION_SETTINGS_CHANGED = 39\nINTERNET_OPTION_PER_CONNECTION_OPTION = 75\n\nPROXY_TYPE_AUTO_PROXY_URL = 4\n\nclass INTERNET_PER_CONN_OPTION(Structure):\n    class Value(Union):\n        _fields_ = [\n            ('dwValue', DWORD),\n            ('pszValue', LPWSTR),\n            ('ftValue', FILETIME),\n        ]\n\n    _fields_ = [\n        ('dwOption', DWORD),\n        ('Value', Value),\n    ]\n\nclass INTERNET_PER_CONN_OPTION_LIST(Structure):\n    _fields_ = [\n        ('dwSize', DWORD),\n        ('pszConnection', LPWSTR),\n        ('dwOptionCount', DWORD),\n        ('dwOptionError', DWORD),\n        ('pOptions', POINTER(INTERNET_PER_CONN_OPTION)),\n    ]\n\nInternetSetOption = windll.wininet.InternetSetOptionW\nInternetSetOption.argtypes = [HINTERNET, DWORD, LPVOID, DWORD]\nInternetSetOption.restype  = BOOL\n\nif __name__ == '__main__':\n    proxy = create_unicode_buffer('http:\/\/127.0.0.1:8086\/proxy.pac')\n    List = INTERNET_PER_CONN_OPTION_LIST()\n    Option = (INTERNET_PER_CONN_OPTION * 2)()\n    nSize = c_ulong(sizeof(INTERNET_PER_CONN_OPTION_LIST))\n\n    Option[0].dwOption = INTERNET_PER_CONN_AUTOCONFIG_URL\n    Option[0].Value.pszValue = proxy\n    Option[1].dwOption = INTERNET_PER_CONN_FLAGS\n    Option[1].Value.dwValue = PROXY_TYPE_AUTO_PROXY_URL\n\n    List.dwSize = sizeof(INTERNET_PER_CONN_OPTION_LIST)\n    List.pszConnection = None\n    List.dwOptionCount = 2\n    List.dwOptionError = 0\n    List.pOptions = Option\n\n    assert InternetSetOption(None, INTERNET_OPTION_PER_CONNECTION_OPTION, byref(List), nSize) == True\n    assert InternetSetOption(None, INTERNET_OPTION_SETTINGS_CHANGED, None, 0) == True\n    assert InternetSetOption(None, INTERNET_OPTION_REFRESH, None, 0) == True\n","1627":"from readline import rl as readline\nreadline.mode.show_all_if_ambiguous(\"on\")\n","1628":"class Root(object):\n\n    @cherrypy.expose\n    def index(self):\n        return 'Hello world'\n\n\nclass RestAPI(object):\n\n    exposed = True\n\n    def POST(self):\n        return 'post'\n\n    def GET(self):\n        return 'get'\n\n\ncherrypy.config.update({\n    'global': {\n        'environment': 'test_suite',\n        'server.socket_host': '127.0.0.1',\n        'server.socket_port': 8080,\n    }\n})\n\ncherrypy.tree.mount(Root())\n\ncherrypy.tree.mount(RestAPI(), '\/api',\n    {'\/':\n        {'request.dispatch': cherrypy.dispatch.MethodDispatcher()}\n    }\n)\n\ncherrypy.engine.start()\ncherrypy.engine.block()\n","1629":"new_dict = { k: len(v) for k, v in old_dict.iteritems()}\n","1630":"def testfunc():\n    ok = False\n    while not ok:\n        testvar = input('Select Option\\n\\n[1] Option 1\\n[2] Option 2\\n\\n    >')\n        if testvar in ('1', 'Option 1', 'option 1'):\n            print(\"\\nYou selected Option 1\")\n            ok = True\n        elif testvar in ('2', 'Option 2', 'option 2'):\n            print(\"\\nYou Selected Option 2\")\n            ok = True\n        else:\n            print(\"\\n\\nThat is not an option, please select another option\")\n\n    print(testvar)\n\ntestfunc()\n","1631":"data = [{u'name': u'xxx', u'age': u'11'}, {u'name': u'myname', u'age': u'2'}, {u'name': u'cat', u'age': u'8'}]\nfor obj in data:\n    mydata.details.add(MyDetails.objects.create(name=obj['name']), age=obj['age'])\n","1632":"newArgs = re.sub(argVariable+r'=\\S*', item, newArgs)\n","1633":"print df\n   a  b  c\n0  0  1  2\n1  0  1  2\n2  1  1  2\n3  1  0  1\n4  1  1  2\n5  0  0  1\n\nmean_value = df.mean(axis=1)\nprint mean_value\n0    1.000000\n1    1.000000\n2    1.333333\n3    0.666667\n4    1.333333\n5    0.333333\n\nmask = df.ge(mean_value, axis=0)\nprint mask\n       a      b     c\n0  False   True  True\n1  False   True  True\n2  False  False  True\n3   True  False  True\n4  False  False  True\n5  False  False  True\nprint df.mask(mask, 1)\n   a  b  c\n0  0  1  1\n1  0  1  1\n2  1  1  1\n3  1  0  1\n4  1  1  1\n5  0  0  1\n","1634":"query_args = { 'origins':'2097 Honeysuckle Lane Southwest, Atlanta, GA 30311, USA',\n           'destinations':'67 Fitzgerald Street Southeast, Atlanta, GA 30312, USA',\n           'client':client_id,\n           'departure_time':calendar.timegm(time.gmtime())\n     } \n","1635":"import pygame, os.path\nfrom pygame.locals import *\n\nclass TranslucentSprite(pygame.sprite.Sprite):\n  def __init__(self):\n    pygame.sprite.Sprite.__init__(self, TranslucentSprite.container)\n    self.image = pygame.image.load(os.path.join('data', 'image.bmp'))\n    self.image = self.image.convert()\n    self.image.set_colorkey(-1, RLEACCEL)\n    self.rect = self.image.get_rect()\n    self.rect.center = (320,240)\n\ndef main():\n  pygame.init()\n  screen = pygame.display.set_mode((640,480))\n  background = pygame.Surface(screen.get_size())\n  background = background.convert()\n  background.fill((250,250,250))\n  clock = pygame.time.Clock()\n  transgroups = pygame.sprite.Group()\n  TranslucentSprite.container = transgroups\n\n  \"\"\"Here's the Translucency Code\"\"\"\n  transsurface = pygame.display.set_mode(screen.get_size())\n  transsurface = transsurface.convert(screen)\n  transsurface.fill((255,0,255))\n  transsurface.set_colorkey((255,0,255))\n  transsurface.set_alpha(50)\n\n  TranslucentSprite()\n  while 1:\n    clock.tick(60)\n    for event in pygame.event.get():\n      if event.type == QUIT:\n        return\n      elif event.type == KEYDOWN and event.key == K_ESCAPE:\n        return\n    transgroups.draw(transsurface)\n    screen.blit(background,(0,0))\n    screen.blit(transsurface,(0,0))\n    pygame.display.flip()\n\nif __name__ == '__main__' : main()\n","1636":"setup(\n    name='your.module',\n    version = '1.0',\n    description='This is your awesome module',\n    author='You',\n    author_email='your@email',\n    package_dir = {'': 'src'},\n    packages = ['your', 'your.module'],\n    test_suite = 'your.module.tests',\n    use_2to3 = True,\n    convert_2to3_doctests = ['src\/your\/module\/README.txt'],\n    use_2to3_fixers = ['your.fixers'],\n    use_2to3_exclude_fixers = ['lib2to3.fixes.fix_import'],\n)\n","1637":"d = {'tom':'stats', 'keys':[{'tim': 'doc', 'year': 1999},{'mum':'veg', 'nba':'qweqwe'}] }\n\ndef print_all_values(input):\n    if isinstance(input, dict):\n        for key, value in input.items():\n            print_all_values(value)\n    elif isinstance(input, list):\n        for value in input:\n            print_all_values(value)\n    else:\n        print(input)\n\nprint_all_values(d)\n","1638":"from lxml import etree as ET\n\ndef filter_by_itemid(doc, idlist):\n    rowset = doc.xpath(\"\/api\/result\/rowset[@name='assets']\")[0]\n    for elem in rowset.getchildren():\n        if int(elem.get(\"itemID\")) not in idlist:\n            rowset.remove(elem)\n    return doc\n\ndoc = ET.parse(\"test.xml\")\nfilter_by_itemid(doc, [1004072840841])\n\nprint(ET.tostring(doc))\n","1639":"commands = ['foo', 'bar', 'exit', 'hello world', 'add number']\n","1640":">>> lol = [[1,2,3],[4,40],[10,20,30]]\n>>> \n>>> for l in lol:\n...     if max(l) > 30:\n...         continue\n...     print l\n... \n[1, 2, 3]\n[10, 20, 30]\n","1641":"def transform(model, **kwargs):\n    for p in ('alpha', 'theta', ...):\n        if 'p' not in kwargs and hasattr(model, p):\n            kwargs[p] = getattr(model, p)\n","1642":"import numpy as np\nimport cv2\nim = cv2.imread('Photos\/test.jpg')\nim_ycrcb = cv2.cvtColor(im, cv2.COLOR_BGR2HSV)\n\nball_ycrcb_mint = np.array([0, 90, 100],np.uint8)\nball_ycrcb_maxt = np.array([25, 255, 255],np.uint8)\nball_ycrcb = cv2.inRange(im_ycrcb, ball_ycrcb_mint, ball_ycrcb_maxt)\n#cv2.imwrite('Photos\/output2.jpg', ball_ycrcb) # Second image\nareaArray = []\ncount = 1\n\ncontours, _ = cv2.findContours(ball_ycrcb, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\nfor i, c in enumerate(contours):\n    area = cv2.contourArea(c)\n    areaArray.append(area)\n\n#first sort the array by area\nsorteddata = sorted(zip(areaArray, contours), key=lambda x: x[0], reverse=True)\n\n#find the nth largest contour [n-1][1], in this case 2\nsecondlargestcontour = sorteddata[1][1]\n\n#draw it\nx, y, w, h = cv2.boundingRect(secondlargestcontour)\ncv2.drawContours(im, secondlargestcontour, -1, (255, 0, 0), 2)\ncv2.rectangle(im, (x, y), (x+w, y+h), (0,255,0), 2)\ncv2.imwrite('Photos\/output3.jpg', im)\n","1643":"import sys\n\ndef my_print(text):\n    sys.stdout.write(str(text))\n    sys.stdout.flush()\n","1644":"with open(name, 'r+') as file:\n    for line in file:\n        # Do Something with line\n    file.seek(0)\n    for line in file:\n        # Do Something with line, second time\n","1645":"import matplotlib.pyplot as plt\nplt.rcParams['savefig.dpi'] = 500\n","1646":"class WorkPackage(Base):\n    __tablename__ = 'work_package'\n    int_id = Column(Integer, primary_key=True)\n    wp_prefix = Column(Unicode, default=u'DIVISION_ABC_REQUEST_', primary_key=True)\n    data = Column(Unicode)\n\n    @hybrid_property\n    def wp_id(self):\n        return self.wp_prefix + str(self.int_id)\n\n    @wp_id.expression\n    def wp_id(cls):\n        return cls.wp_prefix.concat(cls.int_id)\n","1647":"pr = subprocess.Popen(['js2coffee'], \n                      stdin=subprocess.PIPE,  \n                      stdout=subprocess.PIPE)\nresult, stderrdata = pr.communicate('var myNumber = 100;')\n","1648":"pieces = []\nitem = self.tree.GetSelection()\n\nwhile self.tree.GetItemParent(item):\n  piece = self.tree.GetItemText(item)\n  pieces.insert(0, piece)\n  item = self.tree.GetItemParent(item)\n","1649":"        conn = httplib.HTTPConnection(\"mustafa-yontar.commondatastorage.googleapis.com\")\n        conn.set_debuglevel(2)\n        f = open(filename,\"r\")\n        m = hashlib.md5()\n        m.update(f.read())\n        h = m.hexdigest()\n        has = h\n        dd = \"%s\" % datetime.datetime.utcnow().strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n        strToSign = \"PUT\\n\"+h+\"\\n\\n\"+dd+\"\\nx-goog-acl:public-read\\n\/mustafa-yontar\/x.jpg\"\n\n        sig = base64.b64encode(hmac.new(self.secret, strToSign, hashlib.sha1).digest())\n        total = os.path.getsize(filename)\n\n        header = {\"Date\":dd,\"x-goog-acl\":\"public-read\",\"Content-MD5\":h,'Content-Length':total,'Authorization':\"GOOG1 %s:%s\" % (self.key,sig)}\n\n        conn.putrequest('PUT', \"\/x.jpg\")\n        for h in header:\n            conn.putheader(h, header[h])\n        conn.endheaders()\n        bytess = open('x.jpg', 'rb').read()\n        f = StringIO(bytess)\n        f.seek(0)\n\n\n        while True:\n            bytes = f.read(1024)\n            if not bytes: break\n\n            length = len(bytes)\n            conn.send('%X\\r\\n' % length)\n            conn.send(bytes + '\\r\\n')\n        conn.send('0\\r\\n\\r\\n')\n\n        #errcode, errmsg, headers = conn.getresponse()\n        #h.close()\n\n\n        #conn.request(\"PUT\",\"\/mustafa-yontar\/x.jpg\",f.read(),header)\n        r1 = conn.getresponse()\n        print r1.status, r1.reason\n        print r1.read()\n        conn.close()\n        print has\n","1650":"def parse_data:\n\n    if isinstance(value, dict):\n        iterator = value.items()\n    elif isinstance(value, list):\n        iterator = enumerate(value)\n    else:\n        return\n\n    for key, item in iterator:\n        parse_data(value, key, item)\n\n    # do some cool stuff with the rest\n","1651":"def largest(sequence):\n    \"\"\"\n    This is based on Bentley's Programming Pearls chapter 8.\n    My modification: if the sequence is all negatives\n    then max is the largest element    \n    \"\"\"\n    max_so_far = max_up_to_here = 0\n    largest_element = sequence[0]\n    all_negatives = True\n\n    for element in sequence:\n        max_up_to_here= max(max_up_to_here + element, 0)\n        max_so_far = max(max_so_far, max_up_to_here)\n        largest_element = max(largest_element, element)\n        if element >= 0:\n            all_negatives = False\n\n    if all_negatives:\n        return largest_element\n    return max_so_far    \n","1652":"multiply = multiply.replace('[','').replace(']','')\n","1653":"valid = [\"Yes\", \"yes\", \"y\", \"ok\"]\n\nif answer in valid:\n    print \"You said yes\"\nelse:\n    print \"You did not say yes\"\n","1654":">>> s = \"chapter1 in chapters\"\n>>> re.sub(r'chapter(\\d+)',r'chapter \\1',s)\n'chapter 1 in chapters'\n","1655":"def first_loop():\n    while True:\n    if something:\n        # do something\n    else:\n        break\n\n# call loop for first time\nfirst_loop()\n\nwhile True:\n    if something:\n        #do something\n    else:\n        break\n\n# return back to the loop\nfirst_loop()\n","1656":">>> m = re.search('\/([0-9]+)-', url)\n>>> m.group(1) \n123456\n","1657":"w = np.array([1, 3, 4, 5, 6, 2, 9, 2, 4, 2, 1, 3, 3, 6])\nuvals, idx, counts = np.unique(w, return_counts=True, return_inverse=True)\nout = np.vstack((w, counts[idx])).T\n\nprint(out)\n# [[1 2]\n#  [3 3]\n#  [4 2]\n#  [5 1]\n#  [6 2]\n#  [2 3]\n#  [9 1]\n#  [2 3]\n#  [4 2]\n#  [2 3]\n#  [1 2]\n#  [3 3]\n#  [3 3]\n#  [6 2]]\n","1658":"import os\nimport os.path\nimport sys\nimport lxml.etree\n\nif len(sys.argv) == 2:\n    in_filename = str(sys.argv[1])\n    if os.path.isfile (in_filename):\n        for ent in lxml.etree.parse (in_filename).iter ('entry'):\n            get = ent.xpath\n            if ent.get (\"kind\") == \"file\":\n                log_filename = get ('string(name)')\n                log_revision = get('string(commit\/@revision)') # Fixed ;)\n                log_date = get ('string(commit\/date)')\n                print('{0},{1},{2}'.format(log_revision,log_date[:10],log_filename))\n","1659":"In [2]: def foo():pass\n   ...: \n\nIn [3]: foo.bar=\"text\"\n\nIn [4]: foo.bar\nOut[4]: 'text'\n","1660":"SHFILEINFO sfi;\nSHGetFileInfo(L\"c:\\file.txt\", 0, &sfi, sizeof(sfi), \n              SHGFI_SYSICONINDEX);\n\nHIMAGELIST hil;\nSHGetImageList(SHIL_JUMBO, IID_IImageList, &hil);\n\nImageList_DrawEx(hil, sfi.iIcon, hdc, x, y, 0, 0, \n                 CLR_NONE, CLR_NONE, ILD_NORMAL);\n","1661":"from urllib.request import urlopen; print(int(str(urllib.request.urlopen(\"http:\/\/ir.eia.gov\/ngs\/wngsr.txt\").read()).split(\"\\\\n\")[4].split(\" \")[2]))\n#              note the semi-colon ^\n","1662":"if datetime.datetime.now().hour >= 17:\n    pass\n","1663":"import os\n\n# this function splits the attribute=value into two lists\n# the first list are all the attributes\n# the second list are all the values\ndef getAttributesAndValues(line):\n    attributes = []\n    values = []\n\n    # first we split the input over the &\n    AtributeValues = line.split('&')\n    for attrVal in AtributeValues:\n        # we split the attribute=value over the '=' sign\n        # the left part goes to split[0], the value goes to split[1]\n        split = attrVal.split('=')\n        attributes.append(split[0])\n        values.append(split[1])\n\n    # return the attributes list and values list\n    return attributes,values\n\n# test the function using the line beneath so you understand how it works\n# line = \"Attribute1=Value&Attribute2=Value&Attribute3=Vale&AttibuteN=Value\"\n# print getAttributesAndValues(line)\n\n# this function writes a single file to an output file\ndef writeToCsv(inFile='', wfile=\"outFile.csv\", delim=\",\"):\n    f_in = open(inFile, 'r')    # only reading the file\n    f_out = open(wfile, 'ab+')  # file is opened for reading and appending\n\n    # read the whole file line by line\n    lines = f_in.readlines()\n\n    # loop throug evert line in the file and write its values\n    for line in lines:\n        # let's check if the file is empty and write the headers then\n        first_char = f_out.read(1)\n        header, values = getAttributesAndValues(line)\n\n        # we write the header only if the file is empty\n        if not first_char:\n            for attribute in header:\n                f_out.write(attribute+delim)\n            f_out.write(\"\\n\")\n\n        # we write the values\n        for value in values:\n            f_out.write(value+delim)\n        f_out.write(\"\\n\")\n\n# Read all the files in the path (without dir pointer)\nallInputFiles = os.listdir('input\/')\nallInputFiles = allInputFiles[1:]\n\n# loop through all the files and write values to the csv file\nfor singleFile in allInputFiles:\n    writeToCsv('input\/'+singleFile)\n","1664":"def thread1():\n     time.sleep(5)\n     return True\n\ndef thread2(t1,gui):\n    while thread.is_alive():\n        pass\n    print \"Fertig\"\n    wx.CallAfter(gui.ThreadDone)\n\nclass MyFrame(wx.Frame):\n   def startThread(self):\n      calcThread = threading.Thread(target=thread1)\n      checkThread = threading.Thread(target=thread2, args=(calcThread,self))\n   def ThreadDone(self):\n       print \"Both threads done???\"\n       print \"Now modify gui from main thread(here!)\"\n","1665":"some_array = [2, 4, 5, 8, 4, 3]\nplt.hlines(some_array, 0, 1, colors=['b', 'g', 'r', 'y', 'c', 'm'])\nplt.ylim(1, 9)\n","1666":"In [1]: arr = [[54.1757, 57.7807], [61.5786, 64.1535], [67.9584, 83.0], [104.4185, 120.377]]\n\nIn [2]: arr2 = [ \"{}:{}\".format(a, a-b) for a, b in arr ]\n\nIn [3]: arr2\nOut[3]:\n['54.1757:-3.605', '61.5786:-2.5749', '67.9584:-15.0416', '104.4185:-15.9585']\n","1667":"AUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'django_openid_auth.auth.OpenIDBackend',\n    )\n","1668":"class MyList(list):\n\n    def __getitem__(self, index):\n        try:\n            return super(MyList, self).__getitem__(index)\n        except IndexError:\n            return None\n\nmylist = MyList([1,2,3,4,5])\nprint mylist[4] #prints 5\nprint mylist[6] is None #prints True\n","1669":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import ode\n\n\ndef fun(t, z, omega):\n    \"\"\"\n    Right hand side of the differential equations\n      dx\/dt = -omega * y\n      dy\/dt = omega * x\n    \"\"\"\n    x, y = z\n    f = [-omega*y, omega*x]\n    return f\n\n# Create an `ode` instance to solve the system of differential\n# equations defined by `fun`, and set the solver method to 'dop853'.\nsolver = ode(fun)\nsolver.set_integrator('dop853')\n\n# Give the value of omega to the solver. This is passed to\n# `fun` when the solver calls it.\nomega = 2 * np.pi\nsolver.set_f_params(omega)\n\n# Set the initial value z(0) = z0.\nt0 = 0.0\nz0 = [1, -0.25]\nsolver.set_initial_value(z0, t0)\n\n# Create the array `t` of time values at which to compute\n# the solution, and create an array to hold the solution.\n# Put the initial value in the solution array.\nt1 = 2.5\nN = 75\nt = np.linspace(t0, t1, N)\nsol = np.empty((N, 2))\nsol[0] = z0\n\n# Repeatedly call the `integrate` method to advance the\n# solution to time t[k], and save the solution in sol[k].\nk = 1\nwhile solver.successful() and solver.t < t1:\n    solver.integrate(t[k])\n    sol[k] = solver.y\n    k += 1\n\n# Plot the solution...\nplt.plot(t, sol[:,0], label='x')\nplt.plot(t, sol[:,1], label='y')\nplt.xlabel('t')\nplt.grid(True)\nplt.legend()\nplt.show()\n","1670":"shutdown_mode=False\n\ndef alarm_handler(signum, frame):\n        sys.exit(0)\n\ndef sigterm_handler(signum):\n     global shutdown_mode\n     if not shutdown_mode:\n            shutdown_mode=True\n            signal.signal(signal.SIGALRM, alarm_handler)\n            signal.alarm(10)\n","1671":"q = s.query(User)  # lazy loads 'addresses'\nq = s.query(User).options(contains_eager('addresses'))  # eager loads\nq = s.query(User).options(contains_eager('addresses'))\\\n        .options(lazyload('addresses'))  # lazy loads\nq = s.query(User).options(contains_eager('addresses'))\\\n        .options(lazyload('addresses'))\\\n        .options(contains_eager('addresses'))  # eager loads\n","1672":"from functools import partial\n\nd = defaultdict(partial(deque, maxlen=10))\n","1673":"file.name = slugify(myfile.filename)\nname, ext = os.path.splitext(file.name)\nwhile os.path.exists(os.path.join(permanent_store, file.name)):\n    name += '_'\n    file.name = name + ext\n\nraw_file = os.path.join(permanent_store, file.name)\n","1674":"def set_row_csr(A, row_idx, new_row):\n    '''\n    Replace a row in a CSR sparse matrix A.\n\n    Parameters\n    ----------\n    A: csr_matrix\n        Matrix to change\n    row_idx: int\n        index of the row to be changed\n    new_row: np.array\n        list of new values for the row of A\n\n    Returns\n    -------\n    None (the matrix A is changed in place)\n\n    Prerequisites\n    -------------\n    The row index shall be smaller than the number of rows in A\n    The number of elements in new row must be equal to the number of rows in matrix A\n    '''\n    assert sparse.isspmatrix_csr(A), 'A shall be a csr_matrix'\n    assert row_idx < A.shape[0], \\\n            'The row index ({0}) shall be smaller than the number of rows in A ({1})' \\\n            .format(row_idx, A.shape[0])\n    try:\n        N_elements_new_row = len(new_row)\n    except TypeError:\n        msg = 'Argument new_row shall be a list or numpy array, is now a {0}'\\\n        .format(type(new_row))\n        raise AssertionError(msg)\n    N_cols = A.shape[1]\n    assert N_cols == N_elements_new_row, \\\n            'The number of elements in new row ({0}) must be equal to ' \\\n            'the number of rows in matrix A ({1})' \\\n            .format(N_elements_new_row, N_cols)\n\n    idx_start_row = A.indptr[row_idx]\n    idx_end_row = A.indptr[row_idx + 1]\n    additional_nnz = N_cols - (idx_end_row - idx_start_row)\n\n    A.data = np.r_[A.data[:idx_start_row], new_row, A.data[idx_end_row:]]\n    A.indices = np.r_[A.indices[:idx_start_row], np.arange(N_cols), A.indices[idx_end_row:]]\n    A.indptr = np.r_[A.indptr[:row_idx + 1], A.indptr[(row_idx + 1):] + additional_nnz]\n","1675":"In [46]: df = pd.DataFrame(np.random.randn(4,2), index=pd.MultiIndex.from_arrays([['a', 'a', 'b', 'b'],[1,1,2,2]]))\n\nIn [47]: df\nOut[47]:\n            0         1\na 1  0.510701  0.534342\n  1  0.229360 -1.403280\nb 2 -0.218433  0.619108\n  2 -0.679179 -0.195241\n\nIn [48]: df.drop([('a', 1)])\nOut[48]:\n            0         1\nb 2 -0.218433  0.619108\n  2 -0.679179 -0.195241\n","1676":"#! \/usr\/bin\/python\n# coding: utf-8\n\nimport random, os\n\n\nCHUNK_SIZE = 1000\nPATH = \"\/var\/log\/cron\"\n\ndef pick_next_random_line(file, offset):\n    file.seek(offset)\n    chunk = file.read(CHUNK_SIZE)\n    lines = chunk.split(os.linesep)\n    # Make some provision in case yiou had not read at least one full line here\n    line_offset = offset + len(os.linesep) + chunk.find(os.linesep) \n    return line_offset, lines[1]\n\ndef get_n_random_lines(path, n=5):\n    lenght = os.stat(path).st_size\n    results = []\n    result_offsets = set()\n    with open(path) as input:\n        for x in range(n):\n            while True:\n                offset, line = pick_next_random_line(input, random.randint(0, lenght - CHUNK_SIZE))\n                if not offset in result_offsets:\n                    result_offsets.add(offset)\n                    results.append(line)\n                    break\n    return results\n\nif __name__ == \"__main__\":\n    print get_n_random_lines(PATH)\n","1677":"thedata = '''\nQuesta mattina\nmi son svegliato\no bella ciao, bella ciao,\nbella ciao, ciao, ciao\nquesta mattina\nmi son svegliato\nho trovato l'invasor!\n'''.splitlines(True)\n\nclass Push(protocol.Protocol):\n    \"\"\"This is just about the simplest possible protocol\"\"\"\n    def connectionMade(self):\n        for line in thedata:\n          if not line or line.isspace():\n            continue\n          self.transport.write(line)\n          time.sleep(1.0)\n        self.transport.loseConnection()\n","1678":"def get_fun(fn):\n    return '.'.join([fn.__module__, fn.__name__])\n","1679":"if np.isfinite(pcov).all():\n    print 'valid'\nelse:\n    print 'invalid'\n","1680":"from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n\ndriver = webdriver.Firefox()\ndriver.get(\"http:\/\/www.chadbourne.com\/search\/people?az[b]=b\")\n\nwait = WebDriverWait(driver, 20)\n\n# get more results\nmore_results = wait.until(\n    EC.element_to_be_clickable((By.CSS_SELECTOR, \".load-more-pager-wrapper .pager-next\"))\n)\nmore_results.click()\n","1681":">>> s = \"238 NEO Sports\"\n>>> s.split(\" \", 1)\n['238', 'NEO Sports']\n","1682":"  set Session = CreateObject(\"Redemption.RDOSession\")\n  set Msg = Session.GetMessageFromMsgFile(\"C:\\Users\\abc.msg\")\n  Msg.SentOn = #5\/17\/2016#\n  Msg.Save\n","1683":"import matplotlib.pyplot as plt\nimport matplotlib.transforms as mtransforms\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(range(10))\nax.set_yticks((2,5,7))\nlabels = ax.set_yticklabels(('really, really, really', 'long', 'labels'))\n\ndef on_draw(event):\n   bboxes = []\n   for label in labels:\n       bbox = label.get_window_extent()\n       # the figure transform goes from relative coords->pixels and we\n       # want the inverse of that\n       bboxi = bbox.inverse_transformed(fig.transFigure)\n       bboxes.append(bboxi)\n\n   # this is the bbox that bounds all the bboxes, again in relative\n   # figure coords\n   bbox = mtransforms.Bbox.union(bboxes)\n   if fig.subplotpars.left < bbox.width:\n       # we need to move it over\n       fig.subplots_adjust(left=1.1*bbox.width) # pad a little\n       fig.canvas.draw()\n   return False\n\nfig.canvas.mpl_connect('draw_event', on_draw)\n\nplt.show()\n","1684":"def arbitrary_tensor(dtype, shape, name=None):\n    # create the type.\n    var_type = theano.tensor.TensorType(\n        dtype=dtype,\n        broadcastable=[False]*len(shape))\n\n    # create the variable from the type.\n    return var_type(name)\n","1685":"INSTALLED_APPS = (\n...\n'cms.plugins.snippet',\n'cms.plugins.flash',\n...\n)\n","1686":"fd = urllib.urlopen(cover)\n# Drop the entire PIL part\ncovr = MP4Cover(fd.read(), getattr(\n            MP4Cover,\n            'FORMAT_PNG' if cover.endswith('png') else 'FORMAT_JPEG'\n        ))\nfd.close() # always a good thing to do\n\naudio['covr'] = [covr] # make sure it's a list\naudio.save()\n","1687":"SELECT * FROM pg_stat_activity WHERE state = 'idle in transaction';\n","1688":"itertools.product(range(2), repeat=4)\n","1689":"df = df.stack().reset_index()\ndf.columns = ['a','b','c']\nprint df\n    a  b  c\n0   A  P  0\n1   A  Q  2\n2   A  R  1\n3   A  S  1\n4   B  P  2\n5   B  Q  0\n6   B  R  1\n7   B  S  1\n8   C  P  1\n9   C  Q  1\n10  C  R  0\n11  C  S  0\n12  D  P  1\n13  D  Q  1\n14  D  R  0\n15  D  S  0\n","1690":"shapes = {'1':Square, '2':Circle, '3':Triangle} # just the class names in the dict\n\nx = shapes[raw_input()]() # get class from dict, then call it to create a shape instance.\n","1691":"python program.py 2>&1 | tee out.log\n","1692":">>> class myClass(object):\n...     def __init__(self,foo,bar):\n...         self.foo = foo\n...         self.bar = bar\n...     def __repr__(self):\n...         return 'myClass({0.foo},{0.bar})'.format(self)\n... \n>>> item = myClass(1,2)\n>>> item\nmyClass(1,2)\n>>> myDict = {}\n>>> myDict[item] = 10\n>>> myDict\n{myClass(1,2): 10}\n","1693":"from pandas.tseries.offsets import DateOffset\n\nend = datetime.datetime(2018 , 6, 1)\nstart = datetime.datetime(2016 ,2, 8)\n#Get the range of months to cover\nmonths = (end.year - start.year)*12 + end.month - start.month\n#The frequency of periods\nperiod = 6 # in months\n\npd.DatetimeIndex([end - DateOffset(months=e) for e in range(0, months, period)][::-1]).insert(0, start)\n","1694":"import picamera\n\nwith picamera.PiCamera() as camera:\n    camera.resolution = (800, 600)\n    camera.start_preview()\n    camera.start_recording('foo.h264')\n    camera.wait_recording(10)\n    camera.capture('foo.jpg', use_video_port=True)\n    camera.wait_recording(10)\n    camera.stop_recording()\n","1695":"import ckan.plugins as plugins\nimport ckan.plugins.toolkit as tk  \nfrom ckan.plugins.toolkit import Invalid\n\ndef date_str_validator(value, context):\n    valid_date = tk.get_validator('isodate')(value, context)\n    if not valid_date or not isinstance(valid_date, datetime.datetime):\n        raise Invalid(\"Invalid date\")\n    return value\n\nclass MyPlugin(plugins.SingletonPlugin, tk.DefaultDatasetForm):\n\n    plugins.implements(plugins.IDatasetForm, inherit=False)\n\n    def _modify_package_schema(self, schema):\n        schema.update({\n            # Custom extras\n            'origination_date':[tk.get_validator('ignore_missing'),\n                                date_str_validator,\n                                tk.get_converter('convert_to_extras')]\n        })\n        return schema\n\n    def create_package_schema(self):\n        schema = super(MyPlugin, self).create_package_schema()\n        schema = self._modify_package_schema(schema)\n\n        return schema\n\n    def update_package_schema(self):\n        schema = super(MyPlugin, self).update_package_schema()\n        schema = self._modify_package_schema(schema)\n        return schema\n\n    def show_package_schema(self):\n        schema = super(MyPlugin, self).show_package_schema()\n\n        schema.update({\n            # Custom extras\n            'origination_date':[tk.get_converter('convert_from_extras'),\n                                tk.get_validator('ignore_missing'),\n                                date_str_validator]\n        })\n\n        return schema\n","1696":"import matplotlib.pyplot as plt\nimport numpy as np\n\n# Make dummy csv file for this example\nfrom io import StringIO \nresult_csv = StringIO(u\"\"\"\nxstuff, data1, data2, data3\n0, 1, 2, 3\n1, 1, 3, 4\n2, 2, 1, 3\n3, 1, 2, 5\n\"\"\")\n\n# Read in csv. Use names=True to also store column headers\nper_data=np.genfromtxt(result_csv,delimiter=',',names=True)\n\n# Loop over columns. Here I assume you have the x-data in the first column, so skip that one\nfor name in per_data.dtype.names[1:]:\n    # Set the line's label to the column name\n    plt.plot(per_data['xstuff'],per_data[name],label=name)\n\n# Add a legend\nplt.legend(loc=0)\n\nplt.xlabel ('x stuff')\nplt.ylabel ('y stuff')\nplt.title('my test result')\nplt.grid()\nplt.show()\n","1697":"df[columns_to_sub] = df[columns_to_sub] - means.loc[df.absorb,columns_to_sub].values\n>>> df\n    absorb         a         b         c\n0        2 -0.060540 -0.270233  0.416213\n1        9  0.597084  0.136158  0.415023\n2        1 -0.131393 -0.535288  0.158465\n3        3  0.282902 -0.008801  0.872598\n4        9 -0.236306 -0.337588  0.297589\n5        6  0.000000  0.000000  0.283559\n6        3  0.022021 -0.110693  0.671295\n7        7  0.042000 -0.327157  0.736395\n8        1  0.097912  0.119899  0.409241\n9        1 -0.460052  0.280302  0.341200\n10       1  0.002855 -0.013902  0.648113\n11       1  0.490679  0.148989  0.626300\n12       8  0.000000  0.000000  0.986039\n13       3 -0.304923  0.119494  0.553210\n14       0  0.000000  0.000000  0.626576\n15       5  0.000000  0.000000  0.105102\n16       2 -0.166760 -0.122624  0.750912\n17       2  0.227300  0.392857  0.498822\n18       7 -0.042000  0.327157  0.323361\n19       9 -0.360778  0.201430  0.521043\n","1698":"         for message in prioritize():\n            if DontSendEntry.objects.has_address(message.to_address):\n                logging.info(\"skipping email to %s as on don't send list \" % message.to_address)\n                MessageLog.objects.log(message, 2) # @@@ avoid using literal result code\n                message.delete()\n                dont_send += 1\n            elif message.when_to_send > datetime.datetime.now():\n                continue\n            else:\n                try:\n                  ... the rest of your code ...\n","1699":"import requests\n\n\nlinks = ['link.pdf']\nfor link in links:\n    book_name = link.split('\/')[-1]\n    with open(book_name, 'wb') as book:\n        a = requests.get(link, stream=True)\n\n        for block in a.iter_content(512):\n            if not block:\n                break\n\n            book.write(block)\n","1700":"import re\n\nr = re.compile(r\"(\\w+)\\[(\\d+)(?::(\\d+))?\\]\")\n\ndef expand_seq(seq):\n    result = []\n    for item in seq:\n        m = r.match(item)\n        name, start, end = m.group(1), int(m.group(2)), m.group(3)\n        rng = xrange(start, int(end)) if end else (start,)\n        t = name + \"[\"\n        result.extend(t + str(i) + \"]\" for i in rng)\n    return result\n","1701":"new_dict = {my_mod(key): my_dict[key] for key in my_dict}\n","1702":"from __future__ import print_function\nfrom collections import deque\nimport threading\nimport time\nfrom twisted.internet import reactor\nfrom twisted.internet.protocol import Factory, Protocol\n\nclass MsgReceiver(Protocol):\n    def __init__(self, myQueue):\n        self.myQueue = myQueue\n\n    def connectionMade(self):\n        print(\"Connection made!\")\n\n    def dataReceived(self, msg):\n        self.myQueue.append(msg)\n\nclass MsgReceiverFactory(Factory):\n    def __init__(self, myQueue):\n        self.myQueue = myQueue\n\n    def buildProtocol(self, addr):\n        return MsgReceiver(self.myQueue)\n\ndef showMessages(myQueue):\n    while True:\n        time.sleep(1)\n        try:\n            msg = myQueue.popleft()\n            print(msg)\n        except IndexError:\n            print(\"No messages in the queue\")\n\nmyQueue = deque()\n\nfactory = MsgReceiverFactory(myQueue)\np = threading.Thread(target=showMessages, args=(myQueue,))\np.daemon = True\np.start()\n\nreactor.listenTCP(42000, factory)\nreactor.run()\n","1703":"ones = []\npos = 0\nwhile val:\n   if val & 1:\n      ones.append(pos)\n   pos += 1\n   val >>= 1\n","1704":">>> import re\n>>> data = \"\"\"\n... \/posts\/eb8c6d25-8784-4cdf-b016-4d8f6df64a62?mc_cid=37387dcb5f&mc_eid=787bbeceb2\n... \/posts\/d78fa5da-4cbb-43b5-9fae-2b5c86f883cb\/uid\/7034\n... \/posts\/5ff0021c-16cd-4f66-8881-ee28197ed1cf\n... \"\"\"\n>>> \n>>> re.findall(r\"\/posts\/([A-Za-z0-9\\-]+)\", data)\n['eb8c6d25-8784-4cdf-b016-4d8f6df64a62', \n 'd78fa5da-4cbb-43b5-9fae-2b5c86f883cb', \n '5ff0021c-16cd-4f66-8881-ee28197ed1cf']\n","1705":"from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport csv\n\nmark_font=3\nlats=lons=population=[]\nfilename = 'D:\/22_sept_14\/mvsf.csv'\nwith open(filename) as f:\n    reader = csv.reader(f)\n    for row in reader:\n        lats.append(float(row[0]))\n        lons.append(float(row[1]))\n        population.append(float(row[2]))\n\nm = Basemap(projection='robin', resolution = 'l', area_thresh = 10000.0,\n              lat_0=0, lon_0=0)\nm.drawcoastlines()\nm.drawcountries()\nm.fillcontinents(color = 'gray')\nm.drawmapboundary(fill_color='aqua')\nm.drawmeridians(np.arange(0, 360, 30))\nm.drawparallels(np.arange(-90, 90, 30))\n# fill continents, set lake color same as ocean color.\n# draw parallels and meridians.\n# label parallels on right and top\n# meridians on bottom and left\nparallels = np.arange(0.,81,10.)\n# labels = [left,right,top,bottom]\nm.drawparallels(parallels,labels=[False,True,True,False])\nmeridians = np.arange(10.,351.,20.)\nm.drawmeridians(meridians,labels=[True,False,False,True])\n# plot blue dot on Boulder, colorado and label it as such.\nlon, lat = -100.237, 49.125 # Location of Boulder\n# convert to map projection coords.\n# Note that lon,lat can be scalars, lists or numpy arrays.\nxpt,ypt = m(lon,lat)\n# convert back to lat\/lon\nlonpt, latpt = m(xpt,ypt,inverse=True)\nm.plot(xpt,ypt,'go',markersize=17*mark_font,alpha=.8)  # plot a blue dot there\n# put some text next to the dot, offset a little bit\n# (the offset is in map projection coordinates)\nplt.text(xpt,ypt,'17%' , fontsize=17,color='w')\n\n\nlon, lat = -104.237, 40.125 # Location of Boulder\n# convert to map projection coords.\n# Note that lon,lat can be scalars, lists or numpy arrays.\nxpt,ypt = m(lon,lat)\n# convert back to lat\/lon\nlonpt, latpt = m(xpt,ypt,inverse=True)\nm.plot(xpt,ypt,'ro',markersize=16*mark_font,alpha=.8)  # plot a blue dot there\n# put some text next to the dot, offset a little bit\n# (the offset is in map projection coordinates)\nplt.text(xpt,ypt,'16%' , fontsize=16,color='w')\n\nplt.show()\n","1706":"from multiprocessing import Pool\n\ndef process_image(name):\n    sci=fits.open('{}.fits'.format(name))\n    <process>\n\nif __name__ == '__main__':\n    pool = Pool(processes=4)              # process per core\n    pool.map(process_image, data_inputs)  # proces data_inputs iterable with pool\n","1707":"firstFS = FS.FloatSpin(self, -1, min_val=0, max_val=None, increment=1, value=1, agwStyle=FS.FS_RIGHT)\nfirstFS.SetName('firstFS')  # for example\nsecondFS = FS.FloatSpin(self, -1, min_val=0, max_val=None, increment=1, value=1, agwStyle=FS.FS_RIGHT)\nsecondFS.SetName('secondFS')  # for example\n\nself.Bind(FS.EVT_FLOATSPIN, self.OnFloatSpin)\n\ndef OnFloatSpin(self, event):\n    floatspin = event.GetEventObject()\n    floatspinID = event.GetId()  # grab the widgets id that is firing the event\n    '''OR'''\n    floatspinName = event.GetEventObject().GetName()  # grab the widget name\n","1708":"from collections import defaultdict\ncounts = defaultdict(int)\nwith open(\"file.txt\") as f:\n    for line in f:\n        id, content = line.split(\"\\\\t\")\n        if \"$\" in content:\n            counts[id] += 1\n","1709":"sort input-file.txt | uniq -u -w 3\n","1710":">>> x = {}\n>>> x['A1760ulorenaf0821x151031175821564'] = [1, 0]\n>>> x['A1760ulorenaf0821x151031175821564'][1] += 1  # increment the second element.\n>>> x\n{'A1760ulorenaf0821x151031175821564': [1, 1]}\n","1711":"from random import randint;\n\nclass MatterEnergyData:\n    def __init__(self, inputMatter, inputEnergy, resultMatter, resultEnergy):\n        self.inputMatter = inputMatter\n        self.inputEnergy = inputEnergy\n        self.resultMatter = resultMatter\n        self.resultEnergy = resultEnergy\n\n    def __str__(self):\n        return \"Result matter: %s\\r\\nResult energy: %s\" % \\ \n            self.resultMatter, self.resultEnergy\n\nclass simpleAI:\n    matterEnergyDataPoints = []\n\n    def cycle(self):\n        inputMatter = int(input(\"Matter: \"))\n        inputEnergy = int(input(\"Energy: \"))\n        resultObj = None\n        for obj in self.matterEnergyDataPoints:\n            if obj.inputEnergy == inputEnergy and obj.inputMatter == inputMatter:\n                print(\"Found positive pair from memory\")\n                resultObj = obj\n                break\n\n        if resultObj == None:\n            print(\"Creating new pair...\")\n            resultObj = MatterEnergyData(inputMatter, inputEnergy, randint(0, 256), randint(0, 256))\n            self.matterEnergyDataPoints.append(resultObj)\n\n        print resultObj\n","1712":"for k,v in d.iteritems():\n    if k.startswith('ev'):\n        result = v\n        break\nelse:\n    raise KeyError()  # or set to default value\n","1713":"import pandas as pd\n\ndata = pd.read_csv(\"test_rand.csv\")\nfare = pd.read_csv(\"test_fare.csv\")\n\nmerged = pd.merge(data, fare, how='left', on=['medallion', 'hack_license', 'pickup_datetime'])\nmerged.to_csv(\"merged.csv\", index=False)\n","1714":"jsonresponse = json.loads(response.body_as_unicode())\n","1715":"data_files=[(\"\/usr\/local\/bin\", glob(\"bin\/*\"))], ...\n","1716":"grep -P '^(?=.*\\bdavid@gmail\\.com\\b)(?=.*\/api\/upitem\/)' .\/file.log\n","1717":"lists = [[7, 6, 1, 8, 3],\n[1, 7, 2, 4, 2],\n[5, 6, 4, 2, 3],\n[0, 3, 3, 1, 6],\n[3, 5, 2, 14, 3],\n[3, 11, 9, 1, 1],\n[1, 10, 2, 3, 1]]\n\nfor i in range(0, len(lists[1])):\n    for j in range(0, len(lists)):\n        print lists[j][i],\n    print \"\\n\"\n","1718":"import csv\nfrom collections import defaultdict\n\ndb = defaultdict(list)\nwith open('csvfile.csv') as f:\n     csvreader = csv.reader(f)\n     for row in csvreader:\n         db[row[0]].append((row[1], row[4], row[5], row[6]))\n\nreturn db\n","1719":"s1='*'*100000\ns2='+'*100000\n","1720":"name = os.path.join(os.path.dirname(__file__) or  \".\", \"binary_file.out\")\nsubprocess.Popen(name)\n","1721":"TEMPLATE_DIRS = (\nos.path.join(BASE_DIR,  'templates'),\n","1722":"urllib.urlopen('http:\/\/localhost:8082\/v3\/nodes?{}'.format(query))\n","1723":"from kivy.core.window import Window\nwith self.canvas:\n    self.translate = Translate(Window.width \/ 2, Window.height \/ 2.)\n","1724":"for field in User._meta.get_sorted_fields():\n    print field.name\n","1725":"raise HTTP(503, '<html><body>Down for maintenance<\/body><\/html>')\n","1726":"from selenium import webdriver\n\nbrowser = webdriver.Chrome() # Get local session of Chrome\nbrowser.get(\"http:\/\/www.somepage.com\") # Load page\n\nelem = browser.find_element_by_id(\"show_links\") # Find javascript button\nelem.click() # Click on the button that 'populates the div'\n","1727":"tuple(int(x.strip()) for x in raw_input().split(','))\n","1728":"lst = [['a', 'b', 'c'], [1, 2, 3], ['x', 'y']]\nresult = []  # collect your products\n\n# n sublists: iterate over all 'sub_lengthes'\nfor length in xrange(1, len(lst)+1):\n    # iterate over all possible combinations of sublists\n    for c in itertools.combinations(lst, length):\n        # iterate over all products for each combination\n        for res in itertools.product(*c):\n            result.append(res)\n\nprint(result)\n\n>>> result\n# 3 + 3 + 2 = 8 singletons \n[('a',), ('b',), ('c',), (1,), (2,), (3,), ('x',), ('y',), \n# 3*3 + 3*2 + 3*2 = 21 pairs\n('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3), ('c', 1), ('c', 2), ('c', 3), \n('a', 'x'), ('a', 'y'), ('b', 'x'), ('b', 'y'), ('c', 'x'), ('c', 'y'),\n(1, 'x'), (1, 'y'), (2, 'x'), (2, 'y'), (3, 'x'), (3, 'y'), \n# 3*3*2 = 18 triplets\n('a', 1, 'x'), ('a', 1, 'y'), ('a', 2, 'x'), ('a', 2, 'y'), ('a', 3, 'x'), ('a', 3, 'y'), ('b', 1, 'x'), ('b', 1, 'y'), ('b', 2, 'x'), ('b', 2, 'y'), ('b', 3, 'x'), ('b', 3, 'y'), ('c', 1, 'x'), ('c', 1, 'y'), ('c', 2, 'x'), ('c', 2, 'y'), ('c', 3, 'x'), ('c', 3, 'y')]\n","1729":"[foo.bar for foo in foos]\n","1730":" (r.expr(list_)\n   .concatMap(lambda filts_rank:\n      r.table(...)\n       .has_fields(r.args(filts_rank[0]))\n       .merge({'ranking': filts_rank[1]}))\n ).run(...)\n","1731":"import cv2\nnew_data = data.T[::-1]\n\n# calculate the pixel coordinates of the\n# computational domain corners in the data array\nw,e,s,n = map_extent\ndx = float(e-w)\/new_data.shape[1]\ndy = float(n-s)\/new_data.shape[0]\nx = (lon.ravel()-w)\/dx\ny = (n-lat.ravel())\/dy\n\ncomputational_domain_corners = np.float32(zip(x,y))\n\ndata_array_corners = np.float32([[0,new_data.shape[0]],\n                                 [0,0],\n                                 [new_data.shape[1],new_data.shape[0]],\n                                 [new_data.shape[1],0]])\n\n# Compute the transformation matrix which places\n# the corners of the data array at the corners of\n# the computational domain in data array pixel coordinates\ntranformation_matrix = cv2.getPerspectiveTransform(data_array_corners,\n                                                   computational_domain_corners)\n\n# Make the transformation making the final array the same shape\n# as the data array, cubic interpolate the data placing NaN's\n# outside the new array geometry\nmapped_data = cv2.warpPerspective(new_data,tranformation_matrix,\n                                  (new_data.shape[1],new_data.shape[0]),\n                                  flags=2,\n                                  borderMode=0,\n                                  borderValue=np.nan)\n","1732":"In [102]:\n\ndf = pd.DataFrame({'detect':np.random.randn(5), 'event':np.arange(5)})\ndf\nOut[102]:\n     detect  event\n0 -0.815105      0\n1 -0.656923      1\n2 -1.417722      2\n3  0.210070      3\n4  0.211728      4\nIn [103]:\n\ndf.ix[0,'detect'] = df.ix[0,'event']\ndf\nOut[103]:\n     detect  event\n0  0.000000      0\n1 -0.656923      1\n2 -1.417722      2\n3  0.210070      3\n4  0.211728      4\n","1733":"def __setitem__(self, key, value, dict_setitem=dict.__setitem__):\n    'od.__setitem__(i, y) <==> od[i]=y'\n    # Setting a new item creates a new link at the end of the linked list,\n    # and the inherited dictionary is updated with the new key\/value pair.\n    if key not in self:\n        root = self.__root\n        last = root[0]\n        last[1] = root[0] = self.__map[key] = [last, root, key]\n    return dict_setitem(self, key, value)\n","1734":">>> cmap = dict(zip(df.prime.unique(), colors))\n>>> cmap\n{23: 'Purple', 2: 'DarkOrange', 3: 'DeepSkyBlue', 7: 'Yellow'}\n>>> df[\"color\"] = df[\"prime\"].replace(cmap)\n>>> df\n   prime        color\n0      2   DarkOrange\n1      2   DarkOrange\n2      2   DarkOrange\n3      3  DeepSkyBlue\n4      7       Yellow\n5      7       Yellow\n6     23       Purple\n","1735":"def recv():\n    while True:\n         data = s.recv(1024)\n         if not data: sys.exit(0)\n         print data\n\nThread(target=recv).start()\n","1736":"select *\nfrom sys.tables\n\nselect *\nfrom sys.all_columns\n\nselect *\nfrom sys.views\n\nselect *\nfrom sys.syscomments\n","1737":"def main():\n    root = Tk()\n    root.overrideredirect(1)\n    root.geometry('500x250+500+200')\n    app = Application(root)\n    app.parent.configure(background = 'gray32')\n    root.resizable(width=FALSE, height=FALSE)\n    app.mainloop()\n","1738":"from subprocess import Popen\np = Popen(['\/full\/path\/to\/ppshelper', '-sms', '15062929382','warning'])\np.terminate()\n","1739":">>> l = [(1, 2, 3, 4, 5)]\n>>> [item for tup in l for item in tup]\n[1, 2, 3, 4, 5]\n","1740":"text = u'\u00e9tourdi, etourdi, \u00e9tourdi, pr\u00e9chauffer'\nwords = re.findall(r'\\w+', text, re.U)\ncap_words = [unidecode.unidecode(word).upper() for word in words]\n","1741":"  pngcrush -rem gAMA -rem cHRM -rem iCCP -rem sRGB -brute -l 9 -max -reduce -m 0 -q IMAGE\n  optipng -o7 -q pngout.png\n  pngout pngout.png -q -y -k0 -s0\n  advpng -z -4 pngout.png > \/dev\/null\n","1742":"from collections import namedtuple\nMyType= namedtuple(\"MyType\", \"field1 method1\")\nx = MyType(field1=\"3\", method1=lambda x: x+1)\nprint x.field1, x.method1(3)\n","1743":"In [3]: def importCSVtoTable(file, table, columns):\n   ...:     # 'mock' data to simulate a reader\n   ...:     reader = [{'SEGMENT': 2, 'Comp 1': 'dogs'}, {'Comp 2': 'cats', 'OTHERTHING': 4}\n   ...:     print [[row[label] for label in columns if label in row] for row in reader]\n   ...:\n\nIn [4]: importCSVtoTable(None, None, ['SEGMENT', 'Comp 1'])\n[[2, 'dogs'], []]\n\nIn [5]: importCSVtoTable(None, None, ['SEGMENT', 'Comp 1', 'Comp 2'])\n[[2, 'dogs'], ['cats']]\n","1744":"pl = readPlist(pathOrFile)\nprint(pl[\"1\"])\n","1745":"from datetime import datetime\n\ndates = ['2014-01-01', '2014-03-07']\ndate_objects = [datetime.strptime(date, '%Y-%m-%d').date()\n                     for date in dates]\n","1746":"import Image\n\nimages = ['image.jpg','image.jpg','image.jpg','image.jpg','image.jpg','image.jpg','image.jpg']\n\nhsize = min(5,len(images))\nvsize = (len(images)\/5) + 1\n\nprint hsize,vsize\n\nvspace = 10\nhspace = 10\n\n(h,w) = Image.open(images[0]).size\n\nim = Image.new('RGB',((hsize*(h+hspace)),(vsize*(w+vspace)) ))\n\nfor i,filename in enumerate(images):\n    imin = Image.open(filename).convert('RGB')\n    xpos = i % hsize\n    ypos = i \/ hsize\n    print xpos,ypos\n    im.paste(imin,(xpos*(h+hspace),ypos*(w+vspace)))\nim.save('output.jpg')\n","1747":"title2 = planTitle.findAll(\"h3\")[1]\n","1748":"import dns.resolver\ndomain = 'bbc.co.uk'\nresults = []\nfor x in dns.resolver.query(domain,'MX',):\n    results.append(x.to_text().split(' ')[1])\nprint results\n\n>>> ['cluster1.eu.messagelabs.com.', 'cluster1a.eu.messagelabs.com.']\n","1749":"from functools import wraps\n\n\ndef yourdecorator(func):\n    @wraps(func):\n    def wrapper(*args, **kw):\n        result = func(*args, **kw)\n        if result in certain_values:\n            adjust_other_configuration()\n        return result\n    return wrapper\n","1750":"class WorkloadPutSerializer(serializers.Serializer):\n\n    vdi = VdiSerializer(required = False)\n    db = DbSerializer(required = False)\n    pk = serializers.IntegerField(read_only=True)\n\n    def validate(self, data):\n        \"\"\"\n        Check if at least one of data['vdi'] or data['vm']\n        exists and then return the data. Otherwise raise \n        ValidationError. \n        \"\"\"\n        if data['vdi'] or data['vm']:\n            return data\n        else:\n            raise serializers.ValidationError(\"No No No\")\n","1751":"areas = relationship('DbArea',\n    backref = backref('routes', order_by = 'DbRoute.name'),\n    secondary = area_relationship_table,\n    primaryjoin = area_id == area_relationship_table.c.descendent,\n    secondaryjoin = DbArea.area_id == area_relationship_table.c.ancestor,\n    innerjoin = True, order_by = DbArea.name,\n    foreign_keys =\n       [area_relationship_table.c.ancestor,\n            area_relationship_table.c.descendent]) \n","1752":"string1.rstrip(\"-\")\n# \"title\"\nstring2.rstrip(\"-\")\n# \"title\"\nstring3.rstrip(\"-\")\n# \"title-is-a-title\"\n","1753":"Choice1 = input(\" Pick up the box or leave it alone? (p or l): \").lower()\nRepGain(Choice1)\nprint(Advent, curAdvRep)\n\n\n# Function for gain \ndef RepGain (Choice):\n    global curAdvRep\n    global curCrmRep\n    global Advent\n    global Crimson\n\n    if Choice in PathSelDict:\n        if Choice == 'p':\n            print('Reputation Gain\\nAdvent + 100')\n            curAdvRep += 100\n            return curAdvRep\n        elif Choice == 'l':\n            print('Crimson + 100')\n            curCrmRep += 100\n            return curCrmRep \n        else:\n            print(Dismiss)\n            sys.exit(0)\n\nOutput:\nReputation Gain\nAdvent + 100\nAdvent of Chaos reputation: 100\n","1754":" with open(\"output.csv\", \"w\") as f:\n     w = csv.writer(f)\n","1755":"pip install modulename --download ~\/folder_to_store_downloads\n","1756":"''' Returns frequency of function words '''\ndef get_func_word_freq(words,funct_words):\n    fdist = nltk.FreqDist([funct_word for funct_word in funct_words if funct_word in words]) \n    funct_freq = {}    \n    for key,value in fdist.iteritems():\n        funct_freq[key] = value\n    return funct_freq\n\n''' Read LIWC 2007 English dictionary and extract function words '''\ndef load_liwc_funct():\n    funct_words = set()\n    data_file = open(liwc_dict_file, 'rb')\n    lines = data_file.readlines()\n    for line in lines:\n        row = line.rstrip().split(\"\\t\")\n        if '1' in row:\n            if row[0][-1:] == '*' :\n                funct_words.add(row[0][:-1])\n            else :\n                funct_words.add(row[0])\n    return list(funct_words)\n","1757":"if any(isInvalid(x) for x in myList):\n   #reject\n","1758":"sql_insert = 'INSERT INTO \"tempHoods\" (nbhd_id, nbhd_name, typology, notes, geom) values '\nsql_values = ['(%s, %s, %s, %s, %s)']\n\n\ndata_values = []\n# you can make this larger if you want\n# ...try experimenting to see what works best\nbatch_size = 100 \nsql_stmt = sql_insert + ','.join(sql_values*batch_size) + ';'\nfor i, row in enumerate(rows, 1):\n    data_values += row[:5]\n    if i % batch_size == 0:\n        curQa.execute (sql_stmt , data_values )\n        data_values = []\nif (i % batch_size != 0):\n    sql_stmt = sql_insert + ','.join(sql_values*(i % batch_size)) + ';'\n    curQa.execute (sql_stmt , data_values )\n","1759":"class DecoratorFactory(object):\n    def __init__(self, value):\n        self._value = value\n\n    def decorator(self, function):\n        def wrapper(*args, **kwargs):\n            print(self._value)\n            return function(*args, **kwargs)\n        return wrapper\n\nfactory = DecoratorFactory(\"shared between all decorators\")\n\n@factory.decorator\ndef dummy1():\n    print(\"dummy1\")\n\n@factory.decorator    \ndef dummy2():\n    print(\"dummy2\")\n\n# prints:\n# shared between all decorators\n# dummy1\ndummy1()\n\n# prints:\n# shared between all decorators\n# dummy2\ndummy2()\n","1760":"import datetime\n...\ndate=time.strptime(argv[1], \"%y-%m-%d\");\nnewdate=date + datetime.timedelta(days=1)\n","1761":"from kivy.base import runTouchApp\nfrom kivy.lang import Builder\nfrom kivy.factory import Factory\nfrom kivy.properties import ListProperty, ObjectProperty\nfrom kivy.uix.dropdown import DropDown\nfrom kivy.uix.button import Button\n\nclass MultiSelectSpinner(Button):\n    \"\"\"Widget allowing to select multiple text options.\"\"\"\n\n    dropdown = ObjectProperty(None)\n    \"\"\"(internal) DropDown used with MultiSelectSpinner.\"\"\"\n\n    values = ListProperty([])\n    \"\"\"Values to choose from.\"\"\"\n\n    selected_values = ListProperty([])\n    \"\"\"List of values selected by the user.\"\"\"\n\n    def __init__(self, **kwargs):\n        self.bind(dropdown=self.update_dropdown)\n        self.bind(values=self.update_dropdown)\n        super(MultiSelectSpinner, self).__init__(**kwargs)\n        self.bind(on_release=self.toggle_dropdown)\n\n    def toggle_dropdown(self, *args):\n        if self.dropdown.parent:\n            self.dropdown.dismiss()\n        else:\n            self.dropdown.open(self)\n\n    def update_dropdown(self, *args):\n        if not self.dropdown:\n            self.dropdown = DropDown()\n        values = self.values\n        if values:\n            if self.dropdown.children:\n                self.dropdown.clear_widgets()\n            for value in values:\n                b = Factory.MultiSelectOption(text=value)\n                b.bind(state=self.select_value)\n                self.dropdown.add_widget(b)\n\n    def select_value(self, instance, value):\n        if value == 'down':\n            if instance.text not in self.selected_values:\n                self.selected_values.append(instance.text)\n        else:\n            if instance.text in self.selected_values:\n                self.selected_values.remove(instance.text)\n\n    def on_selected_values(self, instance, value):\n        if value:\n            self.text = ', '.join(value)\n        else:\n            self.text = ''\n\n\nkv = '''\nBoxLayout:\n    orientation: 'vertical'\n\n    BoxLayout:\n\n        Label:\n            text: 'Select city'\n\n        MultiSelectSpinner:\n            id: city\n            values: 'Sydney', 'Moscow', 'Warsaw', 'New York', 'Tokio'\n\n    BoxLayout:\n\n        Label:\n            text: 'Select your favorite food'\n\n        MultiSelectSpinner:\n            id: food\n            values: 'Fish and chips', 'Hot-dog', 'Hamburger'\n\n    Label:\n        text: 'You selected {} cities and {} as your favourite food.'.format(city.text, food.text)\n\n<MultiSelectOption@ToggleButton>:\n    size_hint: 1, None\n    height: '48dp'\n\n'''\n\nrunTouchApp(Builder.load_string(kv))\n","1762":"class MyView(QtGui.QGraphicsView):\n    def mousePressEvent(self, event):\n        if event.button() == Qt.MidButton:\n            self.__prevMousePos = event.pos()\n        else:\n            super(MyView, self).mousePressEvent(event)\n\n    def mouseMoveEvent(self, event):\n        if event.buttons() == Qt.MidButton:\n            offset = self.__prevMousePos - event.pos()\n            self.__prevMousePos = event.pos()\n\n            self.verticalScrollBar().setValue(self.verticalScrollBar().value() + offset.y())\n            self.horizontalScrollBar().setValue(self.horizontalScrollBar().value() + offset.x())\n        else:\n            super(MyView, self).mouseMoveEvent(event)\n","1763":"if re.match(\"[A-Za-z0-9,.$:<>&=-]|\\n\", char):\n","1764":"In [17]:\ng = np.cumsum(df.iloc[: , 0] == 'name')\n\nIn [15]:\ndf.groupby(g).apply(lambda x : pd.DataFrame(x.set_index([0]).T , columns=['name' , 'gender' , 'year' , 'country' , 'city']) )\nOut[15]:\n        name    gender  year   country  city\n0                       \n1   1   Jack    M      1993    USA      Odessa\n2   1   John    M      1992    NaN      NaN\n3   1   Sam    NaN      NaN    Canada   Toronto\n","1765":"result = urlfetch.fetch(\"http:\/\/www.domain.com\/\",\n                        headers={\"Authorization\": \n                                 \"Basic %s\" % base64.b64encode(\"username:password\")})\n","1766":"import timeit\nfrom itertools import tee, izip, islice\n\ndef isplit(source, sep):\n    sepsize = len(sep)\n    start = 0\n    while True:\n        idx = source.find(sep, start)\n        if idx == -1:\n            yield source[start:]\n            return\n        yield source[start:idx]\n        start = idx + sepsize\n\ndef pairwise(iterable, n=2):\n    return izip(*(islice(it, pos, None) for pos, it in enumerate(tee(iterable, n))))\n\ndef zipngram(text, n=2):\n    return zip(*[text.split()[i:] for i in range(n)])\n\ndef zipngram2(text, n=2):\n    words = text.split()\n    return pairwise(words, n)\n\n\ndef zipngram3(text, n=2):\n    words = text.split()\n    return zip(*[words[i:] for i in range(n)])\n\ndef zipngram4(text, n=2):\n    words = isplit(text, ' ')\n    return pairwise(words, n)\n\n\ns = \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\ns = s * 10 ** 3\n\nres = []\nfor n in range(15):\n\n    a = timeit.timeit('zipngram(s, n)', 'from __main__ import zipngram, s, n', number=100)\n    b = timeit.timeit('list(zipngram2(s, n))', 'from __main__ import zipngram2, s, n', number=100)\n    c = timeit.timeit('zipngram3(s, n)', 'from __main__ import zipngram3, s, n', number=100)\n    d = timeit.timeit('list(zipngram4(s, n))', 'from __main__ import zipngram4, s, n', number=100)\n\n    res.append((a, b, c, d))\n\na, b, c, d = zip(*res)\n\nimport matplotlib.pyplot as plt\n\nplt.plot(a, label=\"zipngram\")\nplt.plot(b, label=\"zipngram2\")\nplt.plot(c, label=\"zipngram3\")\nplt.plot(d, label=\"zipngram4\")\nplt.legend(loc=0)\nplt.show()\n","1767":"import requests\nimport sys\nimport time\n\ndef downloadFile(url, directory) :\n  localFilename = url.split('\/')[-1]\n  with open(directory + '\/' + localFilename, 'wb') as f:\n    start = time.clock()\n    r = requests.get(url, stream=True)\n    total_length = r.headers.get('content-length')\n    dl = 0\n    if total_length is None: # no content length header\n      f.write(r.content)\n    else:\n      for chunk in r.iter_content(1024):\n        dl += len(chunk)\n        f.write(chunk)\n        done = int(50 * dl \/ total_length)\n        sys.stdout.write(\"\\r[%s%s] %s bps\" % ('=' * done, ' ' * (50-done), dl\/\/(time.clock() - start)))\n        print ''\n  return (time.clock() - start)\n\ndef main() :\n  if len(sys.argv) > 1 :\n        url = sys.argv[1]\n  else :\n        url = raw_input(\"Enter the URL : \")\n  directory = raw_input(\"Where would you want to save the file ?\")\n\n  time_elapsed = downloadFile(url, directory)\n  print \"Download complete...\"\n  print \"Time Elapsed: \" + time_elapsed\n\n\nif __name__ == \"__main__\" :\n  main()\n","1768":"from django.contrib.humanize.templatetags.humanize import intcomma\n\nclass ProductMaxIPPortEldCountMonthlyTable(tables.Table):                      \n    ip_count = tables.Column()\n\n    def render_ip_count(self, value):\n        return intcomma(value)\n","1769":"import re\nstring = \"blabla Oxygen:      10.10 blabla\"\nregex_oxygen = re.compile('''Oxygen:\\W+([0-9.]*)''')\nresult = re.findall(regex_oxygen,string)\nprint result\n","1770":" SELECT * FROM Table1 AS t1 \n    JOIN table3 as t3 ON t1.ID_table1 = t3.ID_table1\n    JOIN table2 as t2 ON t1.ID_table1 = t2.ID_table1\n    JOIN table4 as t4 ON t2.ID_table2 = t4.ID_table2\n","1771":"f = r\"\"\"awk -F\"\\t\" '{print$5\" \"$6\" \"$7}' file.txt | sort | uniq -c\"\"\"\n","1772":"def telnet_service(resource, documents):\n    \"\"\" \n        fetch data from telnet device;\n        update 'documents' accordingly \n    \"\"\"\n    pass\n\napp = Eve()\napp.on_insert += telnet_service\n\nif __name__ == \"__main__\":\n    app.run()\n","1773":"In [11]: df = pd.DataFrame([[1, 2], [1, 4], [1, 6], [2, 8]], columns=['A', 'B'])\n\nIn [12]: df\nOut[12]:\n   A  B\n0  1  2\n1  1  4\n2  1  6\n3  2  8\n\nIn [13]: df.head(2)  # the first two rows\nOut[13]:\n   A  B\n0  1  2\n1  1  4\n\nIn [14]: df.groupby('A').head(2)  # the first two rows in each group\nOut[14]:\n   A  B\n0  1  2\n1  1  4\n3  2  8\n","1774":"import urllib2\n\ntry:\n    response = urllib2.urlopen('https:\/\/example.com') \n    print 'response headers: \"%s\"' % response.info()\nexcept IOError, e:\n    if hasattr(e, 'code'): # HTTPError\n        print 'http error code: ', e.code\n    elif hasattr(e, 'reason'): # URLError\n        print \"can't connect, reason: \", e.reason\n    else:\n        raise\n","1775":"In [11]: df = pd.DataFrame([[1, 2], [3, 4]], ['a', 'b'], ['A', 'B'])\n\nIn [12]: df\nOut[12]: \n   A  B\na  1  2\nb  3  4\n\nIn [13]: df.iloc[0]  # first row in a DataFrame\nOut[13]: \nA    1\nB    2\nName: a, dtype: int64\n\nIn [14]: df['A'].iloc[0]  # first item in a Series (Column)\nOut[14]: 1\n","1776":"import hashlib\nclass Image(models.Model):\n#...\n    def save(self, *args, **kwargs):\n        super(Image, self).save(*args, **kwargs)\n        f = self.image_file.open('rb')\n        hash = hashlib.sha1()\n        if f.multiple_chunks():\n           for chunk in f.chunks():\n              hash.update(chunk)\n        else:    \n              hash.update(f.read())\n        f.close()\n        self.sha1 =  hash.hexdigest()\n        self.filesize = self.image_file.size \n","1777":"normalize-space(\/\/tr[contains(td,\"Description\")]\/following-sibling::tr[1]\/td)\n","1778":"def test_memo__function_should_be_called_once_for_same_arg(self):\n    @memo\n    def f(arg):\n        f.call_count += 1\n        return arg\n    f.call_count = 0\n\n    self.assertEqual(f(1), 1)\n    self.assertEqual(f(1), 1)\n    self.assertEqual(f.call_count, 1)\n\n    self.assertEqual(f(2), 2)\n    self.assertEqual(f(2), 2)\n    self.assertEqual(f(2), 2)\n    self.assertEqual(f.call_count, 2)\n","1779":"file = open(\"test\",\"ab\")\nfile.seek(50,0)\ndumped= cPickle.dumps(object)\nfile.write(dumped)\nfile.close()\n","1780":"from collections import defaultdict\n\ndate_parse = re.compile(r'Date:\\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)')\n\nc = defaultdict(int)\n\nfor line in sys.stdin:\n    m = date_parse.match(line)\n    if m is None:\n        # pattern did not match\n        # could handle error or log it here if desired\n        continue # skip to handling next input line\n    month = m.group(1)\n    c[month] += 1\n","1781":"1. Add layout to your main window.\n2. Right click main window and click 'layout vertically' as you want button below \n   the text area\n3. Then add(drag-n-drop) your text area inside vertical area.\n4. Add button and what not....\n5. Have a look at  'http:\/\/doc.qt.io\/qt-4.8\/designer-layouts.html' google for    \n   properties of layout like alignment of element. size, orientation.\n","1782":"data: {steamid: \"<?php echo $steamprofile['steamid']?>\"},\n","1783":"v = [8.4, 12.1, 36.2]\nprint(\"What v do you want to be zero?\")\nprint(\"    1 = v1\")\nprint(\"    2 = v2\")\nprint(\"    3 = v3\")\na = int(input(\"Enter your choice: \"))\nv[a - 1] = 0\nprint(v)\n","1784":"import matplotlib.pyplot as plt\nimport numpy as np\ndef plotStuff():\n    lines = plt.plot(np.random.rand(20))\n    color = lines[0].get_color()\n    plt.plot(np.random.rand(20),color = color,label = \"_nolegend_\" )\nplotStuff()\n","1785":">>> re.findall(\"a+\", 'sdaaddaa')\n['aa', 'aa']\n","1786":">>> from dateutil.parser import parse\n>>> s = 'Mar 31st, 2014'\n>>> parse(s)\ndatetime.datetime(2014, 3, 31, 0, 0)\n","1787":"ax.axes.set_zticks(regions_num)\n","1788":"\\b[a-zA-Z]\\w*\\.\n","1789":"A = Matrix( [[a1,a2,a3],[b1,b2,b3],[c1,c2,c3]]) # Creates a matrix.\nB = Matrix( [[x],[y],[z]])\n","1790":"class C(object):\n    def __init__(self,c):\n         self.content = c\n    def __nonzero__(self):\n        return bool(self.content)\n\nc1 = C(None)\nc2 = C([])\nc3 = C([1])\nprint 1 if c1 else 0 #result: 0\nprint 1 if c2 else 0 #result: 0\nprint 1 if c3 else 0 #result: 1\n","1791":"for x in range(1, columns):\n    for x in range(x):\n        print(\" \", end=\"\")\n    print(\"*\")\n\nfor x in range(columns,0,-1): \n    for x in range(x):\n        print(\" \", end=\"\")\n    print(\"*\")\n","1792":"{% if variable is defined %}\n    value of variable: {{ variable }}\n{% else %}\n    variable is not defined\n{% endif %}\nSee the default() filter for a simple way to set undefined variables.\n","1793":">>> import numpy as np\n>>> np.array([[ 0.29889882, 0.84955019, 0.52989055, 0.57220576, 0.16841406]])\narray([[ 0.29889882,  0.84955019,  0.52989055,  0.57220576,  0.16841406]])\n>>> \n>>> \n>>> ar = np.array([[ 0.29889882, 0.84955019, 0.52989055, 0.57220576, 0.16841406]])\n>>> ar[:, random.randint(0,4)]\narray([ 0.29889882])\n>>> ar[:, random.randint(0,4)]\narray([ 0.52989055])\n","1794":"$('#form').submit(function(e){\n        e.preventDefault();\n\n        \/\/fill FormData with form fields\n\n        var data = new FormData($(this));\n        data.append(\"photo\", $(\"#id_photo\")[0].files[0]);\n        data.append(\"description\",$(\"#id_description\").val());\n\n        $.ajax({\n            url:'\/',\n            type: 'POST',\n            data: data,\n            cache:false,\n            processData: false,\n            contentType: false, \n            \/\/part related to Django crsf token\n            beforeSend: function(xhr, settings) {\n                if (!csrfSafeMethod(settings.type) && sameOrigin(settings.url)) {\n                 \/\/ Send the token to same-origin, relative URLs only.\n                 \/\/ Send the token only if the method warrants CSRF protection\n                 \/\/ Using the CSRFToken value acquired earlier\n                    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n            }\n            },\n            success: function(data){\n                var parseData = $.parseJSON(data);\n                console.log(parseData.message);\n            }\n        });\n\n    });\n","1795":"from ctypes import CDLL, c_char_p, c_int, c_long, c_ushort, c_byte, c_char, Structure, POINTER, byref, cast, sizeof, get_errno\nfrom ctypes.util import find_library\n\nclass c_dir(Structure):\n    \"\"\"Opaque type for directory entries, corresponds to struct DIR\"\"\"\n    pass\n\nclass c_dirent(Structure):\n    \"\"\"Directory entry\"\"\"\n    # FIXME not sure these are the exactly correct types!\n    _fields_ = (\n        ('d_ino', c_long), # inode number\n        ('d_off', c_long), # offset to the next dirent\n        ('d_reclen', c_ushort), # length of this record\n        ('d_type', c_byte), # type of file; not supported by all file system types\n        ('d_name', c_char * 4096) # filename\n        )\nc_dirent_p = POINTER(c_dirent)\nc_dirent_pp = POINTER(c_dirent_p)\nc_dir_p = POINTER(c_dir)\n\nc_lib = CDLL(find_library(\"c\"))\nopendir = c_lib.opendir\nopendir.argtypes = [c_char_p]\nopendir.restype = c_dir_p\n\nreaddir_r = c_lib.readdir_r\nreaddir_r.argtypes = [c_dir_p, c_dirent_p, c_dirent_pp]\nreaddir_r.restype = c_int\n\nclosedir = c_lib.closedir\nclosedir.argtypes = [c_dir_p]\nclosedir.restype = c_int\n\nimport errno\n\ndef listdirx(path):\n    \"\"\"\n    A generator to return the names of files in the directory passed in\n    \"\"\"\n    dir_p = opendir(path)\n\n    if not dir_p:\n        raise IOError()\n\n    entry_p = cast(c_lib.malloc(sizeof(c_dirent)), c_dirent_p)\n\n    try:\n        while True:\n            res = readdir_r(dir_p, entry_p, byref(entry_p))\n            if res:\n                raise IOError()\n            if not entry_p:\n                break\n            name = entry_p.contents.d_name\n            if name not in (\".\", \"..\"):\n                yield name\n    finally:\n        if dir_p:\n            closedir(dir_p)\n        if entry_p:\n            c_lib.free(entry_p)\n\nif __name__ == '__main__':\n    import sys\n    path = sys.argv[1]\n    max_per_dir = int(sys.argv[2])\n    for idx, entry in enumerate(listdirx(path)):\n        if idx >= max_per_dir:\n            break\n        print entry\n","1796":"from P4 import P4, P4Exception\np4 = P4()\np4.port = \"1\"\np4.user = \"User\"\np4.client = \"Client\"\n\ntry:\n    p4.connect()\n    changelist = p4.run_filelog('\/\/server\/folder\/...@yyyy\/mm\/dd,@now')\n    for r in changelist:\n      print r.depotFile\n      print r.revisions[0].time\n\nexcept P4Exception:\n    for e in p4.errors:\n        print e\n\nfinally:\n    p4.disconnect()\n","1797":"parser = argparse.ArgumentParser()\nparser.add_argument('input', type=argparse.FileType(), nargs='?', default=sys.stdin)\nargs = parser.parse_args()\nG = defaultdict(list)\nfor line in args.input:\n    ...\n","1798":"t = Image.open(\"IMG_1.jpg\").convert('L') #grayscale image\nf = array(t) #Convert test image into an array\n\nOD = 0.51*((f-22.08)\/(176.09-f))**(1.\/-1.519) #Empirical Rodbard formula\nOD[np.isnan(OD)] = 0\n\nthB = 0.02\nththin = 0.11\nththick = 0.15\n\nGSb = 162\nGSthin = 150\nGSthick = 145\n\nif np.where(OD < ththin):\n    thresholded = threshold(f, GSthin, GSb)\ndef to_rgb1(thresholded):\n    thresholded.resize((thresholded.shape[0], thresholded.shape[1], 1))\n    return np.repeat(thresholded.astype(np.uint8), 3, 2)       \ncmap = plt.get_cmap('jet')\nrgba_img1 = cmap(thresholded)\nrgb_img1 = np.delete(rgba_img1, 3, 2)\nview = rgb_img1[:, :, 2]\nview[view < 0.1] += 128 \nthin = rgb_img1\n\nif np.where(OD > ththick):\n    thresholded2 = threshold(f, threshmax = GSthick)\ndef to_rgb2(thresholded2):\n    thresholded2.resize((thresholded2.shape[0], thresholded2.shape[1], 1))\n    return np.repeat(thresholded2.astype(np.uint8), 3, 2)       \ncmap = plt.get_cmap('jet')\nrgba_img2 = cmap(thresholded2)\nrgb_img2 = np.delete(rgba_img2, 3, 2)\nview2 = rgb_img2[:, :, 0]\nview2[view2 > 0] += 128  \nthick = rgb_img2\n","1799":"\na, b, c = 1, 1, 1 # sides of a triangle\nif a + b >= c and b + c >= a and c + a >= b:\n    # calculate area and height here\nelse:\n    print('Not a valid triangle')\n","1800":">>> the_number = decimal.Decimal(1.23456789)\n>>> round(the_number, 2)\nDecimal('1.23')\n>>> d=decimal.Decimal(\"31.100\")\n>>> d\nDecimal('31.100')\n>>> round(d, 10)\nDecimal('31.1000000000')\n>>> round(d, 20)\nDecimal('31.10000000000000000000')\n>>> round(d, 24)\nDecimal('31.100000000000000000000000')\n>>> round(d, 26)\nDecimal('31.10000000000000000000000000')\n>>> round(d, 1)\nDecimal('31.1')\n>>> round(d, 0)\nDecimal('31')\n","1801":"im = Image.open('image.gif')\nrgb_im = im.convert('RGB')\nr, g, b = rgb_im.getpixel((1, 1))\n\nprint r, g, b\n(65, 100, 137)\n","1802":"import numpy as np\n\n# create example file\nnp.arange(256).astype('uint8').tofile('uint8_file.bin')\n\n# read example file and convert to uint16\nu1 = np.fromfile('uint8_file.bin', 'uint8')\nu2 = u1.astype('uint16')\nu2 *= 257  # scale to full 16 bit range\nu2.tofile('uint16_file.bin')\n","1803":"from django.http import HttpResponse\nimport xlwt\n\ndef my_view(request):\n    response = HttpResponse(mimetype=\"application\/ms-excel\")\n    response['Content-Disposition'] = 'attachment; filename=\"foo.xls\"'\n    wb = xlwt.Workbook()\n    wb.save(response)\n    return response\n","1804":"#!\/usr\/bin\/env python3\n\nimport tkinter as tk\nfrom tkinter.font import Font\n\nclass Pad(tk.Frame):\n\n    def __init__(self, parent, *args, **kwargs):\n        tk.Frame.__init__(self, parent, *args, **kwargs)\n\n        self.toolbar = tk.Frame(self, bg=\"#eee\")\n        self.toolbar.pack(side=\"top\", fill=\"x\")\n\n        self.bold_btn = tk.Button(self.toolbar, text=\"Bold\", command=self.make_bold)\n        self.bold_btn.pack(side=\"left\")\n\n        self.clear_btn = tk.Button(self.toolbar, text=\"Clear\", command=self.clear)\n        self.clear_btn.pack(side=\"left\")\n\n        # Creates a bold font\n        self.bold_font = Font(family=\"Helvetica\", size=14, weight=\"bold\")\n\n        self.text = tk.Text(self)\n        self.text.insert(\"end\", \"Select part of text and then click 'Bold'...\")\n        self.text.focus()\n        self.text.pack(fill=\"both\", expand=True)\n\n        # configuring a tag called BOLD\n        self.text.tag_configure(\"BOLD\", font=self.bold_font)\n\n    def make_bold(self):\n        # tk.TclError exception is raised if not text is selected\n        try:\n            self.text.tag_add(\"BOLD\", \"sel.first\", \"sel.last\")        \n        except tk.TclError:\n            pass\n\n    def clear(self):\n        self.text.tag_remove(\"BOLD\",  \"1.0\", 'end')\n\n\ndef demo():\n    root = tk.Tk()\n    Pad(root).pack(expand=1, fill=\"both\")\n    root.mainloop()\n\n\nif __name__ == \"__main__\":\n    demo()\n","1805":"let lines = \n  File.ReadAllLines(\"tclscript.do\")\n  |> Seq.map (fun line ->\n      let newLine = line.Replace(\"{\", \"{{\").Replace(\"}\", \"}}\")\n      \/\/ Implement additional string processing here\n      newLine )\n\nFile.WriteAllLines(\"tclscript.txt\", lines)\n","1806":"x = []\nwith open('my_file.txt', 'r') as f:\n    temp_list = []\n    for line in f:\n        if line.strip(): #line is not blank\n            temp_list.append(line)\n        else: #line is blank, i.e., it contains only newlines and\/or whitespace\n            if temp_list: #check if temp_list contains any items\n                x.append(temp_list)\n            temp_list = []\n","1807":">>> import bson\n>>> class Example(object):\n...     def __init__(self):\n...             self.a = 'a'\n...             self.b = 'b'\n...     def set_c(self, c):\n...             self.c = c\n... \n>>> e = Example()\n>>> e\n<__main__.Example object at 0x7f9448fa9150>\n>>> e.__dict__\n{'a': 'a', 'b': 'b'}\n>>> e.set_c(123)\n>>> e.__dict__\n{'a': 'a', 'c': 123, 'b': 'b'}\n>>> bson.BSON.encode(e.__dict__)\n'\\x1e\\x00\\x00\\x00\\x02a\\x00\\x02\\x00\\x00\\x00a\\x00\\x10c\\x00{\\x00\\x00\\x00\\x02b\\x00\\x02\\x00\\x00\\x00b\\x00\\x00'\n>>> bson.BSON.encode(e)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\/usr\/local\/lib\/python2.7\/dist-packages\/bson\/__init__.py\", line 566, in encode\n    return cls(_dict_to_bson(document, check_keys, uuid_subtype))\nTypeError: encoder expected a mapping type but got: <__main__.Example object at         0x7f9448fa9150>\n>>> \n","1808":"import requests\nfrom bs4 import BeautifulSoup\nfrom collections import OrderedDict\n\n\nsoup = BeautifulSoup(html, 'html.parser')\ntables = soup.find_all('table')\nrows = tables[1].find_all('tr')\nt_data = OrderedDict((row.th.text, row.td.text) for row in rows if row.td)\n","1809":"import glob\nfiles = glob.glob('C:\\\\python34\\\\*.txt')\n","1810":"new_event.save()\n","1811":"import datetime\nimport os\nimport shutil\n\nthreshold = datetime.datetime.now() + datetime.timedelta(days=-7)\nfile_time = datetime.datetime.fromtimestamp(os.path.getmtime('\/folder_name'))\n\nif file_time < threshold:\n    shutil.rmtree('\/folder_name')\n","1812":">>> from io import StringIO\n>>> import csv\n>>> demo = StringIO('''\\\n... foo,bar,baz\n... 42,88,131\n... 17,19,23\n... ''')\n>>> reader = csv.DictReader(demo)\n>>> def only_answers(row):\n...     return '42' in row.values()\n... \n>>> for row in filter(only_answers, reader):\n...     print(row)\n... \n{'baz': '131', 'bar': '88', 'foo': '42'}\n","1813":"import os\nimport subprocess\n\n\ndef launch_app():\n    os.environ['APPLICATION_ENVIRON'] = 'usr\/path'\n    application_path = 'path\/to\/application'\n    return subprocess.Popen([application_path])\n\n\ndef _purge_finished_apps(apps):\n    still_running = set()\n    for app in apps:\n        return_code = app.poll()\n        if return_code is not None:\n            print \"  PID {} no longer running (return code {})\".format(app.pid, return_code)\n        else:\n            still_running.add(app)\n    return still_running\n\n\ndef ui():\n    apps = set()\n\n    while True:\n        print\n        print \"1. To launch new instance\"\n        print \"2. To view all instances\"\n        print \"3. To exit, terminating all running instances\"\n        print \"4. To exit, leaving instances running\"\n        opt = int(raw_input())\n\n        apps = _purge_finished_apps(apps)\n\n        if opt == 1:\n            app = launch_app()\n            apps.add(app)\n            print \"  PID {} launched\".format(app.pid)\n\n        elif opt == 2:\n            if not apps:\n                print \"There are no instances running\"\n            for app in apps:\n                print \"  PID {} running\".format(app.pid)\n\n        elif opt == 3:\n            for app in apps:\n                print \"Terminating PID {}\".format(app.pid)\n                app.terminate()\n            for app in apps:\n                app.wait()\n                print \"PID {} finished\".format(app.pid)\n            return\n\n        elif opt == 4:\n            return\n\n\nif __name__ == \"__main__\":\n    ui()\n","1814":"def starts_with_vowel(word):\n    # return True if the word starts with a vowel and False otherwise\n    return word[0] in ['a', 'e', 'i', 'o', 'u']\n\ndef encode(word):\n    # translate a single word to the secret language\n    # call starts with vowel to decide which pattern to follow\n    if starts_with_vowel(word):\n        return word[1:] + word[0] + 'ar'\n    else:\n        return word + 'way'\n\ndef translate(message):\n    # translate the whole text to the secret language\n    # call encode to translate individual words in text\n    return ' '.join(encode(word) for word in message)\n","1815":"\"\"\"\n:rtype: (string, int, int)\n\"\"\"\n","1816":"response = HttpResponse(my_data, content_type='text\/x-python')\nresponse['Content-Disposition'] = 'attachment; filename=\"foo.py\"'\n","1817":"from piston.emitters import Emitter, XMLEmitter\n\nclass ProductXMLEmitter(XMLEmitter):\n    def _to_xml(self, xml, data):\n        if isinstance(data, (list, tuple)):\n            for item in data:\n                attrs = {}\n                # if item contains id value, use it as an attribute instead\n                if isinstance(item, dict):\n                    attrs[\"id\"] = unicode(item.pop(\"id\"))\n                xml.startElement(\"product\", attrs)\n                self._to_xml(xml, item)\n                xml.endElement(\"product\")\n        else:\n            super(BetterXMLEmitter, self)._to_xml(xml, data)\n\n# replace default XMLEmitter with ours\nEmitter.register('xml', ProductXMLEmitter, 'text\/xml; charset=utf-8')\n","1818":"replaced = row[0].replace('word','changed word')  # I want to replace in first column=row[0] 'word' with 'changed word'\nrow[0] = replaced\nwriter.writerow(row)\n","1819":"while 1:\n    events = po.poll(30000)\n    if not events:\n        print ('TIMEOUT!')\n    for fd, flag in events:\n        # check what's been done with os.lseek and os.read\n","1820":">>> dictVar={'one':1,'two':2,'three':3}\n>>> listVar=dictVar.viewvalues()\n>>> listVar\ndict_values([3, 2, 1])\n>>> dictVar['one']=100\n>>> listVar\ndict_values([3, 2, 100])\n>>> dictVar['four']=4\n>>> listVar\ndict_values([4, 3, 2, 100])\n>>> list(listVar)==dictVar.values()\nTrue\n","1821":"$ sudo docker run -p 5023:5023 -p 8050:8050 -p 8051:8051 scrapinghub\/splash --disable-private-mode\n","1822":"#!\/usr\/bin\/env python\nfrom __future__ import absolute_import, division, print_function\n\n\ndef main():\n    code = compile('x = (5*y + 8) if z<3 else (4*y+9)', '<main>', 'exec')\n    namespace = {'y': 10, 'z': 8}\n    exec code in namespace\n    print(namespace['x'])\n\n\nif __name__ == '__main__':\n    main()\n","1823":"B = B.set_index('Date')\nB = B.stack()\nres = merge(A,B,on='Date')\n","1824":">>> [[i.encode('ascii', 'ignore').replace('[', '') for i in x] for x in value]\n[['Seba', '10'], ['Gianfranco', '80'], ['Marco', '20'], ['Massimo', '125']]\n","1825":"d={'ports': [{'hw_addr': 'ee:b1:ab:b1:0e:a0', 'name': 's1-eth1', 'port_no': '00000001', 'dpid': '0000000000000201'},\n            {'hw_addr': 'f6:83:4d:e4:41:7d', 'name': 's1-eth2', 'port_no': '00000002', 'dpid': '0000000000000201'}\n                       ], 'dpid': '0000000000000201'}\n\nfor i in d[\"ports\"][0]:\n    print \"{} : {}\".format(i,d[\"ports\"][0][i])\nhw_addr : ee:b1:ab:b1:0e:a0\nname : s1-eth1\nport_no: 00000001\ndpid : 0000000000000201\n","1826":"from multiprocessing.dummy import Pool\n\ndef download_logs(self):\n    \"\"\"\n    Downloads logs from S3 using Boto.\n    \"\"\"\n    if self.aws_keys:\n        conn = S3Connection(*self.aws_keys)\n    else:\n        conn = S3Connection()\n\n    files = []\n    mybucket = conn.get_bucket(self.input_bucket)\n    pool = Pool(20) # 20 threads in the pool. Tweak this as you see fit.\n    with tempdir.TempDir() as directory:\n        results = pool.imap_unordered(item.get_contents_to_filename,\n                                      [os.path.join(directory, item.key.split(\"\/\")[-1]\n                                          for item in mybucket.list(prefix=self.input_prefix)]\n\n        for result in results:\n            yield result\n","1827":"import wx\n\n########################################################################\nclass MyApp(wx.Frame):\n    \"\"\"\"\"\"\n\n    #----------------------------------------------------------------------\n    def __init__(self):\n        \"\"\"Constructor\"\"\"\n        wx.Frame.__init__(self, None, title=\"Example\")\n        panel = wx.Panel(self)\n\n        lbl = wx.StaticText(panel, label=\"I'm a label!\")\n        txt = wx.TextCtrl(panel, value=\"blah blah\")\n        btn = wx.Button(panel, label=\"Clear\")\n        btn.Bind(wx.EVT_BUTTON, self.onClear)\n\n        self.sizer = wx.BoxSizer(wx.VERTICAL)\n        self.sizer.Add(lbl, 0, wx.ALL, 5)\n        self.sizer.Add(txt, 0, wx.ALL, 5)\n        self.sizer.Add(btn, 0, wx.ALL, 5)\n\n        panel.SetSizer(self.sizer)\n\n    #----------------------------------------------------------------------\n    def onClear(self, event):\n        \"\"\"\"\"\"\n        children = self.sizer.GetChildren()\n\n        for child in children:\n            widget = child.GetWindow()\n            print widget\n            if isinstance(widget, wx.TextCtrl):\n                widget.Clear()\n\nif __name__ == \"__main__\":\n    app = wx.App(False)\n    frame = MyApp()\n    frame.Show()\n    app.MainLoop()\n","1828":"[root@ichristo_dev]# cat process.py  -- A program that reads stdin for input\n#! \/usr\/bin\/python\n\ninp = 0  \nwhile(int(inp) != 10):  \n    print \"Enter a value: \"  \n    inp = raw_input()  \n    print \"Got\", inp  \n\n\n[root@ichristo_dev]# cat communicate.py\n#! \/usr\/bin\/python\n\nfrom subprocess import Popen, PIPE  \n\np = Popen(\".\/process.py\", stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True)  \no, e = p.communicate(\"10\")  \nprint o  \n\n\n[root@ichristo_dev]#.\/communicate.py  \nEnter a value:   \nGot 10\n","1829":"Set-Location C:\\Python\\MyProject\n","1830":"def fmt_3or4(v):\n    \"\"\"Format float to 4 decimal places, or 3 if ends with 0.\"\"\"\n    s = '{:.4f}'.format(v)\n    if s[-1] == '0':\n        s = s[:-1]\n    return s\n\n>>> fmt_3or4(1.02345)\n'1.0234'\n>>> fmt_3or4(1.023)\n'1.023'\n>>> fmt_3or4(1.02)\n'1.020'\n","1831":"for row in reader:\n    id1 = ids.setdefault(row[0], len(ids))\n","1832":"In [69]: with open('fn') as infile:\n    data = [line.strip().split(None,1)[1] for line in infile]\n   ....:     \n\nIn [70]: data\nOut[70]: \n[\"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, co\",\n \"Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover .\",\n 'Limit of Liability and Disclaimer of Warranty: e authors have used their best e orts in preparing this book, and the information provided herein as is. e information provided is sold without warranty, either express or implied.',\n 'Neither the authors nor Cartwheel Web will be held liable for any damages to be caused either directly or indirectly by the contents of this book.',\n 'Trademarks: Rather than indicating every occurence of a trademarked name as such, this book uses the names only in an editorial fashion and to the bene t of the trademark owner with no intention of infringement of the trademark.']\n","1833":"$ .\/manage.py shell\n\n>>> from django import template\n>>> t = template.Template(\"\"\"{% for f in friendslist %}\n...                         {% if forloop.first %}\n...                             First of the loop                            \n...                         {% endif %}\n...                         {{ f }}\n...                         {% if forloop.last %}\n...                             Last of the loop\n...                         {% endif %}\n...                 {% endfor %}\"\"\")\n\n>>> c = template.Context({'freindslist' : ['one element',]})\n>>> t.render(c)\n\n\n                        First of the loop\n\n                    one element\n\n                         Last of the loop\n","1834":"Support for Acrobat Forms in ReportLab documents\n\nThis module is somewhat experimental at this time.\n\nIncludes basic support for\n    textfields,\n    select fields (drop down lists), and\n    check buttons.\n\nThe public interface consists of functions at the moment.\nAt some later date these operations may be made into canvas\nmethods. (comments?)\n\nThe ...Absolute(...) functions position the fields with respect\nto the absolute canvas coordinate space -- that is, they do not\nrespect any coordinate transforms in effect for the canvas.\n","1835":"def __init__(self):\n    ...\n    self.items = {'1':['a','b','c'],'2':['d','e','f'],'3':['g','h','i']}\n    self.Combobox_1.activated[str].connect(self.on_combo_activated)\n    ...\n\n...\n\ndef on_combo_activated(self, text):\n    self.Combobox_2.clear()\n    self.Combobox_2.addItems(self.items[text])\n","1836":">>> l=[1,2,3]\n>>> ' '.join(map(str,l))\n'1 2 3'\n>>> string=' '.join(map(string,l))\n>>> map(int,string.split())\n[1, 2, 3]\n","1837":"from imdb import IMDb\nia = IMDb('sql', uri='mysql:\/\/username:password@localhost\/imdb')\ninglorious = ia.search_movie('Inglorious Basterds')[0]\nia.update(inglorious)\nprint inglorious['soundtrack']\n","1838":"class A(object): pass\nclass X(object): pass\nclass B(A, X): pass\nclass C(B): pass\nclass D(C): pass\n\nsorted([B, C, A, D, X], key = lambda cls: len(cls.mro()))\n=> [__main__.A, __main__.X, __main__.B, __main__.C, __main__.D]\n","1839":"print repr(message)\n","1840":"class Model(object):\n\n    ...\n\n    def __hash__(self):\n        return hash(self._get_pk_val())\n\n    ...\n\n    def __eq__(self, other):\n        return isinstance(other, self.__class__) and \\\n               self._get_pk_val() == other._get_pk_val()\n","1841":"class MainWindow(QWidget):\n    def __init__(self):\n        QWidget.__init__(self)\n        layout = QGridLayout()\n        self.sliders = []\n        slider_amount = 3\n        slider_precision = 10000 # sliders work only with ints, so large ints are used and mapped to floats\n        for i in range(slider_amount):\n            slider = QSlider(Qt.Horizontal)\n            slider.setRange(0, slider_amount*slider_precision)\n            slider.setSingleStep(slider.maximum()\/100.0)\n            slider.setPageStep(slider.maximum()\/20.0)\n            slider.valueChanged.connect(self.on_slider_value_changed)\n            slider.float_value = (i+1)\/((1+slider_amount)\/2.0*slider_amount) # provide your own default values\n            slider.label = QLabel()\n            self.sliders.append(slider)\n            layout.addWidget(slider, i, 0)\n            layout.addWidget(slider.label, i, 1)\n        self.update_slider_values()\n        self.setLayout(layout)\n        self.show()\n\n    def on_slider_value_changed(self, value):\n        changed_slider = self.sender()\n        changed_slider.float_value = float(value)\/changed_slider.maximum()\n        delta = sum(slider.float_value for slider in self.sliders)-1\n        while abs(delta)>0.00001:\n            d = len(self.sliders)-1\n            for slider in self.sliders:\n                if slider is changed_slider:\n                    continue\n                old_value = slider.float_value\n                slider.float_value = min(max(0, old_value-delta\/d), 1)\n                delta -= old_value-slider.float_value\n                d -= 1\n        self.update_slider_values()\n\n    def update_slider_values(self):\n        for slider in self.sliders:\n            slider_signals_blocked = slider.blockSignals(True)\n            slider.setValue(round(slider.float_value*slider.maximum()))\n            slider.blockSignals(slider_signals_blocked)\n            slider.label.setText('{:.2f}'.format(slider.float_value))\n\napp = QApplication(sys.argv)\nmw = MainWindow()\napp.exec_()\n","1842":"#!\/bin\/bash\nfor line in $(cat requirements.txt)\ndo\n  pip install $line -E \/path\/to\/virtualenv\ndone\n","1843":"is_64bits = sys.maxsize > 2**32\n","1844":"import subprocess, tempfile\nfrom wand.image import Image\n\nwith Image(filename='wizard:') as imageOBJ:\n    tempOBJ = tempfile.NamedTemporaryFile(suffix='.jpg',\n                                          prefix='\/tmp\/myProject-',\n                                          delete=False)\n    imageOBJ.save(file=tempOBJ)\n    subprocess.call('xdg-open {}'.format(tempOBJ.name), shell=True)\n","1845":"select\n    firstname, lastname, avg(score) as score\nfrom\n    class1\ngroup by\n    firstname, lastname\norder by\n    avg(score) desc\n","1846":"cntent = re.sub('<[^>]+>',\"\\n\", str(cntent))\nwith open(os.path.join('\/Users\/Brian\/Documents\/test', titles), \"wb\") as f: \n    f.writelines(line for line in cntent.splitlines(True) if line.strip())\n","1847":"response = {\n    \"con\": con_getinfo,\n    \"neg\": neg_getinfo,\n    ...\n}\nprint \"%.6f\" % (response[imput][\"balance\"])\n","1848":"self.frame = QtGui.QGroupBox(self)    \nself.frame.setTitle(\"Hello World\")\n","1849":"class EmailThread(threading.Thread):\n    def __init__(self, subject, html_content, recipient_list):\n        self.subject = subject\n        self.recipient_list = recipient_list\n        self.html_content = html_content\n        threading.Thread.__init__(self)\n\n    def run (self):\n        msg = EmailMessage(self.subject, self.html_content, EMAIL_HOST_USER, self.recipient_list)\n        msg.content_subtype = \"html\"\n        msg.send()\n\ndef send_html_mail(subject, html_content, recipient_list):\n    EmailThread(subject, html_content, recipient_list).start()\n","1850":"In [87]: pd.DataFrame(s).T\nOut[87]: \n   1983-05-15  1983-11-15  1984-05-15  1984-11-15\n0           1           1           1         101\n","1851":">>> tcpdumpProcess = subprocess.Popen(['tcpdump',\n                        '-w', 'myPackets.cap', '-i', 'eth0', '-n','ip'],\n                        stdout=subprocess.PIPE,\n                        stderr=subprocess.PIPE)\n>>> tcpdumpProcess.terminate()\n# stdout in [0], stderr in [1]\n>>> tcpdump_stderr = tcpdumpProcess.communicate()[1]\n>>> print tcpdump_stderr\ntcpdump: listening on eth2, link-type EN10MB (Ethernet), capture size 65535 bytes\n40 packets captured\n40 packets received by filter\n0 packets dropped by kernel\n","1852":">>> class DemoDescriptor:\n...     def __get__(self, instance, type_):\n...         if instance is None:\n...             print('Accesing descriptor on the class')\n...             return self\n...         print('Accessing descrtor on the instance')\n...         return 'Descriptor value for instance {!r}'.format(instance)\n... \n>>> class DemoClass(object):\n...     foo = DemoDescriptor()\n... \n>>> DemoClass.foo  # on the class\nAccesing descriptor on the class\n<__main__.DemoDescriptor object at 0x1041d3c50>\n>>> DemoClass.__dict__['foo']  # bypassing the descriptor protocol\n<__main__.DemoDescriptor object at 0x1041d3c50>\n>>> DemoClass().foo  # on the instance\nAccessing descrtor on the instance\n'Descriptor value for instance <__main__.DemoClass object at 0x1041d3438>'\n","1853":"xdim,ydim = data.shape\nk = 2\na, b = np.meshgrid(range(ydim),range(xdim))\nmask = (b - a -k) < 0\n\nnew_data = data[mask]\n\nnew_data2 = np.array(data) # to force a copy\nnew_data2[~mask] = 0\n","1854":">>> from ansible.plugins.filter import ipaddr\n>>> dir(ipaddr)\n['FilterModule', '_6to4_query', '__builtins__', '__doc__', '__file__', '__metaclass__', '__name__', '__package__', '_bare_query', '_bool_hwaddr_query', '_bool_ipaddr_query', '_broadcast_query', '_cidr_lookup_query', '_cidr_query', '_cisco_query', '_empty_hwaddr_query', '_empty_ipaddr_query', '_gateway_query', '_host_query', '_hostmask_query', '_int_query', '_ip_query', '_ipv4_query', '_ipv6_query', '_link_local_query', '_linux_query', '_loopback_query', '_multicast_query', '_need_netaddr', '_net_query', '_netmask_query', '_network_query', '_postgresql_query', '_prefix_query', '_private_query', '_public_query', '_revdns_query', '_size_query', '_subnet_query', '_type_query', '_unicast_query', '_unix_query', '_version_query', '_win_query', '_wrap_query', 'absolute_import', 'division', 'errors', 'hwaddr', 'ipaddr', 'ipsubnet', 'ipv4', 'ipv6', 'ipwrap', 'macaddr', 'netaddr', 'nthhost', 'partial', 'print_function', 'slaac', 'types']\n","1855":"import selenium\nfrom selenium import webdriver\n\n# I used Firefox, but you could use Chrome or IE\nbrowser = webdriver.Firefox()\n\nbrowser.get('http:\/\/www.SomeWebsite.com\/login')\n# I needed to stop the script here to actually login.\n# I tried to use an existing profile w\/ my username & password but the website\n# rejected my profile info and locked me out of the account\n\nbrowser.get('http:\/\/www.SomeWebsite.com\/blah\/blah\/blah.html')\n\nelement = browser.find_element_by_id(\"TheElementYouNeed\").text\n# This downloads all the text from the article at this particle 'id' element\n","1856":"import Tkinter as tkinter\n\nroot = tkinter.Tk()\n\ncanvas = tkinter.Canvas(root)\ncanvas.pack(fill=tkinter.BOTH, expand=1) # expand\n\nphoto = tkinter.PhotoImage(file = 'img1.gif')\nroot.geometry(\"450x450\")\nroot.update()\n\nimg = canvas.create_image(225,225, image=photo)\n#root.after(20000, lambda: canvas.delete(img))\n\nroot.mainloop()\n","1857":"import itertools\nletters = ('',' ', 'abc','def','ghi','jkl','mno','pqrs','tuv','wxyz')\nreverse_dict = dict((str(ind), group)\n                    for ind,group in enumerate(letters)\n                    for c in group\n                    if letters)\n\nprint reverse_dict\nend_nums = '3965'\nprint end_nums, 'can produce', tuple(''.join(w) for w in itertools.product(*map(reverse_dict.get, end_nums)))\nword = 'word'\nprint('%r = %s' % (word,''.join(key for c in word for key, item in reverse_dict.items() if c in item)))\n","1858":"from functools import partial\n\ndef actual_handler(page):\n    return u'hello'\n\nfor page in session.query(Page):\n    route = u'\/{0}\/{1}\/{2}'.format(page.id1, page.id2, page.id3)\n    app.add_url_rule(\n        route,\n        page.name,  # this is the name used for url_for\n        partial(actual_handler, page=page),\n    )\n","1859":"my_list = [\"Value1\", \"Value2\"]\njson = simplejson.dumps(my_list)\n# send json\n","1860":"import webbrowser\n\nwebbrowser.open(url[, new=0[, autoraise=True]])\n","1861":"import pandas\n\nsample={'user1': {'item1': 2.5, 'item2': 3.5, 'item3': 3.0, 'item4': 3.5, 'item5': 2.5, 'item6': 3.0},\n        'user2': {'item1': 2.5, 'item2': 3.0, 'item3': 3.5, 'item4': 4.0},\n        'user3': {'item2':4.5,'item5':1.0,'item6':4.0}}\n\ndf = pandas.DataFrame([\n    [col1,col2,col3] for col1, d in sample.items() for col2, col3 in d.items()\n])\n","1862":"distances = (a-b)**2\ndistances = distances.sum(axis=-1)\ndistances = np.sqrt(distances)\n","1863":">>> response.xpath('\/\/p\/text()').re('\\w+')[2]\nu'some'\n","1864":">>> import dis\n>>> def f(x, y):\n...     return not x in y\n...\n>>> def g(x, y):\n...     return x not in y\n...\n>>> dis.dis(f)\n  2           0 LOAD_FAST                0 (x)\n              3 LOAD_FAST                1 (y)\n              6 COMPARE_OP               7 (not in)\n              9 RETURN_VALUE\n>>> dis.dis(g)\n  2           0 LOAD_FAST                0 (x)\n              3 LOAD_FAST                1 (y)\n              6 COMPARE_OP               7 (not in)\n              9 RETURN_VALUE\n","1865":"# define necessary urls of your app which should always be present\nurlpatterns = patterns('',\n    url(r'^$', 'myapp.views.home', name='home'),\n)\n\n# then add urls of external apps if the app is present in INSTALLED_APPS\nif 'social_networks' in settings.INSTALLED_APPS:\n    urlpatterns += patterns('',\n        url(r'^social\/', include('social_networks.urls')),\n    )\n","1866":"def timer_compare(time1, time2='', note='@', time3=None):\n    if time3 is None:\n        time3 = time.clock()\n","1867":"proc = subprocess.Popen(['prog', 'arg'], shell=False, stdin=subprocess.PIPE)\nout, err = proc.communicate('some input')\n","1868":"import string\n\nalpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nkey = \"XPMGTDHLYONZBWEARKJUFSCIQV\"\ncomp = \"this is an example\"\n\ntr = string.maketrans(alpha, key)\nprint string.translate(comp.upper(), tr)\n# -> ULYJ YJ XW TIXBAZT\n","1869":"size=[140000,3504];\nfilesize=0;\ndatatype='float64';\nfilename='my_array.dat';\nfid=fopen(filename,'w+');\nmax_chunk_size=1000000;\n%fills an empty file\nwhile filesize<prod(size)\n    to_write=min(prod(size)-filesize,max_chunk_size);\n    filesize=filesize+fwrite(f, zeros(to_write,1), datatype);\nend   \nfclose(fid);\nm = memmapfile(filename,'Format','double', 'Writable',true);\n","1870":"from scrapy.conf import settings\nfrom scrapy.contrib.exporter import CsvItemExporter\n\nclass CSVkwItemExporter(CsvItemExporter):\n\n    def __init__(self, *args, **kwargs):\n        kwargs['fields_to_export'] = settings.getlist('EXPORT_FIELDS') or None\n        kwargs['encoding'] = settings.get('EXPORT_ENCODING', 'utf-8')\n\n        super(CSVkwItemExporter, self).__init__(*args, **kwargs)\n\n        self._join_multivalued = settings.get('MY_CSV_DELIMITER', ',')\n","1871":">>> def lowest(sequence):\n        'Find the lowest value in a sequence in just one-pass'\n        best = sequence[0]\n        for i in range(1, len(sequence)):\n            if sequence[i] < best:\n                best = sequence[i]\n        return best\n\n>>> lowest(['stack', 'over', 'flow', 'please', 'help'])\n'flow'\n","1872":"# Results container\nresults = {}\n\n# Collect the data\nfor item in data:\n    # key here is just for later, \n    # you could use anything unique to the entry \n    # (username for example)\n    key = \"{0}.{1}\".format(item.get('user_name'), item.get('question'))\n    if key in results:\n        results[key] += item.get('value', 0)\n    else:\n        results[key] = item.get('value', 0)\n\n# Prints the results as you would like.\nfor key, count in results.iteritems():\n   name, question = key.split('.')\n   print [name, question, count]\n","1873":"pd.merge(df1, df2, how='outer', on=['Progcode', 'Season'])\n","1874":"[hooks]\nprecommit = python ~\/tools\/check_syntax.py $($HG root)\n","1875":"ftype txtfile=\"c:\\path\\to\\pythonw.exe\" \"c:\\path\\to\\my\\editor.py\" \"%1\"\n","1876":">>> x[np.newaxis, :, :] & y[:, np.newaxis, :] & z[:, :, np.newaxis]\narray([[[0, 0, 0],\n        [0, 1, 1],\n        [0, 1, 1]],\n\n       [[0, 0, 0],\n        [0, 1, 1],\n        [0, 1, 1]],\n\n       [[0, 0, 0],\n        [0, 0, 0],\n        [0, 1, 1]],\n\n       [[0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]]])\n>>> \n","1877":"CHUNK_SIZE = 23000\nports_list_save = []\nfor host in results['hosts']:\n    for protocol in results['hosts'][host]['protocols']:\n        for port in results['hosts'][host]['protocols'][protocol]:\n            current_port = history.Port(number=int(port), \n                                        protocol=protocol, \n                                        state=results['hosts'][host]['protocols'][protocol][port]['state'], \n                                        service='', \n                                        version='', \n                                        address=history.Ip.objects.get(scan=self.scan, address=host))\n            ports_list_save.append(current_port)\n            if len(ports_list_save) > CHUNK_SIZE:\n                history.Port.objects.bulk_create(ports_list_save)\n                ports_list_save = []\nif ports_list_save:   \n    history.Port.objects.bulk_create(ports_list_save)\n","1878":"In [22]: df\nOut[22]:\n   A  B  C  D\n0  8  3  5  8\n1  9  4  0  4\n2  5  4  3  8\n3  4  8  5  1\n\nIn [23]: bi = df.C==0\n\nIn [24]: df.ix[bi, 'C'] = df[bi][['A', 'D']].apply(max, axis=1)\n\nIn [25]: df\nOut[25]:\n   A  B  C  D\n0  8  3  5  8\n1  9  4  9  4\n2  5  4  3  8\n3  4  8  5  1\n","1879":"(stackoverflow)\u279c  my_project  python .\/manage.py shell\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>> from django.http import HttpRequest\n>>> req = HttpRequest()\n>>> print req\n<HttpRequest\npath:,\nGET:{},\nPOST:{},\nCOOKIES:{},\nMETA:{}>\n>>> req.GET['test'] = 'hello world'\n>>> print req\n<HttpRequest\npath:,\nGET:{'test': 'hello world'},\nPOST:{},\nCOOKIES:{},\nMETA:{}>\n>>>\n","1880":"from scrapy.utils.markup import remove_tags\n\n# it'll print 'hello, world'\nprint remove_tags('<p>hello, world<\/p>')\n","1881":"...\ndef get(self):\n    self.write(\"Hello, world\")\n    light_the_leds()\n...\n","1882":"f = open(\"a.txt\", \"r\")\nsf = f.read()\nf.close()\n\nsf += \"some more text\"\nf = open(\"a.txt\", \"w\")\nf.write(sf)\nf.close()\n","1883":"def justified(title, amount, titlewidth=20, amountwidth=10):\n    return title.ljust(titlewidth) + \" = $ \" + ('%.2f' % amount).rjust(amountwidth)\n\nprint(justified('Parts', 12.45))\nprint(justified('Labor', 100))\nprint(justified('Tax', 2.5))\nprint(justified('Total', 114.95))\n","1884":"from pylab import *\nfrom scipy import *\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport scipy.constants as const\n\nskr = const.pi*const.epsilon_0*4\n\nclass DraggablePoint:\n    global Polje\n    def __init__(self, p, q0, ind):\n        self.q = q0\n        self.point = p\n        self.c_kruznice = p.center\n        self.press = None\n        self.indeks = ind\n\n    def connect(self):\n        self.cidpress = self.point.figure.canvas.mpl_connect('button_press_event', self.button_press_event)\n        self.cidrelease = self.point.figure.canvas.mpl_connect('button_release_event',self.button_release_event)  \n        self.cidmotion = self.point.figure.canvas.mpl_connect('motion_notify_event', self.motion_notify_event)  \n\n    def disconnect(self):\n        self.point.figure.canvas.mpl_disconnect(self.cidpress)\n        self.point.figure.canvas.mpl_disconnect(self.cidrelease)\n        self.point.figure.canvas.mpl_disconnect(self.cidmotion)\n\n    def button_press_event(self,event):\n        if event.inaxes != self.point.axes:\n            return\n        contains = self.point.contains(event)[0]\n        if not contains: return\n        self.press = self.point.center, event.xdata, event.ydata\n\n    def button_release_event(self,event):\n        self.press = None\n        self.point.figure.canvas.draw()\n        # This is the part which will erase field\n        # and draw for us new one\n        self.c_kruznice = self.point.center[0], self.point.center[1]\n        if self.indeks == 0:\n            racun = polje(drs, X, Y)\n            ax.cla()\n            circles = []\n            circles.append(ax.add_patch(circle1))\n            circles.append(ax.add_patch(circle))\n            circles.append(ax.add_patch(circle2))\n            circles.append(ax.add_patch(circle3))\n            ax.quiver(X,Y,racun[0],racun[1], color='r',  alpha=0.5)\n            ax.quiver(X,Y,racun[0],racun[1], edgecolor='k', facecolor='None', linewidth =.5)\n            plt.draw()\n\n    def motion_notify_event(self, event):\n        if self.press is None: return\n        if event.inaxes != self.point.axes: returnO\n        self.point.center, xpress, ypress = self.press\n        dx = event.xdata - xpress\n        dy = event.ydata - ypress\n        self.point.center = (self.point.center[0]+dx, self.point.center[1]+dy)\n        self.point.figure.canvas.draw()\n\n\nif __name__ == '__main__':\n    f_s=0.3\n    def R(x,y):\n        r=np.sqrt(x**2+y**2)+f_s\n        return r\n\n    def polje(tela, X, Y):\n        Ex = 0\n        Ey = 0\n        for i in range(len(tela)):\n            r = R(tela[i].c_kruznice[0] - X, tela[i].c_kruznice[1] - Y )\n            ex = X - tela[i].c_kruznice[0]\n            ey = Y - tela[i].c_kruznice[1]\n            Ex += (tela[i].q\/skr)*(1\/(r+f_s)**3)*ex\n            Ey += (tela[i].q\/skr)*(1\/(r+f_s)**3)*ey\n        return Ex, Ey\n\n\n    fig = plt.figure(figsize=(8,8))\n    ax = fig.add_axes([0.05,0.05,0.92,0.92])\n    ax.set_xlim(-6,6)\n    ax.set_ylim(-6,6)\n    scale = 0.2\n    X,Y=np.mgrid[-5:5:scale, -5:5:scale]\n\n    circles = []\n    q=3*const.e\n    s=abs(q)\n    sx=sqrt(s\/np.pi)*1e8*5\n    circle2 = patches.Circle((2,3), 0.3, fc='r', alpha=0.5, picker=True)\n    circle1 = patches.Circle((2,-3), 0.3, fc='r', alpha=0.5, picker=True)\n    circle = patches.Circle((-2,3), 0.3, fc='b', alpha=0.5, picker=True)\n    circle3 = patches.Circle((-2,-3), 0.3, fc = 'b', alpha = 0.5, picker = True )\n    circles.append(ax.add_patch(circle1))\n    circles.append(ax.add_patch(circle))\n    circles.append(ax.add_patch(circle2))\n    circles.append(ax.add_patch(circle3))\n    drs = []\n\n    i = 0\n    q = [-1, 1, -1, 1]\n    for c in circles:\n        dr = DraggablePoint(c, q[i], i)\n        dr.connect()\n        drs.append(dr)\n        i += 1\n\n    racun = polje(drs, X, Y)\n    ax.quiver(X,Y,racun[0],racun[1], color='r',  alpha=0.5)\n    ax.quiver(X,Y,racun[0],racun[1], edgecolor='k', facecolor='None', linewidth =.5)\n    plt.show()\n","1885":"#!\/usr\/bin\/env python\n#-*- coding:utf-8 -*-\n\nimport wx, os\n\nscript = \"\/path\/to\/script\"\n\nclass myFrame(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, wx.ID_ANY, 'wxButton')\n        self.button = wx.Button(self, id=-1, label='Click Me!')\n        self.button.Bind(wx.EVT_BUTTON, self.on_button_click)\n\n        self.Show(True)\n\n    def on_button_click(self, event):\n        os.system(script)\n\napp  = wx.PySimpleApp()\nmain = myFrame()\napp.MainLoop()\n","1886":"a = np.array([1, 2, 3])\nt = tuple(a)\n","1887":"from pyelasticsearch import ElasticSearch\nimport json\nimport os\n\nes = ElasticSearch(ES_CLUSTER)\n\njson_docs = []\nfor filename in os.listdir(os.getcwd()):\n    if filename.endswith('.json'):\n        with open(filename) as open_file:\n            json_docs.append(json.load(open_file))\n\nes.bulk(ES_INDEX, ES_TYPE, json_docs) \n","1888":"from datetime import timedelta\n\nstart = timedelta(hours=1)\nend = timedelta(hours=6)\nduration = end - start\nprint duration.total_seconds() \/ 60\n","1889":"user.save()\n","1890":"def find_domains(txt):\n\n    # Regex out domains   \n    lines = txt.split('\\n')\n    domains = []\n    unwanted_extensions = ('.exe', '.net', '.csv') # tuple containing unwanted extensions, add more if you want.\n\n    for line in lines:\n        line  = line.rstrip()\n        results = re.findall('([\\w\\-\\.]+(?:\\.|\\[\\.\\])+[a-z]{2,6})', line)\n        for item in results:\n            # check if item is not in domains already and if item doesn't end with any of the unwanted extensions.\n            if item not in domains and not item.endswith(unwanted_extensions):\n                domains.append(item)\n","1891":"import argparse\nimport zmq\n\nparser = argparse.ArgumentParser(description='zeromq server\/client')\nparser.add_argument('--bar')\nargs = parser.parse_args()\n\nif args.bar:\n    # client\n    context = zmq.Context()\n    socket = context.socket(zmq.REQ)\n    socket.connect('tcp:\/\/127.0.0.1:5555')\n    socket.send(args.bar)\n    msg = socket.recv()\n    print msg\nelse:\n    # server\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    socket.bind('tcp:\/\/127.0.0.1:5555')\n    while True:\n        msg = socket.recv()\n        if msg == 'zeromq':\n            socket.send('ah ha!')\n        else:\n            socket.send('...nah')\n","1892":"import shutil\n\ncreateImage(locA, filename)\nshutil.move(os.path.join(locA, filename), locB)\n","1893":"#!\/usr\/bin\/python2\n\nimport sys\n\ndef colorize(stdoutColor, stderrColor):\n  defaultColor = '\\033[0;0m'\n\n  def applyColorize(f):\n    class colorWrapper(object):\n      def __init__(self, wrapee, color):\n        self.wrapee = wrapee\n        self.color = color\n      def __getattr__(self, attr):\n        if attr == 'write' and self.wrapee.isatty():\n          return lambda x: self.wrapee.write(self.color + x + defaultColor)\n        else:\n          return getattr(self.wrapee, attr)\n\n    def wrapper(*args, **kwds):\n      oldStdout = sys.stdout\n      oldStderr = sys.stderr\n      sys.stdout = colorWrapper(oldStdout, stdoutColor)\n      sys.stderr = colorWrapper(oldStderr, stderrColor)\n      try:\n        f(*args, **kwds)\n      finally:\n        sys.stdout = oldStdout\n        sys.stderr = oldStderr\n\n    return wrapper\n\n  return applyColorize\n\n\ngreenColor = '\\033[01;32m'\nredColor = '\\033[01;31m'\n\ndef foo():\n  print \"I'm ordinary and boring!\"\n  print >> sys.stderr, 'Writing to stderr!'\n\n@colorize(greenColor, redColor)\ndef colorFoo():\n  print \"I'm colorful and exciting!\"\n  print >> sys.stderr, 'Writing to stderr!'\n\nif __name__ == '__main__':\n  foo()\n  colorFoo()\n  foo()\n","1894":"from django.test import Client\n\n@given('I am logged in')\ndef impl(context):\n    c = Client()\n    c.login(email='test@email.com',password='password')\n\n    cookie = c.cookies['sessionid']\n\n    b = context.browser\n    b.get(context.server_url + '\/404-loads-fastest\/') # selenium will set cookie domain based on current page domain\n    b.add_cookie({'name': 'sessionid', 'value': cookie.value, 'secure': False, 'path': '\/'})\n","1895":"from selenium import webdriver\nfrom selenium.webdriver import DesiredCapabilities\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.wait import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n# set a custom user-agent\nuser_agent = \"Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/29.0.1547.57 Safari\/537.36\"\ndcap = dict(DesiredCapabilities.PHANTOMJS)\ndcap[\"phantomjs.page.settings.userAgent\"] = user_agent\n\ndriver = webdriver.PhantomJS(desired_capabilities=dcap)\ndriver.get(\"http:\/\/www.seloger.com\/list.htm?cp=40250&org=advanced_search&idtt=2&pxmin=50000&pxmax=200000&surfacemin=20&surfacemax=100&idtypebien=2&idtypebien=1&idtypebien=11\")\n\n# wait for arcitles to be present\nwait = WebDriverWait(driver, 10)\nwait.until(EC.presence_of_element_located((By.TAG_NAME, \"article\")))\n\n# get articles\nfor article in driver.find_elements_by_tag_name(\"article\"):\n    print(article.text)\n","1896":"import collections\nwords = ['all', 'awesome', 'all', 'yeah', 'bye', 'all', 'yeah']\ncounter = collections.Counter(words)\nprint(counter.most_common())\n>>> [('all', 3), ('yeah', 2), ('bye', 1), ('awesome', 1)]\n","1897":"class MyModule(object):\n    def __init__(self, namespace):\n        self.__dict__.update(namespace)\n    def __getitem__(name):\n        return self.__dict__[name]\n\nimport other\nimport sys\nsys.modules[other.__name__] = MyModule(other.__dict__)\n","1898":"static int\ndict_update_common(PyObject *self, PyObject *args, PyObject *kwds, char *methname)\n{\n    PyObject *arg = NULL;\n    int result = 0;\n\n    if (!PyArg_UnpackTuple(args, methname, 0, 1, &arg))\n        result = -1;\n\n    else if (arg != NULL) {\n        _Py_IDENTIFIER(keys);\n        if (_PyObject_HasAttrId(arg, &PyId_keys))\n            result = PyDict_Merge(self, arg, 1);\n        else\n            result = PyDict_MergeFromSeq2(self, arg, 1);\n    }\n    if (result == 0 && kwds != NULL) {\n        if (PyArg_ValidateKeywordArguments(kwds))\n            result = PyDict_Merge(self, kwds, 1);\n        else\n            result = -1;\n    }\n    return result;\n}\n","1899":"response = urlfetch.fetch(your_url, follow_redirects=False)\nlocation = response.headers['Location']\n","1900":"import numpy as np\nimport scipy as sp\n","1901":"#!\/usr\/bin\/env python\n\nimport sys, os\nimport wx\nimport wx.lib.scrolledpanel as scrolled\n\nclass ImgPanel(scrolled.ScrolledPanel):\n    def __init__(self, parent):\n        super(ImgPanel, self).__init__(parent, \n                                       style = wx.SUNKEN_BORDER)\n\n        self.bitmap=wx.StaticBitmap(parent=self)\n        image = wx.Bitmap('image.jpg')\n        self.bitmap.SetBitmap(image)\n\n        self.imgSizer = wx.BoxSizer(wx.VERTICAL)        \n        self.imgSizer.Add(self.bitmap, 1, wx.EXPAND)\n        self.SetSizer(self.imgSizer)\n\n        self.SetAutoLayout(1)\n        self.SetupScrolling()    \n        self.Bind(wx.EVT_PAINT, self.OnPaint)\n        self.bitmap.Bind(wx.EVT_MOTION, self.OnMove)\n        self.bitmap.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)\n        self.bitmap.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)\n        self.IsRectReady = False\n        self.newRectPara=[0,0,0,0]\n\nclass  WinFrame(wx.Frame):\n    def __init__(self, parent, title, width, height):\n        super(WinFrame, self).__init__(parent, \n                                       title=title,\n                                       size=(width, height))\n\n        self.imgPanel = ImgPanel(self)\n        self.frameSizer = wx.BoxSizer(wx.HORIZONTAL)        \n        self.frameSizer.Add(self.imgPanel, 1, wx.EXPAND)        \n        self.SetAutoLayout(True)\n        self.SetSizer(self.frameSizer)\n        self.Layout()      \n\n        self.Centre()\n        self.Show(True)        \n\n\nclass MyApp(wx.App):\n    def __init__(self, width, height):\n        super(MyApp, self).__init__(0)\n\n        self.width = width\n        self.height = height\n\n    def createFrame(self):\n        self.frame = WinFrame(None, \"test\", self.width, self.height)\n        self.SetTopWindow(self.frame)    \n\ndef main():\n    app = MyApp(640, 480)\n    app.createFrame()\n    app.MainLoop()\n\nif \"__main__\" == __name__ :\n    main()\n","1902":"from collections import defaultdict\n\nd = defaultdict(set)\n\nwith open('data.csv','r') as r:\n    for line in r:\n        splitted = line.strip().split(',')\n        name = splitted[3].strip()\n        value = splitted[4].strip()\n        d[name].add(value)\n","1903":"import os\n\ndef convert_avi_to_mp4(avi_file_path):\n    os.popen(\"ffmpeg -i '{input}' -ac 2 -b:v 2000k -c:a aac -c:v libx264 -b:a 160k -vprofile high -bf 0 -strict experimental -f mp4 'output.mp4'\".format(input = avi_file_path)\nreturn True\n","1904":"windows command prompt>\\python27\\python -mtimeit -s\"a=10**20;n=3\" \"(a>>n)&1\"\n1000000 loops, best of 3: 0.238 usec per loop\n\n-s\"a=10**20;n=3\" \"(a>>n)&1\"\n0.238 usec \n\n-s\"a=10**20;n=3\" \"not not(a & (1 << n))\"\n0.154 usec \n\n-s\"a=10**200;n=3\" \"(a>>n)&1\"\n0.382 usec \n\n-s\"a=10**200;n=3\" \"not not(a & (1 << n))\"\n0.155 usec \n\n-s\"a=10**10;n=3\" \"(a>>n)&1\"\n0.231 usec \n\n-s\"a=10**10;n=3\" \"not not(a & (1 << n))\"\n0.156 usec \n\n-s\"a=10**9;n=3\" \"(a>>n)&1\"\n0.0801 usec\n\n-s\"a=10**9;n=3\" \"not not(a & (1 << n))\"\n0.0938 usec\n\n-s\"a=2**1000;n=64\" \"(a>>n)&1\"\n0.446 usec\n\n-s\"a=2**1000;n=64\" \"not not(a & (1 << n))\"\n0.255 usec\n","1905":"In [19]:\ndf.columns[df.sum(axis=0) == 1]\n\nOut[19]:\nInt64Index([5, 6, 7, 8], dtype='int64')\n","1906":"stmt = session.query(Address).\\\n                 limit(5).\\\n                 subquery()\nadalias = aliased(Address, stmt)\nfor user, address in session.query(User, adalias).\\\n         join(adalias, User.addresses): \n     print user\n     print address\n","1907":"return map(lambda x: x.doSomething(), \n           filter(lambda x: x[0] == \"z\", getIterator()))\n","1908":"import numpy as np\nimport matplotlib.pyplot as plt\n\nx = y = np.linspace(1, 10, 10)\n\nt1mean, t2mean = 2, 9\nsigma1, sigma2 = .3, .01\nt1 = np.random.normal(t1mean, sigma1, 10)\nt2 = np.random.normal(t2mean, sigma2, 10)\n\nclass nlcmap(object):\n    def __init__(self, cmap, levels):\n        self.cmap = cmap\n        self.N = cmap.N\n        self.monochrome = self.cmap.monochrome\n        self.levels = np.asarray(levels, dtype='float64')\n        self._x = self.levels\n        self.levmax = self.levels.max()\n        self.transformed_levels = np.linspace(0.0, self.levmax,\n             len(self.levels))\n\n    def __call__(self, xi, alpha=1.0, **kw):\n        yi = np.interp(xi, self._x, self.transformed_levels)\n        return self.cmap(yi \/ self.levmax, alpha)\n\ntmax = max(t1.max(), t2.max())\n#the choice of the levels depends on the data:\nlevels = np.concatenate((\n    [0, tmax],\n    np.linspace(t1mean - 4 * sigma1, t1mean + 4 * sigma1, 5),\n    np.linspace(t2mean - 4 * sigma2, t2mean + 4 * sigma2, 5),\n    ))\n\nlevels = levels[levels <= tmax]\nlevels.sort()\n\ncmap_nonlin = nlcmap(plt.cm.jet, levels)\n\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\nax1.scatter(x, y, edgecolors=cmap_nonlin(t1), s=15, linewidths=4)\nax2.scatter(x, y, edgecolors=cmap_nonlin(t2), s=15, linewidths=4)\n\nfig.subplots_adjust(left=.25)\ncbar_ax = fig.add_axes([0.10, 0.15, 0.05, 0.7])\n\n#for the colorbar we map the original colormap, not the nonlinear one:\nsm = plt.cm.ScalarMappable(cmap=plt.cm.jet, \n                norm=plt.Normalize(vmin=0, vmax=tmax))\nsm._A = []\n\ncbar = fig.colorbar(sm, cax=cbar_ax)\n#here we are relabel the linear colorbar ticks to match the nonlinear ticks\ncbar.set_ticks(cmap_nonlin.transformed_levels)\ncbar.set_ticklabels([\"%.2f\" % lev for lev in levels])\n\nplt.show()\n","1909":"df = df.rename(columns=month_dict).sort_index(axis=1)\n","1910":"from email.parser import FeedParser\nf = FeedParser()\nf.feed(\"<insert mail message here, including all headers>\")\nrootMessage = f.close()\n\n# Now you can access the message and its submessages (if it's multipart)\nprint rootMessage.is_multipart()\n\n# Or check for errors\nprint rootMessage.defects\n\n# If it's a multipart message, you can get the first submessage and then its payload\n# (i.e. content) like so:\nrootMessage.get_payload(0).get_payload(decode=True)\n","1911":"awk '{ print >> $5 }' yourfile\n","1912":"valid_kwargs = get_valid_kwargs(cls.__init__, config_dict)\n","1913":"import numpy as NP\nA = NP.random.randint(0, 10, 100)\n\nbins = NP.array([0., 20., 40., 60., 80., 100.])\n\n# d is an index array holding the bin id for each point in A\nd = NP.digitize(A, bins)     \n","1914":"import matplotlib.dates as mdates\nimport matplotlib.mlab as mlab\nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport sys\n\ndef main( datafile ):\n    np_rec_array = mlab.csv2rec( datafile, delimiter='\\t' )\n    np_rec_array.sort() # in-place sort\n    # a `figure` is a starting point for MPL visualizations\n    fig = plt.figure( figsize=(8,6) ) \n    # add a set of `axes` to above `figure`\n    ax = fig.add_subplot(111)\n    x = np_rec_array.visit_time\n    y = np_rec_array.total_visits\n    # `plot_date` is like `plot` but allows for easier x-axis formatting\n    ax.plot_date(x, y, 'o-', color='g') \n    # show time every 30 minutes\n    ax.xaxis.set_major_locator( mdates.MinuteLocator(interval=30) )\n    # specify time format\n    ax.xaxis.set_major_formatter( mdates.DateFormatter(\"%H:%M\") )\n    # set x-axis label rotation (otherwise they can overlap)\n    for l in ax.get_xticklabels():\n        l.set_rotation(60)\n    plt.title( 'Website Visits' )\n    plt.show()\n\nif __name__ == '__main__':\n    if len( sys.argv ) == 1:\n        sys.stderr.write( 'need a filename, exiting...' )\n        sys.exit(-1)\n    main( sys.argv[1] )\n","1915":"class MyMainWindow(QWidget):\n    def __init__(self):\n        QWidget.__init__(self, None)\n\n        vbox = QVBoxLayout(self)\n\n        self.sone = QSlider(Qt.Horizontal)\n        self.sone.setRange(0,99)\n        self.sone.setValue(0)\n        vbox.addWidget(self.sone)\n\n        self.stwo = QSlider(Qt.Horizontal)\n        self.stwo.setRange(0,99)\n        self.stwo.setValue(99)\n        vbox.addWidget(self.stwo)\n\n        self.sone.valueChanged.connect(self.sliderChanged)\n\n    def sliderChanged(self, val):\n        self.stwo.setValue(self.stwo.maximum() - val)\n","1916":">>> import dis\n>>> def test(x, y):\n...     x, y = y, x\n... \n>>> dis.dis(test)\n  2           0 LOAD_FAST                1 (y)\n              3 LOAD_FAST                0 (x)\n              6 ROT_TWO             \n              7 STORE_FAST               0 (x)\n             10 STORE_FAST               1 (y)\n             13 LOAD_CONST               0 (None)\n             16 RETURN_VALUE     \n","1917":"class dequePlus(collections.deque):\n    def __init__(self, iterable):\n        collections.deque.__init__(self, iterable, 100)\n","1918":"def custom_files(members):\n    for tarinfo in members:\n        if os.path.splitext(tarinfo.name)[1] != \".html\":\n            yield tarinfo\n\ntar = tarfile.open(\"sample.tar.gz\")\ntar.extractall(members=custom_files(tar))\ntar.close()\n","1919":"#!\/usr\/bin\/env python\n# -*- coding: UTF-8 -*-\n\nimport multiprocessing\n# We must import this explicitly, it is not imported by the top-level\n# multiprocessing module.\nimport multiprocessing.pool\nimport time\n\nfrom random import randint\n\n\nclass NoDaemonProcess(multiprocessing.Process):\n    # make 'daemon' attribute always return False\n    def _get_daemon(self):\n        return False\n    def _set_daemon(self, value):\n        pass\n    daemon = property(_get_daemon, _set_daemon)\n\n# We sub-class multiprocessing.pool.Pool instead of multiprocessing.Pool\n# because the latter is only a wrapper function, not a proper class.\nclass MyPool(multiprocessing.pool.Pool):\n    Process = NoDaemonProcess\n\ndef sleepawhile(t):\n    print(\"Sleeping %i seconds...\" % t)\n    time.sleep(t)\n    return t\n\ndef work(num_procs):\n    print(\"Creating %i (daemon) workers and jobs in child.\" % num_procs)\n    pool = multiprocessing.Pool(num_procs)\n\n    result = pool.map(sleepawhile,\n        [randint(1, 5) for x in range(num_procs)])\n\n    # The following is not really needed, since the (daemon) workers of the\n    # child's pool are killed when the child is terminated, but it's good\n    # practice to cleanup after ourselves anyway.\n    pool.close()\n    pool.join()\n    return result\n\ndef test():\n    print(\"Creating 5 (non-daemon) workers and jobs in main process.\")\n    pool = MyPool(5)\n\n    result = pool.map(work, [randint(1, 5) for x in range(5)])\n\n    pool.close()\n    pool.join()\n    print(result)\n\nif __name__ == '__main__':\n    test()\n","1920":"import urllib2\nfrom cookielib import CookieJar\n\ncookiejar = CookieJar()\nopener = urllib2.build_opener()\ncookieproc = urllib2.HTTPCookieProcessor(cookiejar)\nopener.add_handler(cookieproc)\n","1921":"class MyClass(object):\n    def __init__(self, ...):\n        self._session = ...\n\n    def insert_stuff(self, table):\n        self._session.add(table)\n\n\nc = MyClass(...)\nt = MyTableClass(...)\nc.insert_stuff(t)\n","1922":"final = myClassObject.getPlays()\nprint final \n","1923":"class Foo:\n    def __init__(self):\n        self.bars = []\n\n    def append_bar(self, *args, **kwargs):\n        self.bars.append(Bar(*args, **kwargs))\n\nclass Bar:\n    def __init__(self, a, b, c, d):\n        self.a = a\n        self.b = b\n        self.c = c\n        self.d = d\n\nf=Foo()\nf.append_bar(1,2,3,4)\n","1924":"chr(ord('b') + 1)\n","1925":"import subprocess\nstdoutdata = subprocess.getoutput(\"wc --lines \/var\/log\/syslog\")\nprint(\"stdoutdata: \" + stdoutdata.split()[0])\n","1926":"def OnMessageStatus(msg, status):\n    if status == Skype4Py.cmsReceived:\n        msg.Chat.SendMessage(\"n\/a\")\n","1927":"class PollForm(forms.ModelForm): # used in manage view\n                    class Meta:\n                        model = StandardWork\n                        exclude = ('cbs_and_role','publish', 'standard_work_number')\n                        widgets = {\n                          'system_description': forms.Textarea(attrs={'rows':3}),\n                        } \n                    def __init__(self, *args, **kwargs):\n                        super(PollForm, self).__init__(*args, **kwargs)\n                        if self.instance:\n                            print \"printing in form\"\n                            print self.instance.id\n                            self.fields['ideal_behaviour'].queryset = IdealBehaviour.objects.filter(cbs__exact=cbsobject)\n","1928":"def func(df1):\n    idx = df1.index.get_level_values(0)[0]\n    df1 = df1.loc[idx]\n    return (df1['Values'] \/ df1.loc['Calc']['Values']).to_frame()\n\ndf.groupby(level=0).apply(func)\n","1929":"if user_can_read(request.user, b):\n    ## do stuff\n","1930":"\/\/\/ <summary>\n\/\/\/ Set up an IronPython environment - for interactive shell or for canned scripts\n\/\/\/ <\/summary>\npublic void SetupEnvironment(ScriptEngine engine, ScriptScope scriptScope)\n{\n    \/\/ add variables from Revit\n    scriptScope.SetVariable(\"__revit__\", _commandData.Application);\n    scriptScope.SetVariable(\"__commandData__\", _commandData);\n    scriptScope.SetVariable(\"__message__\", _message);\n    scriptScope.SetVariable(\"__elements__\", _elements);\n    scriptScope.SetVariable(\"__result__\", (int)Result.Succeeded);           \n\n    \/\/ add preconfigures variables\n    scriptScope.SetVariable(\"__vars__\", RevitPythonShellApplication.GetVariables());\n\n    \/\/ add the current scope as module '__main__'\n    var languageContext = Microsoft.Scripting.Hosting.Providers.HostingHelpers.GetLanguageContext(engine);\n    var pythonContext = (IronPython.Runtime.PythonContext)languageContext;\n    var module = pythonContext.CreateModule(null, GetScope(scriptScope), null, IronPython.Runtime.ModuleOptions.None);            \n    pythonContext.PublishModule(\"__main__\", module);\n\n    \/\/ add the search paths\n    AddSearchPaths(engine);\n}\n\n\/\/\/ <summary>\n\/\/\/ Be nasty and reach into the ScriptScope to get at its private '_scope' member,\n\/\/\/ since the accessor 'ScriptScope.Scope' was defined 'internal'.\n\/\/\/ <\/summary>\nprivate Microsoft.Scripting.Runtime.Scope GetScope(ScriptScope scriptScope)\n{\n    var field = scriptScope.GetType().GetField(\n        \"_scope\", \n        System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);\n    return (Microsoft.Scripting.Runtime.Scope) field.GetValue(scriptScope);\n}\n","1931":"def main():\n    done = False\n    while not done:\n        limit = ask_limit()\n        speed = ask_speed()\n        findfine(speed, limit)\n\n        done = raw_input(\"Done? \") == \"yes\"\n","1932":"with open('your_file', 'w') as f:\n    f.write('Some text\\n')\n","1933":"def find_word_vertical(crosswords,word):\n    z=[list(i) for i in zip(*crosswords)]   \n    for rows in z:          \n        row_index = z.index(rows)\n        single_row = ''.join(rows)      \n        column_index = single_row.find(word)        \n        if column_index >= 0:\n            return([column_index, row_index])\n","1934":"import re\npassword = raw_input(\"Enter string to test: \")\nif re.match(r'[A-Za-z0-9@#$%^&+=]{8,}', password):\n    # match\nelse:\n    # no match\n","1935":"import numpy as np\nfrom scipy.optimize import fmin_l_bfgs_b\n\n# do the math by hand, it's quite simple in this case\ndef target_fun(p, k, n):\n    f = - k* np.log(p) - (n-k)*np.log(1-p)\n    g =  - k\/p + (n-k) \/ (1-p)\n    return f, g\n\nf = lambda p: target_fun(p, k=6, n=9)\nepsilon = 1e-9\nfmin_l_bfgs_b(f, 0.999, bounds=[(epsilon,1-epsilon)])\n","1936":"\/env\/<env>\/artifact\/<artifact>?verbose=1&noformat=1\n","1937":"def decider(x, y, condition, val):\n    if condition:\n        return val, y\n    return x, val\n\na, b = decider(a, b, cond, value)\n","1938":"import copy\nnew_list = copy.deepcopy(old_list)\n","1939":"http:\/\/example.com\/api\/users?ordering=-time\nhttp:\/\/example.com\/api\/users?ordering=username\n","1940":"for i in range(len(words)):\n    for j in range(i+1, len(words)):\n        word, other_word = words[i], words[j]\n        ...\n","1941":">>> from sqlalchemy.util import KeyedTuple\n>>> res = KeyedTuple(a + b, a.keys() + b.keys())\n","1942":">>> import sys\n>>> print sys.executable\n\/usr\/bin\/python\n","1943":"def generate_serial():\n    return random.choice(string.ascii_uppercase) + random.choice(string.digits)\n\nclass CardFactory(DjangoModelFactory):\n    class Meta:\n        model = Card\n    serial_number = FuzzyAttribute(generate_serial)\n","1944":"FORM_DATA = {\n    '__EVENTTARGET': '',\n    '__EVENTARGUMENT': '',\n    '__VIEWSTATE': '\/wEPDwUKMTA5NTA5ODU1MQ9kFgJmD2QWAgIGDxBkDxYFZgIBAgICAwIEF***REMAINDER REMOVED***',\n    '__EVENTVALIDATION': '\/wEdAAp4d3BHvSTs+Kv6cxGP3xEbBr8xrgRYad2tj4YCyRIw5qUAjimf****REMAINDER REMOVED****',\n    'jsCheck': '',\n    'ddlEngine': 'REMOVED:13008',\n    'Username': uname,\n    'Password': passw,\n    'btnLogin.x': '42',\n    'btnLogin.y': '9',\n    'btnLogin': 'Login',\n}\n","1945":"{% for user in all_entries_user %}\n    Do your thing with {{ user }}\n{% endfor %}\n","1946":"col_ext_name = Document.ActiveDataTableReference.Columns[\"I_id\"].Properties[\"ExternalName\"]\n\nprint(col_ext_name)\n\n>> index_id\n","1947":"import matplotlib.pylab as plt\nimport matplotlib.animation as animation\nimport numpy as np\n\n#create image with format (time,x,y)\nimage = np.random.rand(100,10,10)\n\n#setup figure\nfig = plt.figure()\nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\n#set up viewing window (in this case the 25 most recent values)\nrepeat_length = (np.shape(image)[0]+1)\/4\nax2.set_xlim([0,repeat_length])\n#ax2.autoscale_view()\nax2.set_ylim([np.amin(image[:,5,5]),np.amax(image[:,5,5])])\n\n#set up list of images for animation\n\n\nim = ax1.imshow(image[0,:,:])\nim2, = ax2.plot([], [], color=(0,0,1))\n\ndef func(n):\n    im.set_data(image[n,:,:])\n\n    im2.set_xdata(np.arange(n))\n    im2.set_ydata(image[0:n, 5, 5])\n    if n>repeat_length:\n        lim = ax2.set_xlim(n-repeat_length, n)\n    else:\n        # makes it look ok when the animation loops\n        lim = ax2.set_xlim(0, repeat_length)\n    return im, im2\n\nani = animation.FuncAnimation(fig, func, frames=image.shape[0], interval=30, blit=False)\n\nplt.show()\n","1948":"def f(x1, a1, b1, c1, d1):\n    return c1 * (((x1 - a1)\/(d1 - x1))**1\/b1)\n\nx_data = np.array([176.5, 161.333, 66.1667, 40.833])\ny_data = np.array([0., 0.1, 0.9, 2.5])\np0 = np.array([168., -0.01, -7.4, 35000.])\n\npopt, pcov = opt.curve_fit(f, x_data, y_data, p0, None, False, True, ftol = 0.00001)\n","1949":"table='''\u4e58\u5ba2\u59d3\u540d,\u6027\u522b,\u51fa\u751f\u65e5\u671f\nHuangTianhui,\u7537,1948\/05\/28\n\u59dc\u7fe0\u4e91,\u5973,1952\/03\/27\n\u674e\u7ea2\u6676,\u5973,1994\/12\/09\nLuiChing,\u5973,1969\/08\/02\n\u5b8b\u98de\u98de,\u7537,1982\/03\/01\n\u5510\u65ed\u4e1c,\u7537,1983\/08\/03\nYangJiabao,\u5973,1988\/08\/25\n\u63d0\u6c5f\u00b7\u963f\u5e03\u62c9,\u7537,1979\/07\/10\n\u5b89\u6587\u5170,\u5973,1949\/10\/20\n\u80e1\u5072\u5a60(\u5a74\u513f),\u5973,2011\/02\/25\n(\u6709\u5f85\u786e\u5b9a\u59d3\u540d),\u7537,1985\/07\/20\n'''\ntable = table.encode('gb18030')\ndata = [[cell  for cell in row.split(b\",\")]\n        for row in table.split(b\"\\n\")  if row]\nlen0 = max([len(x[0]) for x in data])\nlen1 = max([len(x[1]) for x in data])\nlen2 = max([len(x[2]) for x in data])\n\nfor cell in data:\n    print(\"_\" * (len0+len1+len2+4))\n    line = (\n        b\"|\" + cell[0].rjust(len0) +\n        b\"|\" + cell[1].rjust(len1) +\n        b\"|\" + cell[2].rjust(len2) + b\"|\"\n    )\n    print(line.decode('gb18030'))\n","1950":"cs = tricontourf(tri,height)\nfor collection in cs.collections:\n    for path in collection.get_paths():\n        print path.to_polygons()\n","1951":"#!\/usr\/bin\/python\n\nimport sys\n\nd = {}\nline_list=[]\nalist=[]\nf = open(sys.argv[3], 'r') # Persisted Dictionary File\n\nfor line in f:\n    line = line.strip()\n    if line ==\"\":\n        continue\n    alist = line.split()\n    key = alist[0]\n    value = alist[1]\n    d[str(key)] = str(value)\n    alist=[]\nf.close()\n\nfr = open(sys.argv[1], 'r') # source file\nfw = open(sys.argv[2]+\"\/masked_\"+sys.argv[1], 'w') # Target Directory Location\n\nfor line in fr:\n    line = line.strip()\n    if line == \"\":\n        continue\n    columns = line.strip().split('|')\n    if columns[0].find(\"@\") > 1:\n        looking_for = columns[0] # this is what we need to search\n    else:\n        looking_for = \"Dummy@dummy.com\"\n    if looking_for in d:\n        # by default, iterating over a dictionary will return keys\n            new_line = d[looking_for]+'|'+'|'.join(columns[1:])\n            line_list.append(new_line)\n    else:\n        new_idx = str(len(d)+1)\n        d[looking_for] = new_idx\n        kv = open(sys.argv[3], 'a')\n        kv.write(looking_for+\" \"+new_idx+'\\n')\n        kv.close()\n        new_line = d[looking_for]+'|'+'|'.join(columns[1:])\n        line_list.append(new_line)\nfw.writelines(line_list)\n","1952":"import urllib.parse\nparsed = urllib.parse.urlparse(sys.argv[1])\nmail_addr = parsed.path\nfields = urllib.parse.parse_qs(parsed.query)\n","1953":"re.findall(r'(?<![!])\\b\\w+', ' !Hai  Yo!')\n","1954":"{\n\"query\": {\n    \"function_score\": {\n        \"query\": {  \n            \"match\": {\n                \"text\": \"how now brown cow\"\n            }\n        },\n        \"functions\": [{\n            \"script_score\": { \n                \"script\": \"doc['weight'].value\"\n            }\n        }],\n        \"score_mode\": \"multiply\"\n    }\n}\n}\n","1955":"pattern = r\"\\w.\\d{3}\\-\\w+.(jpg|Jpg|JPG)\"\n\n\nfor filename in FileList:\n    if displaymatch(re.match(pattern, filename)) is None:\n        os.rename(filename, \"P.\" + str(\"{0:0=3d}\".format(num)) + \"-\" + filename)\n        num+= 1\n","1956":"your_sum = sum([ord(i) for i in '\\xff\\x1a'])\n","1957":"timeout 100 .\/myprocess.py\n","1958":">>> import string\n>>> string.letters\n'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n>>> import random\n>>> random.choice(string.letters)\n'j'\n","1959":"my_handler = TimedRotatingFileHandler(LOG_PATH, when='midnight', backupCount=20)\n","1960":"def receive(self, message):\n    plaintext_body = ''\n    for plain in message.bodies('text\/plain'):\n        plaintext_body = plain[1].decode()\n\n    if not plaintext_body and hasattr(message, 'attachments'):\n        for attachment in message.attachments:\n            if attachment[0].endswith('.txt'):\n                plaintext_body = attachment[1].decode()\n                if plaintext_body:\n                    break\n","1961":"#!\/usr\/bin\/env python\n\nimport MySQLdb\n\n# Open databse connection\ndb = MySQLdb.connect(host=\"****\",user=\"****\",passwd=\"****\",db=\"****\")\n\n#Prepare a cursor object using cursor() method\ncur = db.cursor(MySQLdb.cursors.DictCursor)\n\n#Execute SQL query using execute() method\ncur.execute(\"SELECT sensor_id, sensor_types.type_name FROM sensors INNER JOIN sensor_types ON sensors.type_id=sensor_types.type_id\")\n\n#Fetch the results\ndata = cur.fetchall()\n\n#Print out results\nfor row in data:\n    print row[\"sensor_id\"],row[\"type_name\"]\n\n#Disconnect from server\ndb.close()\n","1962":"class baseTest(unittest.TestCase):\n    def setUp(self):\n        print('base setup')\n        self.A = 100\n\n    def testSomething(self):\n        print('base test')\n        self._DoTestSomething(self)\n\n    def _DoTestSomething(self)\n        # Do something with self.A\n\nclass subTest(baseTest):\n    def setUp(self):\n        print('sub setup')\n        self.A = 999\n\n    def _DoTestSomething(self)\n        # Do something with self.A\n","1963":"np.any(np.absolute(my_array) < eps)\n","1964":"motifs = [ x.strip() for x in open('final motifs_11SGLOBULIN','r') ]\nredact = '*****'\n\nwith open('11sglobulin.seqs','r') as data_in, open('11sglobulin.seqs.new','w') as data_out:\n  for seq in data_in:\n    for motif in motifs:\n      while True:\n        x = seq.find(motif)\n        if x >= 0:\n          seq = seq[:x] + redact + seq[x+len(motif):]\n        else:\n          break\n  data_out.write(seq)\n","1965":"def total_len(bst):\n    if isinstance(bst, tuple):\n        if bst == ():\n            return 0\n        else:\n            return total_len(bst[0]) + total_len(bst[1:])\n    else:\n        return len(bst)\n","1966":">>> import lxml.html\n>>> text_string = '''<html>\n...   <body>\n...     <p>Hello World!<\/p>\n...     <p>Goodbye!<\/p>\n...   <\/body>\n... <\/html>'''\n>>> root = lxml.html.document_fromstring(text_string)\n>>> text_elements = root.xpath('\/\/text()')\n>>> for t in text_elements:\n...     print t.getparent(), type(t), repr(t)\n... \n<Element body at 0x193b170> <class 'lxml.etree._ElementStringResult'> '\\n    '\n<Element p at 0x193b1d0> <class 'lxml.etree._ElementStringResult'> 'Hello World!'\n<Element p at 0x193b1d0> <class 'lxml.etree._ElementStringResult'> '\\n    '\n<Element p at 0x193b290> <class 'lxml.etree._ElementStringResult'> 'Goodbye!'\n<Element p at 0x193b290> <class 'lxml.etree._ElementStringResult'> '\\n  '\n","1967":"l1 = [('A', 1, 3), ('B', 2, 5), ('C', 3, 16), ('D', 4, 19), ('E', 5, 20)];\nl2 = [('A', 1), ('C', 2), ('F', 8), ('D', 15), ('X',21)];\nl3 = [('C', 1), ('F', 4), ('R', 16), ('D', 19), ('Z', 31)]\n\nfor k in l1,l2,l3:\n    # 'dummy to keep track of tuple size'\n    k.append(('dummy',len(k[0][1:])))\n\ndict_lx =  [ dict(map(lambda x: (x[0], x[1:]), l)) for l in l1,l2,l3 ]\nsorted_keys = sorted(set(reduce(lambda x,y : x + y.keys(), dict_lx, [])))\n\nfinal = map(lambda key: tuple(\n    [key] + reduce(lambda x,y: x + list(y.get(key, y.get('dummy')[0]*[0])), dict_lx, [])), sorted_keys)\n\nfinal = filter(lambda x: x[0] != 'dummy', final)\nprint final\n#[('A', 1, 3, 1, 0), ('B', 2, 5, 0, 0), ('C', 3, 16, 2, 1), ('D', 4, 19, 15, 19), ('E', 5, 20, 0, 0), ('F', 0, 0, 8, 4), ('R', 0, 0, 0, 16), ('X', 0, 0, 21, 0), ('Z', 0, 0, 0, 31)]\n","1968":"indices = [['islink',], ['authors', 0, 'name']]\nresult = []\nfor index in indices:\n  value = input_dict\n  for single_index in index:\n    value=value[single_index]\n  result.append(value)\n","1969":"# this basic string query is safe\nquery = Song.all()\nquery.filter('title =', self.request.get('title'))\n\n# a GqlQuery version of the previous example\nquery = GqlQuery(\"SELECT x FROM Song WHERE title = :1\",self.request.get('title'))\n\n# sanitize\/validate when you have requirements: e.g., year must be a number\nquery = Song.all()\ntry:\n    year = int(self.request.get('year'))  # make sure we got a number\nexcept:\n    show error msg\nquery.filter('year =', year)\n","1970":"r=1.220536239336080619e+01\nprint \"%-.24f\"%(r)\n\n12.205362393360806194664292\n","1971":"class USBclient(Protocol):\n    def connectionMade(self):\n        global serServ\n        serServ = self\n        print 'Arduino device: ', serServ, ' is connected.'\n\n    def cmdReceived(self, cmd):\n        serServ.transport.write(cmd)\n        print cmd, ' - sent to Arduino.'\n        pass\n\n    def dataReceived(self,data):      \n        print 'USBclient.dataReceived called with:'\n        print str(data)\n","1972":"import binascii, doctest\n\ndef ascii_to_packed_hex(string_data): \n    r\"\"\"\n    >>> binascii.a2b_hex('01')\n    '\\x01'\n    >>> binascii.a2b_hex('0102030405')\n    '\\x01\\x02\\x03\\x04\\x05'\n    >>> binascii.a2b_hex('fafbfcfd')\n    '\\xfa\\xfb\\xfc\\xfd'\n    >>> binascii.a2b_hex('31323334')\n    '1234'\n    \"\"\"\n    doctest.testmod()\n","1973":"def give_matrix(arr,i,j):\n    res = []\n    for ii in range(i-2,i+3): \n        inner_res = []\n        for jj in range(j-2,j+3):\n            if (ii-2<0 or ii+3>n or jj-2<0 or jj+3>n): # manage borders\n                inner_res.append('x')\n            else:\n                inner_res.append(arr[ii][jj])\n        res.append(inner_res)\n    return res\n","1974":"import os\nimport glob\nfor filename in glob.glob('*.apk'):\n    os.system(\"java -Xmx4g -cp soot-trunk.jar;soot-infoflow.jar;soot-infoflow-android.jar;slf4j-api-1.7.5.jar;s\u200c\u200blf4j-simple-.7.5.jar;axml-2.0.jar soot.jimple.infoflow.android.TestApps.Test C:\\\\Users\\\\Admin\\\\Downloads\\\\DroidBench-master\\\\DroidBench-master\\\\apk\\\\nf\\\\%s C:\\\\Users\\\\Admin\\\\Downloads\\\\EnSoft\\\\EnSoft\\\\android-sdk\\\\platforms\" % filename)\n","1975":"import cv\n\ncapture = cv.CaptureFromFile(filename)\nwhile Condition1:\n    # Need a frame to get the output video dimensions\n    frame = cv.RetrieveFrame(capture) # Will return None if there are no frames\n    # New video file\n    video_out = cv.CreateVideoWriter(output_filenameX, CV_FOURCC('M','J','P','G'), capture.fps, frame.size(), 1)\n    # Write the frames\n    cv.WriteFrame(video_out, frame)\n    while Condition2:\n        frame = cv.RetrieveFrame(capture) # Will return None if there are no frames\n        cv.WriteFrame(video_out, frame)\n","1976":"fields = ax.stackplot(df.index,df.field1,df.field2)\ncolors = [field.get_facecolor()[0] for field in fields]\npatch1=mpl.patches.Patch(color=colors[0],label= 'field 1')\npatch2=mpl.patches.Patch(color=colors[1], label ='field 2')\n","1977":"# Sometimes MCO gives us a ruby hash as a string, We can coerce this into json then into dictionary\ndef convert_hash_to_dict(self,ruby_hash):\n    dict_str = ruby_hash.replace(\":\",'\"')    # Remove the ruby object key prefix\n    dict_str = dict_str.replace(\"=>\",'\" : ') # swap the k => v notation, and close any unshut quotes \n    dict_str = dict_str.replace('\"\"','\"')    # strip back any double quotes we created to sinlges\n    return json.loads(dict_str) \n","1978":"String formFile = \"\/path\/to\/myform.pdf\"\nString newFile = \"\/path\/to\/output.pdf\"\nPdfReader reader = new PdfReader(formFile);\nFileOutputStream outStream = new FileOutputStream(newFile);\nPdfStamper stamper = new PdfStamper(reader, outStream);\nAcroFields fields = stamper.getAcroFields();\n\n\/\/ fill the form\nfields.setField(\"name\", \"Shane\");\nfields.setField(\"url\", \"http:\/\/stackoverflow.com\");\n\n\/\/ PDF infos\nHashMap<String, String> infoDoc = new HashMap<String, String>();\ninfoDoc.put(\"Title\", \"your title here\");\ninfoDoc.put(\"Author\", \"JRE ;)\");\nstamper.setMoreInfo(infoDoc);\n\n\/\/ Flatten the PDF & cleanup\nstamper.setFormFlattening(true);\nstamper.close();\nreader.close();\noutStream.close();\n","1979":">>> class Foo(object):\n...     d = {'foo': 'bar'}\n...     (lambda stuff: d[stuff])('foo')\nTraceback (most recent call last):\n  File \"<pyshell#3>\", line 1, in <module>\n    class Foo(object):\n  File \"<pyshell#3>\", line 3, in Foo\n    (lambda stuff: d[stuff])('foo')\n  File \"<pyshell#3>\", line 3, in <lambda>\n    (lambda stuff: d[stuff])('foo')\nNameError: global name 'd' is not defined\n>>> class Foo(object):\n...     d = {'foo': 'bar'}\n...     def f(stuff):\n...         d[stuff]\n...     f('foo')\nTraceback (most recent call last):\n  File \"<pyshell#4>\", line 1, in <module>\n    class Foo(object):\n  File \"<pyshell#4>\", line 5, in Foo\n    f('foo')\n  File \"<pyshell#4>\", line 4, in f\n    d[stuff]\nNameError: global name 'd' is not defined\n","1980":"for k in d:\n    print('The key is {} and the value is {}'.format(k, d[k]))\n","1981":"(gdb) target exec python\n(gdb) run\n >>> import your_extension as ye\n >>> ye.do_something ()\n >>> # do your python here\n >>> # or just run your python script from here\n(gdb) do debugging stuff\n","1982":">>> [n.targets[0].id for n in ast.walk(ast.parse(\"x = struct()\"))\n    if isinstance(n, ast.Assign)\n        and isinstance(n.value, ast.Call)\n        and n.value.func.id == 'struct']\n['x']\n","1983":"import os\n\nid = raw_input('please enter the file numbers id:')\nfile='AY{0}1.txt'.format(id)\n\nif not os.path.exists(file):\n    print \"Error the file doesn't exists\"\nelse:\n    g,a,c,t=0,0,0,0\n    with open(file,'r') as f:\n        next(f)\n        for line in f:\n            for char in line.lower():\n                if char == 'g':\n                    g+=1\n                if char == 'a':\n                    a+=1\n                if char == 'c':\n                    c+=1\n                if char == 't':\n                    t+=1\n\n    print \"Guanina: {0}\".format(g)\n    print \"Adenina: {0}\".format(a)\n    print \"Citosina: {0}\".format(c)\n    print \"Timina: {0}\".format(t)\n\n    gc = (g+c+0.) \/ (a+t+c+g+0.)\n\n    print \"Conte\u00fado GC: {0}\".format(gc)\n","1984":"@app.route('\/errorform', methods=['GET', 'POST'])\ndef errorform():\n    form = ErrorForm()\n    logs = str(open(file, \"r\").readlines()[int(file_len(file))]).rstrip()\n    if form.validate_on_submit():\n        if form.includeLogs.data == False:\n            return redirect('mailto:test@mail.com?subject=Feedback&body=<insert your message here>')\n        else:\n            return redirect('mailto:test@mail.com?subject=Feedback&body=<insert your message here> \\n\\n Logs: %s' % (logs))\n    return render_template('main.html', form=form, show_results=0, page = 'errorform')\n","1985":">>> some_lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> l = [some_lst[i:i+3] for i in xrange(len(some_lst)-2)]\n","1986":"import requests\nimport sys\n\nfrom requests.auth import HTTPBasicAuth, HTTPDigestAuth\n\nAUTH_MAP = {\n    'basic': HTTPBasicAuth,\n    'digest': HTTPDigestAuth,\n}\n\ndef auth_get(url, *args, **kwargs):\n    r = requests.get(url)\n    if r.status_code != 401:\n        return r\n    auth_scheme = r.headers['WWW-Authenticate'].split(' ')[0]\n    auth = AUTH_MAP.get(auth_scheme.lower())\n    if not auth:\n        raise ValueError('Unknown authentication scheme')\n    r = requests.get(url, auth=auth(*args, **kwargs))\n    return r\n\n\nif __name__ == '__main__':\n    print auth_get(*sys.argv[1:])\n","1987":"import numpy as np\n\ndef submatrix(arr):\n    x, y = np.nonzero(arr)\n    # Using the smallest and largest x and y indices of nonzero elements, \n    # we can find the desired rectangular bounds.  \n    # And don't forget to add 1 to the top bound to avoid the fencepost problem.\n    return arr[x.min():x.max()+1, y.min():y.max()+1]\n\ntest = np.array([[0, 0, 0, 0, 0, 0],\n                 [0, 1, 1, 1, 1, 0],\n                 [0, 0, 1, 1, 0, 0]])\n\nprint submatrix(test)\n\n# Result:  \n# [[1 1 1 1]\n#  [0 1 1 0]]\n","1988":"import types\n\nclass A:    \n    def meth1(self, par1):\n        print(\"in A.meth1: par1 =\", par1)\n\na = A()\ns = '''def meth1(self, par1):\n    print(\"in recompiled A.meth1: par1 = \", par1)'''\n\ncode = compile(s, __file__, \"exec\")\n\nenvironment = {}\nexec(code, environment)\na.meth1 = types.MethodType(environment[\"meth1\"], A)\n\na.meth1(\"via meth1\")\n","1989":"cv2.setWindowProperty(\"window\", cv2.WND_PROP_FULLSCREEN, cv2.cv.CV_WINDOW_FULLSCREEN)  \n","1990":">>> x = [(('university', 'NN'), 'nsubj', ('bit', 'NN')), (('university', 'NN'), 'cop', ('is', 'VBZ')), (('university', 'NN'), 'amod', ('good', 'JJ'))]\n>>> for arg1, pred, arg2 in x:\n...     word1, pos1 = arg1\n...     word2, pos2 = arg2\n...     if pos1.startswith('NN') and pos2.startswith('JJ') and pred == 'amod':\n...             print ((arg1, pred, arg2))\n... \n(('university', 'NN'), 'amod', ('good', 'JJ'))\n","1991":"list_key_value_tuples = [(\"A\", 1), (\"B\", 2), (\"A\", 3)]\n\nd = {}\nfor key, value in list_key_value_tuples:\n    d[key] = d.get(key, 0) + value\n\n> print d\n{'A': 4, 'B': 2}\n","1992":">>> class User:\n...     hash = \"\"\n...     def __init__(self, hash):\n...             self.hash = hash\n...\n>>> u1 = User(\"hash1\")\n>>> User.hash\n''\n>>> u1.hash\n'hash1'\n","1993":"aa = {1:'a', 3:'c', 2:'b', 4:'d'}\nbb = {'apple':'a', 'pear':'b', 'mango': 'g'}\n\nbb_rev = dict((value, key)\n    for key, value in bb.iteritems()) # bb.items() in python3\ndd = dict((key, bb_rev[value])\n    for key, value in aa.iteritems() # aa.items() in python3\n    if value in bb_rev)\n\nprint dd\n","1994":">>> str_list=['a','b','c']\n>>> ''.join(str_list)\n'abc'\n","1995":"remote_repo = self.repo.remotes[remote]\n\n# here is where you could choose an executable based on the platform.\n# Shell scripts might just not work plainly on windows.\nssh_executable = os.path.join(rw_dir, 'my_ssh_executable.sh')\n# This permanently changes all future calls to git to have the given environment variables set\n# You can pass additional information in your own environment variables as well.\nself.repo.git.update_environment(GIT_SSH_COMMAND=ssh_executable)\n\n# now all calls to git which require SSH interaction call your executable\nremote_repo.push(self.repo.active_branch.name)\n","1996":"import re\nx=[['asgy200;f','ssll100','time is: 10h:00m:12s','xxxxxxx','***','','asgy200;f','frl5100','time is: 00h:00m:05s','ooo']]\ns=str(x)\nprint re.findall(r\"(?<=time is)\\s*:\\s*[^']*:(\\d+)\",s)                          \n","1997":"def __setitem__(self, k, v):\n    if hasattr(k, 'lower'):\n        k = k.lower()\n    return super(MyDict, self).__setitem__(k, v)\n","1998":"player = MusicPlayer()\n","1999":"from multiprocessing import Pool, Value\nfrom sys import stdout\n\ndef init(s, p):\n    global searched_counter, processed_counter\n    searched_counter = s\n    processed_counter = p\n\ndef run_scrape(var_input):\n    global searched_counter, processed_counter\n    #get search results\n    parsed = #parse using bs4\n\n    with searched_counter.get_lock():\n        searched_counter.value += 1\n    stdout.write(\"\\rTotal Searched\/Processed: %d\/%d\" % \n                    (searched_counter.value, processed_counter.value))\n    stdout.flush()\n\n    if parsed:\n        with processed_counter.get_lock():\n            processed_counter.value += 1\n        stdout.write(\"\\rTotal Searched\/Processed: %d\/%d\" % \n                        (searched_counter.value, processed_counter.value))\n        stdout.flush()    \n\n\nif __name__ == \"__main__\":\n    searched_counter = Value('i', 0)\n    processed_counter = Value('i', 0)\n\n    list_to_scrape = [\"data%05d\" % (x,) for x in range(1,10000)]\n    pool = Pool(8, initializer=init, initargs=(searched_counter, processed_counter))\n    pool.map(run_scrape, list_to_scrape)\n\n    stdout.write('\\n')\n","2000":">>> import random\n>>> cells = [['empty'] * 5 for i in range(5)]\n>>> for i in range(3):\n        x = random.randrange(5)\n        y = random.randrange(5)\n        cells[x][y] = 'mine'\n\n\n>>> import pprint\n>>> pprint.pprint(cells)\n[['empty', 'empty', 'empty', 'empty', 'empty'],\n ['mine', 'empty', 'mine', 'empty', 'empty'],\n ['empty', 'empty', 'empty', 'empty', 'mine'],\n ['empty', 'empty', 'empty', 'empty', 'empty'],\n ['empty', 'empty', 'empty', 'empty', 'empty']]\n","2001":"<html>\n<head>\n<style>\nhr {\npage-break-before: always;\n}\n<\/style>\n<\/head>\n<body>\n<pre>\nreport 1 text \nhere\n<\/pre>\n<hr>\n<pre>\nreport 2 \ntext here\n<\/pre>\n<hr>\n<pre>\nreport \n3 text here\n<\/pre>\n<\/body>\n<\/html>\n","2002":"#!\/usr\/bin\/jython\nfrom org.opentripplanner.scripting.api import OtpsEntryPoint\n\n# Instantiate an OtpsEntryPoint\notp = OtpsEntryPoint.fromArgs(['--graphs', '.',\n                               '--router', 'portland'])\n\n# Start timing the code\nimport time\nstart_time = time.time()\n\n# Get the default router\n# Could also be called: router = otp.getRouter('paris')\nrouter = otp.getRouter('portland')\n\n# Create a default request for a given time\nreq = otp.createRequest()\nreq.setDateTime(2015, 9, 15, 10, 00, 00)\nreq.setMaxTimeSec(7200)\nreq.setModes('WALK,BUS,RAIL') \n\n# The file points.csv contains the columns GEOID, X and Y.\npoints = otp.loadCSVPopulation('points.csv', 'Y', 'X')\ndests = otp.loadCSVPopulation('points.csv', 'Y', 'X')\n\n# Create a CSV output\nmatrixCsv = otp.createCSVOutput()\nmatrixCsv.setHeader([ 'Origin', 'Destination', 'Walk_distance', 'Travel_time' ])\n\n# Start Loop\nfor origin in points:\n  print \"Processing origin: \", origin\n  req.setOrigin(origin)\n  spt = router.plan(req)\n  if spt is None: continue\n\n  # Evaluate the SPT for all points\n  result = spt.eval(dests)\n\n  # Add a new row of result in the CSV output\n  for r in result:\n    matrixCsv.addRow([ origin.getStringData('GEOID'), r.getIndividual().getStringData('GEOID'), r.getWalkDistance() , r.getTime()])\n\n# Save the result\nmatrixCsv.save('traveltime_matrix.csv')\n\n# Stop timing the code\nprint(\"Elapsed time was %g seconds\" % (time.time() - start_time))\n","2003":"proc = subprocess.Popen([executable, arg1, arg2],\n                        stdout=subprocess.PIPE, stderr=subprocess.PIPE)\nout, err = proc.communicate()\nstatus_code = proc.returncode\n","2004":"MyModel.objects.order_by('field_1__pk', 'field_2__pk', 'field_3__pk', '-time_stamp')\n.distinct('field_1__pk', 'field_2__pk', 'field_3__pk')\n.values('value')\n","2005":"import subprocess\n\nproc = subprocess.Popen([\"python\", \"-c\", \"import writer; writer.write()\"], stdout=subprocess.PIPE)\nout = proc.communicate()[0]\nprint out.upper()\n","2006":"import numpy as np\nimport pylab as pl\n\nx = np.linspace(-1, 1, 100)\ny = np.zeros((5, 100))\nfor i in range(5):\n    y[i] = x**i\n\nax = []    \nkw = {}\nfor i in range(5):\n    if i > 0:\n        kw ={'sharex': ax[0], 'sharey': ax[0]}\n    ax.append(pl.subplot(3, 2, i+1, **kw))\n    ax[i].plot(x, y[i])\n","2007":"getattr(cls, method_name)\n","2008":"from nltk.tokenize import regexp_tokenize\n\nsent = \"I like apple fruit but grape fruit more\"\ndict_list = [\"apple fruit\", \"grape fruit\"]\nnewdict = {}\nfor item in dict_list:\n    dk = item.replace(\" \", \"_\")\n    newdict[item] = dk\n\nfor key, val in newdict.items():\n    if key in sent:\n        sent = sent.replace(key, val)\n\nres = regexp_tokenize(sent, pattern='\\S+')\nprint(res)\n","2009":"class A(object):\n    def test(self):\n        print(\"I am A\")\n\nclass B(object):\n    def test(self, a1, a2):\n        a1.test()\n        a2.test()\n\na1 = A()\na2 = A()\nb = B()\nb.test(a1, a2)\n","2010":"In [11]: df['D'] = pd.Series([[[4,-0.05],[0.03,[-0.02,0.02]],[0.01,-0.03]],\n                              [[4,-0.35],[0.07,[-0.02,0.02]],[0.91,-0.03]]])\nIn [12]: df\nOut[12]:\n   A  B  C                                                  D\n0  0  1  2  [[4, -0.05], [0.03, [-0.02, 0.02]], [0.01, -0....\n1  1  6  5  [[4, -0.35], [0.07, [-0.02, 0.02]], [0.91, -0....\n","2011":"import matplotlib.pylab as pl\nimport numpy as np\n\ndata = np.random.random([10,10]) * 40\n\nhot2 = pl.cm.get_cmap('hot', 20) \n\npl.figure()\npl.subplot(121)\npl.pcolormesh(data, cmap=pl.cm.hot, vmin=0, vmax=20)\npl.colorbar()\npl.subplot(122)\npl.pcolormesh(data, cmap=hot2, vmin=0, vmax=20)\npl.colorbar()\n","2012":"    import wx, os, subprocess\n\n    class MyDialog(wx.Dialog):\n\n        def __init__(self, parent, id, title):\n            wx.Dialog.__init__(self, None, wx.ID_ANY, title, pos=(0, 0), size=(1000,600))\n            self.btn1 = None\n            self.btn2 = None\n            self.btn3 = None\n            self.compute_btn1 = None\n            self.compute_btn2 = None\n\n        def drawAllLines(self):\n            dc = wx.ClientDC(self)\n            dc.SetBrush(wx.Brush('BLACK', wx.SOLID))\n\n            dc.DrawLine(100, 100, 950, 100)\n            dc.DrawLine(100, 200, 480, 200)\n            dc.DrawLine(100, 300, 480, 300)\n            dc.DrawLine(100, 400, 480, 400)\n            dc.DrawLine(100, 500, 950, 500)\n            dc.DrawLine(100, 100, 100, 500)\n\n\n        def buildLayout(self):\n            text = wx.StaticText(self, -1, \"SecureIT: An Operating System Security Tool\", (250,20))\n            font = wx.Font(20, wx.Unconstrained, wx.ITALIC, wx.BOLD)\n            text.SetFont(font)\n\n            self.Button1 = wx.Button(self, -1, 'Malicious Code Protection', (230,140))\n            self.Button1.Bind(wx.EVT_BUTTON,self.button1hide)\n            self.Button1.SetBackgroundColour(\"yellow\")\n            self.Button1.SetForegroundColour(\"blue\")\n\n            self.Button2 = wx.Button(self, -1, 'Authentication', (230,240))\n            self.Button2.Bind(wx.EVT_BUTTON, self.button2hide)\n            self.Button2.SetBackgroundColour(\"yellow\")\n            self.Button2.SetForegroundColour(\"blue\")\n\n\n            self.Button3 = wx.Button(self, -1, 'Data Security',  (230,340))\n            self.Button3.Bind(wx.EVT_BUTTON, self.button3hide)\n            self.Button3.SetBackgroundColour(\"yellow\")\n            self.Button3.SetForegroundColour(\"blue\")\n\n            self.Button4 = wx.Button(self, -1, 'Miscellaneous', (230, 440 ))\n            self.Button4.Bind(wx.EVT_BUTTON, self.button4hide)\n            self.Button4.SetBackgroundColour(\"yellow\")\n            self.Button4.SetForegroundColour(\"blue\")\n\n            self.drawAllLines()\n\n        def clearAllBtn(self):\n            if self.btn1:\n                self.btn1.Hide()\n            if self.btn2:\n                self.btn2.Hide()\n            if self.btn3:\n                self.btn3.Hide()\n            if self.compute_btn2:\n                self.compute_btn2.Hide()\n            if self.compute_btn1:\n                self.compute_btn1.Hide()\n\n        def button1hide(self, event):\n            self.clearAllBtn()\n\n            self.btn1 = wx.StaticText(self, -1, 'Firewall ', (550, 180))\n            self.btn1.SetForegroundColour(\"blue\")\n\n            if os.path.exists('\/usr\/bin\/iptables-xml'):\n                self.btn1.SetForegroundColour(\"dark green\")\n            else:\n                self.btn1.SetForegroundColour(\"red\")\n\n            self.btn2 = wx.StaticText(self, -1, 'Intrusion Detection System ', (550, 260))\n            self.btn2.SetForegroundColour(\"blue\")\n\n\n            if os.path.exists('\/usr\/bin\/snort-mysql') or os.path.exists('usr\/bin\/acidbase'):\n                self.btn2.SetForegroundColour(\"green\")\n            else:\n                self.btn2.SetForegroundColour(\"red\")\n                self.btn2.SetToolTip(wx.ToolTip(\"Intrustion Detection\"\n                                                \" System helps detect intruders. Kindly press the install button \"\n                                                \"to get an IDS for your system.\"\n                                                \"\"))\n                self.compute_btn1 = wx.Button(self, 3, 'install', (750, 250))\n                self.Bind(wx.EVT_BUTTON, self.IDS, id=3)\n\n            self.btn3 = wx.StaticText(self, -1, 'Rootkit Scanner ', (550, 340))\n            self.btn3.SetForegroundColour(\"blue\")\n            if os.path.exists('\/usr\/bin\/rkhunter'):\n                self.btn3.SetForegroundColour(\"green\")\n            else:\n                self.btn3.SetForegroundColour(\"red\")\n                self.btn3.SetToolTip(wx.ToolTip(\"Rootkit Scanner not found\"\n                                                \" System helps detect rootkits. Kindly press the install button \"\n                                                \"to get an IDS for your system.\"\n                                                \"\"))\n                self.compute_btn2 = wx.Button(self, 4, 'install', (750, 330))\n                self.Bind(wx.EVT_BUTTON, self.Rootkit, id=4)\n\n\n        def button2hide(self, event):\n            self.clearAllBtn()\n\n            self.btn1 = wx.StaticText(self, -1, 'Screen Lock ', (550, 180))\n            self.btn1.SetForegroundColour(\"blue\")\n            self.btn2 = wx.StaticText(self, -1, 'Anonymous ', (550, 260))\n            self.btn2.SetForegroundColour(\"blue\")\n            self.btn3 = wx.StaticText(self, -1, 'Guest Login ', (550, 340))\n            self.btn3.SetForegroundColour(\"blue\")\n\n\n        def button3hide(self, event):\n            self.clearAllBtn()\n\n            self.btn1 = wx.StaticText(self, -1, 'Secure Data Deletion ', (550, 180))\n            self.btn1.SetForegroundColour(\"blue\")\n\n            if os.path.exists('\/usr\/bin\/wipe'):\n                self.btn1.SetForegroundColour(\"green\")\n            else:\n                self.btn1.SetForegroundColour(\"red\")\n                self.btn1.SetToolTip(wx.ToolTip(\"Rootkit Scanner not found\"\n                                                \" System helps detect rootkits. Kindly press the install button \"\n                                                \"to get an IDS for your system.\"\n                                                \"\"))\n                self.compute_btn1 = wx.Button(self,5, 'install', (750, 170))\n                self.Bind(wx.EVT_BUTTON, self.wipe, id=5)\n\n            self.btn2 = wx.StaticText(self, -1, 'Folder Encryption ', (550, 260))\n            self.btn2.SetForegroundColour(\"blue\")\n            if os.path.exists('\/usr\/bin\/encfs'):\n                self.btn2.SetForegroundColour(\"dark green\")\n            else:\n                self.btn2.SetForegroundColour(\"red\")\n                self.btn2.SetToolTip(wx.ToolTip(\"Click install to get a rootkit hunter\"))\n                self.compute_btn2 = wx.Button(self, 6, 'install', (750, 260))\n                self.Bind(wx.EVT_BUTTON, self.encfs, id=6)\n\n            self.btn3 = wx.StaticText(self, -1, 'ASLR ', (550, 340))\n            self.btn3.SetForegroundColour(\"blue\")\n\n\n        def button4hide(self, event):\n            self.clearAllBtn()\n\n            self.btn1 = wx.StaticText(self, -1, 'Telnet ', (550, 180))\n            self.btn1.SetForegroundColour(\"blue\")\n            self.btn2 = wx.StaticText(self, -1, 'Folder Encryption ', (550, 260))\n            self.btn2.SetForegroundColour(\"blue\")\n            self.btn3 = wx.StaticText(self, -1, 'ASLR ', (550, 340))\n            self.btn3.SetForegroundColour(\"blue\")\n\n\n        def Rootkit(self, event):\n            os.system(\"gksudo \\\"apt-get -y install rkhunter\\\"\")\n\n        def IDS(self, event):\n            os.system(\"gksudo \\\"apt-get -y install acidbase\\\"\")\n\n        def wipe(self, event):\n            os.system(\"gksudo \\\"apt-get -y install wipe\\\"\")\n\n        def encfs(self, event):\n            os.system(\"gksudo \\\"apt-get -y install encfs\\\"\")\n\n\n    class MyApp(wx.App):\n        def OnInit(self):\n            dlg = MyDialog(self, -1, '')\n            dlg.Show(True)\n            dlg.Centre()\n            dlg.buildLayout()\n            return True\n\n    app = MyApp(0)\n    app.MainLoop()\n","2013":"output_file.write('{:-50} {:-6} {:-3} {:-25} {:-4}\\n'.format(country, category, third, fourth, year)) \n","2014":"s = mode;\nwhile (*s) {\n    switch (*s++) {\n    case 'r':\n        if (rwa) {\n        bad_mode:\n            PyErr_SetString(PyExc_ValueError,\n                    \"Must have exactly one of read\/write\/append mode\");\n            goto error;\n        }\n        rwa = 1;\n        self->readable = 1;\n        break;\n    case 'w':\n        if (rwa)\n            goto bad_mode;\n        rwa = 1;\n        self->writable = 1;\n        flags |= O_CREAT | O_TRUNC;\n        break;\n    case 'a':\n        if (rwa)\n            goto bad_mode;\n        rwa = 1;\n        self->writable = 1;\n        flags |= O_CREAT;\n        append = 1;\n        break;\n    case 'b':\n        break;\n    case '+':\n        if (plus)\n            goto bad_mode;\n        self->readable = self->writable = 1;\n        plus = 1;\n        break;\n    default:\n        PyErr_Format(PyExc_ValueError,\n                 \"invalid mode: %.200s\", mode);\n        goto error;\n    }\n}\n\nif (!rwa)\n    goto bad_mode;\n","2015":">>> filename = 'greatv02_v001_jam.mb'\n>>> import re\n>>> re.findall(r'(?<=_v)\\d+', filename)\n['001']\n>>> \n\n>>> filename = 'greatv02_v001_av456jam.mb'\n>>> re.findall(r'(?<=_v)\\d+', filename)\n['001']\n\n>>> filename = 'greatv02_v001_v456jam.mb'\n>>> re.findall(r'(?<=_v)\\d+', filename)\n['001', '456']\n>>> \n","2016":"lines.linewidth : 2\n\naxes.grid : True  \naxes.linewidth : 0\n\nxtick.major.width : 0\nytick.major.width : 0\n\ngrid.color : black\n","2017":"class ProfileIndex(indexes.SearchIndex, indexes.Indexable):\n    # your other fields, most likely model attributes\n    role_name = indexes.CharField()\n\n    def get_model(self):\n        return Person\n\n    def prepare_role_name(self, person):\n        return person.workplace.role_name\n","2018":"http:\/\/sourceafis.hg.sourceforge.net:8000\/hgroot\/sourceafis\/sourceafis (read-only)\n","2019":".......\n\n# loops berekenen de chaotische nummers voor de input\nfor i in range(c):\n     a_temp = 3.9 * a_temp * (1 - a_temp)\n     b_temp = 3.9 * b_temp * (1 - b_temp)\n     z = z + 1\n\n     #Print resultaten naar tabel\n     print('%10s %20s %20s' % (c, a_temp, b_temp))\n","2020":">>> for n in xrange(11):\n    print \", \".join(str((a, n-2*a)) for a in xrange(n\/2+1))\n...     \n...     \n(0, 0)\n(0, 1)\n(0, 2), (1, 0)\n(0, 3), (1, 1)\n(0, 4), (1, 2), (2, 0)\n(0, 5), (1, 3), (2, 1)\n(0, 6), (1, 4), (2, 2), (3, 0)\n(0, 7), (1, 5), (2, 3), (3, 1)\n(0, 8), (1, 6), (2, 4), (3, 2), (4, 0)\n(0, 9), (1, 7), (2, 5), (3, 3), (4, 1)\n(0, 10), (1, 8), (2, 6), (3, 4), (4, 2), (5, 0)\n","2021":"import wx\nimport time\nfrom threading import Thread\n\ndef print_something_forever(something):\n    while True:\n        print something\n        time.sleep(1)\n\nclass Frame(wx.Frame):\n    def __init__(self,parent):\n        wx.Frame.__init__(self,parent)\n        self.panel= wx.Panel(self)\n        t= Thread(target=print_something_forever,args=(\"Thread alive!\",))\n        t.daemon= True\n        t.start()\n        self.Show()\n\nif __name__ == \"__main__\":\n    app= wx.App(False)\n    Frame(None)\n    app.MainLoop()\n","2022":"pixels = img.load() # create the pixel map\n\nfor i in range(img.size[0]):    # for every pixel:\n    for j in range(img.size[1]):\n        pixels[i,j] = (i, j, 100) # set the colour accordingly\n","2023":"def quick_sort(list):\n    if not list: \n        return list \n    pivot = list[0] \n    lesser = quick_sort([x for x in list[1:] if float(x[1]) < float(pivot[1])], 1) \n    greater = quick_sort([x for x in list[1:] if float(x[1]) >= float(pivot[1])], 1) \n    return lesser + [pivot] + greater\n","2024":"from tkinter import *\n\nroot = Tk()\nbutton = Button(root, text=\"Example button\")\nbutton.pack()\n\nroot.geometry(\"200x200\")\n\nroot.mainloop()\n","2025":"out_cc = env.Command('file.wave.cpp', 'file.cpp', 'wave command < $SOURCE > $TARGET')\nenv.Program('myprog', ['this.cc', 'that.cc', out_cc])\n","2026":"import matplotlib\nmatplotlib.get_cachedir()\n","2027":"from IPython.core.display import HTML\nHTML(\"\"\"\n<style>\n\ndiv.cell { \/* Tunes the space between cells *\/\nmargin-top:1em;\nmargin-bottom:1em;\n}\n\ndiv.text_cell_render h1 { \/* Main titles bigger, centered *\/\nfont-size: 2.2em;\nline-height:1.4em;\ntext-align:center;\n}\n\ndiv.text_cell_render h2 { \/*  Parts names nearer from text *\/\nmargin-bottom: -0.4em;\n}\n\n\ndiv.text_cell_render { \/* Customize text cells *\/\nfont-family: 'Times New Roman';\nfont-size:1.5em;\nline-height:1.4em;\npadding-left:3em;\npadding-right:3em;\n}\n<\/style>\n\"\"\")\n","2028":">>> minput = \"\"\"Yesterday<person>Peter Smith<\/person>drove to<location>New York<\/location>\"\"\"\n>>> from lxml import html\n>>> tree = html.fromstring(minput)\n>>> for e in tree.iter():\n        print e, e.tag, e.text_content()\n        if e.tag() == 'person':          # getting the last name per comment\n           last = e.text_content().split()[-1]\n           print last\n\n\n<Element p at 0x3118ca8> p YesterdayPeter Smithdrove toNew York\n<Element person at 0x3118b48> person Peter Smith\nSmith                                            # here is the last name\n<Element location at 0x3118ba0> location New York\n","2029":">>> sorted(\"asd\") == sorted(\"dsa\")\nTrue\n>>> sorted( \"asd\" ) == sorted( \"dsa\" )\nTrue\n>>> sorted( \"asd\" ) == sorted( \"dsaf\" )\nFalse\n>>> set( \"asd\" ) == set( \"dasf\" )\nFalse\n>>> set( \"asd\" ) == set( \"daas\" )\nTrue\n>>> set( \"asd\" ) ^ set( \"daf\" )\nset(['s', 'f'])\n","2030":"response = urllib2.urlopen(URL)\nlines=response.read().splitlines()\n","2031":"import threading\n\ndef starter_function(cmd_to_execute):\n    os.system(cmd_to_execute)\n\nexecution_thread = threading.Thread(target=starter_function, args=(cmd_to_execute,))\n\nexecution_thread.start()\n","2032":"def update_score(new_score, file_name=\"save.txt\"):\n    with open(file_name,'r+') as saved_file:\n        existing_score = int(saved_file.read())\n    if new_score > existing_score:\n        # replace existing score\n        with open(file_name,'w') as saved_file:\n            saved_file.write(str(new_score))\n","2033":"counter=0\nfor element in string:\n    counter+=bool(function(element))\n    yield counter\n","2034":"xrange(1, n)\n","2035":">>> def some_func():\n...     print 'in some_func'\n...     return [1, 2, 3, 10]\n... \n>>> for a in some_func():\n...     print a\n... \nin some_func\n1\n2\n3\n10\n","2036":"def insert_top_to_bottom(test_list, v):\n    return test_list[v : -1] + test_list[:v] + [test_list[-1]]\n\ntest_list = [1, 28, 3, 4, 27, 8, 7, 6, 5]\ntest_list = insert_top_to_bottom(test_list, 5)\nprint test_list\n","2037":"def lahendaRuut(maatriks, rida, veerg):\n    prindiMaatriks(maatriks)\n\n    if numberOlemas(maatriks, rida, veerg) == True:\n        print(\"juba olemas\")\n        if veerg > 7:\n            print(\"yolo2\");\n            rida = rida + 1\n            if rida > 8:\n                print(\"DONE!\")\n                sys.exit()\n            veerg = -1        \n        lahendaRuut(maatriks, rida, veerg + 1)\n    else:\n        for i in range (1, 10):\n            if kasSobib(maatriks, rida, veerg, i):\n                maatriks[rida][veerg] = i\n                if veerg > 7:\n                    print(\"yolo\");\n                    rida = rida + 1\n                    if rida > 8:\n                        print(\"DONE!\")\n                        sys.exit()\n                    veerg = -1\n                lahendaRuut(maatriks, rida, veerg + 1)\n            print(\"ei sobi\")\n\n         #=========================\n         # very important line of code\n         # resets the cell before the algorithm backtracks\n         maatriks[rida][veerg] = 0 \n         #=========================\n\n\n    prindiMaatriks(maatriks)\n","2038":"    lines = pastedtext.splitlines()\n","2039":"match = re.search(r'(\\w+)\\s(?:D\\.C\\.), (\\w\\w)\\W', location).groups()\n","2040":"import struct\n\nRESULT_FORMAT = 'd' # Double-precision float.\nRESULT_SIZE = struct.calcsize(RESULT_FORMAT)\nRESULT_FILE = '\/tmp\/results'\n\ndef worker(position, input_filename1, input_filename2):\n    val = MyScript(input_filename1, input_filename2)\n    with open(RESULT_FILE, 'rb+') as f:\n        f.seek(RESULT_SIZE * position)\n        f.write(struct.pack(RESULT_FORMAT, val))\n","2041":"In [4]: df[(df[['cell1','cell2']] > 2).any(axis=1)]\nOut[4]:\n   cell1  cell2 gene\n0      5     12  foo\n1      0     90  bar\n2      1     13  qux\n","2042":"an = Animal()\nattrs = vars(an)\n# {'kids': 0, 'name': 'Dog', 'color': 'Spotted', 'age': 10, 'legs': 2, 'smell': 'Alot'}\n# now dump this in some way or another\nprint ', '.join(\"%s: %s\" % item for item in attrs.items())\n","2043":">>> from BeautifulSoup import BeautifulSoup\n>>> import re\n>>> page = '''\\\n<form action=\"\/2811457\/follow?gsid=3_5bce9b871484d3af90c89f37\" method=\"post\">\n<div>\n<a href=\"\/2811457\/follow?page=2&amp;gsid=3_5bce9b871484d3af90c89f37\">next_page<\/a>\n&nbsp;<input name=\"mp\" type=\"hidden\" value=\"3\" \/>\n<input type=\"text\" name=\"page\" size=\"2\" style='-wap-input-format: \"*N\"' \/>\n<input type=\"submit\" value=\"jump\" \/>&nbsp;1\/3\n<\/div>\n<\/form>\n'''\n>>> soup = BeautifulSoup(page)\n>>> soup.find(text=re.compile(r'next_page')).parent.get('href')\nu'\/2811457\/follow?page=2&gsid=3_5bce9b871484d3af90c89f37'\n","2044":"def landed2(input):\n    idx = np.floor(input).astype(np.int)\n    mask = binary_matrix[idx[:,0], idx[:,1]] == 1\n    return input[mask]\n\nres1 = landed(input)\nres2 = landed2(input)\nnp.testing.assert_allclose(res1, res2)\n","2045":"function O = split_array(I)\n% Wrapper function to sort the output of the recursive output\n    O = split_array_R(I);\n    [~,ind] = sort(cellfun(@numel, O), 'descend');\n    O = O(ind);\nend\n\nfunction O = split_array_R(I, I1, I2)\n\n    if ~iscell(I)\n        n = ceil(numel(I)\/2);\n        I1 = I(1:n);\n        I2 = I(n+1:end);\n        I = {I};\n    end;\n\n    if numel(I1) > 1\n        O1 = split_array_R(I1);\n    else\n        O1 = {I1};\n    end\n\n    if numel(I2) > 1\n        O2 = split_array_R(I2);\n    else\n        O2 = {I2};\n    end\n\n    O = {I{:}, O1{:}, O2{:}};\nend\n","2046":"unicode.join(u'\\n',map(unicode,result))\n","2047":"try:\n    return abs(number)\nexcept TypeError:\n    return 'Nope'\n","2048":"<input name=\"email\" value=\"{{ email }}\">\n","2049":"s[s.index('|')+1:]\n","2050":"import string\nfrom itertools import product\n\nindexes = set(['A', 'AA', 'CB', 'B', 'H', 'IZ'])\nall_indexes = set([''])\nunused_indexes = set()\n\nwhile (unused_indexes == set()):\n    all_indexes = set([''.join(p) for p in product(all_indexes, list(string.ascii_uppercase))])\n    unused_indexes = all_indexes - indexes\nprint(unused_indexes) # this prints out all indexes that are available at that length\nprint(sorted(list(unused_indexes))[0]) # this prints out the first available index\n>>> C\n","2051":"re.sub( \n      \"(\\d+)-(\\d+)\" ,        \n      lambda x : \",\".join( map( str , range( int(x.group(1)) , int( x.group(2) ) +1 ) )) , \n      \"1,3-5,7\" )\n","2052":">>> import timeit\n>>> # For the set\n>>> timeit.timeit(\"for i in s: pass\", \"s = set([1,4,7,10,13])\")\n0.20565616500061878\n>>> # For the list\n>>> timeit.timeit(\"for i in l: pass\", \"l = [1,4,7,10,13]\")\n0.19532391999928223\n","2053":"p=array_2\nq=array_2\np=numpy.vstack([p,q])\n","2054":".. parsed-literal::\n\n    .\/home\/user\/somecommand-|version|\n","2055":"outputwriter = csv.writer(open('output.csv', 'w'), delimiter = ' ')\nfor tup in in_tup:\n    inputList = [tup[0]]\n    inputList.extend(tup[1])\n    outputwriter.writerow(inputList)\n","2056":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set(style=\"ticks\", color_codes=True)\n\ntips = sns.load_dataset(\"tips\")\n\ng = sns.FacetGrid(tips, col=\"time\",  hue=\"smoker\")\ng = g.map(plt.scatter, \"total_bill\", \"tip\", edgecolor=\"w\")\n\ng.axes[0,0].set_xlabel('axes label 1')\ng.axes[0,1].set_xlabel('axes label 2')\n\nplt.show()\n","2057":">>> s = \"cats \\\\ dogs\"\n>>> print s\ncats \\ dogs\n>>> print s.replace(\"\\\\\", \"\\\\\\\\\")\ncats \\\\ dogs\n","2058":"class Mixin(object):\n    def __init__(self, parent=None, arg=None):\n        super(Mixin, self).__init__(parent=parent)  # This will call QWidget.__init__\n        self.arg = arg\n        self.parent = parent\n\n        # Setup the UI from QDesigner\n        ui = Ui_widget()\n        ui.setupUi(self.parent)\n\n    def setLayout(self, layout, title):\n        self.parent.setWindowTitle(title)\n        self.parent.setLayout(layout)\n\n    def doSomething(self):\n        # Do something awesome.\n        pass\n\n\nclass Widget(Mixin, QtGui.QWidget):\n    def __init__(self, parent, arg):\n        super(Widget, self).__init__(parent=parent, arg=arg)  # Calls Mixin.__init__\n","2059":"\"time\": {\n    \"M\": {\n      \"creation_timestamp_utc\": {\n        \"S\": \"2012-08-31T03:35:56.881Z\"\n      },\n      \"localtime\": {\n        \"S\": \"12:25:31\"\n      },\n      \"received_timestamp_utc\": {\n        \"S\": \"2012-08-31T07:50:50.367Z\"\n      },\n      \"spacecraft_clock\": {\n        \"S\": \"399657440.746\"\n      }\n    }\n","2060":"In [13]: soup = BeautifulSoup(\"\"\"<div id=\"content\">\nI want to keep this<br \/><div id=\"blah\">I want to remove this<\/div>\n<\/div>\"\"\")\n\nIn [14]: soup = BeautifulSoup(\"\"\"<div id=\"content\">\n   ....: I want to keep this<br \/><div id=\"blah\">I want to remove this<\/div>\n   ....: <\/div>\"\"\")\n\nIn [15]: blah = soup.find(id='blah')\n\nIn [16]: _ = blah.extract()\n\nIn [17]: soup\nOut[17]: \n<html><body><div id=\"content\">\nI want to keep this<br\/>\n<\/div><\/body><\/html>\n","2061":"import mock\n\nclass A(object):\n    def meth(self, a):\n        return a\na = A()\nma = mock.Mock(wraps=a)\n","2062":"@route('\/open\/<item_id:int>\/<url:path>')\ndef open(item_id , url):\n    if request.query_string:\n        url += '?' + request.query_string\n    print url\n","2063":"b = Button(...)\nb.image = c_black\nprint(b.image.cget('file'))\n","2064":"n=int(input('n='))\n\nfor m in range(1, n+1):\n    d=m**2\n    x = m\n\n    all = 0\n    all2 = 0\n\n    while x != 0:\n        if x%10 == d%10:\n            all += 1\n        x = x\/\/10\n        d = d\/\/10\n        all2 += 1\n\n    if all == all2:\n        print m\n","2065":"import datetime \nimport random\nimport numpy as np\nimport math\nimport sys\nfrom openpyxl import Workbook\nfrom openpyxl.cell import get_column_letter\nfrom openpyxl import load_workbook\nfrom tempfile import TemporaryFile\nfrom random import normalvariate, expovariate, seed, gammavariate\nfrom math import sqrt\nfrom itertools import groupby\n\n## Test Lists for testing code\nlst_FC_error = []\n\n## Using Lists and Excel\nwb = Workbook()\ndest_filename = r'RHF_Loop_test4py.xlsx'\n\nEC_PlanData = []\nsheet1 = wb.create_sheet(0)\nsheet1.title = \"EC_PlanData\"\n\nEC_FC_Data_original = []\nsheet2 = wb.create_sheet(1)\nsheet2.title = \"EC_FC_Data_original\"\n\nFC_AccData = []\nsheet5 = wb.create_sheet(4)\nsheet5.title = \"FC_Acc_Data\"\n\nEC_FC_Data_commited = []\nsheet6 = wb.create_sheet(5)\nsheet6.title = \"EC_FC_Data_commited\"\n\nFC_Error = 0\nalpha = 50\nbeta = 10\nCurrentWeekRangeSize = 10\nCurrentWeek = range(1,CurrentWeekRangeSize,1)\nRemainingFCError = .2\n\nfor Global_counter in CurrentWeek:\n\n    if Global_counter == 1:\n\n        for index in range(Global_counter,Global_counter + 52 + CurrentWeekRangeSize,1):\n            PlanWeek = index\n            EC_demand = 500.0\n            if  EC_demand <= 0:\n                EC_demand = EC_demand *(-1)\n            EC_PlanData.append(EC_demand)\n            d = sheet1.cell(row = Global_counter, column = PlanWeek)\n            print \"hello\", Global_counter, PlanWeek\n            d2 = sheet2.cell(row = Global_counter, column = PlanWeek)\n            d.value = EC_demand\n            d2.value = EC_demand\n        wb.save('RHF_Loop_test4py.xlsx')\n        print \"-------------\"\n    else:\n        #this was the original logic:\n        #for index in range(Global_counter,Global_counter + 52,1):\n        for index in range(Global_counter,52,1):\n            PlanWeek = index\n            DiffWeek = PlanWeek - Global_counter\n            Sigma = 1\n            mu = 0\n            FC_VZ = random.normalvariate(mu, Sigma)\n            if FC_VZ > 0:\n               FC_VZ = 1\n            FC_Error = FC_Error+RemainingFCError   ## decrease demand\n            fcerr = sheet5.cell(row = Global_counter, column = PlanWeek)\n            fcerr.value = FC_Error\n\n            Prev_Week = Global_counter - 1\n            ECDD1 = sheet1.cell(row=Prev_Week, column=PlanWeek).value\n            print Prev_Week, PlanWeek, ECDD1\n            ECDD2 = sheet1.cell(row=Prev_Week, column=PlanWeek).value\n            EC_demand = ECDD1 - (ECDD2*FC_Error)\n\n            FC_Error = 0   \n            ECPD = sheet1.cell(row = Global_counter, column=PlanWeek)\n            ECPD.value = EC_demand\n            FCAD = sheet6.cell(row = Global_counter, column=PlanWeek)\n            FCAD.value = FC_Error\n            IEFD = sheet2.cell(row = Global_counter, column=PlanWeek)\n            IEFD.value = EC_demand\n            EC_demand = 0\n        wb.save('RHF_Loop_test4py.xlsx')\n","2066":"' | '.join(new_line.split(','))\n","2067":"import xlwt, csv, os\n\ncsv_folder = \"Output\/\"\n\nbook = xlwt.Workbook()\nfor fil in os.listdir(csv_folder):\n    sheet = book.add_sheet(fil[:-4])\n    with open(csv_folder + fil) as filname:\n        reader = csv.reader(filname)\n        i = 0\n        for row in reader:\n            for j, each in enumerate(row):\n                sheet.write(i, j, each)\n            i += 1\n\nbook.save(\"Output.xls\")\n","2068":"bad_code = \"system('rm -rf \/users')\"\neval(bad_code)\n","2069":"#!\/usr\/bin\/env python\n# vim:ai:et:ts=2:sw=2:bg=dark\nfrom twisted.internet import protocol\nfrom twisted.protocols.basic import LineOnlyReceiver\nfrom twisted.application import service\n\n\nfrom xml.etree import ElementTree as ET\n\nfrom aMuleClass import amulecmd\n\nclass DialogueProtocol(LineOnlyReceiver):\n  def connectionMade(self):\n    print \"Connected: %s\" % self.transport.getPeer().host\n  def lineReceived(self, line):\n    parsed= ET.XML(line)\n    if parsed.attrib['type'] == 'request':\n      if parsed.attrib['prompt'] == 'results':\n        self.transport.write(self.factory.mule.results())\n      elif parsed.attrib['prompt'] == 'downloads':\n        self.transport.write(self.factory.mule.downloads())\n      else:\n        print \"Invalid request: %s\\n\" % line\n    else:\n      query= parsed.attrib['value']\n      if parsed.attrib['type'] == 'search':\n        print \"must search for %s\" % query\n        self.factory.mule.search(query)\n      elif parsed.attrib['type'] == 'cancel':\n        print \"must cancel %s\" % query\n        self.factory.mule.command(\"cancel %s\" % query)\n      elif parsed.attrib['type'] == 'download':\n        print \"must download %s\" % query\n        self.factory.mule.command(\"download %s\" % query)\n\nclass MyService(service.Service):\n  def __init__(self,port=14000):\n    self.port = port\n  def startService(self):\n    self.factory = protocol.Factory()\n    self.factory.protocol = DialogueProtocol\n    from twisted.internet import reactor\n    reactor.callWhenRunning(self.startListening)\n  def startListening(self):\n    self.factory.mule = amulecmd()\n    from twisted.internet import reactor\n    self.listener = reactor.listenTCP(self.port,self.factory)\n    print \"Started listening\"\n  def stopService(self):\n    self.listener.stopListening()\n\nif __name__ == '__main__':\n  pass\nelse:\n  application = service.Application(\"aMuleSocket\")\n  services = service.IServiceCollection(application)\n  MyService().setServiceParent(services)\n","2070":"$ python2 ~\/google-cloud-sdk\/platform\/google_appengine\/remote_api_shell.py -s localhost:8080\nEmail: test@example.com\nPassword: \nApp Engine remote_api shell\nPython 2.7.8 (default, Sep 24 2014, 18:26:21) \n[GCC 4.9.1 20140903 (prerelease)]\nThe db, ndb, users, urlfetch, and memcache modules are imported.\ndev~{appid}> \n","2071":"{{ appointment.teachers|join:\", \" }}\n{{ appointment.subjects|join:\", \" }}\n","2072":"url_for('handle_contact_form', _external=True)\n","2073":"for i, (d1, d2) in enumerate(zip(self.csv_readingon, self.csv_readingkun)):\n    # pass\n","2074":"#!python3\n\nfrom collections import defaultdict\n\nAB_map = defaultdict(set)\nValues = set()\n\nwith open('train.tsv') as infile:\n    headers = next(infile)\n    for line in infile:\n        if not line.strip():\n            continue\n        a,b = map(int, line.split())\n        AB_map[a].add(b)\n        Values.add(b)\n\nprint(\"# of keys:\", len(AB_map.keys()))\nprint(\"# of values:\", len(Values))\n\ndef impact_of_deletion(keylist):\n    values_impacted = set([])\n    for key in keylist:\n        values_impacted.update(AB_map[key])\n    return values_impacted\n\nfor hyp in ((1,), (1,6)):\n    print(\"Deleting\", hyp, \"would impact:\", len(impact_of_deletion(hyp)))\n","2075":"def sparse_col_vec_dot(csc_mat, csc_vec):\n    # row numbers of vector non-zero entries\n    v_rows = csc_vec.indices\n    v_data = csc_vec.data\n    # matrix description arrays\n    m_dat = csc_mat.data\n    m_ind = csc_mat.indices\n    m_ptr = csc_mat.indptr\n    # output arrays\n    sizes = m_ptr.take(v_rows+1) - m_ptr.take(v_rows)\n    sizes = np.concatenate(([0], np.cumsum(sizes)))\n    data = np.empty((sizes[-1],), dtype=csc_mat.dtype)\n    indices = np.empty((sizes[-1],), dtype=np.intp)\n    indptr = np.zeros((2,), dtype=np.intp)\n\n    for j in range(len(sizes)-1):\n        slice_ = slice(*m_ptr[[v_rows[j] ,v_rows[j]+1]])\n        np.multiply(m_dat[slice_], v_data[j], out=data[sizes[j]:sizes[j+1]])\n        indices[sizes[j]:sizes[j+1]] = m_ind[slice_]\n    indptr[-1] = len(data)\n    ret = sps.csc_matrix((data, indices, indptr),\n                         shape=csc_vec.shape)\n    ret.sum_duplicates()\n\n    return ret\n","2076":"# get tables\nm_table = ItemMySQL.__table__\npg_table = ItemPG.__table__\n\n# SQL Expression that gets a range of rows quickly\npg_q = select([pg_table]).where(\n    and_(\n        pg_table.c.id >= id_start,\n        pg_table.c.id <= id_end,\n\n))\n\n# get PG DB rows\neng_pg = DBSessionPG.get_bind()\nconn_pg = eng_pg.connect()\nresult = conn_pg.execute(pg_q)\nrows_pg = result.fetchall()\n\n\nfor row_pg in rows_pg:\n    # convert PG row object into dict\n    value_d = dict(row_pg)\n    # insert into MySQL\n    m_table.insert().values(**value_d)\n\n# close row proxy object and connection, else suffer leaks\nresult.close()\nconn_pg.close()\n","2077":"import ImageFont, ImageDraw, Image\n\nimage = Image.open('hsvwheel.png')\ndraw = ImageDraw.Draw(image)\ntxt = \"Hello World\"\nfontsize = 1  # starting font size\n\n# portion of image width you want text width to be\nimg_fraction = 0.50\n\nfont = ImageFont.truetype(\"arial.ttf\", fontsize)\nwhile font.getsize(txt)[0] < img_fraction*image.size[0]:\n    # iterate until the text size is just larger than the criteria\n    fontsize += 1\n    font = ImageFont.truetype(\"arial.ttf\", fontsize)\n\n# optionally de-increment to be sure it is less than criteria\nfontsize -= 1\nfont = ImageFont.truetype(\"arial.ttf\", fontsize)\n\nprint 'final font size',fontsize\ndraw.text((10, 25), txt, font=font) # put the text on the image\nimage.save('hsvwheel_txt.png') # save it\n","2078":"class DeletionMixin(object):\n    \"\"\"\n    A mixin providing the ability to delete objects\n    \"\"\"\n    success_url = None\n\n    def delete(self, request, *args, **kwargs):\n        \"\"\"\n        Calls the delete() method on the fetched object and then\n        redirects to the success URL.\n        \"\"\"\n        self.object = self.get_object()\n        self.object.delete()\n        return HttpResponseRedirect(self.get_success_url())\n\n    # Add support for browsers which only accept GET and POST for now.\n    def post(self, *args, **kwargs):\n        return self.delete(*args, **kwargs)\n\n    def get_success_url(self):\n        if self.success_url:\n            return self.success_url\n        else:\n            raise ImproperlyConfigured(\n                \"No URL to redirect to. Provide a success_url.\")\n","2079":">>> import collections\n>>> dir(collections)\n['Callable', 'Container', 'Hashable', 'ItemsView', 'Iterable', 'Iterator', 'KeysView', 'Mapping', 'MappingView', 'MutableMapping', 'MutableSequence', 'MutableSet', 'Sequence', 'Set', 'Sized', 'ValuesView', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '_abcoll', '_iskeyword', '_itemgetter', '_sys', 'defaultdict', 'deque', 'namedtuple']\n>>>\n","2080":"pip install svn+http:\/\/code.google.com\/p\/pyclamd\/source\/browse\/#svn%2Ftrunk\n","2081":"import OpenSSL.crypto\nfrom OpenSSL.crypto import load_certificate_request, FILETYPE_PEM\n\ncsr = '''-----BEGIN NEW CERTIFICATE REQUEST-----\nMIIDPzCCAqgCAQAwZDELMAkGA1UEBhMCQ04xCzAJBgNVBAgTAmJqMQswCQYDVQQH\nEwJiajERMA8GA1UEChMIbXhjei5uZXQxETAPBgNVBAsTCG14Y3oubmV0MRUwEwYD\nVQQDEwx3d3cubXhjei5uZXQwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMQ7\nan4v6pHRusBA0prMWXMWJCXY1AO1H0X8pvZj96T5GWg++JPCQE9guPgGwlD02U0B\nNDoEABeD1fwyKZ+JV5UFiOeSjO5sWrzIupdMI7hf34UaPNxHo6r4bLYEykw\/Rnmb\nGKnNcD4QlPkypE+mLR4p0bnHZhe3lOlNtgd6NpXbAgMBAAGgggGZMBoGCisGAQQB\ngjcNAgMxDBYKNS4yLjM3OTAuMjB7BgorBgEEAYI3AgEOMW0wazAOBgNVHQ8BAf8E\nBAMCBPAwRAYJKoZIhvcNAQkPBDcwNTAOBggqhkiG9w0DAgICAIAwDgYIKoZIhvcN\nAwQCAgCAMAcGBSsOAwIHMAoGCCqGSIb3DQMHMBMGA1UdJQQMMAoGCCsGAQUFBwMB\nMIH9BgorBgEEAYI3DQICMYHuMIHrAgEBHloATQBpAGMAcgBvAHMAbwBmAHQAIABS\nAFMAQQAgAFMAQwBoAGEAbgBuAGUAbAAgAEMAcgB5AHAAdABvAGcAcgBhAHAAaABp\nAGMAIABQAHIAbwB2AGkAZABlAHIDgYkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAADANBgkqhkiG9w0BAQUFAAOBgQBIKHVhHb9FZdVLV4VZ\n9DK4aBSuYY\/\/jlIpvsfMIdHXfAsuan7w7PH87asp1wdb6lD9snvLZix1UGK7VQg6\nwUFYNlMqJh1m7ITVvzhjdnx7EzCKkBXSxEom4mwbvSNvzqOKAWsDE0gvHQ9aCSby\nNFBQQMoW94LqrG\/kuIQtjwVdZA==\n-----END NEW CERTIFICATE REQUEST-----'''\n\nreq = load_certificate_request(FILETYPE_PEM, csr)\nkey = req.get_pubkey()\nkey_type = 'RSA' if key.type() == OpenSSL.crypto.TYPE_RSA else 'DSA'\nsubject = req.get_subject()\ncomponents = dict(subject.get_components())\nprint \"Common name:\", components['CN']\nprint \"Organisation:\", components['O']\nprint \"Orgainistional unit\", components['OU']\nprint \"City\/locality:\", components['L']\nprint \"State\/province:\", components['ST']\nprint \"Country:\", components['C']\nprint \"Signature algorithm:\", '?'\nprint \"Key algorithm:\", key_type\nprint \"Key size:\", key.bits()\n","2082":"data = list()\nfor root, dirs, files in os.walk(targetdir):\n    for filename in files:\n        nm, ext = os.path.splitext(filename)\n        if ext.lower().endswith(('.xlsx', '.m4v', 'mov')):\n            fullpath = os.path.join(os.path.abspath(root), filename)\n            data.append((filename, filepath))\ndf1 = pd.DataFrame(data, columns=['filename', 'fullpath'])\nprint(df1)\n","2083":"import mock\n\ndef function_under_test(f):\n    f.tell()  # => 0\n    f.read()\n    f.tell()  # => 0\n    return f.name\n\nwith mock.patch('__main__.open', mock.mock_open(read_data=''), create=True) as m:\n    with open('\/tmp\/1') as f:\n        f.name = '\/tmp\/1'\n        f.tell.return_value = 0\n        assert function_under_test(f) == '\/tmp\/1'\n","2084":"actions = [\n  ('ROAMING'  , lambda service,nr_called,cost: service=='R'),\n  ('ONNET'    , lambda service,nr_called,cost: service in ('V  O','S') and float(cost)==0.0),\n  ('INTERNET' , lambda service,nr_called,cost: service=='' and nr_called==''),\n  ('OTHERSERV', lambda service,nr_called,cost: service in ('I','ROAMING - MMS'))\n\n  # fallthrough\n  ('OTHERSERV', lambda service_nr_called,cost: True)\n]\n\nfor value,check in actions:\n  if check(service,nr_called,cost):\n    return value\n\n# fallthrough\nreturn 'OTHERSERV'\n","2085":"from AppKit import NSPasteboard\nfrom LaunchServices import \npb = NSPasteboard.generalPasteboard()\ntext = pb.stringForType_(kUTTypeUTF8PlainText)\n","2086":"# Produces all possible RPN layouts with n values and n-1 binary operators,\n# representing values as '#' and operators as '+'\ndef RPN(n):\n  if n == 1:\n    yield '#'\n  for i in range(1,n):\n    for left in RPN(i):\n      for right in RPN(n - i):\n        yield left + right + '+' \n","2087":"shape(\"circle\")\nshapesize(5,4,1)\nfillcolor(\"white\")\n","2088":"a=np.array([[1,1,10],[1,2,20],[2,1,30],[1,3,40],[2,3,50]])\nxy= a[:,:2].tolist()\n[[x,y,z] for [x,y,z] in a if [y,x] in xy and x!=y]\n\n[[1, 2, 20], [2, 1, 30]]\n","2089":"from itertools import tee, izip\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return izip(a, b)\n\nwith open(filename) as f: # Remember to use a with block so the file is safely closed after\n    for line, next_line in pairwise(f):\n        # do stuff\n","2090":"df.to_csv(filename, date_format='%Y-%m-%d')\n","2091":"binaryInt[2:]\n","2092":">>> from django.db import models\n>>> from a1.models import Foo, Bar\n>>> \n>>> f1 = Foo.objects.create(aaa=5)\n>>> f2 = Foo.objects.create(aaa=8)\n>>> f3 = Foo.objects.create(aaa=1)\n>>> f4 = Foo.objects.create(aaa=12)\n>>> f5 = Foo.objects.create(aaa=3)\n>>> \n>>> b1 = Bar.objects.create(foo=f2, bbb=True)\n>>> b2 = Bar.objects.create(foo=f1, bbb=True)\n>>> b3 = Bar.objects.create(foo=f5, bbb=False)\n>>> b4 = Bar.objects.create(foo=f3, bbb=True)\n>>> b5 = Bar.objects.create(foo=f2, bbb=True)\n>>> b6 = Bar.objects.create(foo=f3, bbb=True)\n>>> b7 = Bar.objects.create(foo=f4, bbb=True)\n>>> b8 = Bar.objects.create(foo=f5, bbb=False)\n>>> b9 = Bar.objects.create(foo=f4, bbb=False)\n>>> b10 = Bar.objects.create(foo=f5, bbb=True)\n>>> b11 = Bar.objects.create(foo=f4, bbb=True)\n>>> b12 = Bar.objects.create(foo=f4, bbb=True)\n>>> b13 = Bar.objects.create(foo=f4, bbb=True)\n>>> b14 = Bar.objects.create(foo=f4, bbb=True)\n>>> b15 = Bar.objects.create(foo=f4, bbb=True)\n>>> \n>>> Foo.objects.filter(bar__bbb=True).count()\n12\n>>> Foo.objects.filter(bar__bbb=True).aggregate(models.Sum(\"aaa\"))['aaa__sum']\n98\n>>> Foo.objects.filter(bar__bbb=True).distinct().count()\n5\n>>> Foo.objects.filter(bar__bbb=True).distinct().aggregate(models.Sum(\"aaa\"))['aaa__sum']\n29\n","2093":"def indices(lst, items):\n    last_index = 0\n\n    for item in items:\n        last_index += lst.index(item, last_index + 1) + 1\n\n        yield last_index\n","2094":"def sumD(num):\n    if num == 0: return 0\n    return (num % 10) + sumD(num \/\/ 10)\n","2095":"import matplotlib.pyplot as plt, numpy as np, numpy.random, scipy\n\n#histogram definition\nxyrange = [[-5,5],[-5,5]] # data range\nbins = [100,100] # number of bins\nthresh = 3  #density threshold\n\n#data definition\nN = 1e5;\nxdat, ydat = np.random.normal(size=N), np.random.normal(1, 0.6, size=N)\n\n# histogram the data\nhh, locx, locy = scipy.histogram2d(xdat, ydat, range=xyrange, bins=bins)\nposx = np.digitize(xdat, locx)\nposy = np.digitize(ydat, locy)\n\n#select points within the histogram\nind = (posx > 0) & (posx <= bins[0]) & (posy > 0) & (posy <= bins[1])\nhhsub = hh[posx[ind] - 1, posy[ind] - 1] # values of the histogram where the points are\nxdat1 = xdat[ind][hhsub < thresh] # low density points\nydat1 = ydat[ind][hhsub < thresh]\nhh[hh < thresh] = np.nan # fill the areas with low density by NaNs\n\nplt.imshow(np.flipud(hh.T),cmap='jet',extent=np.array(xyrange).flatten(), interpolation='none', origin='upper')\nplt.colorbar()   \nplt.plot(xdat1, ydat1, '.',color='darkblue')\nplt.show()\n","2096":">>> def sparse_rolling_corr(ts, other, window):\n...     return rolling_corr(ts.dropna(), other[ts.name].dropna(), window).reindex_like(ts)\n... \n>>> hey.apply(sparse_rolling_corr, args=(hoo, 4))\n","2097":">>> strs =  \"\/forums\/support\/\"\n>>> spl =strs.strip('\/').split('\/')\n>>> a,b,c,d,e = spl + [None]*(5-len(spl))\n>>> a,b,c,d,e\n('forums', 'support', None, None, None)\n\n>>> strs = \"\/forums\/support\/windows\/\"\n>>> spl =strs.strip('\/').split('\/')\n>>> a,b,c,d,e = spl + [None]*(5-len(spl))\n>>> a,b,c,d,e\n('forums', 'support', 'windows', None, None)\n\n>>> strs = \"\/forums\/support\/windows\/help_i_deleted_sys32\/6\/\"\n>>> spl =strs.strip('\/').split('\/')\n>>> a,b,c,d,e = spl + [None]*(5-len(spl))\n>>> a,b,c,d,e\n('forums', 'support', 'windows', 'help_i_deleted_sys32', '6')\n","2098":"def fromIriToUri(iri):\nmyUri = []\niri = urlsplit(iri)\niri = list(iri)\nfor i in iri:\n    try:\n        i.encode(\"ascii\")\n        myUri.append(i)\n    except UnicodeEncodeError:\n        myUri.append(urllib.parse.quote(i))\nuri = urllib.parse.urlunsplit(myUri)\nreturn uri\n","2099":">>> from requests.compat import urljoin, quote_plus\n>>> url = \"http:\/\/some-address.com\/api\/\"\n>>> term = 'This is a test'\n>>> urljoin(url, quote_plus(term))\n'http:\/\/some-address.com\/api\/This+is+a+test'\n","2100":"from ctypes import *\n# if on Windows, may need to change following to use WinDLL instead of CDLL\nvix = CDLL('vix.dll')\n\n# user defined types\nVixHandle = c_int\nVixHandleType = c_int\nVixError = c_uint64\nVixPropertyType = c_int\nVixPropertyID = c_int\nVixEventType = c_int\nVixHostOptions = c_int\nVixServiceProvider = c_int\nVixFindItemType = c_int\nVixVMOpenOptions = c_int\nVixPumpEventsOptions = c_int\nVixVMPowerOpOptions = c_int\nVixVMDeleteOptions = c_int\nVixPowerState = c_int\nVixToolsState = c_int\nVixRunProgramOptions = c_int\nVixRemoveSnapshotOptions = c_int\nVixCreateSnapshotOptions = c_int\nVixMsgSharedFolderOptions = c_int\nVixCloneType = c_int\nVixEventProc = CFUNCTYPE(VixHandle,\n    VixEventType,\n    VixHandle,\n    c_void_p)\n\n# constant definitions\nVIX_INVALID_HANDLE = 0\nVIX_HANDLETYPE_NONE = 0\nVIX_HANDLETYPE_HOST = 2\nVIX_HANDLETYPE_VM = 3\nVIX_HANDLETYPE_NETWORK = 5\nVIX_HANDLETYPE_JOB = 6\nVIX_HANDLETYPE_SNAPSHOT = 7\nVIX_HANDLETYPE_PROPERTY_LIST = 9\nVIX_HANDLETYPE_METADATA_CONTAINER = 11\nVIX_OK = 0\nVIX_E_FAIL = 1\nVIX_E_OUT_OF_MEMORY = 2\nVIX_E_INVALID_ARG = 3\nVIX_E_FILE_NOT_FOUND = 4\nVIX_E_OBJECT_IS_BUSY = 5\nVIX_E_NOT_SUPPORTED = 6\nVIX_E_FILE_ERROR = 7\nVIX_E_DISK_FULL = 8\nVIX_E_INCORRECT_FILE_TYPE = 9\nVIX_E_CANCELLED = 10\nVIX_E_FILE_READ_ONLY = 11\nVIX_E_FILE_ALREADY_EXISTS = 12\nVIX_E_FILE_ACCESS_ERROR = 13\nVIX_E_REQUIRES_LARGE_FILES = 14\nVIX_E_FILE_ALREADY_LOCKED = 15\nVIX_E_VMDB = 16\nVIX_E_NOT_SUPPORTED_ON_REMOTE_OBJECT = 20\nVIX_E_FILE_TOO_BIG = 21\nVIX_E_FILE_NAME_INVALID = 22\nVIX_E_ALREADY_EXISTS = 23\nVIX_E_BUFFER_TOOSMALL = 24\nVIX_E_OBJECT_NOT_FOUND = 25\nVIX_E_HOST_NOT_CONNECTED = 26\nVIX_E_INVALID_UTF8_STRING = 27\nVIX_E_OPERATION_ALREADY_IN_PROGRESS = 31\nVIX_E_UNFINISHED_JOB = 29\nVIX_E_NEED_KEY = 30\nVIX_E_LICENSE = 32\nVIX_E_VM_HOST_DISCONNECTED = 34\nVIX_E_AUTHENTICATION_FAIL = 35\nVIX_E_HOST_CONNECTION_LOST = 36\nVIX_E_DUPLICATE_NAME = 41\nVIX_E_INVALID_HANDLE = 1000\nVIX_E_NOT_SUPPORTED_ON_HANDLE_TYPE = 1001\nVIX_E_TOO_MANY_HANDLES = 1002\nVIX_E_NOT_FOUND = 2000\nVIX_E_TYPE_MISMATCH = 2001\nVIX_E_INVALID_XML = 2002\nVIX_E_TIMEOUT_WAITING_FOR_TOOLS = 3000\nVIX_E_UNRECOGNIZED_COMMAND = 3001\nVIX_E_OP_NOT_SUPPORTED_ON_GUEST = 3003\nVIX_E_PROGRAM_NOT_STARTED = 3004\nVIX_E_CANNOT_START_READ_ONLY_VM = 3005\nVIX_E_VM_NOT_RUNNING = 3006\nVIX_E_VM_IS_RUNNING = 3007\nVIX_E_CANNOT_CONNECT_TO_VM = 3008\nVIX_E_POWEROP_SCRIPTS_NOT_AVAILABLE = 3009\nVIX_E_NO_GUEST_OS_INSTALLED = 3010\nVIX_E_VM_INSUFFICIENT_HOST_MEMORY = 3011\nVIX_E_SUSPEND_ERROR = 3012\nVIX_E_VM_NOT_ENOUGH_CPUS = 3013\nVIX_E_HOST_USER_PERMISSIONS = 3014\nVIX_E_GUEST_USER_PERMISSIONS = 3015\nVIX_E_TOOLS_NOT_RUNNING = 3016\nVIX_E_GUEST_OPERATIONS_PROHIBITED = 3017\nVIX_E_ANON_GUEST_OPERATIONS_PROHIBITED = 3018\nVIX_E_ROOT_GUEST_OPERATIONS_PROHIBITED = 3019\nVIX_E_MISSING_ANON_GUEST_ACCOUNT = 3023\nVIX_E_CANNOT_AUTHENTICATE_WITH_GUEST = 3024\nVIX_E_UNRECOGNIZED_COMMAND_IN_GUEST = 3025\nVIX_E_CONSOLE_GUEST_OPERATIONS_PROHIBITED = 3026\nVIX_E_MUST_BE_CONSOLE_USER = 3027\nVIX_E_VMX_MSG_DIALOG_AND_NO_UI = 3028\nVIX_E_NOT_ALLOWED_DURING_VM_RECORDING = 3029\nVIX_E_NOT_ALLOWED_DURING_VM_REPLAY = 3030\nVIX_E_OPERATION_NOT_ALLOWED_FOR_LOGIN_TYPE = 3031\nVIX_E_LOGIN_TYPE_NOT_SUPPORTED = 3032\nVIX_E_EMPTY_PASSWORD_NOT_ALLOWED_IN_GUEST = 3033\nVIX_E_INTERACTIVE_SESSION_NOT_PRESENT = 3034\nVIX_E_INTERACTIVE_SESSION_USER_MISMATCH = 3035\nVIX_E_UNABLE_TO_REPLAY_VM = 3039\nVIX_E_CANNOT_POWER_ON_VM = 3041\nVIX_E_NO_DISPLAY_SERVER = 3043\nVIX_E_VM_NOT_RECORDING = 3044\nVIX_E_VM_NOT_REPLAYING = 3045\nVIX_E_VM_NOT_FOUND = 4000\nVIX_E_NOT_SUPPORTED_FOR_VM_VERSION = 4001\nVIX_E_CANNOT_READ_VM_CONFIG = 4002\nVIX_E_TEMPLATE_VM = 4003\nVIX_E_VM_ALREADY_LOADED = 4004\nVIX_E_VM_ALREADY_UP_TO_DATE = 4006\nVIX_E_VM_UNSUPPORTED_GUEST = 4011\nVIX_E_UNRECOGNIZED_PROPERTY = 6000\nVIX_E_INVALID_PROPERTY_VALUE = 6001\nVIX_E_READ_ONLY_PROPERTY = 6002\nVIX_E_MISSING_REQUIRED_PROPERTY = 6003\nVIX_E_INVALID_SERIALIZED_DATA = 6004\nVIX_E_PROPERTY_TYPE_MISMATCH = 6005\nVIX_E_BAD_VM_INDEX = 8000\nVIX_E_INVALID_MESSAGE_HEADER = 10000\nVIX_E_INVALID_MESSAGE_BODY = 10001\nVIX_E_SNAPSHOT_INVAL = 13000\nVIX_E_SNAPSHOT_DUMPER = 13001\nVIX_E_SNAPSHOT_DISKLIB = 13002\nVIX_E_SNAPSHOT_NOTFOUND = 13003\nVIX_E_SNAPSHOT_EXISTS = 13004\nVIX_E_SNAPSHOT_VERSION = 13005\nVIX_E_SNAPSHOT_NOPERM = 13006\nVIX_E_SNAPSHOT_CONFIG = 13007\nVIX_E_SNAPSHOT_NOCHANGE = 13008\nVIX_E_SNAPSHOT_CHECKPOINT = 13009\nVIX_E_SNAPSHOT_LOCKED = 13010\nVIX_E_SNAPSHOT_INCONSISTENT = 13011\nVIX_E_SNAPSHOT_NAMETOOLONG = 13012\nVIX_E_SNAPSHOT_VIXFILE = 13013\nVIX_E_SNAPSHOT_DISKLOCKED = 13014\nVIX_E_SNAPSHOT_DUPLICATEDDISK = 13015\nVIX_E_SNAPSHOT_INDEPENDENTDISK = 13016\nVIX_E_SNAPSHOT_NONUNIQUE_NAME = 13017\nVIX_E_SNAPSHOT_MEMORY_ON_INDEPENDENT_DISK = 13018\nVIX_E_SNAPSHOT_MAXSNAPSHOTS = 13019\nVIX_E_SNAPSHOT_MIN_FREE_SPACE = 13020\nVIX_E_SNAPSHOT_HIERARCHY_TOODEEP = 13021\nVIX_E_HOST_DISK_INVALID_VALUE = 14003\nVIX_E_HOST_DISK_SECTORSIZE = 14004\nVIX_E_HOST_FILE_ERROR_EOF = 14005\nVIX_E_HOST_NETBLKDEV_HANDSHAKE = 14006\nVIX_E_HOST_SOCKET_CREATION_ERROR = 14007\nVIX_E_HOST_SERVER_NOT_FOUND = 14008\nVIX_E_HOST_NETWORK_CONN_REFUSED = 14009\nVIX_E_HOST_TCP_SOCKET_ERROR = 14010\nVIX_E_HOST_TCP_CONN_LOST = 14011\nVIX_E_HOST_NBD_HASHFILE_VOLUME = 14012\nVIX_E_HOST_NBD_HASHFILE_INIT = 14013\nVIX_E_DISK_INVAL = 16000\nVIX_E_DISK_NOINIT = 16001\nVIX_E_DISK_NOIO = 16002\nVIX_E_DISK_PARTIALCHAIN = 16003\nVIX_E_DISK_NEEDSREPAIR = 16006\nVIX_E_DISK_OUTOFRANGE = 16007\nVIX_E_DISK_CID_MISMATCH = 16008\nVIX_E_DISK_CANTSHRINK = 16009\nVIX_E_DISK_PARTMISMATCH = 16010\nVIX_E_DISK_UNSUPPORTEDDISKVERSION = 16011\nVIX_E_DISK_OPENPARENT = 16012\nVIX_E_DISK_NOTSUPPORTED = 16013\nVIX_E_DISK_NEEDKEY = 16014\nVIX_E_DISK_NOKEYOVERRIDE = 16015\nVIX_E_DISK_NOTENCRYPTED = 16016\nVIX_E_DISK_NOKEY = 16017\nVIX_E_DISK_INVALIDPARTITIONTABLE = 16018\nVIX_E_DISK_NOTNORMAL = 16019\nVIX_E_DISK_NOTENCDESC = 16020\nVIX_E_DISK_NEEDVMFS = 16022\nVIX_E_DISK_RAWTOOBIG = 16024\nVIX_E_DISK_TOOMANYOPENFILES = 16027\nVIX_E_DISK_TOOMANYREDO = 16028\nVIX_E_DISK_RAWTOOSMALL = 16029\nVIX_E_DISK_INVALIDCHAIN = 16030\nVIX_E_DISK_KEY_NOTFOUND = 16052\nVIX_E_DISK_SUBSYSTEM_INIT_FAIL = 16053\nVIX_E_DISK_INVALID_CONNECTION = 16054\nVIX_E_DISK_ENCODING = 16061\nVIX_E_DISK_CANTREPAIR = 16062\nVIX_E_DISK_INVALIDDISK = 16063\nVIX_E_DISK_NOLICENSE = 16064\nVIX_E_DISK_NODEVICE = 16065\nVIX_E_DISK_UNSUPPORTEDDEVICE = 16066\nVIX_E_CRYPTO_UNKNOWN_ALGORITHM = 17000\nVIX_E_CRYPTO_BAD_BUFFER_SIZE = 17001\nVIX_E_CRYPTO_INVALID_OPERATION = 17002\nVIX_E_CRYPTO_RANDOM_DEVICE = 17003\nVIX_E_CRYPTO_NEED_PASSWORD = 17004\nVIX_E_CRYPTO_BAD_PASSWORD = 17005\nVIX_E_CRYPTO_NOT_IN_DICTIONARY = 17006\nVIX_E_CRYPTO_NO_CRYPTO = 17007\nVIX_E_CRYPTO_ERROR = 17008\nVIX_E_CRYPTO_BAD_FORMAT = 17009\nVIX_E_CRYPTO_LOCKED = 17010\nVIX_E_CRYPTO_EMPTY = 17011\nVIX_E_CRYPTO_KEYSAFE_LOCATOR = 17012\nVIX_E_CANNOT_CONNECT_TO_HOST = 18000\nVIX_E_NOT_FOR_REMOTE_HOST = 18001\nVIX_E_INVALID_HOSTNAME_SPECIFICATION = 18002\nVIX_E_SCREEN_CAPTURE_ERROR = 19000\nVIX_E_SCREEN_CAPTURE_BAD_FORMAT = 19001\nVIX_E_SCREEN_CAPTURE_COMPRESSION_FAIL = 19002\nVIX_E_SCREEN_CAPTURE_LARGE_DATA = 19003\nVIX_E_GUEST_VOLUMES_NOT_FROZEN = 20000\nVIX_E_NOT_A_FILE = 20001\nVIX_E_NOT_A_DIRECTORY = 20002\nVIX_E_NO_SUCH_PROCESS = 20003\nVIX_E_FILE_NAME_TOO_LONG = 20004\nVIX_E_TOOLS_INSTALL_NO_IMAGE = 21000\nVIX_E_TOOLS_INSTALL_IMAGE_INACCESIBLE = 21001\nVIX_E_TOOLS_INSTALL_NO_DEVICE = 21002\nVIX_E_TOOLS_INSTALL_DEVICE_NOT_CONNECTED = 21003\nVIX_E_TOOLS_INSTALL_CANCELLED = 21004\nVIX_E_TOOLS_INSTALL_INIT_FAILED = 21005\nVIX_E_TOOLS_INSTALL_AUTO_NOT_SUPPORTED = 21006\nVIX_E_TOOLS_INSTALL_GUEST_NOT_READY = 21007\nVIX_E_TOOLS_INSTALL_SIG_CHECK_FAILED = 21008\nVIX_E_TOOLS_INSTALL_ERROR = 21009\nVIX_E_TOOLS_INSTALL_ALREADY_UP_TO_DATE = 21010\nVIX_E_TOOLS_INSTALL_IN_PROGRESS = 21011\nVIX_E_WRAPPER_WORKSTATION_NOT_INSTALLED = 22001\nVIX_E_WRAPPER_VERSION_NOT_FOUND = 22002\nVIX_E_WRAPPER_SERVICEPROVIDER_NOT_FOUND = 22003\nVIX_E_WRAPPER_PLAYER_NOT_INSTALLED = 22004\nVIX_E_WRAPPER_RUNTIME_NOT_INSTALLED = 22005\nVIX_E_WRAPPER_MULTIPLE_SERVICEPROVIDERS = 22006\nVIX_E_MNTAPI_MOUNTPT_NOT_FOUND = 24000\nVIX_E_MNTAPI_MOUNTPT_IN_USE = 24001\nVIX_E_MNTAPI_DISK_NOT_FOUND = 24002\nVIX_E_MNTAPI_DISK_NOT_MOUNTED = 24003\nVIX_E_MNTAPI_DISK_IS_MOUNTED = 24004\nVIX_E_MNTAPI_DISK_NOT_SAFE = 24005\nVIX_E_MNTAPI_DISK_CANT_OPEN = 24006\nVIX_E_MNTAPI_CANT_READ_PARTS = 24007\nVIX_E_MNTAPI_UMOUNT_APP_NOT_FOUND = 24008\nVIX_E_MNTAPI_UMOUNT = 24009\nVIX_E_MNTAPI_NO_MOUNTABLE_PARTITONS = 24010\nVIX_E_MNTAPI_PARTITION_RANGE = 24011\nVIX_E_MNTAPI_PERM = 24012\nVIX_E_MNTAPI_DICT = 24013\nVIX_E_MNTAPI_DICT_LOCKED = 24014\nVIX_E_MNTAPI_OPEN_HANDLES = 24015\nVIX_E_MNTAPI_CANT_MAKE_VAR_DIR = 24016\nVIX_E_MNTAPI_NO_ROOT = 24017\nVIX_E_MNTAPI_LOOP_FAILED = 24018\nVIX_E_MNTAPI_DAEMON = 24019\nVIX_E_MNTAPI_INTERNAL = 24020\nVIX_E_MNTAPI_SYSTEM = 24021\nVIX_E_MNTAPI_NO_CONNECTION_DETAILS = 24022\nVIX_E_MNTAPI_INCOMPATIBLE_VERSION = 24300\nVIX_E_MNTAPI_OS_ERROR = 24301\nVIX_E_MNTAPI_DRIVE_LETTER_IN_USE = 24302\nVIX_E_MNTAPI_DRIVE_LETTER_ALREADY_ASSIGNED = 24303\nVIX_E_MNTAPI_VOLUME_NOT_MOUNTED = 24304\nVIX_E_MNTAPI_VOLUME_ALREADY_MOUNTED = 24305\nVIX_E_MNTAPI_FORMAT_FAILURE = 24306\nVIX_E_MNTAPI_NO_DRIVER = 24307\nVIX_E_MNTAPI_ALREADY_OPENED = 24308\nVIX_E_MNTAPI_ITEM_NOT_FOUND = 24309\nVIX_E_MNTAPI_UNSUPPROTED_BOOT_LOADER = 24310\nVIX_E_MNTAPI_UNSUPPROTED_OS = 24311\nVIX_E_MNTAPI_CODECONVERSION = 24312\nVIX_E_MNTAPI_REGWRITE_ERROR = 24313\nVIX_E_MNTAPI_UNSUPPORTED_FT_VOLUME = 24314\nVIX_E_MNTAPI_PARTITION_NOT_FOUND = 24315\nVIX_E_MNTAPI_PUTFILE_ERROR = 24316\nVIX_E_MNTAPI_GETFILE_ERROR = 24317\nVIX_E_MNTAPI_REG_NOT_OPENED = 24318\nVIX_E_MNTAPI_REGDELKEY_ERROR = 24319\nVIX_E_MNTAPI_CREATE_PARTITIONTABLE_ERROR = 24320\nVIX_E_MNTAPI_OPEN_FAILURE = 24321\nVIX_E_MNTAPI_VOLUME_NOT_WRITABLE = 24322\nVIX_E_NET_HTTP_UNSUPPORTED_PROTOCOL = 30001\nVIX_E_NET_HTTP_URL_MALFORMAT = 30003\nVIX_E_NET_HTTP_COULDNT_RESOLVE_PROXY = 30005\nVIX_E_NET_HTTP_COULDNT_RESOLVE_HOST = 30006\nVIX_E_NET_HTTP_COULDNT_CONNECT = 30007\nVIX_E_NET_HTTP_HTTP_RETURNED_ERROR = 30022\nVIX_E_NET_HTTP_OPERATION_TIMEDOUT = 30028\nVIX_E_NET_HTTP_SSL_CONNECT_ERROR = 30035\nVIX_E_NET_HTTP_TOO_MANY_REDIRECTS = 30047\nVIX_E_NET_HTTP_TRANSFER = 30200\nVIX_E_NET_HTTP_SSL_SECURITY = 30201\nVIX_E_NET_HTTP_GENERIC = 30202\nVIX_PROPERTYTYPE_ANY = 0\nVIX_PROPERTYTYPE_INTEGER = 1\nVIX_PROPERTYTYPE_STRING = 2\nVIX_PROPERTYTYPE_BOOL = 3\nVIX_PROPERTYTYPE_HANDLE = 4\nVIX_PROPERTYTYPE_INT64 = 5\nVIX_PROPERTYTYPE_BLOB = 6\nVIX_PROPERTY_NONE = 0\nVIX_PROPERTY_META_DATA_CONTAINER = 2\nVIX_PROPERTY_HOST_HOSTTYPE = 50\nVIX_PROPERTY_HOST_API_VERSION = 51\nVIX_PROPERTY_VM_NUM_VCPUS = 101\nVIX_PROPERTY_VM_VMX_PATHNAME = 103\nVIX_PROPERTY_VM_VMTEAM_PATHNAME = 105\nVIX_PROPERTY_VM_MEMORY_SIZE = 106\nVIX_PROPERTY_VM_READ_ONLY = 107\nVIX_PROPERTY_VM_NAME = 108\nVIX_PROPERTY_VM_GUESTOS = 109\nVIX_PROPERTY_VM_IN_VMTEAM = 128\nVIX_PROPERTY_VM_POWER_STATE = 129\nVIX_PROPERTY_VM_TOOLS_STATE = 152\nVIX_PROPERTY_VM_IS_RUNNING = 196\nVIX_PROPERTY_VM_SUPPORTED_FEATURES = 197\nVIX_PROPERTY_VM_IS_RECORDING = 236\nVIX_PROPERTY_VM_IS_REPLAYING = 237\nVIX_PROPERTY_JOB_RESULT_ERROR_CODE = 3000\nVIX_PROPERTY_JOB_RESULT_VM_IN_GROUP = 3001\nVIX_PROPERTY_JOB_RESULT_USER_MESSAGE = 3002\nVIX_PROPERTY_JOB_RESULT_EXIT_CODE = 3004\nVIX_PROPERTY_JOB_RESULT_COMMAND_OUTPUT = 3005\nVIX_PROPERTY_JOB_RESULT_HANDLE = 3010\nVIX_PROPERTY_JOB_RESULT_GUEST_OBJECT_EXISTS = 3011\nVIX_PROPERTY_JOB_RESULT_GUEST_PROGRAM_ELAPSED_TIME = 3017\nVIX_PROPERTY_JOB_RESULT_GUEST_PROGRAM_EXIT_CODE = 3018\nVIX_PROPERTY_JOB_RESULT_ITEM_NAME = 3035\nVIX_PROPERTY_JOB_RESULT_FOUND_ITEM_DESCRIPTION = 3036\nVIX_PROPERTY_JOB_RESULT_SHARED_FOLDER_COUNT = 3046\nVIX_PROPERTY_JOB_RESULT_SHARED_FOLDER_HOST = 3048\nVIX_PROPERTY_JOB_RESULT_SHARED_FOLDER_FLAGS = 3049\nVIX_PROPERTY_JOB_RESULT_PROCESS_ID = 3051\nVIX_PROPERTY_JOB_RESULT_PROCESS_OWNER = 3052\nVIX_PROPERTY_JOB_RESULT_PROCESS_COMMAND = 3053\nVIX_PROPERTY_JOB_RESULT_FILE_FLAGS = 3054\nVIX_PROPERTY_JOB_RESULT_PROCESS_START_TIME = 3055\nVIX_PROPERTY_JOB_RESULT_VM_VARIABLE_STRING = 3056\nVIX_PROPERTY_JOB_RESULT_PROCESS_BEING_DEBUGGED = 3057\nVIX_PROPERTY_JOB_RESULT_SCREEN_IMAGE_SIZE = 3058\nVIX_PROPERTY_JOB_RESULT_SCREEN_IMAGE_DATA = 3059\nVIX_PROPERTY_JOB_RESULT_FILE_SIZE = 3061\nVIX_PROPERTY_JOB_RESULT_FILE_MOD_TIME = 3062\nVIX_PROPERTY_JOB_RESULT_EXTRA_ERROR_INFO = 3084\nVIX_PROPERTY_FOUND_ITEM_LOCATION = 4010\nVIX_PROPERTY_SNAPSHOT_DISPLAYNAME = 4200\nVIX_PROPERTY_SNAPSHOT_DESCRIPTION = 4201\nVIX_PROPERTY_SNAPSHOT_POWERSTATE = 4205\nVIX_PROPERTY_SNAPSHOT_IS_REPLAYABLE = 4207\nVIX_PROPERTY_GUEST_SHAREDFOLDERS_SHARES_PATH = 4525\nVIX_PROPERTY_VM_ENCRYPTION_PASSWORD = 7001\nVIX_EVENTTYPE_JOB_COMPLETED = 2\nVIX_EVENTTYPE_JOB_PROGRESS = 3\nVIX_EVENTTYPE_FIND_ITEM = 8\nVIX_EVENTTYPE_CALLBACK_SIGNALLED = 2\nVIX_FILE_ATTRIBUTES_DIRECTORY = 0x0001\nVIX_FILE_ATTRIBUTES_SYMLINK = 0x0002\nVIX_HOSTOPTION_USE_EVENT_PUMP = 0x0008\nVIX_SERVICEPROVIDER_DEFAULT = 1\nVIX_SERVICEPROVIDER_VMWARE_SERVER = 2\nVIX_SERVICEPROVIDER_VMWARE_WORKSTATION = 3\nVIX_SERVICEPROVIDER_VMWARE_PLAYER = 4\nVIX_SERVICEPROVIDER_VMWARE_VI_SERVER = 10\nVIX_API_VERSION = -1\nVIX_FIND_RUNNING_VMS = 1\nVIX_FIND_REGISTERED_VMS = 4\nVIX_VMOPEN_NORMAL = 0x0\nVIX_PUMPEVENTOPTION_NONE = 0\nVIX_VMPOWEROP_NORMAL = 0\nVIX_VMPOWEROP_FROM_GUEST = 0x0004\nVIX_VMPOWEROP_SUPPRESS_SNAPSHOT_POWERON = 0x0080\nVIX_VMPOWEROP_LAUNCH_GUI = 0x0200\nVIX_VMPOWEROP_START_VM_PAUSED = 0x1000\nVIX_VMDELETE_DISK_FILES = 0x0002\nVIX_POWERSTATE_POWERING_OFF = 0x0001\nVIX_POWERSTATE_POWERED_OFF = 0x0002\nVIX_POWERSTATE_POWERING_ON = 0x0004\nVIX_POWERSTATE_POWERED_ON = 0x0008\nVIX_POWERSTATE_SUSPENDING = 0x0010\nVIX_POWERSTATE_SUSPENDED = 0x0020\nVIX_POWERSTATE_TOOLS_RUNNING = 0x0040\nVIX_POWERSTATE_RESETTING = 0x0080\nVIX_POWERSTATE_BLOCKED_ON_MSG = 0x0100\nVIX_POWERSTATE_PAUSED = 0x0200\nVIX_POWERSTATE_RESUMING = 0x0800\nVIX_TOOLSSTATE_UNKNOWN = 0x0001\nVIX_TOOLSSTATE_RUNNING = 0x0002\nVIX_TOOLSSTATE_NOT_INSTALLED = 0x0004\nVIX_VM_SUPPORT_SHARED_FOLDERS = 0x0001\nVIX_VM_SUPPORT_MULTIPLE_SNAPSHOTS = 0x0002\nVIX_VM_SUPPORT_TOOLS_INSTALL = 0x0004\nVIX_VM_SUPPORT_HARDWARE_UPGRADE = 0x0008\nVIX_LOGIN_IN_GUEST_REQUIRE_INTERACTIVE_ENVIRONMENT = 0x08\nVIX_RUNPROGRAM_RETURN_IMMEDIATELY = 0x0001\nVIX_RUNPROGRAM_ACTIVATE_WINDOW = 0x0002\nVIX_VM_GUEST_VARIABLE = 1\nVIX_VM_CONFIG_RUNTIME_ONLY = 2\nVIX_GUEST_ENVIRONMENT_VARIABLE = 3\nVIX_SNAPSHOT_REMOVE_CHILDREN = 0x0001\nVIX_SNAPSHOT_INCLUDE_MEMORY = 0x0002\nVIX_SHAREDFOLDER_WRITE_ACCESS = 0x04\nVIX_CAPTURESCREENFORMAT_PNG = 0x01\nVIX_CAPTURESCREENFORMAT_PNG_NOCOMPRESS = 0x02\nVIX_CLONETYPE_FULL = 0\nVIX_CLONETYPE_LINKED = 1\nVIX_INSTALLTOOLS_MOUNT_TOOLS_INSTALLER = 0x00\nVIX_INSTALLTOOLS_AUTO_UPGRADE = 0x01\nVIX_INSTALLTOOLS_RETURN_IMMEDIATELY = 0x02\n\n# functions\nvix.Vix_GetErrorText.restype = c_char_p\nvix.Vix_GetErrorText.argtypes = [VixError,c_char_p]\nvix.Vix_ReleaseHandle.restype = None\nvix.Vix_ReleaseHandle.argtypes = [VixHandle]\nvix.Vix_AddRefHandle.restype = None\nvix.Vix_AddRefHandle.argtypes = [VixHandle]\nvix.Vix_GetHandleType.restype = VixHandleType\nvix.Vix_GetHandleType.argtypes = [VixHandle]\nvix.Vix_GetProperties.restype = VixError\n# warning - vix.Vix_GetProperties takes variable argument list\nvix.Vix_GetProperties.argtypes = [VixHandle,VixPropertyID]\nvix.Vix_GetPropertyType.restype = VixError\nvix.Vix_GetPropertyType.argtypes = [VixHandle,VixPropertyID,POINTER(VixPropertyType)]\nvix.Vix_FreeBuffer.restype = None\nvix.Vix_FreeBuffer.argtypes = [c_void_p]\nvix.VixHost_Connect.restype = VixHandle\nvix.VixHost_Connect.argtypes = [c_int,VixServiceProvider,c_char_p,c_int,c_char_p,c_char_p,VixHostOptions,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixHost_Disconnect.restype = None\nvix.VixHost_Disconnect.argtypes = [VixHandle]\nvix.VixHost_RegisterVM.restype = VixHandle\nvix.VixHost_RegisterVM.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p]\nvix.VixHost_UnregisterVM.restype = VixHandle\nvix.VixHost_UnregisterVM.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p]\nvix.VixHost_FindItems.restype = VixHandle\nvix.VixHost_FindItems.argtypes = [VixHandle,VixFindItemType,VixHandle,c_int32,POINTER(VixEventProc),c_void_p]\nvix.VixHost_OpenVM.restype = VixHandle\nvix.VixHost_OpenVM.argtypes = [VixHandle,c_char_p,VixVMOpenOptions,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.Vix_PumpEvents.restype = None\nvix.Vix_PumpEvents.argtypes = [VixHandle,VixPumpEventsOptions]\nvix.VixPropertyList_AllocPropertyList.restype = VixError\n# warning - vix.VixPropertyList_AllocPropertyList takes variable argument list\nvix.VixPropertyList_AllocPropertyList.argtypes = [VixHandle,POINTER(VixHandle),c_int]\nvix.VixVM_Open.restype = VixHandle\nvix.VixVM_Open.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p]\nvix.VixVM_PowerOn.restype = VixHandle\nvix.VixVM_PowerOn.argtypes = [VixHandle,VixVMPowerOpOptions,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_PowerOff.restype = VixHandle\nvix.VixVM_PowerOff.argtypes = [VixHandle,VixVMPowerOpOptions,POINTER(VixEventProc),c_void_p]\nvix.VixVM_Reset.restype = VixHandle\nvix.VixVM_Reset.argtypes = [VixHandle,VixVMPowerOpOptions,POINTER(VixEventProc),c_void_p]\nvix.VixVM_Suspend.restype = VixHandle\nvix.VixVM_Suspend.argtypes = [VixHandle,VixVMPowerOpOptions,POINTER(VixEventProc),c_void_p]\nvix.VixVM_Pause.restype = VixHandle\nvix.VixVM_Pause.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_Unpause.restype = VixHandle\nvix.VixVM_Unpause.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_Delete.restype = VixHandle\nvix.VixVM_Delete.argtypes = [VixHandle,VixVMDeleteOptions,POINTER(VixEventProc),c_void_p]\nvix.VixVM_BeginRecording.restype = VixHandle\nvix.VixVM_BeginRecording.argtypes = [VixHandle,c_char_p,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_EndRecording.restype = VixHandle\nvix.VixVM_EndRecording.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_BeginReplay.restype = VixHandle\nvix.VixVM_BeginReplay.argtypes = [VixHandle,VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_EndReplay.restype = VixHandle\nvix.VixVM_EndReplay.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_WaitForToolsInGuest.restype = VixHandle\nvix.VixVM_WaitForToolsInGuest.argtypes = [VixHandle,c_int,POINTER(VixEventProc),c_void_p]\nvix.VixVM_LoginInGuest.restype = VixHandle\nvix.VixVM_LoginInGuest.argtypes = [VixHandle,c_char_p,c_char_p,c_int,POINTER(VixEventProc),c_void_p]\nvix.VixVM_LogoutFromGuest.restype = VixHandle\nvix.VixVM_LogoutFromGuest.argtypes = [VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_RunProgramInGuest.restype = VixHandle\nvix.VixVM_RunProgramInGuest.argtypes = [VixHandle,c_char_p,c_char_p,VixRunProgramOptions,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_ListProcessesInGuest.restype = VixHandle\nvix.VixVM_ListProcessesInGuest.argtypes = [VixHandle,c_int,POINTER(VixEventProc),c_void_p]\nvix.VixVM_KillProcessInGuest.restype = VixHandle\nvix.VixVM_KillProcessInGuest.argtypes = [VixHandle,c_uint64,c_int,POINTER(VixEventProc),c_void_p]\nvix.VixVM_RunScriptInGuest.restype = VixHandle\nvix.VixVM_RunScriptInGuest.argtypes = [VixHandle,c_char_p,c_char_p,VixRunProgramOptions,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_OpenUrlInGuest.restype = VixHandle\nvix.VixVM_OpenUrlInGuest.argtypes = [VixHandle,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_CopyFileFromHostToGuest.restype = VixHandle\nvix.VixVM_CopyFileFromHostToGuest.argtypes = [VixHandle,c_char_p,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_CopyFileFromGuestToHost.restype = VixHandle\nvix.VixVM_CopyFileFromGuestToHost.argtypes = [VixHandle,c_char_p,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_DeleteFileInGuest.restype = VixHandle\nvix.VixVM_DeleteFileInGuest.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p]\nvix.VixVM_FileExistsInGuest.restype = VixHandle\nvix.VixVM_FileExistsInGuest.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p]\nvix.VixVM_RenameFileInGuest.restype = VixHandle\nvix.VixVM_RenameFileInGuest.argtypes = [VixHandle,c_char_p,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_CreateTempFileInGuest.restype = VixHandle\nvix.VixVM_CreateTempFileInGuest.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_GetFileInfoInGuest.restype = VixHandle\nvix.VixVM_GetFileInfoInGuest.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p]\nvix.VixVM_ListDirectoryInGuest.restype = VixHandle\nvix.VixVM_ListDirectoryInGuest.argtypes = [VixHandle,c_char_p,c_int,POINTER(VixEventProc),c_void_p]\nvix.VixVM_CreateDirectoryInGuest.restype = VixHandle\nvix.VixVM_CreateDirectoryInGuest.argtypes = [VixHandle,c_char_p,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_DeleteDirectoryInGuest.restype = VixHandle\nvix.VixVM_DeleteDirectoryInGuest.argtypes = [VixHandle,c_char_p,c_int,POINTER(VixEventProc),c_void_p]\nvix.VixVM_DirectoryExistsInGuest.restype = VixHandle\nvix.VixVM_DirectoryExistsInGuest.argtypes = [VixHandle,c_char_p,POINTER(VixEventProc),c_void_p]\nvix.VixVM_ReadVariable.restype = VixHandle\nvix.VixVM_ReadVariable.argtypes = [VixHandle,c_int,c_char_p,c_int,POINTER(VixEventProc),c_void_p]\nvix.VixVM_WriteVariable.restype = VixHandle\nvix.VixVM_WriteVariable.argtypes = [VixHandle,c_int,c_char_p,c_char_p,c_int,POINTER(VixEventProc),c_void_p]\nvix.VixVM_GetNumRootSnapshots.restype = VixError\nvix.VixVM_GetNumRootSnapshots.argtypes = [VixHandle,POINTER(c_int)]\nvix.VixVM_GetRootSnapshot.restype = VixError\nvix.VixVM_GetRootSnapshot.argtypes = [VixHandle,c_int,POINTER(VixHandle)]\nvix.VixVM_GetCurrentSnapshot.restype = VixError\nvix.VixVM_GetCurrentSnapshot.argtypes = [VixHandle,POINTER(VixHandle)]\nvix.VixVM_GetNamedSnapshot.restype = VixError\nvix.VixVM_GetNamedSnapshot.argtypes = [VixHandle,c_char_p,POINTER(VixHandle)]\nvix.VixVM_RemoveSnapshot.restype = VixHandle\nvix.VixVM_RemoveSnapshot.argtypes = [VixHandle,VixHandle,VixRemoveSnapshotOptions,POINTER(VixEventProc),c_void_p]\nvix.VixVM_RevertToSnapshot.restype = VixHandle\nvix.VixVM_RevertToSnapshot.argtypes = [VixHandle,VixHandle,VixVMPowerOpOptions,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_CreateSnapshot.restype = VixHandle\nvix.VixVM_CreateSnapshot.argtypes = [VixHandle,c_char_p,c_char_p,VixCreateSnapshotOptions,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_EnableSharedFolders.restype = VixHandle\nvix.VixVM_EnableSharedFolders.argtypes = [VixHandle,c_byte,c_int,POINTER(VixEventProc),c_void_p]\nvix.VixVM_GetNumSharedFolders.restype = VixHandle\nvix.VixVM_GetNumSharedFolders.argtypes = [VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_GetSharedFolderState.restype = VixHandle\nvix.VixVM_GetSharedFolderState.argtypes = [VixHandle,c_int,POINTER(VixEventProc),c_void_p]\nvix.VixVM_SetSharedFolderState.restype = VixHandle\nvix.VixVM_SetSharedFolderState.argtypes = [VixHandle,c_char_p,c_char_p,VixMsgSharedFolderOptions,POINTER(VixEventProc),c_void_p]\nvix.VixVM_AddSharedFolder.restype = VixHandle\nvix.VixVM_AddSharedFolder.argtypes = [VixHandle,c_char_p,c_char_p,VixMsgSharedFolderOptions,POINTER(VixEventProc),c_void_p]\nvix.VixVM_RemoveSharedFolder.restype = VixHandle\nvix.VixVM_RemoveSharedFolder.argtypes = [VixHandle,c_char_p,c_int,POINTER(VixEventProc),c_void_p]\nvix.VixVM_CaptureScreenImage.restype = VixHandle\nvix.VixVM_CaptureScreenImage.argtypes = [VixHandle,c_int,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_Clone.restype = VixHandle\nvix.VixVM_Clone.argtypes = [VixHandle,VixHandle,VixCloneType,c_char_p,c_int,VixHandle,POINTER(VixEventProc),c_void_p]\nvix.VixVM_UpgradeVirtualHardware.restype = VixHandle\nvix.VixVM_UpgradeVirtualHardware.argtypes = [VixHandle,c_int,POINTER(VixEventProc),c_void_p]\nvix.VixVM_InstallTools.restype = VixHandle\nvix.VixVM_InstallTools.argtypes = [VixHandle,c_int,c_char_p,POINTER(VixEventProc),c_void_p]\nvix.VixJob_Wait.restype = VixError\n# warning - vix.VixJob_Wait takes variable argument list\nvix.VixJob_Wait.argtypes = [VixHandle,VixPropertyID]\nvix.VixJob_CheckCompletion.restype = VixError\nvix.VixJob_CheckCompletion.argtypes = [VixHandle,POINTER(c_byte)]\nvix.VixJob_GetError.restype = VixError\nvix.VixJob_GetError.argtypes = [VixHandle]\nvix.VixJob_GetNumProperties.restype = c_int\nvix.VixJob_GetNumProperties.argtypes = [VixHandle,c_int]\nvix.VixJob_GetNthProperties.restype = VixError\n# warning - vix.VixJob_GetNthProperties takes variable argument list\nvix.VixJob_GetNthProperties.argtypes = [VixHandle,c_int,c_int]\nvix.VixSnapshot_GetNumChildren.restype = VixError\nvix.VixSnapshot_GetNumChildren.argtypes = [VixHandle,POINTER(c_int)]\nvix.VixSnapshot_GetChild.restype = VixError\nvix.VixSnapshot_GetChild.argtypes = [VixHandle,c_int,POINTER(VixHandle)]\nvix.VixSnapshot_GetParent.restype = VixError\nvix.VixSnapshot_GetParent.argtypes = [VixHandle,POINTER(VixHandle)]\n","2101":"ii = [0, 5, 21]\ny = x[ii]\n<manipulate y>\nx[ii] = y\n","2102":"from itertools import groupby\n\na = [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],\n     [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0],\n     [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 5.0, 5.0, 5.0],\n     [1.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0],\n     [5.0, 5.0, 5.0], \n     [1.0]\n    ]\n\nb = []\nc = []\n\nfor inner in a:\n    new_b = []\n    new_c = []\n    for value, repeated in groupby(sorted(inner)):\n        new_b.append(value)\n        new_c.append(sum(1 for _ in repeated))\n\n    b.append(new_b)\n    c.append(new_c)\n\nprint b\n# [[1.0], [2.0, 3.0, 4.0], [3.0, 5.0], [1.0, 4.0, 5.0], [5.0], [1.0]]\nprint c\n# [[13], [6, 5, 4], [8, 3], [1, 3, 3], [3], [1]]\n","2103":"import sys, time\nfrom PyQt4 import QtGui as qt\nfrom PyQt4 import QtCore as qtcore\n\napp = qt.QApplication(sys.argv)\nclass widget(qt.QWidget):\n    def __init__(self, parent=None):\n        qt.QWidget.__init__(self)\n\n    def appinit(self):\n        thread = worker()\n        self.connect(thread, thread.signal, self.testfunc)\n        thread.start()\n\n    def testfunc(self, sigstr):\n        print sigstr\n\nclass worker(qtcore.QThread):\n    def __init__(self):\n        qtcore.QThread.__init__(self, parent=app)\n        self.signal = qtcore.SIGNAL(\"signal\")\n    def run(self):\n        time.sleep(5)\n        print \"in thread\"\n        self.emit(self.signal, \"hi from thread\")\n\ndef main():\n    w = widget()\n    w.show()\n    qtcore.QTimer.singleShot(0, w.appinit)\n    sys.exit(app.exec_())\n\nmain()\n","2104":"import os\nos.makedirs('a\/b\/c', exist_ok=True)\n","2105":"values = T.vector('values')\nnb_values = values.shape[0]\n\n# For every element in 'values', obtain the total number of times\n# its value occurs in 'values'.\n# NOTE : I've done the broadcasting a bit more explicitly than\n# needed, for clarity.\nfreqs = T.eq(values[:,None], values[None, :]).sum(0).astype(\"float32\")\n\n# Compute a vector containing, for every value in 'values', the\n# probability of that value in the vector 'values'.\n# NOTE : these probabilities do *not* sum to 1 because they do not\n# correspond to the probability of every element in the vector 'values\n# but to the probability of every value in 'values'. For instance, if\n# 'values' is [1, 1, 0] then 'probs' will be [2\/3, 2\/3, 1\/3] because the\n# value 1 has probability 2\/3 and the value 0 has probability 1\/3 in\n# values'.\nprobs = freqs \/ nb_values\n\nentropy = -T.sum(T.log2(probs) \/ nb_values)\nfct = theano.function([values], entropy)\n\n# Will output 0.918296...\nprint fct([0, 1, 1])\n","2106":"import Tkinter as Tk\n\nroot = Tk.Tk()\n\ndef submit():\n    print \"entered text were \" + entry.get()\n\nentry = Tk.Entry(root)\nentry.pack()\nbutton = Tk.Button(root,text='submit',command=submit)\nbutton.pack()\n\nroot.mainloop()\n","2107":"from datetime import datetime\n\ntick = datetime.now()\n\n# run the tests here   \n\ntock = datetime.now()   \ndiff = tock - tick    # the result is a datetime.timedelta object\nprint(diff.total_seconds())\n","2108":"class CatZoo(object):\n    def __init__(self, name, age, gender, location):\n        self._names = name\n        self._ages = age \n        self._genders = gender\n        self._location = location\n\n    @classmethod\n    def make_zoo_cat(cls, name, ages, genders, location):\n        return cls.mak_zoo_cats([name], age, gender, location)\n\n    @classmethod\n    def make_zoo_cats(cls, names, ages, genders, location):\n        return CatZoo(names, age, gender, location)\n\n    @property\n    def location(self):\n        return self._location\n\n    @property\n    def names(self):\n        return self._names\n\n    def age(self, name):\n        if name in self._names:\n            return self._ages[self._names.index(name)]\n        else:\n            return None\n\n    def gender(self, name):\n        if name in self._names:\n            return self._genders[self._names.index(name)]\n        else:\n            return None\n\n    @property\n    def meow(self):\n        return \"meow!\"\n","2109":"dc = DesiredCapabilities.CHROME\ndc['loggingPrefs'] = {'browser': 'ALL'}\n\nchrome_profile = webdriver.ChromeOptions()\nprofile = {\"download.default_directory\": \"C:\\\\SeleniumTests\\\\PDF\",\n           \"download.prompt_for_download\": False,\n           \"download.directory_upgrade\": True,\n           \"plugins.plugins_disabled\": [\"Chrome PDF Viewer\"]}\nchrome_profile.add_experimental_option(\"prefs\", profile)\n\n#Helpful command line switches\n# http:\/\/peter.sh\/experiments\/chromium-command-line-switches\/\nchrome_profile.add_argument(\"--disable-extensions\")\n\nself.driver = webdriver.Chrome(executable_path=\"C:\\\\SeleniumTests\\\\chromedriver.exe\",\n                               chrome_options=chrome_profile,\n                               service_args=[\"--log-path=C:\\\\SeleniumTests\\\\chromedriver.log\"],\n                               desired_capabilities=dc)\n","2110":">>> import pymunk\n>>> b = pymunk.Body()\n>>> b2 = pymunk.Body()\n>>> j = pymunk.PivotJoint(b,b2,(0,0))\n>>> s = pymunk.Circle(b,3)\n>>> b.constraints\nset([<pymunk.constraint.PivotJoint object at 0x02521890>])\n>>> b.shapes\nset([<pymunk.Circle object at 0x025218F0>])\n","2111":">>> c = ['(37470-880j)','(35093-791j)','(33920-981j)']\n>>> map(complex, c)\n[(37470-880j), (35093-791j), (33920-981j)]\n","2112":"greetings = open(\"x.txt\", \"r\").readlines()\nnames = open(\"c.txt\", \"r\").readlines()\n\nwith open(\"b.txt\", \"w\") as output_file:\n    for greeting, name in zip(greetings, names):\n        greeting = greeting.split(\" \")[0]\n        output = \"{0} {1}\\n\".format(greeting, name)\n        output_file.write(output)\n","2113":"LIST_STYLE = TableStyle([('LINEABOVE', (0,0), (-1,0), 2, colors.green),\n    ('LINEABOVE', (0,1), (-1,-1), 0.25, colors.black),\n    ('LINEBELOW', (0,-1), (-1,-1), 2, colors.green)])\n","2114":"\" If you prefer the Omni-Completion tip window to close when a selection is\n\" made, these lines close it on movement in insert mode or when leaving\n\" insert mode\nautocmd CursorMovedI * if pumvisible() == 0|pclose|endif\nautocmd InsertLeave * if pumvisible() == 0|pclose|endif\n","2115":"lenOfPage = driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);var lenOfPage=document.body.scrollHeight;return lenOfPage;\")\n    match=False\n        while(match==False):\n                lastCount = lenOfPage\n                time.sleep(3)\n                lenOfPage = driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);var lenOfPage=document.body.scrollHeight;return lenOfPage;\")\n                if lastCount==lenOfPage:\n                    match=True\n","2116":"convert input.gif -rotate 90 out.gif\n","2117":"while condition:\n    # s is socket to read from\n    # for stdin use sys.stdin instead\n    ready = select.select([s], [], [], 0)\n    if ready[0]:\n        #u can start read\n","2118":"import numpy as np\nimport matplotlib.mlab as mlab\nimport matplotlib.pyplot as plt\nimport pickle\n\nif 0:  # to generate the file\n    delta = 0.025\n    x = np.arange(-3.0, 3.0, delta)\n    y = np.arange(-2.0, 2.0, delta)\n    X, Y = np.meshgrid(x, y)\n    Z1 = mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)\n    Z2 = mlab.bivariate_normal(X, Y, 1.5, 0.5, 1, 1)\n    Z = 10.0 * (Z2 - Z1)\n\n    ax = plt.subplot(111)\n    CS = ax.contourf(X, Y, Z)\n\n    pickle.dump(ax, open(\"mpl_test.pkl\", \"w\"))\n    pickle.dump(CS, open(\"contours.pkl\", \"w\"))\n\nelse: # Then at a later time...\n\n    x0 = pickle.load(open(\"mpl_test.pkl\", \"r\"))\n    x1 = pickle.load(open(\"contours.pkl\", \"r\"))\n\n    v = x1.collections[0].get_paths()[0].vertices   # get the vertices of the contour\n    x, y = v[:,0]+.2, v[:,1]+.1                     # shift the contour\n    x0.plot(x, y, 'w', linewidth=3)                 # add it to the plot as a white line\n","2119":"import subprocess\nsubprocess.call('ipconfig \/all')\n","2120":"#!\/usr\/bin\/python\nimport os\nimport subprocess\nproc=raw_input(\"Enter the mode :\")\nos.environ[\"JAVA_HOME\"] = '\/usr\/lib\/jvm\/java-7-openjdk-amd64'\nos.environ[\"CATALINA_HOME\"] = '\/export\/apps\/tomcat7'\nif proc == \"start\":\n  os.getcwd()\n  os.chdir(\"\/export\/apps\/tomcat7\/bin\/\")\n  os.getcwd()\n  subprocess.call('sh catalina.sh start',shell=True)\n  print \"Tomcat started successfully\"\nelif proc == \"stop\":\n  os.getcwd()\n  os.chdir(\"\/export\/apps\/tomcat7\/bin\/\")\n  os.getcwd()\n  subprocess.call('sh catalina.sh stop',shell=True)\n  print \"Tomcat stopped successfully\"\nelif proc == \"restart\":\n  os.getcwd()\n  os.chdir(\"\/export\/apps\/tomcat7\/bin\/\")\n  os.getcwd()\n  subprocess.call('sh catalina.sh stop',shell=True)\n  subprocess.call('sh catalina.sh start',shell=True)\n  print \"tomcat restarted successfully\"\nelse:\n print \"error: give any mode\"\nprint \"Thank you\"\n","2121":"#!\/usr\/bin\/python\nimport binascii, os.path, urllib, random, Image\nfrom Crypto.Cipher import AES\n\nclass ECBPenguin(object):\n    '''\n    A penguin class\n    '''\n    def __init__(self, img_clr=\"\"):\n        if not img_clr:\n            self.__demo_image__()\n            self.img_clr = \"tux_clear.bmp\"\n        else:\n            self.img_clr = img_clr\n        self.__get_header__()\n\n    def __demo_image__(self):\n        ''' \n        Downloads a TUX image compatible for this program: square and with size multiple of 16\n        '''\n        print \"Downloading image...\"\n        image = urllib.URLopener()\n        image.retrieve(\"http:\/\/fp-games.googlecode.com\/svn\/trunk\/CodeWeek1\/graviTux\/data\/tux.bmp\",\"tux_clear.bmp\") \n\n    def __get_sizes__(self, dibheader):\n        # Get image's dimensions (at offsets 4 and 8 of the DIB header)\n        DIBheader = []\n        for i in range(0,80,2):\n            DIBheader.append(int(binascii.hexlify(dibheader)[i:i+2],16))\n        self.width = sum([DIBheader[i+4]*256**i for i in range(0,4)])\n        self.height = sum([DIBheader[i+8]*256**i for i in range(0,4)])\n\n    def __get_header__(self):\n        '''\n        Read BMP and DIB headers from input image and write them to output image\n        '''\n        f_in = open(self.img_clr, 'rb')\n        # BMP is 14 bytes\n        bmpheader = f_in.read(14)\n        # DIB is 40 bytes\n        dibheader = f_in.read(40)\n        self.__get_sizes__(dibheader)\n        self._bmpheader = bmpheader\n        self._dibheader = dibheader\n        f_in.close()\n\n    def encrypt(self, img_enc = \"tux_enc.bmp\", key = '0123456789abcdef'):\n        '''\n        Encrypt the my_penguin\n        '''\n        self.img_enc = img_enc\n        f_in = open(self.img_clr, 'rb')\n        f_out = open(img_enc, 'wb')\n        f_out.write(self._bmpheader)\n        f_out.write(self._dibheader)\n        row_padded = (self.width * self.height * 3)\n        image_data = f_in.read(row_padded)\n        cleartext =  binascii.unhexlify(binascii.hexlify(image_data))\n\n        # Initialization Vector\n        IV = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))\n        # AES ECB mode\n        mode = AES.MODE_ECB\n        # Encryptor\n        encryptor = AES.new(key, mode, IV=IV)\n        # Perform the encryption and write output to file\n        f_out.write(encryptor.encrypt(cleartext))\n        f_in.close()\n        f_out.close()\n\n    def show_clr(self):\n        '''\n        Display cleartext penguin\n        '''\n        im = Image.open(self.img_clr)\n        im.show()\n\n    def show_enc(self):\n        '''\n        Display ciphertext penguin\n        '''\n        im = Image.open(self.img_enc)\n        im.show()\n\ndef main():\n    my_penguin = ECBPenguin()\n    my_penguin.show_clr()\n    my_penguin.encrypt()\n    my_penguin.show_enc()\n\nif __name__ == \"__main__\":\n    main()\n","2122":">>> 0x02\n2\n>>> 0x104\n260\n>>> import ctypes\n>>> ctypes.c_int(0x104)\nc_int(260)\n","2123":"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('', port))\n","2124":">>> re.findall(r'[a-zA-Z]+(?![a-zA-Z(])', \"movav(x\/2, 2)*movsum(y, 3)*z\")\n['x', 'y', 'z']\n","2125":"textfile = open('output.txt','w')\nsyslist = dir(sys)\n\nMAX_COLUMNS = 3 # Maximum number of columns to print\ncolcount = 0    # Track the column number\n\nfor x in syslist:\n    # First thing we do is add one to the column count when\n    # starting the loop. Since we're doing some math on it below\n    # we want to make sure we don't divide by zero.\n    colcount += 1\n\n    textfile.write(x)\n\n    # After each entry, add a tab character (\"\\t\")\n    textfile.write(\"\\t\")\n\n    # Now, check the column count against the MAX_COLUMNS. We\n    # use a modulus operator (%) to get the remainder after dividing;\n    # any number divisible by 3 in our example will return '0'\n    # via modulus.\n    if colcount % MAX_COLUMNS == 0:\n        # Now write out a new-line (\"\\n\") to move to the next line.\n        textfile.write(\"\\n\")\n\ntextfile.close()\n","2126":"r.table('f_tab').filter(\n  lambda row: r.expr([{'sid': 21, 'et': 5}, ...]).set_difference(row['sk']).is_empty()\n).filter(\n  lambda row: r.expr([{'wid': 22, 'et': 6}, ...]).set_difference(row['wc']).is_empty()\n)['pid']\n","2127":"id_us = self.cbUser.itemData(self.cbUser.currentIndex()).toPyObject()\n","2128":"import pandas as pd\ndata_frame = pd.read_table('test_data.txt', sep='\\s+', header=None)\ndata_frame.columns = ['year', 'month', 'day', 'n1', 'n2', 'n3', 'n4', 'type']\ndata_frame\n","2129":"$ echo \u60a8\u597d | python -c \"import sys; print repr(sys.stdin.read().decode('utf8'))\"\nu'\\u60a8\\u597d\\n'\n","2130":"#!\/usr\/bin\/env python\nimport urllib\n\nfrom os import pardir, rename, listdir, getcwd\nfrom os.path import join\n\n\nclass MyOpener(urllib.FancyURLopener):\n     version = 'QuickTime\/7.6.2 (verqt=7.6.2;cpu=IA32;so=Mac 10.5.8)'\n\n# This line tells urllib.urlretrieve and urllib.urlopen to use your MyOpener \n# instead of the default urllib.FancyOpener\nurllib._urlopener = MyOpener()\n\ndef main():\n    # lots of stuff\n    for title, url in downloads.iteritems():\n        fpath = join(data_dir, title.strip().replace('\\t',\"\").replace(\" \", \"_\"))\n        fpath += \".mov\"\n        urllib.urlretrieve(url, fpath)\n","2131":"from functools import partial\n\ntry:\n    old_save = bundle.obj.save\n    bundle.obj.save = partial(old_save, user=bundle.request.user)\n    return super(FooResource, self).save(bundle)\nfinally:\n    bundle.obj.save = old_save\n","2132":">>> open('test_newlines.txt', 'rb').read()\n'a\\rb\\nc\\r\\nd'\n>>> list(open('test_newlines.txt'))\n['a\\rb\\n', 'c\\r\\n', 'd']\n>>> list(open('test_newlines.txt', 'U'))\n['a\\n', 'b\\n', 'c\\n', 'd']\n>>> open('test_newlines.txt').readlines()\n['a\\rb\\n', 'c\\r\\n', 'd']\n>>> open('test_newlines.txt', 'U').readlines()\n['a\\n', 'b\\n', 'c\\n', 'd']\n>>> open('test_newlines.txt').read().split()\n['a', 'b', 'c', 'd']\n","2133":"def dfs_visit(start_city):\n   mark start_city as visited\n\n   if(end_city is discovered)   \/\/soon as end_city is discovered, return the path it took to get there.\n       return stack\n\n   for each adj_city of start_city:\n       add adj_city to stack \/\/to keep track of that path to the end_city\n       if adj_city is not discovered:\n            dfs_visit(adj_city)\n","2134":"for obj1 in some_list:\n    dict1['key'] = value\n\n    for obj2 in some_other_list:                \n        ...\n\n    dict1['key'] = list2\n    list2 = [] # create new list to fill next time\n    list1.append(dict1)\n","2135":"from traits.api import HasTraits, Float\nclass AA(HasTraits):\n    a =Float()\nclass BB(HasTraits):\n    b = Float()\naa = AA()\nbb = BB()\naa.sync_trait(\"a\", bb, \"b\")\n\n# aa.a and bb.b are synchronized\n# Now we use non-official API functions\ninfo = aa._get_sync_trait_info()\n\nsynced = info.has_key(\"a\") # True if aa.a is synchronized to some other trait\nif synced:\n    sync_info = info[\"a\"] # fails if a is not a synchronized trait\n    # sync_info is a dictionary which maps (id(bb),\"b\") to a tuple (wr, \"b\")\n    # If you do not know the id() of the HasTraits-object and the name of\n    # the trait, you have to loop through all elements of sync_info and\n    # search for the entry you want...\n    wr, name = sync_info[(id(bb), \"b\")]\n    # wr is a weakref to the class of bb, and name is the name \n    # of the trait which aa.a is synced to\n    cls = wr() # <__main__.BB at 0x6923a98>\n","2136":"import errno    \nimport os\n\n\ndef mkdir_p(path):\n    try:\n        os.makedirs(path)\n    except OSError as exc:  # Python >2.5\n        if exc.errno == errno.EEXIST and os.path.isdir(path):\n            pass\n        else:\n            raise\n","2137":"In [16]: def conv(col, tzs):\n   ....:     return [ d.tz_localize(tz) for d, tz in zip(col, tzs) ]\n   ....: \n\nIn [17]: df\nOut[17]: \n                date1               date2                   tz\n0 2014-11-19 16:11:45 2014-11-19 16:30:31     America\/New_York\n1 2014-11-19 18:37:47 2014-11-19 18:57:55     America\/New_York\n2 2014-11-19 18:59:21 2014-11-19 19:51:29  America\/Los_Angeles\n3 2014-11-19 19:47:35 2014-11-19 20:58:04     America\/New_York\n4 2014-11-19 20:29:46 2014-11-19 20:40:36     America\/New_York\n5 2014-11-19 22:23:42 2014-11-19 22:58:43  America\/Los_Angeles\n6 2014-11-20 16:31:24 2014-11-20 17:49:12     America\/New_York\n\nIn [18]: df['date1_tz'] = conv(df['date1'],df['tz'])\n\nIn [19]: df['date2_tz'] = conv(df['date2'],df['tz'])\n\nIn [20]: df\nOut[20]: \n                date1               date2                   tz                   date1_tz                   date2_tz\n0 2014-11-19 16:11:45 2014-11-19 16:30:31     America\/New_York  2014-11-19 16:11:45-05:00  2014-11-19 16:30:31-05:00\n1 2014-11-19 18:37:47 2014-11-19 18:57:55     America\/New_York  2014-11-19 18:37:47-05:00  2014-11-19 18:57:55-05:00\n2 2014-11-19 18:59:21 2014-11-19 19:51:29  America\/Los_Angeles  2014-11-19 18:59:21-08:00  2014-11-19 19:51:29-08:00\n3 2014-11-19 19:47:35 2014-11-19 20:58:04     America\/New_York  2014-11-19 19:47:35-05:00  2014-11-19 20:58:04-05:00\n4 2014-11-19 20:29:46 2014-11-19 20:40:36     America\/New_York  2014-11-19 20:29:46-05:00  2014-11-19 20:40:36-05:00\n5 2014-11-19 22:23:42 2014-11-19 22:58:43  America\/Los_Angeles  2014-11-19 22:23:42-08:00  2014-11-19 22:58:43-08:00\n6 2014-11-20 16:31:24 2014-11-20 17:49:12     America\/New_York  2014-11-20 16:31:24-05:00  2014-11-20 17:49:12-05:00\n","2138":"re.search(r\"(?<![x)])\\)+\", text)\n\n>>> re.search(r\"(?<![x)])\\)+\", \" hello)))))\")\n<_sre.SRE_Match object at 0xb75c0c98>\n>>> _.group()\n')))))'\n>>> re.search(r\"(?<![x)])\\)+\", \" hellox)))))\")\n>>>\n","2139":"import os\n\ndef lowercase_rename( dir ):\n    # renames all subforders of dir, not including dir itself\n    def rename_all( root, items):\n        for name in items:\n            try:\n                os.rename( os.path.join(root, name), \n                                    os.path.join(root, name.lower()))\n            except OSError:\n                pass # can't rename it, so what\n\n    # starts from the bottom so paths further up remain valid after renaming\n    for root, dirs, files in os.walk( dir, topdown=False ):\n        rename_all( root, dirs )\n        rename_all( root, files)\n","2140":"CACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',\n   }\n}\n","2141":"import matplotlib.pyplot as plt\nimport mpl_toolkits.mplot3d.axes3d as axes3d\nimport numpy as np\nx = np.linspace(0, 6, 10)\ny = np.sin(x)\nz = x\n\nfig = plt.figure()\nax = fig.add_subplot(1, 1, 1, projection='3d')\n\nax.plot(x, y, z\n         , linestyle='-'\n         , linewidth=20\n         , marker='o'\n         , markersize=20\n         , solid_capstyle='round'\n)\nax.set_xlim3d(-1, 7)\nax.set_ylim3d(-2, 2)\nax.set_zlim3d(-1, 7)\nplt.show()\n","2142":"positions = random.sample(range(100), amount_you_want)\nfor coord in positions:\n    matrix[coord%10][coord\/\/10] = 'O'\n","2143":"from xlutils.copy import copy\nfrom xlrd import open_workbook\nimport xlwt\nimport os\nimport shutil\nimport glob\n\ndef openexcel_main():\n    book = open_workbook('input.xls',formatting_info=True)\n    sheet = book.sheet_by_index(0)\n    wb = copy(book)\n    w_sheet = wb.get_sheet(0)\n    folder_name=['do_not_delete','internal_builds']\n    for j in range (0,2):\n        folder=folder_name.pop()\n        for i in range (1,(sheet.nrows)):\n            cell_test_group = sheet.cell(i,0)\n            data=str(cell_test_group.value)\n            print '#####################################'\n            print data\n    list=[]\n    source_path='\/mnt\/'+folder+'\/pybuild\/'+data+'\/MAIN\/'\n    if os.path.exists(source_path):\n        try:\n            os.chdir(source_path)\n            all_subdirs = [d for d in os.listdir('.') if os.path.isdir(d)]\n            for dirs in all_subdirs:\n                dir = os.path.join('\/mnt\/'+folder+'\/pybuild\/'+data+'\/MAIN\/', dirs)\n            os.chdir(dir)\n            current = os.getcwd()\n            new = str(current).split(\"\/\")[6]\n            list.append(new)\n            list.sort()\n            val=list\n            for i in range (1,4):\n                if val==[]:\n                    break\n                else:\n                    print i\n                current_build_number=val.pop()\n                print 'Current_Build:'+current_build_number\n                source_path_copy = r\"\"+ source_path+\"\/\"+current_build_number+\"\/\"\n                print 'Copying From:'+ source_path_copy\n                dest_path = r\"\/home\/builds_repo\/\"+folder+\"\/pybuild\/\"+data+\"\/MAIN\/\"+current_build_number+\"\/\"\n                os.chdir(source_path_copy)\n                file_name=(glob.glob('*[_bin].*')).pop()\n                print 'File_Copied:'+ file_name\n                if not os.path.exists(dest_path):\n                    os.makedirs(dest_path)\n\n                shutil.copyfile(source_path_copy + file_name, dest_path + file_name)\n         except Exception ,e: #Use Exception if not sure which exception will raise\n            print'File Not Found ..',e\n            #raise\ndef main():\n    openexcel_main()\n\n\nif __name__ == '__main__': #Use main\n    main()\n","2144":"cur.execute(\"SELECT * FROM Posts ORDER BY date ASC\")\n","2145":"def makeKey2( row2 ):\n    return ( row2[1], row2[2] ) # Whatever the lookup key is for source2\n\ndef makeKey1( row1 ):\n    return ( row1[3], row1[0] ) # Whatever the lookup key is for source1\n\ndayFile = [ open(\"day%d.pajek\",\"w\") for i in range(6) ]\ncombined = open(\"combined.dat\",\"w\")\nsource1 = open( schedules, \"r\" )\nrdr1= csv.reader( source1 )\nsource2 = open( aboutSchedules, \"r\" )\nrdr2= csv.reader( source2 )\n\n# \"Combine\" usually means a relational join between source 1 and source 2.\n# We'll assume that source2 is a small-ish dimension and the\n# source1 is largish facts\n\naboutDim = dict( (makeKey2(row),row) for row in rdr2 )\n\nfor row in rdr1:\n    connection, dayList = mine_and_combine( row, aboutDim[ makeKey1(row) ] )\n    for d in dayList:\n        dayFile[d].write( connection )\n    flags = [ 1 if d is in dayList else 0 for d in range(6) ]\n    combined.write( connection, flags )\n","2146":"point_list=[(0.,1.,2.), (2.,2.,3.)]\npoint3d(point_list)\n","2147":"import numpy\nmasses = numpy.array([[0,  0,  0,  0],\n[0,  1,  0,  0],\n[0,  2,  0,  0],\n[1,  0,  0,  0],\n[1,  1,  0,  1],\n[1,  2,  0,  1],\n[2,  0,  0,  0],\n[2,  1,  0,  0],\n[2,  2,  0,  0]])\n\nnonZeroMasses = masses[numpy.nonzero(masses[:,3])] # Not really necessary, can just use masses because 0 mass used as weight will work just fine.\n\nCM = numpy.average(nonZeroMasses[:,:3], axis=0, weights=nonZeroMasses[:,3])\n","2148":"import wx\n\ndef set_frame_display(frame, display_index):\n    display = wx.Display(display_index)\n    x, y, w, h = display.GetGeometry()\n    frame.SetPosition((x, y))\n\ndef main():\n    app = wx.PySimpleApp()\n    count = wx.Display_GetCount()\n    for index in range(count):\n        frame = wx.Frame(None, -1, 'Display %d of %d' % (index + 1, count))\n        set_frame_display(frame, index)\n        frame.Center()\n        frame.Show()\n    app.MainLoop()\n\nif __name__ == '__main__':\n    main()\n","2149":"import os, re\npath = 'C:\/Temp\/Folder1\/allTexts'\nlisting = os.listdir(path)\nfor infile in listing:\n    text = open(path + '\/' + infile).read()\n    match = re.search('<div id=\"text-interesting1\">', text)\n    if match is None:\n        continue\n    start = match.start()\n    end = re.search('<div id=\"text-interesting2\">', text).start()\n    print text[start:end]\n","2150":"import sys\n\nfrom PyQt4 import QtGui\nfrom PyQt4 import QtCore\n\nclass MainWindow(QtGui.QWidget):\n    def __init__(self):\n        super(MainWindow, self).__init__()\n        main_layout = QtGui.QVBoxLayout()\n\n        # Create the model\n        self.model = MyModel()\n\n        # Create a slider and link it to the model\n        self.slider1 = QtGui.QSlider()\n        self.model.add_slider(self.slider1)        \n        main_layout.addWidget(self.slider1)\n\n        # Add a lineEdit and button to force update the model\n        # Note that the LineEdit is not linked to the model, so won't update with the slider\n        self.edit = QtGui.QLineEdit()\n        button = QtGui.QPushButton('update model')\n        button.clicked.connect(self.on_clicked)        \n        main_layout.addWidget(self.edit)\n        main_layout.addWidget(button)\n\n        self.setLayout(main_layout)\n\n    def on_clicked(self):\n        self.model.update_model(int(self.edit.text()),self.slider1)\n\nclass MyModel(QtGui.QStandardItemModel):\n    def __init__(self,*args,**kwargs):\n        super(MyModel,self).__init__(*args,**kwargs)\n        self._slider_list = {}\n        self.itemChanged.connect(self.on_item_changed)\n\n    def add_slider(self,slider):\n        if slider in self._slider_list:\n            raise Exception('You cannot link a slider to the model twice')\n\n        item = QtGui.QStandardItem(str(slider.value()))\n        self._slider_list[slider] = item\n        self.appendRow(item)\n        slider.valueChanged.connect(lambda value: self.update_model(value,slider))\n\n    def update_model(self,value,slider):\n        if str(value) != self._slider_list[slider].text():\n            self._slider_list[slider].setText(str(value))\n            print 'update_model: %d'%value\n\n    def on_item_changed(self,item):\n        slider = self._slider_list.keys()[self._slider_list.values().index(item)]\n        if slider.value() != int(item.text()):\n            slider.setValue(int(item.text()))\n            print 'on_item_changed: %s'%item.text()\n\napp = QtGui.QApplication(sys.argv)\nwindow = MainWindow()\nwindow.show()\n\nsys.exit(app.exec_())\n","2151":"matches = []\ndef match_found(m):\n    # append the match start position to the matches array\n    matches.append(m.end(0))\n\neditor.research('pattern', match_found)\n\nmatches[0]  #should now contain the index of the *end* of the first match\n","2152":"from itertools import product\n\ngene_regions, species_plural, ontologies, lengths = zip(*result_dict)\n\nfor gene_region, species, ontology, length in product(gene_regions, species_plural, ontologies, lengths):\n    # do something with this combo.\n","2153":"from itertools import groupby, permutations\n\nperms = filter(lambda x: x[0] < x[-1], permutations(range(4), 3))\nkey = lambda x: x[1]  # sort and group by second element\nangles = [list(g) for k, g in groupby(sorted(perms, key=key), key=key)]\n# here, any comprehension can be used, e.g.\n# angles = {k: list(g) for k, g in groupby(sorted(perms, key=key), key=key)}\n# will produce the dict from @niemmi's answer\n\n>>> angles\n[\n    [(1, 0, 2), (1, 0, 3), (2, 0, 3)], \n    [(0, 1, 2), (0, 1, 3), (2, 1, 3)], \n    [(0, 2, 1), (0, 2, 3), (1, 2, 3)], \n    [(0, 3, 1), (0, 3, 2), (1, 3, 2)]\n]\n","2154":">>> d =  {'translation 1': 'dilligent', 'pinyin 1': 'ren4wei2', 'character 1': '\\xe8\\xaa\\x8d\\xe7\\x88\\xb2'}\n>>> key = \"translation %s\" % 1\n>>> d[key]\n'dilligent'\n","2155":"huffman_tree = encode(tree)\ncomplete_tree = huffman_tree\n\nget_intermediate_node = lambda val, arr :   ''.join( [ char for char,binary in itertools.ifilter( lambda node : node[1].startswith( val ),arr)] ) \n\nfor val in range( next_power_of_two( len(huffman_tree) ) ):\n    bvalue = bin(val)[2:] \n    node = [ get_intermediate_node( bvalue , huffman_tree) , bvalue ] \n    if node not in complete_tree:\n        complete_tree.append( node)\n\nprint sorted( complete_tree , key=lambda p: (len(p[-1]), p) )\n\n>>> [['ab', '0'], ['cde', '1'], ['a', '00'], ['b', '01'], ['c', '10'],\n    ['de', '11'], ['', '100'], ['', '101'], ['d', '110'], ['e', '111']]\n","2156":"import subprocess\n\ndef php(script_path):\n    p = subprocess.Popen(['php', script_path], stdout=subprocess.PIPE)\n    result = p.communicate()[0]\n    return result\n\n# YOUR CODE BELOW:\npage_html = \"<h1>News and Updates<\/h1>\"\nnews_script_output = php(\"news-generator.php\") \nprint page_html + news_script_output\n","2157":"if event.type == PG.KEYDOWN and keystate[PL.K_UP]:\n    key_up_pressed = True\nelif event.type == PG.KEYUP and keystate[PL.K_UP]:\n    key_up_pressed = False\n","2158":"result = [[str(subitem) for subitem in sublist] for sublist in start]\n","2159":"from itertools import groupby\nfrom operator import itemgetter\n\nwith open('somefile') as fin:\n    lines = (line.split() for line in fin)\n    for key, items in groupby(lines, itemgetter(1)):\n        print list(items)\n\n[['12', 'fish'], ['50', 'fish']]\n[['1', 'turtle']]\n[['11', 'dog'], ['34', 'dog'], ['12', 'dog']]\n","2160":"from IPython.utils.io import stdout;\nstdout.write('Matches:'+'\\033[0;33m'+str(123)+'\\033[0;0m')\n","2161":"nxn = np.arange(n**2).reshape(n, -1)\nfor i in xrange(0, 2**(n**2)):\n    arr = (i >> nxn) % 2\n    # do smthng with arr\n","2162":"from paste.deploy.loadwsgi import appconfig\nconfig = appconfig('config:development.ini', 'myapp', relative_to='.')\n\nif config['env'] == 'production':\n    api_endpoint_uri = 'http:\/\/api.external.com\/?{0}'\n    timezone = timezone('US\/Eastern')\n# .. and so on ...\n","2163":"import time\n\ntt = time.strptime(\"19\/Jun\/2014:00:03:09\",\"%d\/%b\/%Y:%H:%M:%S\")\nprint time.mktime(tt)\n","2164":"mask = pyinotify.IN_CREATE | pyinotify.IN_MOVED_TO\n\nclass PTmp(pyinotify.ProcessEvent):\n    ...\n    def process_IN_MOVED_TO(self, event):\n        print \"Moved: %s \" % os.path.join(event.path, event.name)\n        event_log = open('\/home\/saad\/Code\/test\/event_log', 'a')\n        event_log.write(event.name + ' - ' + timestamp.strftime('%c') + '\\n')\n        event_log.close()\n","2165":" QtCore.QObject.connect(self.worker,\n                        Qt.SIGNAL(\"a\"),\n                        self.Tester,\n                        Qt.Qt.DirectConnection) #this is added\n","2166":">>> Note.query.filter(Note.message.like(\"%somestr%\")).all()\n[]\n","2167":"def Help(string):\n    if string == 'Manifest':\n        return Manifest()\n    elif string == 'Intent':\n        return Intent()\n    else:\n        print('The options available are:\\n%s\\nType Q to Quit\\n' % '\\n'.join(andHelp))\n        x = input('What option do you choose: ')\n        print('\\n')\n        if x != 'Q':\n            Help(x)\n","2168":"Pos_List, Room_List, Type_List, Spec_List, Sub_List, Rtr_List, IPa_List, MAC_List = [], [], [], [], [], [], [], []\n","2169":"Pipe dec_pipe(new Base64_Decoder, get_cipher(\"AES-256\/CBC\/NoPadding\", key, iv, Botan::DECRYPTION));\n","2170":">>> if x == 0:\n        x = 0\n        print('Negative changed to zero')\n        pass\nelif x == 0:\n    print('other stuff')\n","2171":"import matplotlib.pyplot as plt\n\nchannel,percentages, mass = \"ab\",[0.2,0.2,0.1,0.5], 10\n\n# build a rectangle in axes coords\nleft, width = .25, .5\nbottom, height = .25, .5\nright = left + width\ntop = bottom + height\n\nchannel = ''.join(i for i in channel if i in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\nnu_energy , d_plus_p_energy, e_energy, gamma_energy  = percentages  \n\n# The slices will be ordered and plotted counter-clockwise.\nlabels = [r'$E_{\\nu} \/ E_{tot}$ = %.3f' % nu_energy, \n          r'$E_{d+p} \/ E_{tot}$ = %.3f' % d_plus_p_energy,\n          r'$E_{e} \/ E_{tot}$ = %.3f' % e_energy,\n          r'$E_{\\gamma} \/ E_{tot}$ = %.3f' %gamma_energy]\nsizes = [nu_energy , d_plus_p_energy, e_energy, gamma_energy]\ncolors = ['gold','red','green', 'lightskyblue']\nexplode = (0.1, 0,0,0)\npatches, texts = plt.pie(sizes, colors=colors)#, startangle=90) ** not working for some reason\nplt.legend(patches, labels, loc = \"best\")\nE_gamma_e = e_energy + gamma_energy\n#plt.pie(sizes, explode=explode, labels=labels, colors=colors,\n        #autopct='%1.1f%%', shadow=True)\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nplt.axis('equal')\nplt.title(r'DM DM $\\rightarrow$ $%s$ + $%s$'%(channel,channel),position=(0.5,1),bbox=dict(facecolor='0.8',), fontsize=30)\nplt.text(-1,-0.98, r'$E_{\\gamma + e} \/ E_{tot}$ = %.3f'%E_gamma_e, bbox=dict(facecolor='white', alpha=0.5), fontsize=14)  \nplt.tight_layout()\n\nplt.show()\n","2172":"def merge(source, destination):\n    \"\"\"\n    run me with nosetests --with-doctest file.py\n\n    >>> a = { 'first' : { 'all_rows' : { 'pass' : 'dog', 'number' : '1' } } }\n    >>> b = { 'first' : { 'all_rows' : { 'fail' : 'cat', 'number' : '5' } } }\n    >>> merge(b, a) == { 'first' : { 'all_rows' : { 'pass' : 'dog', 'fail' : 'cat', 'number' : '5' } } }\n    True\n    \"\"\"\n    for key, value in source.items():\n        if isinstance(value, dict):\n            # get node or create one\n            node = destination.setdefault(key, {})\n            merge(value, node)\n        else:\n            destination[key] = value\n\n    return destination\n","2173":"Graph.Read_Ncol(netFile, names=True, weights=\"if_present\", directed=True)\n","2174":">>> msvcrt.get_osfhandle(a.fileno())\n1956 # valid HANDLE\n","2175":"def update(self, instance, validated_data):\n    # First, update the User\n    user_data = validated_data.pop('user', None)\n    for attr, value in user_data.items():\n            setattr(instance.user, attr, value)\n    # Then, update UserProfile\n    for attr, value in validated_data.items():\n        setattr(instance, attr, value)\n    instance.save()\n    return instance\n","2176":"$ convert *.tif pictures.pdf\n","2177":"lol[2][0]\n","2178":">>> from collections import OrderedDict\n>>> mydict = {\n        'age': {'context': 2},\n        'address': {'context': 4},\n        'name': {'context': 1}\n}\n>>> OrderedDict(sorted(mydict.iteritems(), key=lambda x: x[1]['context']))\nOrderedDict([('name', {'context': 1}), ('age', {'context': 2}), ('address', {'context': 4})])\n","2179":"import pandas as pd\nfrom  ggplot import *\n\ndf = pd.DataFrame([{\"day\": 20150203, \"ndcg@k\": 0.245559, \"MAP@k\": 0.201919},\n                   {\"day\": 20150204, \"ndcg@k\": 0.255559, \"MAP@k\": 0.191919},\n                    {\"day\": 20150205, \"ndcg@k\": 0.2645559, \"MAP@k\": 0.181919},\n                    {\"day\": 20150203, \"ndcg@k\": 0.275559, \"MAP@k\": 0.171919},\n                    {\"day\": 20150204, \"ndcg@k\": 0.285559, \"MAP@k\": 0.161919},\n                    {\"day\": 20150205, \"ndcg@k\": 0.295559, \"MAP@k\": 0.151919}])\n\ndf2 = pd.melt(df[['day', 'ndcg@k', 'MAP@k']], id_vars=['day'])\ndf2.day = pd.to_datetime(df2.day, format = '%Y%m%d')\nggplot(aes(x='day', y='value', group='variable', shape='variable', colour='variable'), data=df2) + geom_line() + geom_point() + scale_x_date(labels = date_format('%Y-%m-%d %H:%M'))\n","2180":"for i, v in kwargs.items():\n    print (\"    \", i, \": \", v)\n","2181":"data:\"AlternativeTitle:\" + alttitle + '&' \"othervalue\" + otherval,\n","2182":"import signal\ndict((k, v) for v, k in reversed(sorted(signal.__dict__.items()))\n     if v.startswith('SIG') and not v.startswith('SIG_'))\n","2183":"np.vstack((one, two, three))\n","2184":"clib = ctypes.cdll.LoadLibrary('some.so')\nc_foo = clib.c_foo\nc_foo.restype = ctypes.py_object\n","2185":"class NewsletterAdmin(admin.ModelAdmin):\n\n    def save_model(self, request, obj, form, change):\n        obj.save()\n        if not change: # newly created newsletter\n            if obj.send_to == '1':\n                for student in Student.objects.all():\n                    EmailLog.objects.create(student=student, newsletter=obj)\n            elif obj.send_to == '2':\n                for teacher in Teacher.objects.all():\n                    EmailLog.objects.create(teacher=teacher, newsletter=obj)\n","2186":"if not MyModel.objects.filter(content=mytext).count():\n","2187":"def worker(stop, jobs):\n    for j in jobs:\n        if stop:\n            break\n        j.do()\n\nstop = []\nd = deferToThread(worker)\n\n# This will make the list eval to true and break out of the loop.\nstop.append(None)\n","2188":"# Features are length-100 vectors of floats\nfeature_input = tf.placeholder(tf.float32, shape=[100])\n# Labels are scalar integers.\nlabel_input = tf.placeholder(tf.int32, shape=[])\n\n# Alternatively, could do:\n# feature_batch_input = tf.placeholder(tf.float32, shape=[None, 100])\n# label_batch_input = tf.placeholder(tf.int32, shape=[None])\n\nq = tf.FIFOQueue(100, [tf.float32, tf.int32], shapes=[[100], []])\nenqueue_op = q.enqueue([label_input, feature_input])\n\n# For batch input, do:\n# enqueue_op = q.enqueue_many([label_batch_input, feature_batch_input])\n\nlabel_batch, feature_batch = q.dequeue_many(BATCH_SIZE)\n# Build rest of model taking label_batch, feature_batch as input.\n# [...]\ntrain_op = ...\n\nsess = tf.Session()\n\ndef load_and_enqueue():\n  with open(...) as feature_file, open(...) as label_file:\n    while True:\n      feature_array = numpy.fromfile(feature_file, numpy.float32, 100)\n      if not feature_array:\n        return\n      label_value = numpy.fromfile(feature_file, numpy.int32, 1)[0]\n\n      sess.run(enqueue_op, feed_dict={feature_input: feature_array,\n                                      label_input: label_value})\n\n# Start a thread to enqueue data asynchronously, and hide I\/O latency.\nt = threading.Thread(target=load_and_enqueue)\nt.start()\n\nfor _ in range(TRAINING_EPOCHS):\n  sess.run(train_op)\n","2189":"args = argp.parse_args()\nargs.o = open(args.o,'w')\n","2190":"profile = form.save(commit=False)\nprofile.user = request.user\nprofile.save()\n","2191":"class SiteMiddleware(object):\n    def process_request(self, request):\n        try:\n            current_site = Site.objects.get(domain=request.get_host())\n        except Site.DoesNotExist:\n            current_site = Site.objects.get(id=settings.DEFAULT_SITE_ID)\n\n        request.current_site = current_site\n        settings.SITE_ID = current_site.id\n","2192":"import os\nimport sys\ndirectory = os.path.dirname(os.path.abspath(__file__))\nsys.stdout = open(os.path.join(directory, \"demo-logfiles\", \"log_file_template.txt\"), \"a\")\n","2193":"    {\n        \"Version\": \"2008-10-17\",\n        \"Id\": \"PolicyForCloudFrontPrivateContent\",\n        \"Statement\": [\n            {\n                \"Sid\": \"1\",\n                \"Effect\": \"Allow\",\n                \"Principal\": {\n                    \"AWS\": \"arn:aws:iam::cloudfront:user\/CloudFront Origin Access Identity EH238ELEGANOC\"\n                },\n                \"Action\": \"s3:GetObject\",\n                \"Resource\": \"arn:aws:s3:::onur.deneme\/*\"\n            }\n        ]\n    }\n","2194":"import itertools\nimport operator\n\nL = [('HSBC8999', 4, 179447), ('HSBC1199', 81, 864108), ('HSBC1199', 32, 715121),('HSBC8999', 4, 1447),('HSBC1199', 32, 61521) ]\n\nL.sort(key=operator.itemgetter(0))\nfor _k, stackoverflow in itertools.groupby(L, operator.itemgetter(0)):\n    subl = list(stackoverflow)\n    subl.sort(key=operator.itemgetter(1))\n    for k, subg in itertools.groupby(subl, operator.itemgetter(1)):\n        subs = list(subg)\n        print(\"the average of {} is {}\".format(k, sum(s[2] for s in subs)\/len(subs)))\n","2195":"from sqlalchemy import select\n\ndef alias_dups(join):\n    dups = set(col.key for col in join.left.columns) & \\\n                set(col.key for col in join.right.columns)\n    columns = []\n    for col in join.columns:\n        if col.key in dups:\n            col = col.label('%s_%s' % (col.table.name, col.key))\n        columns.append(col)\n    return select(columns, from_obj=[join]).alias()\n\nclass ST2(Base):\n    __table__ = alias_dups(t1.join(t2))\n","2196":"from BeautifulSoup import BeautifulSoup\nimport urllib2\nimport codecs\n\nresponse = urllib2.urlopen('http:\/\/www.reality.sk\/zakazka\/0747-003578\/predaj\/1-izb-byt\/kosice-mestska-cast-sever-sladkovicova-kosice-sever\/art-real-1-izb-byt-sladkovicova-ul-kosice-sever')\nhtml = response.read()\nsoup = BeautifulSoup(html)\n\ntabulka = soup.find(\"table\", {\"class\" : \"detail-char\"})\n\nrecords = [] # store all of the records in this list\nfor row in tabulka.findAll('tr'):\n    col = row.findAll('td')\n    prvy = col[0].string.strip()\n    druhy = col[1].string.strip()\n    record = '%s;%s' % (prvy, druhy) # store the record with a ';' between prvy and druhy\n    records.append(record)\n\nfl = codecs.open('output.txt', 'wb', 'utf8')\nline = ';'.join(records)\nfl.write(line + u'\\r\\n')\nfl.close()\n","2197":"import itertools\n\nG = [0, 1, 2, 3, 4, 5] # or whatever your group might be\n\ndef is_associative(x, y, z):\n    if (x*y)*z == x*(y*z):\n        return True\n    return False\n\nxyz = itertools.product(G, repeat=3)\n\nfor three in xyz:\n    if not is_associative(*three):\n         print(\"associativity fails for %s, %s, %s\") % three\n","2198":"print(\"Hello World!\")\nraw_input(\"Press Enter to Continue. . .: \")\nprint(\"\\033[FX X X X X X X X X X X X X X X \");\n#      ^^^^^^\n#    move up\n#            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n#            overwrite by whatever you want\n","2199":"$ python -c 'import time; print(time.tzname)'\n('GMT', 'BST')\n$ TZ='Europe\/Stockholm' python -c 'import time; print(time.tzname)'\n('CET', 'CEST')\n","2200":"def read_csv(csvfile):\n    with open(csvfile, 'rb') as file:\n        columns = 4\n        reader = csv.reader(file, delimiter=';')\n        # i will count the rows, starting at 1\n        for i, row in enumerate(reader, start=1):\n            for column in range(0, columns):\n                 print row[column], ' ====== ', 'column ', column+1, ' and row ', i\n","2201":"def print_function_name_and_result(func, *args, **kw):\n    print \"%s : %s\" % (func.__name__, func(*args, **kw))\n\nprint_function_name_and_result(func, keyword1='B')\n>> func : B\n","2202":"$user_info = $twitteroauth->get('account\/verify_credentials');\n","2203":"elif event.type==pygame.MOUSEBUTTONDOWN and event.button==LEFT:\n  print \"You pressed the left mouse button at (%d,%d)\" %event.pos\n  screen.set_at((event.pos.x, event.pos.y), pygame.Color(255,0,0,255))\n","2204":"def readFile(ui):\n    L = []\n    with open(ui, 'r') as f:\n        for line in f.readlines():\n            L.append(float(line))\n    return sorted(L)\n\ndef fileAddValue(ui, val):\n    with open(ui, 'a') as f:\n        f.write(str(val) + '\\n')\n\nui = raw_input(\"Please enter your file name:\")\nL = readFile(ui)\nprint('original file:')\nprint(L)\nval = float(raw_input(\"Enter the value you would like to add to the list: \"))\nfileAddValue(ui, val)\nL = readFile(ui)\nprint('updated file:')\nprint(L)\n","2205":"def test_get_or_create_indexed_node_with_int_property(self):\n    graph_db = neo4j.GraphDatabaseService()\n    fred = graph_db.get_or_create_indexed_node(index=\"person\", key=\"name\", value=\"Fred\", properties={\"level\" : 1})\n    assert isinstance(fred, neo4j.Node)\n    assert fred[\"level\"] == 1\n    graph_db.delete(fred)\n","2206":"def joinby(value, arg):\n    return arg.join(value)\n","2207":"\nYou run the Main() function for this script to work\n# Main function.\n# *** THIS FUNCTION NEEDS TO BE CALLED IN THE CONSOLE ***\n# i.e >>> main()\n\ndef main():\n\n  # Choose the files you wish to use\n  inputFile = pickAFile()\n  vignetteFile = pickAFile()\n\n  # Turn both files into picture objects\n  inputPic = makePicture(inputFile)\n  vignette = makePicture(vignetteFile)\n\n  # addVignette() function combines the input picture and vignette together\n  # and returns the result as a new picture object\n  newImage =  addVignette(inputPic, vignette)\n\n  # saveNewImage() function stores the new image as file\n  saveNewImage(newImage)\n\n\n# Main() calls this function to add input picture and vignette together  \ndef addVignette(inputPic, vignette):\n\n  # Create empty canvas\n  canvas = makeEmptyPicture(getWidth(inputPic), getHeight(inputPic))\n\n  # Iterate through all the pixels of the input image. x and y are\n  # used as the current coordinates of the pixel\n  for x in range(0, getWidth(inputPic)):\n    for y in range(0, getHeight(inputPic)):\n\n      # Get the current pixels of inputPic and vignette\n      inputPixel = getPixel(inputPic, x, y)\n      vignettePixel = getPixel(vignette, x, y)\n\n      # The getNewColorValues() function, makes a new color from those\n      # values\n      newColor = getNewColorValues(inputPixel, vignettePixel)\n\n      # Assign this new color to the current pixel of the canvas\n      px = getPixel(canvas, x, y)      \n      setColor(px, newColor)\n\n  # Show the result of combiming the input picture with the vignette\n  explore(canvas)\n\n  # return the new image to main() function.\n  return canvas\n\n# Called from the addVignette() function to add the color values from\n# the input picture and vignette together. It returns a new color\n# object\ndef getNewColorValues(inputPixel, vignettePixel):\n\n  # Get the individual colour values\n  inputRed = getRed(inputPixel)\n  vignetteRed = getRed(vignettePixel)\n  inputGreen = getGreen(inputPixel)\n  vignetteGreen = getGreen(vignettePixel)\n  inputBlue = getBlue(inputPixel)\n  vignetteBlue = getBlue(vignettePixel)\n\n  # ***********************************************************\n  # Most important part. This will determine if the pixel is darkent\n  # and by how much. How it works is the darker the vignette pixel the less that will\n  # be taken away from 255. This means the result of `255 - vignetteRed` will be a higher\n  # value which means more will be taken away from the input colour.\n  # The light the vignette pixel the less that will be taken away from input pixel\n\n  newR = inputRed - (255 - vignetteRed)\n  newG = inputGreen - (255 - vignetteGreen)\n  newB = inputBlue - (255 - vignetteBlue)\n  # ***********************************************************\n\n  newC = makeColor(newR, newG, newB)\n  return newC\n\n# Called from the main() function in order to save the new image  \ndef saveNewImage(newImage):\n\n  folder = pickAFolder()\n  filename = requestString(\"Please enter file name: \")\n  path = folder + filename + \".jpg\"\n\n  writePictureTo(newImage, path)\n","2208":"from pyparsing import nestedExpr, ungroup, originalTextFor\n\n# use nestedExpr to define a default expression with left-right nesting markers\nnestedText = ungroup(nestedExpr('{{','}}'))\n\nsample = \"\"\"{{detect this {{and this as well}} text}} but text does not ends here so it should {{not detect this}}.\"\"\"\n\n# note how reporting the results as a list keeps the nesting of {{ }}'s\nprint nestedText.parseString(sample).asList()\n# prints ['detect', 'this', ['and', 'this', 'as', 'well'], 'text']\n\n# if you just want the string itself, wrap with 'originalTextFor'\nprint originalTextFor(nestedText).parseString(sample)[0]\n# prints {{detect this {{and this as well}} text}}\n","2209":"import numpy as np\n\n# Generate nested list a.\nN, M = 10, 7  # number of sublists and length of each sublist\na = np.random.rand(N, M)\n\n# x,y indexes of max float in a.\nprint np.unravel_index(a.argmax(), a.shape)\n\nA = np.full_like(a, -np.inf)  # use np.inf if doing np.argmin\nA[3:5, 2:6] = a[3:5, 2:6]\nnp.unravel_index(A.argmax(), A.shape)\n","2210":"query=re.sub(r\"\\bsearch\\w+\", \"\", query)\n\n               ^^         ^^   \n","2211":"# on build machine\ncd myproject\npip wheel --wheel-dir wheelbase .\nscp -r wheelbase me@target.example.org\n\n# on target machine\npip install --no-index --find-links=wheelbase myproject\n","2212":"f = open('test')\njson_obj = ijson.items(f,'').next() # '' loads everything as only one object.\nfor (key, value) in json_obj.items():\n    print key + \" -> \" + str(value)\n","2213":"d = con[db][col].find_one()\n","2214":" mydict = {k: unicode(v).encode(\"utf-8\") for k,v in mydict.iteritems()}\n","2215":"len(set([x.attrib for x in objects]))\n","2216":"from timeit import Timer\nfrom urllib2 import urlopen\n\ndef fetch():\n    page = urlopen('http:\/\/www.google.com')\n    return page.info()\n\ntimer = Timer(fetch)\nprint timer.timeit(1)\n","2217":"import string\n\ns = \"the qUiCk BROWN fox:: jumped. over , the lazy    dog.\"\ns_correct = \"The quick brown fox: jumped. Over, the lazy dog.\"\n\n\ndef chars_from_lines(lines):\n    for line in lines:\n        for ch in line:\n            yield ch\n\nstart, in_sentence, saw_space = range(3)\n\npunct = set(string.punctuation)\npunct_non_repeat = punct - set(['.', '-'])\nend_sentence_chars = set(['.', '!', '?'])\n\ndef edit_sentences(seq):\n    state = start\n    ch_punct_last = None\n\n    for ch in seq:\n        ch = ch.lower()\n\n        if ch == ch_punct_last:\n            # Don't pass repeated punctuation.\n            continue\n        elif ch in punct_non_repeat:\n            ch_punct_last = ch\n        else:\n            # Not punctuation to worry about, so forget the last.\n            ch_punct_last = None\n\n        if state == start and ch.isspace():\n            continue\n        elif state == start:\n            state = in_sentence\n            yield ch.upper()\n\n        elif state == in_sentence and ch in end_sentence_chars:\n            state = start\n            yield ch\n            yield ' '\n        elif state == in_sentence and not ch.isspace():\n            yield ch\n        elif state == in_sentence and ch.isspace():\n            state = saw_space\n            continue\n\n        elif state == saw_space and ch.isspace():\n            # stay in state saw_space\n            continue\n        elif state == saw_space and ch in punct:\n            # stay in state saw_space\n            yield ch\n        elif state == saw_space and ch.isalnum():\n            state = in_sentence\n            yield ' '\n            yield ch\n\n#with open(\"input.txt\") as f:\n#    s_result = ''.join(ch for ch in edit_sentences(chars_from_lines(f)))\n\ns_result = ''.join(ch for ch in edit_sentences(s))\n\nprint(s_result)\nprint(s_correct)\n","2218":">>> a = [{'id': 1, 'array': ['a','b','c']}, {'id': 2, 'array': ['d','e','f']}]\n>>> [{'id': d['id'], 'term': v } for d in a for v in d['array']]\n[{'term': 'a', 'id': 1}, {'term': 'b', 'id': 1}, {'term': 'c', 'id': 1}, {'term': 'd', 'id': 2}, {'term': 'e', 'id': 2}, {'term': 'f', 'id': 2}]\n","2219":"class MyClass(object):\n     def __init__(self,arg):\n         self.arg = arg\n\n     @classmethod\n     def from_sum(cls,*args):\n         return cls(sum(args))\n\ninst = MyClass.from_sum(1,2,3,4)\nprint inst.arg  #10\n","2220":"{{json | safe}}\n","2221":"from datetime import datetime\n\ndate_strs = ['07-06-2010', '06-24-2010', '07-05-2010', '06-25-2010']\n# date_strs = ['02-29-2012', '02-28-2012', '03-01-2012']\n# date_strs = ['01-01-2000']\ndates = [datetime.strptime(d, \"%m-%d-%Y\") for d in date_strs]\n\ndate_ints = set([d.toordinal() for d in dates])\n\nif len(date_ints) == 1:\n    print \"unique\"\nelif max(date_ints) - min(date_ints) == len(date_ints) - 1:\n    print \"consecutive\"\nelse:\n    print \"not consecutive\"\n","2222":"from tkinter import *\nimport random\nroot = Tk()\n\nclass Recta:\n\n    def __init__(self, height=60, width=80):\n        self.height = height\n        self.width = width\n        self.create_buttons()\n        self.canvas = Canvas(root)\n        self.canvas.pack()\n\n\n    def create_buttons(self):\n        self.frame = Frame(root, bg='grey', width=400, height=40)\n        self.frame.pack(fill='x')\n\n        self.button1 = Button(self.frame, text='Add Rect', command=self.randomRects)\n        self.button1.pack(side='left', padx=10)\n        self.button2 = Button(self.frame, text='Remove Rect', command=self.randomRects)\n        self.button2.pack(side='left')\n\n\n    def randomRects(self):\n        w = random.randrange(300)\n        h = random.randrange(200)\n        self.canvas.create_rectangle(0, 0, w, h, fill='green')\n\n\ntes = Recta()\nroot.mainloop()\n","2223":">>> '{0:07b}'.format(12)\n'0001100'\n","2224":"from math import ceil\n\ndef week_of_month(dt):\n\n    first_day = dt.replace(day=1)\n\n    dom = dt.day\n    adjusted_dom = dom + first_day.weekday()\n\n    return int(ceil(adjusted_dom\/7.0))\n","2225":"with open ('file.xml', 'w') as fd:\n  buf.seek (0)\n  shutil.copyfileobj (buf, fd)\n","2226":"text[10] == '\\u201c'\n","2227":"plt = nightlife_ratings_mean.plot(x = 'year', y = 'stars', style = 'o-', title = \"Stars for each month and year\")\nplt.set_xlabel(\"[Year, Month]\")\nplt.set_ylabel(\"Stars\")\n","2228":"a = [i for i in a if i != p]\n","2229":"import csv\n\nlookup = set(l.strip().lower() for l in open(path_to_file3))\nmap(csv.writer(open(path_to_file2, 'w')).writerow, \n    (row for row in csv.reader(open(path_to_file)) \n    if row[1].lower() in lookup))\n","2230":"In [7]: import scipy, numpy, math                                                          \n\nIn [8]: scipy.math.factorial, numpy.math.factorial, math.factorial\nOut[8]: \n(<function math.factorial>,                                                                \n <function math.factorial>,                                                                \n <function math.factorial>)     \n","2231":"devices = []\nnetwork_name = \"Data\"\nvnic_label = \"pyvmomi sriov nic1\"\n\ncontent = si.content\nvm = get_obj(content, [vim.VirtualMachine], vm_name)\nnic = vim.vm.device.VirtualDeviceSpec()\n\n# VM device\nnic.operation = vim.vm.device.VirtualDeviceSpec.Operation.add\nnic.device = vim.vm.device.VirtualSriovEthernetCard()\nnic.device.addressType = 'assigned'\nnic.device.key = 13016\nnic.device.deviceInfo = vim.Description()\nnic.device.deviceInfo.label = vnic_label\nnic.device.deviceInfo.summary = network_name\nnic.device.backing = vim.vm.device.VirtualEthernetCard.NetworkBackingInfo()\nnic.device.backing.network = get_obj(content, [vim.Network], network_name)\nnic.device.backing.deviceName = network_name\nnic.device.backing.useAutoDetect = False\nnic.device.connectable = vim.vm.device.VirtualDevice.ConnectInfo()\nnic.device.connectable.startConnected = True\nnic.device.connectable.allowGuestControl = True\n\nnic.device.sriovBacking = vim.vm.device.VirtualSriovEthernetCard.SriovBackingInfo()\nnic.device.sriovBacking.physicalFunctionBacking = vim.vm.device.VirtualPCIPassthrough.DeviceBackingInfo()\nnic.device.sriovBacking.physicalFunctionBacking.id = '84:00.1'\nnic.device.sriovBacking.virtualFunctionBacking = vim.vm.device.VirtualPCIPassthrough.DeviceBackingInfo()\nnic.device.sriovBacking.virtualFunctionBacking.id = '84:11.1'\n\ndevices.append(nic)\n\nvmconf = vim.vm.ConfigSpec(deviceChange=devices)\ntask = vm.ReconfigVM_Task(vmconf)\n","2232":"with open('somefile.txt') as f:\n   first_row = next(f).strip().split(';')\n   TOTAL_NUMBER = len(first_row[first_row.index('START'):first_row.index('END')+1])\n   bits = ''.join(line.rstrip() for line in f).split(';')\n   final_array = bits[bits.index('PROVEEDOR'):bits.index('PROVEEDOR')+TOTAL_NUMBER]\n","2233":"class Myclass:\n    def do_x(self):\n        pass\n\nclass My_child(Myclass):\n    def do_x(self):\n        print(\"I am the chile class\")\n\nclass My_2nd_child(Myclass):\n    def do_x(self):\n        print(\"I am the 2nd child\")\n","2234":"#!\/bin\/sh\ncase $1 in\nstart) \nnohup .\/server.py &\necho $! > .\/server.pid\n;;\nstop) # code to stop the service\nkill `cat .\/server.pid`\nesac\n","2235":"import paramiko\n\n# Define connection info\nhost_ip = 'xx.xx.xx.xx'\nuser = 'xxxxxxxx'\npw = 'xxxxxxxx'\n\n# Paths\ninput_loc = '\/nfs_home\/appers\/extracts\/*\/*.xml'\noutput_loc = '\/user\/lcmsprod\/output\/cnielsen\/'\npython_path = \"\/usr\/lib\/python_2.7.3\/bin\/python\"\nhdfs_home = '\/nfs_home\/appers\/cnielsen\/'\noutput_log = r'C:\\Users\\cnielsen\\Desktop\\MR_Test\\MRtest011316_0.txt'\n\n# File names\nxml_lookup_file = 'product_lookups.xml'\nmapper = 'Mapper.py'\nreducer = 'Reducer.py'\nhelper_script = 'Process.py'\nproduct_name = 'test1'\noutput_ref = 'test65'\n\n# ----------------------------------------------------\n\ndef buildMRcommand(product_name):\n    space = \" \"\n    mr_command_list = [ 'hadoop', 'jar', '\/share\/hadoop\/tools\/lib\/hadoop-streaming.jar',\n                        '-files', hdfs_home+xml_lookup_file,\n                        '-file', hdfs_home+mapper,\n                        '-file', hdfs_home+reducer,\n                        '-mapper', \"'\"+python_path, mapper, product_name+\"'\",\n                        '-file', hdfs_home+helper_script,\n                        '-reducer', \"'\"+python_path, reducer+\"'\",\n                        '-input', input_loc,\n                        '-output', output_loc+output_ref]\n\n    MR_command = space.join(mr_command_list)\n    print MR_command\n    return MR_command\n\n# ----------------------------------------------------\n\ndef unbuffered_lines(f):\n    line_buf = \"\"\n    while not f.channel.exit_status_ready():\n        line_buf += f.read(1)\n        if line_buf.endswith('\\n'):\n            yield line_buf\n            line_buf = ''\n\n# ----------------------------------------------------\n\nclient = paramiko.SSHClient()\nclient.set_missing_host_key_policy(paramiko.AutoAddPolicy())\nclient.connect(host_ip, username=user, password=pw)\n\n# Build Commands\nlist_dir = \"ls \"+hdfs_home+\" -l\"\ngetmerge = \"hadoop fs -getmerge \"+output_loc+output_ref+\" \"+hdfs_home+\"test_011216_0.txt\"\n\n# Run Command\nstdin, stdout, stderr = client.exec_command(list_dir)\n##stdin, stdout, stderr = client.exec_command(buildMRcommand(product_name))\n##stdin, stdout, stderr = client.exec_command(getmerge)\n\nprint \"Executing command...\"\nwriter = open(output_log, 'w')\n\nfor l in unbuffered_lines(stderr):\n    e = '[stderr] ' + l\n    print '[stderr] ' + l.strip('\\n')\n    writer.write(e)\n\nfor line in stdout:\n    r = '[stdout]' + line\n    print '[stdout]' + line.strip('\\n')\n    writer.write(r)\n\nclient.close()\nwriter.close()\n","2236":"import numpy as np\n\ndef solve_gaussian(val,data_array,sigma_array):\n    return (1. \/ sigma_array) * np.exp(- (val - data_array) * (val - data_array) \/ (2 * sigma_array * sigma_array))\n\ndef solve_kde(xlist,data_array,sigma_array):\n    kde_array = np.array([])\n    for xx in xlist:\n        single_kde = solve_gaussian(xx,data_array,sigma_array)\n        if np.ndim(kde_array) == 3:\n            kde_array = np.concatenate((kde_array,single_kde[np.newaxis,:,:]),axis=0)\n        else:\n            kde_array = np.dstack(single_kde)\n    return kde_array\n\nxlist = np.linspace(0,1,101) #Adjust as needed\nkde_array = solve_kde(xlist,data_array,sigma_array)\nkde_vector = np.sum(np.sum(kde_array,axis=2),axis=1)\nmode_guess = xlist[np.argmax(kde_vector)]\n","2237":"select min(clm0), \n       clm1,\n       clm2,\n       group_concat(clm3)\nfrom yourtable\ngroup by clm1, clm2\n","2238":"import re\nimport locale\n\n# Remove anything not a digit, comma or period\nno_cruft = re.sub(r'[^\\d,.-]', '', st)\n\n# Split the result into parts consisting purely of digits\nparts = re.split(r'[,.]', no_cruft)\n\n# ...and sew them back together\nif len(parts) == 1:\n    # No delimeters found\n    float_str = parts[0]\nelif len(parts[-1]) != 2:\n    # >= 1 delimeters found. If the length of last part is not equal to 2, assume it is not a decimal part\n    float_str = ''.join(parts)\nelse:\n    float_str = '%s%s%s' % (''.join(parts[0:-1]),\n                            locale.localeconv()['decimal_point'],\n                            parts[-1])\n\n# Convert to float\nmy_float = float(float_str)\n","2239":">>> import datetime\n>>>\n>>> trade_date = datetime.date(2005, 7, 25)\n>>> effective_date = datetime.datetime(2005, 7, 27, 11, 26, 38)\n>>> termination_date = datetime.datetime(2010, 7, 26, 11, 26, 38)\n>>>\n>>> d = vars() # You can access the variable as d['name']\n>>> tradedates = {\n...     name: d[name].strftime('%Y-%m-%d')\n...     for name in ('trade_date', 'effective_date', 'termination_date')\n... }\n>>> tradedates\n{'effective_date': '2005-07-27', 'termination_date': '2010-07-26', 'trade_date': '2005-07-25'}\n","2240":"class Spheres(object):\n\n    def __init__(self):\n       self._dict = dict()\n\n    def volumes(self, radii=None):\n        if radii is None: \n            radii = self._dict['radii']\n        return (4\/3) * math.pi *radii**3\n","2241":"import numpy as np\n\nX = np.random.uniform(size=(10,3))\nn,m = X.shape # for generality\nX0 = np.ones((n,1))\nXnew = np.hstack((X,X0))\n\nprint(X)\n[[ 0.78614426  0.24150772  0.94330932]\n [ 0.60088812  0.20427371  0.19453546]\n [ 0.31853252  0.31669057  0.82782995]\n [ 0.71749368  0.54609844  0.74924888]\n [ 0.86883981  0.54634575  0.83232409]\n [ 0.89313181  0.8006561   0.05072146]\n [ 0.79492088  0.07750024  0.45762175]\n [ 0.92350837  0.20587178  0.76987197]\n [ 0.0092076   0.0044617   0.04673518]\n [ 0.69569363  0.3315923   0.15093861]]\n\nprint(X0)\n[[ 1.]\n [ 1.]\n [ 1.]\n [ 1.]\n [ 1.]\n [ 1.]\n [ 1.]\n [ 1.]\n [ 1.]\n [ 1.]]\n\nprint(Xnew)\n[[ 0.78614426  0.24150772  0.94330932  1.        ]\n [ 0.60088812  0.20427371  0.19453546  1.        ]\n [ 0.31853252  0.31669057  0.82782995  1.        ]\n [ 0.71749368  0.54609844  0.74924888  1.        ]\n [ 0.86883981  0.54634575  0.83232409  1.        ]\n [ 0.89313181  0.8006561   0.05072146  1.        ]\n [ 0.79492088  0.07750024  0.45762175  1.        ]\n [ 0.92350837  0.20587178  0.76987197  1.        ]\n [ 0.0092076   0.0044617   0.04673518  1.        ]\n [ 0.69569363  0.3315923   0.15093861  1.        ]]\n","2242":"list(enumerate(set(color_names)))\n","2243":"In [4]: mat = [ [(4,4),(1,6)] , [(6,1),(2,2)] ]\n\nIn [6]: c,d=mat[0][0]    #here mat[0] is [(4,4),(1,6)], invoking [0] on this yields [4,4]\n\nIn [7]: c\nOut[7]: 4\n\nIn [8]: d\nOut[8]: 4\n\n\nIn [9]: a,b=mat[1][1]  #here mat[1] is [(6,1),(2,2)], invoking [1] on this yields [2,2]\n\nIn [10]: a\nOut[10]: 2\n\nIn [11]: b\nOut[11]: 2\n","2244":">>> re.findall(\"(.+?)\\1+\", \"FFFFFFF\")\n[]\n>>> re.findall(r\"(.+?)\\1+\", \"FFFFFFF\")\n['F']\n>>> \n","2245":"host = request.host\nhost = host.split(':', 1)[0] # Strip off optional ':##' port number\nusername = None\nif host.endswith('.yourdomain.com'):\n    username = host.split('.', 1)[0]\n","2246":"payload = {\n   'username': 'your username',\n   'password': 'your password'\n   }\np = requests.post(myurl, data=payload)\n","2247":"import sys\nfrom pdfminer.pdfparser import PDFParser\nfrom pdfminer.pdfdocument import PDFDocument\nfrom pdfminer.pdftypes import resolve1\n\nfilename = sys.argv[1]\nfp = open(filename, 'rb')\n\nparser = PDFParser(fp)\ndoc = PDFDocument(parser)\ndoc.initialize()    \nfields = resolve1(doc.catalog['AcroForm'])['Fields']\nfor i in fields:\n    field = resolve1(i)\n    name, value = field.get('T'), field.get('V')\n    print '{0}: {1}'.format(name, value)\n","2248":"user = ModelChoiceField(queryset=User.objects.filter(\n    is_staff=True, profile__fieldtocheck=False), ...)\n","2249":"import time\nimport serial\n\n# configure the serial connections (the parameters differs on the device you are connecting to)\nser = serial.Serial(\n    port='COM2',\n    baudrate=9600,\n    timeout=1,\n    parity=serial.PARITY_ODD,\n    stopbits=serial.STOPBITS_TWO,\n    bytesize=serial.SEVENBITS\n)\nser.isOpen()\n# Reading the data from the serial port. This will be running in an infinite loop.\n\nwhile 1 :\n        # get keyboard input\n        bytesToRead = ser.inWaiting()\n        data = ser.read(bytesToRead)\n        time.sleep(1)\n        print(data)\n","2250":"(defun python-shell-send-line (&optional send-main msg)\n  \"Send the entire line to inferior Python process.\nWhen optional argument SEND-MAIN is non-nil, allow execution of\ncode inside blocks delimited by \\\"if __name__== \\\\='__main__\\\\=':\\\".\nWhen called interactively SEND-MAIN defaults to nil, unless it's\ncalled with prefix argument.  When optional argument MSG is\nnon-nil, forces display of a user-friendly message if there's no\nprocess running; defaults to t when called interactively.\"\n  (interactive (list current-prefix-arg t))\n  (save-restriction\n    (widen)\n    (python-shell-send-region (line-beginning-position) (line-end-position) send-main msg)))\n","2251":"In [52]: a = [                               \n        ['StarList', 'StarId38', 'ShipList']\n    ]\n\nIn [53]: b = [                               \n        ['StarList', 'StarId3', 'ShipList'],\n        ['StarList', 'StarId4', 'ShipList']\n    ]\n\nIn [54]: set(map(tuple, a)) == set(map(tuple, b))\nOut[54]: False\n\nIn [55]: a = [\n   ....:         ['StarList', 'StarId4', 'ShipList'],\n   ....:         ['StarList', 'StarId3', 'ShipList']\n   ....:     ]\n\nIn [56]: set(map(tuple,a))==set(map(tuple,b))\nOut[56]: True\n","2252":">>> import re\n>>> re.sub(\"[^0-9]\", \"\", \"sdkjh987978asd098as0980a98sd\")\n'987978098098098'\n","2253":"import threading.Thread\n\nclass Line_Counter(threading.Thread):\n    def __init__(self, staticText, filename):\n        threading.Thread.__init__(self)\n        self.staticText = staticText\n\n    def run(self):\n        self.exit = False\n        with open(self.filename) as f:\n            if self.exit:\n                return\n            for count, _ in enumerate(f):   pass\n        self.staticText.SetLabel(str(count + 1))\n\n    def abort(self):\n        self.exit = True\n\n\nclass MainFrame(wx.Frame):\n    def __init__(self, parent, id, filename):\n        wx.Frame.__init__(self, parent, id, 'Threaded File Loader')\n        self.line_counter = False      # Set up a dummy thread variable\n        #### remaining code\n        self.file_open_button.Bind( wx.EVT_BUTTON, self.OnOpenFile ) # Event handler for opening file\n\n    def OnOpenFile(self, event):\n        filepath = getFile()  # Creates a file open dialog and returns the file path\n        if self.line_counter: # Checks if a counter thread is already running\n            self.line_counter.abort() # Stops the thread if True\n        self.line_counter = Line_Counter(self.staticText, filename).start()  # Starts a new thread\n","2254":"from StringIO import StringIO\nimport sys\nimport re\n\nfrom pip import parseopts\nfrom pip.commands import commands\n\ndef list_outdated(pypi_server):\n    args = ['list', '-o', '-f', pypi_server, '--no-index']\n    cmd_name, options, args, parser = parseopts(args)\n    command = commands['list'](parser)\n\n    _stdout = sys.stdout\n    output = StringIO()\n    sys.stdout = output\n    command.main(args, options)\n    sys.stdout = _stdout\n\n    return re.findall('(\\w+)\\s+\\(Current:\\s+(.*?) Latest:\\s+(.*?)\\)', output.read() * 2)\n\noutdated = list_outdated('http:\/\/my_server:8080\/packages\/')\n","2255":"if form.is_valid():\n    comment = form.save(commit=False)\n    comment.story = story_details\n    comment.save()\n    return ...\n","2256":"import seaborn as sns\ntips = sns.load_dataset(\"tips\")\nsns.set(style=\"ticks\", palette=\"colorblind\")\ng = sns.FacetGrid(tips, col=\"time\", size=4, aspect=.75)\ng = g.map(sns.violinplot, \"sex\", \"total_bill\", \"smoker\", palette={\"No\": \"b\", \"Yes\": \"w\"}, inner=None, linewidth=1, scale=\"area\", split=True, width=0.75).despine(left=True)\ng.fig.get_axes()[0].legend(title= 'smoker',loc='upper left')\ng.set_axis_labels('lunch','total bill')\nsns.plt.show()\n","2257":"import datetime\n\n****\ntimestamp = datetime.datetime.utcnow().isoformat()\nisoDate = datetime.datetime.strptime( timestamp, \"%Y-%m-%dT%H:%M:%S.%f\" )\nprint (timestamp)\n","2258":">>> set.intersection(*D.values())\n{2}\n","2259":"from Bio import SeqIO\nimport re\nwith open(fasta_path, 'rb') as fin:\n    s = SeqIO.parse(fin, 'fasta')\n    for r in s:\n        num_you_want = int(re.findall('\\((\\d+) - \\d+\\)', r.description)[0])\n","2260":"def filtering(a_list):\n    results = []\n    for i, item in enumerate(a_list):\n        if re.search(r'\\d{0,1}\\s+Contacts;\\s*', item) is not None:\n            results.extend(a_list[i+1:i+6])\n","2261":"\/\/ 8(7 used) bit per channel\ndouble R=double(col>>16)\/127.0;\ndouble G=double(col>> 8)\/127.0;\ndouble B=double(col    )\/127.0;\n\n\/\/ 8 bit per channel\ndouble R=double(col>>16)\/255.0;\ndouble G=double(col>> 8)\/255.0;\ndouble B=double(col    )\/255.0;\n","2262":"tokens = []    \nfor linea in f.readlines():\n    line_content = linea.split(' ')\n    for token in line_content:\n        tokens.append(token)\nprint(tokens)\n","2263":"class CustomUserAdmin(UserAdmin):\n# ...code here...\n\n    fieldsets = (\n        (None, {'fields': ('email',)}),\n        (_('Personal info'), {'fields': ('first_name', 'last_name')}),\n        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser',\n                                       'groups', 'user_permissions')}),\n        (_('Important dates'), {'fields': ('last_login', 'date_joined')}),\n    )\n    add_fieldsets = (\n        (None, {\n            'classes': ('wide',),\n            'fields': ('email', 'first_name', 'last_name', 'password1',\n                       'password2')}\n         ),\n    )\n","2264":"import os\n\n....\n\nfilename = '{}:\/{}\/{}.mp3'.format(d_name, dir_list[i], s_name)\nif os.path.exists(filename):\n    system('start ' + filename)\nelse:\n    print \"File {} was not found\".format(filename)\n","2265":"import collections\nimport bisect\n\nclass FastTable:\n\n    def __init__(self):\n        self.__deque = collections.deque()\n\n    def __len__(self):\n        return len(self.__deque)\n\n    def head(self):\n        return self.__deque.popleft()\n\n    def tail(self):\n        return self.__deque.pop()\n\n    def peek(self):\n        return self.__deque[-1]\n\n    def insert(self, obj):\n        index = bisect.bisect_left(self.__deque, obj)\n        self.__deque.rotate(-index)\n        self.__deque.appendleft(obj)\n        self.__deque.rotate(index)\n","2266":"if var in [2, 3]:\n    ...\nelif var in [2, 15]:\n    ...\n","2267":"import cProfile\nimport pstats\nimport glob\nimport math\n\ndef gen():\n    for i in range(1, 10):\n        yield math.factorial(i)\n\nclass index(object):\n    def GET(self):\n        p = cProfile.Profile()\n\n        it = gen()\n        while True:\n            try:\n                nxt = p.runcall(next, it)\n            except StopIteration:\n                break\n            print nxt\n\n        p.print_stats()\n\nindex().GET()\n","2268":"# myapp\/apps.py\nfrom django import VERSION as DJANGO_VERSION\nif DJANGO_VERSION >= (1, 7):\n    from django.apps import AppConfig\n    class MyAppConfig(AppConfig):\n        ...\n\n# myapp\/__init__.py\nfrom django import VERSION as DJANGO_VERSION\nif DJANGO_VERSION >= (1, 7):\n    default_app_config = 'myapp.apps.MyAppConfig'\n","2269":">>> import shlex\n>>> argument_string = \"-a arga -b \\\"argument b\\\" arg1 arg2\"\n>>> l = shlex.split(argument_string)\n>>> l\n['-a', 'arga', '-b', 'argument b', 'arg1', 'arg2']\n","2270":">>> WEEKDAY_ORDER = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n>>>\n>>> def sorted_schedule(s):\n...     return sorted(s, key=lambda k: WEEKDAY_ORDER.index(k.split()[0]))  # <---\n...\n>>> schedule2 = set(['Wednesday afternoon', 'Friday'])\n>>> print(sorted_schedule(schedule2))\n['Wednesday afternoon', 'Friday']\n","2271":"%apply (float* INPLACE_ARRAY1, int DIM1) {(float* data1, int n1), (float* data2, int n2)};\n\nclass Class \n{\n  public: \n  void test(float* data1, int n1, float* data2, int n2)\n  {\n    \/\/...\n  }\n};\n","2272":"def wrap(*args, **kwargs):\n    return helloworld(*args, **kwargs)\n\nui.pushButton.clicked.connect(wrap)\n","2273":">>> import re\n>>> import urllib2\n>>> import lxml.html\n>>> page = urllib2.urlopen(\"http:\/\/maps.google.com\/maps\/place?cid=2860002122405830765\").read()\n\n# have to search the page source since the link is added in javascript\n>>> mo = re.search(r'<div class=\"pp-more-reviews\">.*?<\/div>', page)\n>>> div = lxml.html.fromstring(mo.group(0))\n>>> href = div.find(\"a\").attrib[\"href\"]\n","2274":"import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame(np.random.randn(2000,784))\n\npanel = pd.Panel(data.values.reshape(2000, 28, 28))\n\n# In [49]: q.panel[42].shape\n# Out[49]: (28, 28)\n\n# In [51]: q.panel\n# Out[51]:\n# <class 'pandas.core.panel.Panel'>\n# Dimensions: 2000 (items) x 28 (major_axis) x 28 (minor_axis)\n# Items axis: 0 to 1999\n# Major_axis axis: 0 to 27\n# Minor_axis axis: 0 to 27\n","2275":">>> class List(list):\n...     pass\n... \n>>> weaklist = List()\n>>> weaklist.append('a')\n>>> weaklist.append('b')\n>>> stronglist = [ ['c','d','e'] ]\n>>> weaklist\n['a', 'b']\n>>> stronglist\n[['c', 'd', 'e']]\n>>> import weakref\n>>> stronglist.append(weakref.ref(weaklist))\n>>> stronglist\n[['c', 'd', 'e'], <weakref at 0x10046e578; to 'List' at 0x100455f70>]\n>>> stronglist[1]()\n['a', 'b']\n>>> del weaklist\n>>> stronglist\n[['c', 'd', 'e'], <weakref at 0x10046e578; dead>]\n>>> stronglist[1]()\n>>>\n","2276":"for line in soup.find_all('h1',attrs={'itemprop':'name'}):\n    [s.extract() for s in line('span')]\nprint line.get_text()\n# => New Men's Genuine Leather Bifold ID Credit Card Money Holder Wallet Black\n","2277":">>> a\nset([(2, 7), (4, 7), (6, 7), (5, 7), (7, 7), (0, 7), (1, 7), (3, 7)])\n>>> sorted(a)\n[(0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7)]\n","2278":"date_realization_for_articles = Article.objects.values_list('date_realization',\n                                                            flat=True).distinct()\n","2279":"only = set(args.onlyTheseServers or availableServers)\n","2280":" def checkIfRomanNumeral(numeral):\n     \"\"\"Controls that the userinput only contains valid roman numerals\"\"\"\n     numeral = numeral.upper()\n     validRomanNumerals = [\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\", \"(\", \")\"]\n     for letters in numeral:\n        if letters not in validRomanNumerals:\n            print(\"Sorry that is not a valid roman numeral\")\n            return True\n     romanToInt(numeral)\n","2281":"# Create the initial circle\ncircle = Circle([2,2], 2);\n\n# Get the path and the affine transformation\npath = circle.get_path()\ntransform = circle.get_transform()\n\n# Now apply the transform to the path\nnewpath = transform.transform_path(path)\n\n# Now you can use this\npolygon = matpatches.PathPatch(newpath)\npatches.append(polygon)\n","2282":"re.findall(r'\\d{1,2}\/optimized\/.+?\\.tif', swatch)\n\n                                            ^^\n","2283":"\ndef make_counter():\n    i = 0\n    def counter(): # counter() is a closure\n        nonlocal i\n        i += 1\n        return i\n    return counter\n\nc1 = make_counter()\nc2 = make_counter()\n\nprint (c1(), c1(), c2(), c2())\n# -> 1 2 1 2\n","2284":"User.query.filter(User.name != 'Rachmaninoff')\n","2285":">>> import uuid\n>>> def foo():\n...     uuid = uuid.uuid4()\n... \n>>> foo()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in foo\nUnboundLocalError: local variable 'uuid' referenced before assignment\n>>> def bar():\n...     uuidValue = uuid.uuid4()\n... \n>>> bar()\n>>> \n>>> someGlobal = 10\n>>> def baz():\n...     someGlobal = someGlobal + 1\n... \n>>> baz()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in baz\nUnboundLocalError: local variable 'someGlobal' referenced before assignment\n>>> def quux():\n...     someLocal = someGlobal + 1\n... \n>>> quux()\n>>> \n","2286":"def export_to_png(self, filename, *args):\n        '''Saves an image of the widget and its children in png format at the\n        specified filename. Works by removing the widget canvas from its\n        parent, rendering to an :class:`~kivy.graphics.fbo.Fbo`, and calling\n        :meth:`~kivy.graphics.texture.Texture.save`.\n\n        .. note::\n\n            The image includes only this widget and its children. If you want\n            to include widgets elsewhere in the tree, you must call\n            :meth:`~Widget.export_to_png` from their common parent, or use\n            :meth:`~kivy.core.window.WindowBase.screenshot` to capture the whole\n            window.\n\n        .. note::\n\n            The image will be saved in png format, you should include the\n            extension in your filename.\n\n        .. versionadded:: 1.9.0\n        '''\n\n        if self.parent is not None:\n            canvas_parent_index = self.parent.canvas.indexof(self.canvas)\n            self.parent.canvas.remove(self.canvas)\n\n        fbo = Fbo(size=self.size, with_stencilbuffer=True)\n\n        with fbo:\n            ClearColor(0, 0, 0, 1)\n            ClearBuffers()\n            Scale(1, -1, 1)\n            Translate(-self.x, -self.y - self.height, 0)\n","2287":"def facebook_login(request):\n    \"\"\"\n    Facebook login page\n    \"\"\"\n    if request.REQUEST.get(\"device\"):\n        device = request.REQUEST.get(\"device\")\n    else:\n        device = \"user-agent\"\n\n    params = {}\n    params[\"client_id\"] = FACEBOOK_APP_ID\n    params[\"redirect_uri\"] = request.build_absolute_uri(reverse(\"socialauth_facebook_login_done\"))\n\n    url = \"https:\/\/graph.facebook.com\/oauth\/authorize?\"+urllib.urlencode(params)\n\n    return HttpResponseRedirect(url)\n\ndef facebook_login_done(request):\n    user = authenticate(request=request)\n\n    if not user:\n        request.COOKIES.pop(FACEBOOK_API_KEY + '_session_key', None)\n        request.COOKIES.pop(FACEBOOK_API_KEY + '_user', None)\n\n        # TODO: maybe the project has its own login page?\n        logging.debug(\"SOCIALAUTH: Couldn't authenticate user with Django, redirecting to Login page\")\n        return HttpResponseRedirect(reverse('socialauth_login_page'))\n\n    login(request, user)\n\n    logging.debug(\"SOCIALAUTH: Successfully logged in with Facebook!\")\n\n    if request.GET.get('next'):\n        return HttpResponseRedirect(request.GET.get('next'))\n    else:\n        return HttpResponseRedirect(LOGIN_REDIRECT_URL)\n","2288":"<span style=\"color:red\"><b>This is red<\/b><\/span>\n","2289":"0.024 sec (avg) - wc -l file.txt\n0.121 sec (avg) - sed -n '$=' file.txt\n0.396 sec (avg) - nl file.txt | tac |sed -n 1p | awk '{print $1}\n","2290":"def mytext(stmt, params):\n    bindparams = []\n    for k, v in params:\n        if isinstance(v, datetime):\n            type_ = MyType()\n        else:\n            type_ = None\n        bindparams.append(bindparam(k, v, type_=type))\n    return text(stmt, bindparams=bindparams)\n","2291":"# Initialize output array   \nres = np.zeros(r.shape)\n\n# Get mask1 and compute values for all elements and use the mask to set only\n# TRUE positions with the computed values\nmask1 = (r >= 0.5*dr) & (r <= 1.5*dr)\nV1 = (5-3*np.abs(r*mask1)\/dr - np.sqrt(-3*(1-np.abs(r*mask1)\/dr)**2+1))\/(6*dr)\nres[mask1] = V1[mask1]\n\n# Similarly for mask2 and the computations with that mask\nmask2 = np.logical_not(mask1) & (r <= 0.5*dr)\nV2 = (1+np.sqrt(-3*(r*mask2\/dr)**2+1))\/(3*dr)\nres[mask2] = V2[mask2]\n","2292":"# Option 1\ns = s.sort_index()\ndf.plot(color = s.values) # as per Fiabetto's answer\n\n# Option 2\ndf.plot(color = ['c', 'y')\n","2293":"import matplotlib.pyplot as plt\n\nfig = plt.figure()\n\n# Add subplots\nnRows = 4\nnCols = 2\nnPlots = 7\nax1 = fig.add_subplot(nRows,nCols,1)\nax1.set_yscale('log')\nax1.set_xscale('log')\n\nfor n in range(1, nPlots+1):\n    plt.subplot(nRows,nCols,n, sharex=ax1, sharey=ax1)\n\n# Turn off tick lables where needed. \nindex = 0\nfor r in range(1, nRows +1):\n     for c in range(1, nCols + 1):\n         index += 1\n         # Turn off y tick labels for all but the first column.\n         if ((c != 1) and (index <= nPlots)):  \n             ax = plt.subplot(nRows, nCols, index, sharex=ax1, sharey=ax1)\n             plt.setp(ax.get_yticklabels(), visible=False)\n          # Turn off x tick lables for all but the bottom plot in each \n          # column. \n         if ((nPlots - index) >= nCols):\n             ax = plt.subplot(nRows, nCols, index, sharex=ax1, sharey=ax1) \n             plt.setp(ax.get_xticklabels(), visible=False)\n\nplt.subplots_adjust(wspace=0, hspace=0)\n\nplt.show()\n","2294":"import cssutils\ncss = cssutils.parseFile('index.html')\nfor rule in css.cssRules:\n    print(rule.style.top)\n    print(rule.style.left)\n","2295":"import someapp\n","2296":"from fractions import Fraction\n>>> print float( Fraction(2**54343) \/ Fraction( 2**54347 + 1 ) )\n0.0625\n>>> print Fraction(2**54343) \/ Fraction( 2**54347 + 1 )\n# ... very long exact answer expressed as a fraction ...\n","2297":"starts = df[\"Start Time\"].copy()\nstarts.sort()\ndt = starts.diff()\nheat = (dt > pd.Timedelta(seconds=60)).cumsum()\nheat = heat.sort_index()\n","2298":">>> re.sub(r\"([0123]?[0-9])(st|th|nd|rd)\",r\"\\1<sup>\\2<\/sup>\",\"Meet you on 5th\")\n'Meet you on 5<sup>th<\/sup>'\n","2299":".. automodule:: bar\n\n   .. autofunction:: foo(x=0.97)\n","2300":"itertools.product(*A)\n","2301":"import matplotlib.pyplot as plt\nfrom matplotlib.ticker import FuncFormatter, MultipleLocator\n\nx_data = np.arange(97, 110)\ny_data = np.random.rand(len(x_data))\n\ndef ord_to_char(v, p=None):\n    return chr(int(v))\n\nfig, ax = plt.subplots()\nax.plot(x_data, y_data, 'x')\nax.xaxis.set_major_formatter(FuncFormatter(ord_to_char))\nax.xaxis.set_major_locator(MultipleLocator(1))\nplt.show()\n","2302":"if self.request.get('key'):\n    # Key specified, get field values from db store\n    key = self.request.get('key')\n    sort = db.get(key)\n    for field in ItemDB.properties():\n        self.formdata[field] = getattr(sort, field)\n","2303":"import cmd\n\nclass MainConsole(cmd.Cmd):\n    def __init__(self,console_id):\n       cmd.Cmd.__init__(self)\n       self.console_id = console_id\n    def do_something(self, line):\n       print \"do something!\",self.console_id\n       return\n\n    def do_something2(self, line):\n       print \"do something2!\",self.console_id\n       return    \n\nclass SubConsole1(cmd.Cmd):\n\n    def __init__(self, maincon):\n        cmd.Cmd.__init__(self)\n        self.maincon = maincon\n        self.register_main_console_methods()\n\n    def do_super_commands(self,line):\n        print \"do supercommand\",self.maincon\n\n    def register_main_console_methods(self):\n        main_names = dir(self.maincon)\n        for name in main_names:\n            for prefix in 'do_','help_','complete_', :\n                if name.startswith(prefix) and name not in dir(self):\n                    self.__dict__[name] = getattr(self.maincon, name)\n\n    def get_names(self):\n        result = cmd.Cmd.get_names(self)\n        result+=self.maincon.get_names()\n        return result\n\nSubConsole1(MainConsole(\"mainconsole\")).cmdloop()\n","2304":"def save(self, commit=True):\n    user = super(CustomFormThing, self).save(commit=False)\n    #set some other attrs on user here ...\n    user._some = 'some'\n    user._other = 'other'\n    if commit:\n        user.save()\n\n    return user\n\n@receiver(post_save, sender=User)\ndef create_profile(sender, instance, created, **kwargs):\n    some_id = getattr(instance, '_some', None)\n    other_id = getattr(instance, '_other', None)\n\n    if created:\n        #do something with the kwargs above...\n","2305":">>> import datetime\n>>> str(datetime.timedelta(seconds=666))\n'0:11:06'\n","2306":"step1 = Popen(['ip','addr','show','br0'],stdout=PIPE)\nstep2 = Popen(['grep','inet6'],stdout=PIPE,stdin=step1.stdout)\nstep3 = Popen(['sed','-e','\/fe80\/d','-e','s\/ *inet6 *\/\/g','-e','s\/\\\/64.*$\/\/g'],stdout=PIPE,stdin=step2.stdout)\nstep4 = Popen(['tail','-n1'],stdout=PIPE,stdin=step3.stdout)\nstep4.communicate()[0]\n","2307":"def my_facebook_api(input):\n    if input=='A':\n        return 'X'\n    elif input=='B':\n        return 'D'\n\nfacebook_api =  Mock(side_effect=my_facebook_api)\n","2308":"void MManager::acquirePython(void) {\n    MThread thisThread = MFramework::MProcesses::GetCurrentThread();\n    if (thisThread != mainThread) {\n        Lock();\n        std::map<MThread,void*>::iterator i = threadStates.find(thisThread);\n        if (i == threadStates.end()) {\n            Unlock();\n            PyGILState_STATE gstate = PyGILState_Ensure();\n            _PyGILState_STATE_* encState = new _PyGILState_STATE_;\n            encState->state = gstate;\n            encState->refCount = 1;\n            Lock();\n            threadStates[thisThread] = encState;\n            Unlock();\n        } else {\n            _PyGILState_STATE_* encState = (_PyGILState_STATE_*)i->second;\n            encState->refCount = encState->refCount + 1;\n            Unlock();\n        }\n\n    } else {\n        if (mainThreadState) PyEval_RestoreThread((PyThreadState*)mainThreadState);\n    }\n\n}\n\nvoid MManager::releasePython(void) {\n    MThread thisThread = MFramework::MProcesses::GetCurrentThread();\n    if (thisThread != mainThread) {\n        Lock();\n        std::map<MThread,void*>::iterator i = threadStates.find(thisThread);\n        if (i != threadStates.end()) {\n            _PyGILState_STATE_* encState = (_PyGILState_STATE_*)i->second;\n            if (encState->refCount <= 1) {\n                threadStates.erase(i);\n                Unlock();\n\n                PyGILState_Release(encState->state);\n                delete encState;\n            } else {\n                encState->refCount = encState->refCount - 1;\n                Unlock();\n            }\n        } else {\n            Unlock();\n        }\n\n    } else {\n        mainThreadState = PyEval_SaveThread();\n    }\n}\n","2309":"In [77]:\ndf.loc[(df['Name'] == 'Richard') & (df['Points']==35),'String'].str[3:5]\n\nOut[77]:\n1    67\n3    38\nName: String, dtype: object\n","2310":"word[:2]    # The first two characters\nword[2:]    # Everything except the first two characters\n","2311":"x = 'ABCD'\n[(x[i], x[:i] + x[i+1:]) for i in range(len(x))]\n# Outputs:\n# [('A', 'BCD'), ('B', 'ACD'), ('C', 'ABD'), ('D', 'ABC')]\n","2312":"In [88]: import itertools as it\nIn [89]: list(it.product(('1','11'),('2','22'),('3','33')))\nOut[89]: \n[('1', '2', '3'),\n ('1', '2', '33'),\n ('1', '22', '3'),\n ('1', '22', '33'),\n ('11', '2', '3'),\n ('11', '2', '33'),\n ('11', '22', '3'),\n ('11', '22', '33')]\n","2313":"def combine(a, b, a_weight, b_weight):\n    if isinstance(a, tuple):\n        return tuple(combine(x,y,a_weight,b_weight) for x,y in zip(a,b))\n    elif isinstance(a, dict):\n        return dict((k, combine(a[k],b[k],a_weight,b_weight)) for k in a)\n    #add other data structures here if you need to (e.g. list, set, etc.)\n    else: #assume a number\n        return ((a * a_weight) + (b * b_weight)) \/ (a_weight + b_weight)\n","2314":"self.timer = Timer(seconds, lambda: None)\n","2315":"def maketransformer(file): #contains arbitrary stuff that takes too long\n\n    data = gdal.Open(file)\n    output_wkt = data.GetProjection()\n    srs_out = osr.SpatialReference()\n    srs_out.ImportFromWkt(output_wkt)\n\n    transformer = osr.CoordinateTransformation(srs_out)\n    return transformer\n\ntransformer = maketransformer('data\/w001001.adf')\n\nfor tuple in shapefilepoints:\n    getelevation(transformer.Transform(tuple))\n","2316":"import itertools\n\nusers = df.user_id.unique()\ndf_indexed = df.set_index(['user_id', 'day'])\nindex = pd.MultiIndex.from_tuples(list(itertools.product(users, range(365))))\nreindexed = df_indexed.reindex(index, fill_value=0)\n","2317":"from tkinter import *\nfrom tkinter.ttk import *\n\nroot = Tk()\ntree = Treeview(root,selectmode=\"extended\",columns=(\"A\",\"B\"))\ntree.pack(expand=YES, fill=BOTH)\ntree.heading(\"#0\", text=\"C\/C++ compiler\")\ntree.column(\"#0\",minwidth=0,width=100, stretch=NO)\ntree.heading(\"A\", text=\"A\")   \ntree.column(\"A\",minwidth=0,width=200, stretch=NO) \ntree.heading(\"B\", text=\"B\")   \ntree.column(\"B\",minwidth=0,width=300)\nroot.mainloop()\n","2318":"In [7]: import requests\n\nIn [8]: url = 'http:\/\/www.analysis.im\/uploads\/seminar\/pdf-sample.pdf'\n\nIn [9]: requests.get(url)\nOut[9]: <Response [404]>\n\nIn [10]: requests.get(url, headers={'User-Agent': 'firefox'})\nOut[10]: <Response [200]>\n","2319":"if key in array:\n  # do something\n","2320":"unqiue_values = collection.distinct(\"key\")\n","2321":"class MyFilteredAdmin(admin.ModelAdmin):\n    def queryset(self, request):\n        qs = super(MyFilteredAdmin, self).queryset(request)\n        if is_related_to(self.model, Profile):\n            qs = qs.exclude(user__email='guest@mysite.com')\n        return qs\n","2322":"def sieve3(n):\n    top = n+1\n    sieved = dict.fromkeys(xrange(3,top,2), True)\n    for si in xrange(3,top,2):\n        if si * si > top:\n            break\n        if sieved[si]:\n            for j in xrange(3*si, top, si*2):     \n                sieved[j] = False\n    return [2] + [pr for pr in xrange(3,top,2) if sieved[pr]]\n","2323":"def initUI(self):\n        calculateBtn = QtGui.QPushButton(\"Calculate\", self)\n        calculateBtn.clicked.connect(self.calculate_btn_on_click)\n        self.earningsTextbox = QtGui.QLineEdit(self)\n\n        self.show()\n\n def calculate_btn_on_click(self):\n        self.earningsTextbox.setText(\"42\")\n","2324":"if timestamp % 3600 == 0:\n    # save the timestamp-value tuple\n","2325":"for line in fileinput.input(['thefile.txt'], inplace=True):\n    print(line.replace('old stuff', 'shiny new stuff'))\n","2326":"class E(C, D):\n    def do_c_thing(self):\n        # Call C's version\n        C.some_method(self, ...)\n\n    def do_d_thing(self):\n        # Call D's version\n        D.some_method(self, ...)\n","2327":"from PyQt4 import QtCore, QtGui, QtXml\n\nclass XmlHandler(QtXml.QXmlDefaultHandler):\n    def __init__(self, root):\n        QtXml.QXmlDefaultHandler.__init__(self)\n        self._root = root\n        self._item = None\n        self._text = ''\n        self._error = ''\n\n    def startElement(self, namespace, name, qname, attributes):\n        if qname == 'folder' or qname == 'item':\n            if self._item is not None:\n                self._item = QtGui.QTreeWidgetItem(self._item)\n            else:\n                self._item = QtGui.QTreeWidgetItem(self._root)\n            self._item.setData(0, QtCore.Qt.UserRole, qname)\n            self._item.setText(0, 'Unknown Title')\n            if qname == 'folder':\n                self._item.setExpanded(True)\n            elif qname == 'item':\n                self._item.setText(1, attributes.value('type'))\n        self._text = ''\n        return True\n\n    def endElement(self, namespace, name, qname):\n        if qname == 'title':\n            if self._item is not None:\n                self._item.setText(0, self._text)\n        elif qname == 'folder' or qname == 'item':\n            self._item = self._item.parent()\n        return True\n\n    def characters(self, text):\n        self._text += text\n        return True\n\n    def fatalError(self, exception):\n        print('Parse Error: line %d, column %d:\\n  %s' % (\n              exception.lineNumber(),\n              exception.columnNumber(),\n              exception.message(),\n              ))\n        return False\n\n    def errorString(self):\n        return self._error\n\nclass Window(QtGui.QTreeWidget):\n    def __init__(self):\n        QtGui.QTreeWidget.__init__(self)\n        self.header().setResizeMode(QtGui.QHeaderView.Stretch)\n        self.setHeaderLabels(['Title', 'Type'])\n        source = QtXml.QXmlInputSource()\n        source.setData(xml)\n        handler = XmlHandler(self)\n        reader = QtXml.QXmlSimpleReader()\n        reader.setContentHandler(handler)\n        reader.setErrorHandler(handler)\n        reader.parse(source)\n\nxml = \"\"\"\\\n<root>\n    <folder>\n        <title>Folder One<\/title>\n        <item type=\"1\">\n            <title>Item One<\/title>\n        <\/item>\n        <item type=\"1\">\n            <title>Item Two<\/title>\n        <\/item>\n        <item type=\"2\">\n            <title>Item Three<\/title>\n        <\/item>\n        <folder>\n            <title>Folder Two<\/title>\n            <item type=\"3\">\n                <title>Item Four<\/title>\n            <\/item>\n            <item type=\"0\">\n                <title>Item Five<\/title>\n            <\/item>\n            <item type=\"1\">\n                <title>Item Six<\/title>\n            <\/item>\n        <\/folder>\n    <\/folder>\n    <folder>\n        <title>Folder Three<\/title>\n        <item type=\"0\">\n            <title>Item Six<\/title>\n        <\/item>\n        <item type=\"2\">\n            <title>Item Seven<\/title>\n        <\/item>\n        <item type=\"2\">\n            <title>Item Eight<\/title>\n        <\/item>\n    <\/folder>\n<\/root>\n\"\"\"\n\nif __name__ == '__main__':\n\n    import sys\n    app = QtGui.QApplication(sys.argv)\n    window = Window()\n    window.resize(400, 300)\n    window.show()\n    sys.exit(app.exec_())\n","2328":"<input type=\"radio\" name=\"music\" value=\"Rock\" checked=\"checked\"> Rock<br>\n<input type=\"radio\" name=\"music\" value=\"Pop\"> Pop<br>\n<input type=\"radio\" name=\"music\" value=\"Metal\"> Metal<br>\n","2329":"from itertools import groupby\ndef block_generator(filename):\n    with open(filename) as lines:\n        for pred,block in groupby(lines, \"\\t\\n\".__ne__):\n            if pred:\n                yield block\n","2330":"class MyModelAdmin(admin.ModelAdmin):\n    def save_model(self, request, obj, form, change):\n        # custom stuff here\n        obj.save()\n","2331":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport matplotlib.dates as dates\n\nidx = pd.date_range('2011-05-01', '2011-07-01')\ns = pd.Series(np.random.randn(len(idx)), index=idx)\n\nfig, ax = plt.subplots()\nax.plot_date(idx.to_pydatetime(), s, 'v-')\nax.xaxis.set_minor_locator(dates.WeekdayLocator(byweekday=(1),\n                                                interval=1))\nax.xaxis.set_minor_formatter(dates.DateFormatter('%d\\n%a'))\nax.xaxis.grid(True, which=\"minor\")\nax.yaxis.grid()\nax.xaxis.set_major_locator(dates.MonthLocator())\nax.xaxis.set_major_formatter(dates.DateFormatter('\\n\\n\\n%b\\n%Y'))\nplt.tight_layout()\nplt.show()\n","2332":"\"hello %(name)s , how are you %(name)s, welcome %(name)s\" % {\"name\": \"john\"}\n'hello john, how are you john, welcome john'\n","2333":"def parsePsycopgSQLArray(input):\n    import csv\n    import cStringIO\n\n    input = input.strip(\"{\")\n    input = input.strip(\"}\")\n\n    buffer = cStringIO.StringIO(input)\n    reader = csv.reader(buffer, delimiter=',', quotechar='\"')   \n\n    return reader.next() #There can only be one row \n\nif __name__ == \"__main__\":\n    text = '{2f5e5fef-1e8c-43a2-9a11-3a39b2cbb45e,\"Marc, Dirk en Koen\",398547,85.5,-9.2, 62fe6393-00f7-418d-b0b3-7116f6d5cf10}' \n    result = parsePsycopgSQLArray(text)\n    print result\n","2334":"class NotesMixin(object):\n    @declared_attr\n    def notes(cls):\n        return sa.Column(sa.String(4000) , nullable=False, default='')\n","2335":"import win32com.client\n\nxl = win32com.client.Dispatch(\"Excel.Application\")\nxl.DisplayAlerts = False\nwb = xl.Workbooks.Open(r\"C:\\PATH\\TO\\SOURCE_FILENAME.XLSX\")\nwb.SaveAs(r\"C:\\PATH\\TO\\DESTINATION_FILENAME.XLS\", FileFormat = 56)\nwb.Close()\nxl.Quit()\n","2336":"routes_in = (\n  ('\/user', '\/login'),\n)\n\nroutes_out = (\n  ('\/user', '\/'),\n)\n","2337":"import numpy as np\nfrom scipy.interpolate import UnivariateSpline\n\ndef make_norm_dist(x, mean, sd):\n    return 1.0\/(sd*np.sqrt(2*np.pi))*np.exp(-(x - mean)**2\/(2*sd**2))\n\nx = np.linspace(10, 110, 1000)\ngreen = make_norm_dist(x, 50, 10)\npink = make_norm_dist(x, 60, 10)\n\nblue = green + pink   \n\n# create a spline of x and blue-np.max(blue)\/2 \nspline = UnivariateSpline(x, blue-np.max(blue)\/2, s=0)\nr1, r2 = spline.roots() # find the roots\n\nimport pylab as pl\npl.plot(x, blue)\npl.axvspan(r1, r2, facecolor='g', alpha=0.5)\npl.show()\n","2338":">>> np.matrix(list(itertools.product([0,1],repeat = 2)))\nmatrix([[0, 0],\n        [0, 1],\n        [1, 0],\n        [1, 1]])\n","2339":"def hms_to_seconds(t):\n    h, m, s = [int(i) for i in t.split(':')]\n    return 3600*h + 60*m + s\n","2340":"from django.contrib.auth.decorators import login_required\n\n@login_required(redirect_field_name='redirect_to')\ndef my_view(request):\n    ...\n","2341":"import telnetlib\n# ...\n\na_tuple = [('172.28.247.240', 66)]\nHOST = a_tuple[0] # do you mean to use 'a_tuple' instead of 'j'?\n# ...\n\ntn = telnetlib.Telnet(HOST[0], HOST[1]) # <-- pass the port, I don't think this accepts tuples of hostname\/ip and port\n# ...\n","2342":">>> lists = {}\n>>> lists['homework'] = [40, 60, 70]\n>>> lists['tests'] = [35, 99, 20]\n>>> lists\n{'tests': [35, 99, 20], 'homework': [40, 60, 70]}\n>>> \n","2343":"from datetime import datetime\n\ndef str2datetime(s):\n    parts = s.split('.')\n    dt = datetime.strptime(parts[0], \"%Y-%m-%d %H:%M:%S\")\n    return dt.replace(microsecond=int(parts[1]))\n","2344":"for line in input_file:\n    numbers = line.replace('\\n',\"\").split(',')\n\n    min = int(numbers[0])\n    for num in numbers:\n        n = int(num)\n        if n < min:\n            min = n\n    print min\n","2345":"For this version of Visual C++  Use this compiler version\nVisual C++ 4.x                  MSC_VER=1000\nVisual C++ 5                    MSC_VER=1100\nVisual C++ 6                    MSC_VER=1200\nVisual C++ .NET                 MSC_VER=1300\nVisual C++ .NET 2003            MSC_VER=1310\nVisual C++ 2005  (8.0)          MSC_VER=1400\nVisual C++ 2008  (9.0)          MSC_VER=1500\nVisual C++ 2010 (10.0)          MSC_VER=1600\nVisual C++ 2012 (11.0)          MSC_VER=1700\nVisual C++ 2013 (12.0)          MSC_VER=1800\nVisual C++ 2015 (14.0)          MSC_VER=1900\n","2346":"import re\n\ndef searchReplace(file, search, replace):\n    with open (file,'r') as f:\n        f_content= f.read()\n    # Re to search and replace\n    f_content = (re.sub(search, replace, f_content))\n    #write file with replaced content\n    with open (file,'w') as f:\n        f.write(f_content)\n\n\nsearchReplace(\"file.txt\",\"sys.test1.pwd = 1234\",\"sys.test1.pwd = 4321\")\n","2347":">>> a = raw_input('type a word')\ntype a word\nhello\n\n>>> a[::-1]\n'olleh'\n","2348":"subprocess.Popen(['gedit'])\n","2349":">>> hi_obj = hi()\n>>> hi_obj.__dict__.keys()\n","2350":"print ' '.join(str(next_cell).split()[:3])\n","2351":"env_variables:\n  FLASK_CONF: 'DEV'\n","2352":"class URIString(str):\n    _default_namespace = \"default\"\n\n    def __init__(self, value, namespace=_default_namespace):\n        self.namespace = namespace\n\n    def __new__(cls, value, namespace=_default_namespace):\n        return super().__new__(cls, value)      \n\n    @property\n    def local_name(self):\n        return self[(self.find(self.namespace)+len(self.namespace)):]\n","2353":"yourFile = \"C:\\folder\\folder\\file.txt\"\n\nimport os\nif os.path.isfile(yourFile) and os.access(yourFile, os.R_OK):\n    # if you got into this check, your file is good to go!\n","2354":">>> import re\n>>> def get_year(citation):\n...     citation = citation.strip()\n...     year = re.search(r\"\\((\\d{4}).*\\)\\.$\", citation).group(1)\n...     return int(year)\n>>> test_list = ['Bauer et al. (2000).', 'G. M. Kirwan in litt. (1999).', 'Pacheco (1999).', 'Scott (1997).', 'Venturini et al.(2002).', 'Venturini et al. (2005).', 'P. Develey in litt. (2007, 2008).']\n>>> test_list\n['Bauer et al. (2000).', 'G. M. Kirwan in litt. (1999).', 'Pacheco (1999).', 'Scott (1997).', 'Venturini et al. (2002).', 'Venturini et al. (2005).', 'P. Develey in litt. (2007, 2008).']\n>>> test_list.sort(key = get_year)\n>>> test_list\n['Scott (1997).', 'G. M. Kirwan in litt. (1999).', 'Pacheco (1999).', 'Bauer et al. (2000).', 'Venturini et al. (2002).', 'Venturini et al. (2005).', 'P. Develey in litt. (2007, 2008).']\n","2355":"ax = plt.gca()\nax.yaxis.set_major_formatter(matplotlib.ticker.NullFormatter())\nplt.draw()\n","2356":"In [11]: df = pd.DataFrame([[23], [34], ['36\/375'], ['NA'], [62]])\n\nIn [12]: df\nOut[12]:\n        0\n0      23\n1      34\n2  36\/375\n3      NA\n4      62\n\nIn [13]: df.convert_objects(convert_numeric=True)\nOut[13]:\n    0\n0  23\n1  34\n2 NaN\n3 NaN\n4  62\n","2357":"from multiprocessing import Process, Queue\nimport time\nq = Queue()\n\ndef some_func1(arg1, arg2, q):\n    #this one will take longer, so we'll kill it after the other finishes\n    time.sleep(20)\n    q.put('some_func1 finished!')\n\ndef some_func2(arg1, arg2, q):\n    q.put('some_func2 finished!')\n\nproc1 = Process(target=some_func1,\n                           args = ('arga', 'argb', q))\nproc2 = Process(target=some_func2,\n                           args = ('arg1', 'arg2', q))\nproc1.start()\nproc2.start()\n\n#this will be the result from the first thread that finishes.\n#At this point you can wait for the other threads or kill them, or whatever you want.\nresult = q.get()\nprint result\n#if you want to kill all the procs now:\nproc1.terminate()\nproc2.terminate()\n","2358":"# '1.000000'\n\"%f\" % (1.0)\n\n# '1.00'\n\"%.2f\" % (1.0)\n\n# '  1.00'\n\"%6.2f\" % (1.0)\n","2359":"if CBControl.GetType() == System.Windows.Forms.CheckBox().GetType():\n","2360":"import numpy as np\nimport matplotlib.pyplot as plt    \nfrom itertools import compress\n\n\ndata = np.genfromtxt('beta_tracking.csv', delimiter=' ')\n\nf=data[:,0]\nx=data[:,1]\ny=data[:,2]\nz=data[:,3]\n\nk=range(1,11)\nfor j in k:\n    g=list(compress(x, (abs(i)==j for i in f)))\n    h=list(compress(y, (abs(i)==j for i in f)))\n    FigList = [ ] \n    FigList.append(plt.figure())\n    ax = FigList[-1].add_subplot(1,1,1)\n    ax.plot(g,h,',')\n    for i in plt.get_fignums():\n          plt.figure(i)\n          plt.savefig('plots\/figure%d.png' % i)\n","2361":"pyplot.bar(hist1_flux[1], hist1_flux[0],\n           width=hist1_flux[1][1] - hist1_flux[1][0])\n","2362":">>> import dis\n>>> def foo():\n...   a = b + 2\n...   print bar\n...   baz()\n... \n>>> dis.dis(foo)\n  2           0 LOAD_GLOBAL              0 (b)\n              3 LOAD_CONST               1 (2)\n              6 BINARY_ADD          \n              7 STORE_FAST               0 (a)\n\n  3          10 LOAD_GLOBAL              1 (bar)\n             13 PRINT_ITEM          \n             14 PRINT_NEWLINE       \n\n  4          15 LOAD_GLOBAL              2 (baz)\n             18 CALL_FUNCTION            0\n             21 POP_TOP             \n             22 LOAD_CONST               0 (None)\n             25 RETURN_VALUE        \n","2363":"from copy import copy\nimport csv\n\nclass Part_Base(object):\n    pass\n\nclass MultiPart_Base(list):\n    pass\n\nclass part_meta(type):\n    part_names = {}\n    parts      = []\n    def __init__(cls, cls_name, cls_bases, cls_dict):\n        super(part_meta, cls).__init__(cls_name, cls_bases, cls_dict)\n        if(not Part_Base in cls_bases):\n            part_meta.part_names[cls_name] = cls\n\n    def __call__(self, *args, **kwargs):\n        name = kwargs.get(\"name\", \"\")\n        if(part_meta.part_names.has_key(name) and not (self is part_meta.part_names[name])):\n            obj = part_meta.part_names[name].__call__(*args, **kwargs)\n        else:\n            obj = None\n            if(not part_meta.part_names.has_key(self.__name__)):\n                new_class = part_meta(name, (Generic_Part,), {})\n                globals()[name] = new_class\n                obj = new_class(*args, **kwargs)\n            else:\n                obj = super(part_meta, self).__call__(*args, **kwargs)\n        if not obj in part_meta.parts:\n            part_meta.parts.append(obj)\n        return obj\n\n    @classmethod\n    def save(cls):\n        all_fields = list(reduce(lambda x, y: x | set(y.fields), cls.parts, set([])))\n        with open(\"parts.csv\", \"w\") as file_h:\n            writer = csv.DictWriter\\\n            (\n                file_h,\n                all_fields,\n                restval        = \"\",\n                extrasaction   = \"ignore\",\n                dialect        = \"excel\",\n                lineterminator = \"\\n\",\n\n            )\n            writer.writeheader()\n            for part in cls.parts:\n                writer.writerow({field : getattr(part, field) for field in part.fields})\n\n    @classmethod\n    def load(cls):\n        with open(\"parts.csv\", \"r\") as file_h:\n            reader = csv.DictReader(file_h)\n            for row in reader:\n                Part(**row)\n\nclass Part(Part_Base):\n    __metaclass__ = part_meta\n    fields        = []\n    def __init__(self, **kwargs):\n        for name, value in kwargs.items():\n            setattr(self, name, value)\n        self.fields += kwargs.keys()\n\n    def __repr__(self):\n        return \"<%s>\" % self.description\n\n    @property\n    def description(self):           \n        return \"%s: %s %s %s %s\" % (self.name, self.intype, self.outtype, self.shape, self.serialno)\n\n    def linkwith(self, *parts):\n        return Generic_MultiPart(self, *parts)\n\nclass Generic_Part(Part):\n    def __init__(self, **kwargs):\n        kwargs[\"name\"] = self.__class__.__name__\n        super(Generic_Part, self).__init__(**kwargs)\n\nclass Generic_MultiPart(MultiPart_Base):\n    def __init__(self, *parts):\n        super(Generic_MultiPart, self).__init__()\n        if len(parts) >= 2:\n            self.shape = parts[0].shape\n            self.linkwith(*parts)\n        else:\n            raise ValueError(\"Not enough parts\")\n\n    def __repr__(self):\n        return \"<MultiPart: %s>\" % super(Generic_MultiPart, self).__repr__()\n\n    def linkwith(self, *parts):\n        for part in parts:\n            if part.shape == self.shape:\n                if isinstance(part, Part):\n                    self.append(part)\n                elif isinstance(part, MultiPart_Base):\n                    self.extend(part)\n            else:\n                raise ValueError(\"Incompatible parts\")\n        return self\n\nclass cooler(Generic_Part):\n    intype  = \"hotwater\"\n    outtype = \"coldwater\"\n    fields  = [\"intype\", \"outtype\"]\n\nclass heater(Generic_Part):\n    intype  = \"coldwater\"\n    outtype = \"hotwater\"\n    fields  = [\"intype\", \"outtype\"]\n\ndef make_some_parts():\n    some_parts = \\\n    [\n        # This is actually a cooler object\n        # The metaclass uses the cooler class from above\n        # to create the object\n        Part\n        (\n            name     = \"cooler\",\n            shape    = \"1\/4 inch round\",\n            serialno = \"SN:11111\"\n        ),\n        # Using the heater class directly\n        heater\n        (\n            shape    = \"1\/4 inch round\",\n            serialno = \"SN:22222\"\n        ),\n        Part\n        (\n            name     = \"purifier\",\n            intype   = \"coldwater\",\n            outtype  = \"hotwater\",\n            shape    = \"1\/6 inch round\",\n            serialno = \"SN:33333\"\n        ),\n        Part\n        (\n            name     = \"carbon_filter\",\n            intype   = \"coldwater\",\n            outtype  = \"coldwater\",\n            shape    = \"1\/4 inch round\",\n            serialno = \"SN:33333\"\n        )\n    ]\n\n    useless_part = some_parts[0].linkwith(some_parts[1])\n    print useless_part\n    filter_part  = copy(useless_part).linkwith(some_parts[3])\n    print filter_part\n\n    part_meta.save()\n\ndef load_some_parts():\n    part_meta.load()\n    print part_meta.parts\n","2364":"import urllib2\n\ncompleted_courses_url = 'http:\/\/ranger.uta.edu\/~kamangar\/CSE-1310-FA13\/LinkedDocuments\/sample_completed_courses.txt'\nrequired_courses_url = 'http:\/\/ranger.uta.edu\/~kamangar\/CSE-1310-FA13\/LinkedDocuments\/required_courses.csv'\n\ncompleted_courses_set = set([x.strip() for x in urllib2.urlopen(completed_courses_url)])\nfor required_course in urllib2.urlopen(required_courses_url):\n    if required_course[0] != '#':\n        (course,category,prerequisites,notes) = required_course.split(',')\n        if set(prerequisites.split('|')).intersection(completed_courses_set):\n             print required_course\n","2365":"#!\/usr\/bin\/env python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import lines\n\nimport random\n\n\ndeltas = [4, 6, 13, 18, 15, 14, 10, 13, 9, 6, 15, 9, 6, 1, 1, 2, 4, 4, 4, 4, 10, 11, 16, 17, 12, 10, 12, 15, 17, 16, 11, 10, 9, 9, 7, 10, 7, 16, 8, 12, 10, 14, 10, 15, 15, 16, 12, 8, 15, 16]\nbases = [46, 49, 45, 45, 44, 49, 51, 52, 56, 58, 53, 57, 62, 63, 68, 66, 65, 66, 63, 63, 62, 61, 61, 57, 61, 64, 63, 58, 56, 56, 56, 60, 59, 54, 57, 54, 54, 50, 53, 51, 48, 43, 42, 38, 37, 39, 44, 49, 47, 43]\n\n\ndef rand_pt(bases, deltas):\n    return [random.randint(base, base + delta) for base, delta in zip(bases, deltas)]\n\n# randomly assign opening and closing prices \nopenings = rand_pt(bases, deltas)\nclosings = rand_pt(bases, deltas)\n\n# First we draw the bars which show the high and low prices\n# bottom holds the low price while deltas holds the difference \n# between high and low.\nwidth = 0\nax = plt.axes()\nrects1 = ax.bar(np.arange(50), deltas, width, color='r', bottom=bases)\n\n# Now draw the ticks indicating the opening and closing price\nfor opening, closing, bar in zip(openings, closings, rects1):\n    x, w = bar.get_x(), 0.2\n\n    args = {\n    }\n\n    ax.plot((x - w, x), (opening, opening), **args)\n    ax.plot((x, x + w), (closing, closing), **args)\n\n\nplt.show()\n","2366":"@register.filter(name='format_date_display')\n    def format_date_display(value, arg):\n    .......\n\n    #  yyyy-mm (dash separator and year first).\n    elif arg in ('eu', 'en-CA', 'fr-CA', 'lt', 'sv', 'zh-CN', 'zh-TW'):\n        # the line below will change the date format from mm\/yyyy to yyyy-mmm.\n        value = value[3:] + value[2:3] + value[0:2]\n        return value.replace(\"\/\", '-')\n\n    ......\n","2367":"diff --git a\/IO\/vtkEnSightReader.cxx b\/IO\/vtkEnSightReader.cxx\nindex 68a9b8f..7ab8ddd 100644\n--- a\/IO\/vtkEnSightReader.cxx\n+++ b\/IO\/vtkEnSightReader.cxx\n@@ -985,6 +985,8 @@ int vtkEnSightReader::ReadCaseFileTime(char* line)\n   int timeSet, numTimeSteps, i, filenameNum, increment, lineRead;\n   float timeStep;\n\n+  this->TimeSetFileNameNumbers->RemoveAllItems();\n+\n   \/\/ found TIME section\n   int firstTimeStep = 1;\n","2368":"def non_Destructive_pixel_addition(original, segmentated):\n\n    to_be_added = np.matrix(np.where(segmentated)).transpose()\n\n    n, m = np.shape(to_be_added)\n\n    for k in range(n):\n        i = to_be_added[k, 0]\n        j = to_be_added[k, 1]\n        if (original[i,j] == 0):\n            original[i,j] = segmentated[i,j]\n","2369":"re.sub(r'@(\\w+)', lambda m: d[m.group(1)], s)\n","2370":">>> state_license = {u'License ': u'29393, 25633',\n...                  u'Expiration': u'08-01-2012, 04-02-2012',\n...                  u'Trade': u'Registered Contractor, Plumber'}\n>>> {key: value.split(\", \") for key, value in state_license.items()}\n{u'License ': [u'29393', u'25633'], \n u'Expiration': [u'08-01-2012', u'04-02-2012'], \n u'Trade': [u'Registered Contractor', u'Plumber']}\n","2371":"for seq0, seq1 in itertools.combinations(data['sequence'], 2):\n    for a in pairwise2.align.globalxx(seq0, seq1):\n        print(format_alignment(*a))\n","2372":"table = [[{} for _ in range(len(words)+1)] for _ in range(len(words))]\n","2373":"def __delattr__(self, key):\n    del self._meta[key]\n","2374":"class Server(object):\n    pass\n\nfor k, v in services:\n    setattr(Server, k, v)\n","2375":"f(k|n,a,b) = comb(n,k) * B(k+a, n-k+b) \/ B(a,b)\n","2376":"for i, channel in enumerate(self.image):\n    channel_ = spf.fftshift(spf.fft2(channel)) # take FFT of each channel (r,g,b) separately\n    channel_ = scipy.multiply(channel_,ff) # multiply each channel by the filter (freq. domain)\n    filtered_image[:][:][i] = spf.fftshift(spf.ifft2(channel_)) # inverse FFT each channel separately\n","2377":"import os.path\nimport glob\nimport shutil\n\nsource = \"My Source Path\" # Replace these variables with the appropriate data\ndest = \"My Dest Path\"\ncommand = \"My command\"\n\n# Find the files that need to be copied\nfiles = glob.glob(os.path.join(source, \"swale-*\"))\n\n# Copy the files to the destination\nfor file in files:\n     shutil.copy(os.path.join(source, \"swale-*\"), dest)\n\n# Create a sorted list of files - using the file sizes\n# biggest first, and then use the 1st item \nbiggest = sorted([file for file in files], \n        cmp=lambda x,y : cmp(x,y), \n        key=lambda x: os.path.size( os.path.join( dest, x)),  reverse = True)[0]\n\n# Rename that biggest file to swale.dat\nshutil.move( os.path.join(dest,biggest), os.path.join(dest,\"swale.date\") )\n\n# Run the command \nos.system( command ) \n# Only use os.system if you know your command is completely secure and you don't need the output. Use the popen module if you need more security and need the output.\n","2378":"class TABLE(models.Model):\n    id = models.AutoField(primary_key=True)\n    parent = models.ForeignKey('self')\n","2379":"from flask import Flask\nfrom werkzeug.routing import BaseConverter\n\napp = Flask(__name__)\n\nclass RegexConverter(BaseConverter):\n        def __init__(self, url_map, *items):\n                super(RegexConverter, self).__init__(url_map)\n                self.regex = items[0]\n\napp.url_map.converters['regex'] = RegexConverter\n\n# To get all URLs ending with \"\/number\"\n@app.route(\"\/<regex('.*\\\/([0-9]+)'):param>\/\")\ndef go_to_one(param):\n    return param.split(\"\/\")[-1]\n\n# To get all URLs ending with a number\n@app.route(\"\/<regex('.*([0-9]+)'):param>\/\")\ndef go_to_one(param):\n    return param.split(\"\/\")[-1]\n\n# To get all URLs without a number\n@app.route(\"\/<regex('[^0-9]+'):param>\/\")\ndef go_to_two(param):\n    return param\n\n@app.route('\/')\ndef hello_world():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run()\n","2380":"import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.font_manager as fm\nfrom datetime import datetime\nimport matplotlib.dates as mdates\n\nfig,ax = plt.subplots(1, 1) #width height inches\ndata=np.genfromtxt('data',\n     dtype='M8[us],S5,float,float,float',delimiter=',',usecols= [0,1,11,12,13])\n\nmy_dates =  np.array([d[0] for d in data]).astype('datetime64[D]')\ndates = np.unique(my_dates)\nprint(dates)\nx_list = []\nx_list[:] = dates.astype(datetime)\ny_list  = [10,11,12,13]\nplt.plot(x_list,y_list)\nplt.title('hv 20 to 10 ranks',fontsize=20)\nplt.xlabel('dates',fontsize=16)\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\nplt.ylabel('symbol ranks',fontsize=30)\nplt.show()\n","2381":"import time\n\n# Repeat forever\nwhile True:\n    post_to_twitter() # Call your function\n    # Sleep for 60 seconds \/ minute * 30 minutes\n    time.sleep(60 * 30)\n","2382":"Question.objects.filter(module__course__subject__name = 'Mathematics',\n                        num_attempts__gt = 20,\n                        avg_score__gt = 0).order_by('avg_score')\n","2383":" @csrf_exempt\n    def applicationform(request):\n         if request.method == 'POST':\n\n            getappid = request.POST['appid']\n            getjobtitle=request.POST['jobtitle']\n            odeskid=request.POST['odeskid']\n            clientspent=request.POST['client_spent']\n            jobtype=request.POST['jobtype']\n            notestype=request.POST['notes']\n                request.session['setid'] = request.POST['appid']\n                    if getappid == '':\n                return HttpResponse('<script> alert(\"fill app id\"); document.location.href=\"redirect url\" <\/script>') #change here\n                    else:\n                getintable = application(app_id = request.POST['appid'], job_title = request.POST['jobtitle'], odesk_id = request.POST['odeskid'],client_spent = request.POST['client_spent'], job_type = request.POST['jobtype'],notes_type = request.POST['notes'])\n            getintable.save()\n            return HttpResponseRedirect('\/applicationview\/')        \n         else:\n            return render_to_response('applicationform.html')\n","2384":">>> pandas.DataFrame({\"A\": 'City', \"B\": d['City']})\n      A      B\n0  City  Item1\n1  City  Item2\n2  City  Item3\n3  City  Item4\n4  City  Item5\n","2385":"import csv\ndef phoneNumber(number):\n    ...\ndef userName(name):\n    ...\ndef targetDate(datestring):\n    ...\ncontrol = [phoneNumber, userName, userName, targetDate]\nwith open(\"csvFile\", \"r\") as inFile:\n    reader = csv.reader(inFile)\n    for row in reader:\n        for op, item in zip(control, row):\n            op(item)\n","2386":"try:\n    s = pxssh.pxssh(timeout=60, maxread=2000000)\n    s.force_password = True\n    hostname = raw_imput('hostname: ')\n    username = raw_input('password: ')\n    password = getpass.getpass('password: ')\n    s.PROMPT= 'SSH> '\n    s.login (hostname, username, password, auto_prompt_reset=False)\n    s.prompt()\n    s.sendline('foo bar')\n    s.prompt()\n    data = s.before\n    print data\n    s.logout()\nexcept pxssh.ExceptionPxssh, e:\n    print \"pxssh failed on login.\"\n    print str(e)\n","2387":"Python 2.5.1\n>>> import sqlite3\n>>> sqlite3.version\n'2.3.2'\n>>> sqlite3.sqlite_version\n'3.3.4'\n","2388":">>> l = [500,800,1500]\n>>> d = {800:3, 1500:1, 500:4}\n>>> [d[x] for x in l]\n[4, 3, 1]\n","2389":"setup(  \n    ...\n\n    zipfile=\"foo\/bar.zip\", \n    options={\"py2exe\": {\"skip_archive\": True}})\n","2390":"from M2Crypto import EVP\nimport base64\nimport time\n\ndef aws_url_base64_encode(msg):\n    msg_base64 = base64.b64encode(msg)\n    msg_base64 = msg_base64.replace('+', '-')\n    msg_base64 = msg_base64.replace('=', '_')\n    msg_base64 = msg_base64.replace('\/', '~')\n    return msg_base64\n\ndef sign_string(message, priv_key_string):\n    key = EVP.load_key_string(priv_key_string)\n    key.reset_context(md='sha1')\n    key.sign_init()\n    key.sign_update(message)\n    signature = key.sign_final()\n    return signature\n\ndef create_url(url, encoded_signature, key_pair_id, expires):\n    signed_url = \"%(url)s?Expires=%(expires)s&Signature=%(encoded_signature)s&Key-Pair-Id=%(key_pair_id)s\" % {\n            'url':url,\n            'expires':expires,\n            'encoded_signature':encoded_signature,\n            'key_pair_id':key_pair_id,\n            }\n    return signed_url\n\ndef get_canned_policy_url(url, priv_key_string, key_pair_id, expires):\n    #we manually construct this policy string to ensure formatting matches signature\n    canned_policy = '{\"Statement\":[{\"Resource\":\"%(url)s\",\"Condition\":{\"DateLessThan\":{\"AWS:EpochTime\":%(expires)s}}}]}' % {'url':url, 'expires':expires}\n\n    #sign the non-encoded policy\n    signature = sign_string(canned_policy, priv_key_string)\n    #now base64 encode the signature (URL safe as well)\n    encoded_signature = aws_url_base64_encode(signature)\n\n    #combine these into a full url\n    signed_url = create_url(url, encoded_signature, key_pair_id, expires);\n\n    return signed_url\n\ndef encode_query_param(resource):\n    enc = resource\n    enc = enc.replace('?', '%3F')\n    enc = enc.replace('=', '%3D')\n    enc = enc.replace('&', '%26')\n    return enc\n\n\n#Set parameters for URL\nkey_pair_id = \"APKAIAZVIO4BQ\" #from the AWS accounts CloudFront tab\npriv_key_file = \"cloudfront-pk.pem\" #your private keypair file\n# Use the FULL URL for non-streaming:\nresource = \"http:\/\/34254534.cloudfront.net\/video.mp4\"\n#resource = 'video.mp4' #your resource (just object name for streaming videos)\nexpires = int(time.time()) + 300 #5 min\n\n#Create the signed URL\npriv_key_string = open(priv_key_file).read()\nsigned_url = get_canned_policy_url(resource, priv_key_string, key_pair_id, expires)\n\nprint(signed_url)\n\n#Flash player doesn't like query params so encode them if you're using a streaming distribution\n#enc_url = encode_query_param(signed_url)\n#print(enc_url)\n","2391":">>> import pandas as pd\n>>> import urllib2\n>>> link = 'http:\/\/www.econ.yale.edu\/~shiller\/data\/chapt26.xls'\n>>> socket = urllib2.urlopen(link)\n>>> xd = pd.ExcelFile(socket)\nNOTE *** Ignoring non-worksheet data named u'PDVPlot' (type 0x02 = Chart)\nNOTE *** Ignoring non-worksheet data named u'ConsumptionPlot' (type 0x02 = Chart)\n>>> xd.sheet_names\n[u'Data', u'Consumption', u'Calculations']\n>>> df = xd.parse(xd.sheet_names[-1], header=None)\n>>> df\n                                   0   1   2   3         4\n0        Average Real Interest Rate: NaN NaN NaN  1.028826\n1    Geometric Average Stock Return: NaN NaN NaN  0.065533\n2              exp(geo. Avg. return) NaN NaN NaN  0.067728\n3  Geometric Average Dividend Growth NaN NaN NaN  0.012025\n","2392":"In [17]: df\nOut[17]: \n         Date  Time\n0  2014-05-01    60\n1  2014-05-02   505\n\nIn [18]: pd.to_datetime(df['Date']) + pd.to_timedelta(df['Time'], unit='m')\nOut[18]: \n0   2014-05-01 01:00:00\n1   2014-05-02 08:25:00\ndtype: datetime64[ns]\n","2393":"from tkinter import *\n\nroot = Tk()\n\nnum1 = IntVar()\nnum2 = IntVar()\ntotal = IntVar()\ndef update_total(*severalignoredargs):\n    total.set(num1.get() + num2.get())\n\nnum1.trace('w',update_total)\nnum2.trace('w',update_total)\n\n\nentry1 = Entry(root,textvariable=num1)\nentry1.pack()\n\nentry2 = Entry(root,textvariable=num2)\nentry2.pack()\n\ntotal_label = Label(root,textvariable=total)\ntotal_label.pack()\n\nroot.mainloop()\n","2394":"def paren_matcher(string, opens, closes):\n    \"\"\"Yield (in order) the parts of a string that are contained\n    in matching parentheses.  That is, upon encounting an \"open\n    parenthesis\" character (one in <opens>), we require a\n    corresponding \"close parenthesis\" character (the corresponding\n    one from <closes>) to close it.\n\n    If there are embedded <open>s they increment the count and\n    also require corresponding <close>s.  If an <open> is closed\n    by the wrong <close>, we raise a ValueError.\n    \"\"\"\n    stack = []\n    if len(opens) != len(closes):\n        raise TypeError(\"opens and closes must have the same length\")\n    # could make sure that no closes[i] is present in opens, but\n    # won't bother here...\n\n    result = []\n    for char in string:\n        # If it's an open parenthesis, push corresponding closer onto stack.\n        pos = opens.find(char)\n        if pos >= 0:\n            if result and not stack: # yield accumulated pre-paren stuff\n               yield ''.join(result)\n               result = []\n            result.append(char)\n            stack.append(closes[pos])\n            continue\n        result.append(char)\n        # If it's a close parenthesis, match it up.\n        pos = closes.find(char)\n        if pos >= 0:\n            if not stack or stack[-1] != char:\n                raise ValueError(\"unbalanced parentheses: %s\" %\n                    ''.join(result))\n            stack.pop()\n            if not stack: # final paren closed\n                yield ''.join(result)\n                result = []\n    if stack:\n        raise ValueError(\"unclosed parentheses: %s\" % ''.join(result))\n    if result:\n        yield ''.join(result)\n\nprint list(paren_matcher('(([a] b) c ) [d] (e) f', '([', ')]'))\nprint list(paren_matcher('foo (bar (baz))', '(', ')'))\n","2395":"all_cols = np.arange(old_m.shape[1])\ncols_to_keep = np.where(np.logical_not(np.in1d(all_cols, cols_to_delete)))[0]\nm = old_m[:, cols_to_keep]\n","2396":"pip install python-dev\n","2397":"myDict = {\n    'p1': {1: [1, 2, 3], 2: [4, 5, 6]},\n    'p2': {3: [7, 8, 9], 4: [0, 1, 2]}\n}\n\nfrom collections import Mapping\n\ndef go_go_gadget_go(mapping):\n    for k, v in mapping.items():\n        if isinstance(v, Mapping):\n            for ok in go_go_gadget_go(v):\n                yield [k] + ok\n        else:\n            yield [k] + [v]\n\nfor protocol, n, counts in go_go_gadget_go(myDict):\n    print(protocol, n, counts)\n\n# p2 3 [7, 8, 9]\n# p2 4 [0, 1, 2]\n# p1 1 [1, 2, 3]\n# p1 2 [4, 5, 6]\n","2398":"imgsize = (int(self.viewport.cget('width')) - 1,int(self.viewport.cget('height')) - 1)\n# limit the draggable mouse area to just the image dimensions\nif event.x < 4:\n    currentx = 4\nelif event.x > imgsize[0]:\n    currentx = imgsize[0]\nelse:\n    currentx = event.x\nif event.y < 4:\n    currenty = 4\nelif event.y > imgsize[1]:\n    currenty = imgsize[1]\nelse:\n    currenty = event.y\n","2399":"in_string  = False\ninput_str  = 'foo,bar,\\n\"hihi\",\"hi\\nhi\"'\noutput_str = ''\n\nfor ch in input_str:\n    if ch == '\"': in_string = not in_string\n    if ch == '\\n' and in_string: continue\n    output_str += ch\n\nprint output_str\n","2400":" thread_queues = []\n for i in range(4):\n     thread_queues = Queue()\n\n for user in user_list:\n    user_hash=hash(user.user_id) #hash in here is just shortcut to some standard hash utility \n    thread_id = user_hash % 4\n    thread_queues[thread_id].put(user)\n\n # From here ... your pool of threads access thread_queues but each thread ONLY accesses \n # one queue based on a numeric id given to each of them.\n","2401":"sum([f.subs(dict(k=k)) for k in u])\n","2402":"from django.utils.dateformat import DateFormat\nDateFormat(datetime.datetime.now()).format('N j, Y, P')\n","2403":"from subprocess import Popen, PIPE, STDOUT\n\np = Popen(['lzop', '-c'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)    \nresult_stdout = p.communicate(input=json.dump(results))[0]\n","2404":"def latin1_to_ascii (unicrap):\n    \"\"\"This replaces UNICODE Latin-1 characters with\n    something equivalent in 7-bit ASCII. All characters in the standard\n    7-bit ASCII range are preserved. In the 8th bit range all the Latin-1\n    accented letters are stripped of their accents. Most symbol characters\n    are converted to something meaningful. Anything not converted is deleted.\n    \"\"\"\n    xlate = {\n        0xc0:'A', 0xc1:'A', 0xc2:'A', 0xc3:'A', 0xc4:'A', 0xc5:'A',\n        0xc6:'Ae', 0xc7:'C',\n        0xc8:'E', 0xc9:'E', 0xca:'E', 0xcb:'E',\n        0xcc:'I', 0xcd:'I', 0xce:'I', 0xcf:'I',\n        0xd0:'Th', 0xd1:'N',\n        0xd2:'O', 0xd3:'O', 0xd4:'O', 0xd5:'O', 0xd6:'O', 0xd8:'O',\n        0xd9:'U', 0xda:'U', 0xdb:'U', 0xdc:'U',\n        0xdd:'Y', 0xde:'th', 0xdf:'ss',\n        0xe0:'a', 0xe1:'a', 0xe2:'a', 0xe3:'a', 0xe4:'a', 0xe5:'a',\n        0xe6:'ae', 0xe7:'c',\n        0xe8:'e', 0xe9:'e', 0xea:'e', 0xeb:'e',\n        0xec:'i', 0xed:'i', 0xee:'i', 0xef:'i',\n        0xf0:'th', 0xf1:'n',\n        0xf2:'o', 0xf3:'o', 0xf4:'o', 0xf5:'o', 0xf6:'o', 0xf8:'o',\n        0xf9:'u', 0xfa:'u', 0xfb:'u', 0xfc:'u',\n        0xfd:'y', 0xfe:'th', 0xff:'y',\n        0xa1:'!', 0xa2:'{cent}', 0xa3:'{pound}', 0xa4:'{currency}',\n        0xa5:'{yen}', 0xa6:'|', 0xa7:'{section}', 0xa8:'{umlaut}',\n        0xa9:'{C}', 0xaa:'{^a}', 0xab:'<<', 0xac:'{not}',\n        0xad:'-', 0xae:'{R}', 0xaf:'_', 0xb0:'{degrees}',\n        0xb1:'{+\/-}', 0xb2:'{^2}', 0xb3:'{^3}', 0xb4:\"'\",\n        0xb5:'{micro}', 0xb6:'{paragraph}', 0xb7:'*', 0xb8:'{cedilla}',\n        0xb9:'{^1}', 0xba:'{^o}', 0xbb:'>>',\n        0xbc:'{1\/4}', 0xbd:'{1\/2}', 0xbe:'{3\/4}', 0xbf:'?',\n        0xd7:'*', 0xf7:'\/'\n    }\n\n    r = ''\n    for i in unicrap:\n        if xlate.has_key(ord(i)):\n            r += xlate[ord(i)]\n        elif ord(i) >= 0x80:\n            pass\n        else:\n            r += i\n    return r\n\n# This gives an example of how to use latin1_to_ascii().\n# This creates a string will all the characters in the latin-1 character set\n# then it converts the string to plain 7-bit ASCII.\nif __name__ == '__main__':\ns = unicode('','latin-1')\nfor c in range(32,256):\n    if c != 0x7f:\n        s = s + unicode(chr(c),'latin-1')\nprint 'INPUT:'\nprint s.encode('latin-1')\nprint\nprint 'OUTPUT:'\nprint latin1_to_ascii(s)\n","2405":"#!\/usr\/bin\/python3\n# License: MIT\nimport svgwrite\n\nprogname = 'example_filter_on_group'\n\ndef create_svg(name):\n\n    svg_size_w = 900\n    svg_size_h = 1500\n    title_size = 20\n    y = 0\n    title = name + ': example of filter on a group'\n    dwg = svgwrite.Drawing(name, (svg_size_w, svg_size_h), debug=True)\n    # background will be white.\n    dwg.add(dwg.rect(insert=(0, 0), size=('100%', '100%'), fill='white'))\n\n    # create simple filter to blur rectangle\n    blur6_filter = dwg.defs.add(dwg.filter())\n    blur6_filter.feGaussianBlur(in_='SourceGraphic', stdDeviation=6)\n\n    # group with filter\n    g_f = dwg.add(dwg.g(filter=blur6_filter.get_funciri()))\n    g_f.add( dwg.rect(insert=(50, 50), size=(50, 50), fill='aqua'))\n\n    dwg.save()\n\nif __name__ == '__main__':\n    create_svg(progname + '.svg')\n","2406":"def create_response(self, request, data, response_class=HttpResponse, **response_kwargs):\n    stripped_data = data.get('objects') or data\n    desired_format = self.determine_format(request)\n    serialized = self.serialize(request, stripped_data, desired_format)\n    response = response_class(content=serialized,\n                              content_type=build_content_type(desired_format),\n                              **response_kwargs)\n    # Convert meta data to HTTP Headers \n    for name, value in data.get('meta', {}).items():\n        response[name] = str(value)\n    return response\n","2407":"image_fullsize.save(filepath+name_fullsize, quality=95)\n","2408":"from __future__ import division\nfrom ipywidgets import *\nimport numpy as np\nimport matplotlib.pyplot as p\n%matplotlib inline\n\ndef rotatedata(x,y,a):\n    cosa=np.cos(a)\n    sina=np.sin(a)\n    x = x*cosa-y*sina\n    y = x*sina+y*cosa\n    return x,y\n\ndata=np.loadtxt('plot3.txt')\ndata=data.T\nx,y=data[0],data[1]\n\ndef workit(a2):\n    fig=p.figure(num=None, figsize=(18, 16), dpi= 80, facecolor='w', edgecolor='k')\n    p.subplot(511) # , aspect='equal')\n    p.plot(x,y)\n\n    #what is the slope? \n    m,b = np.polyfit(x, y, 1)\n\n    x1,y1=rotatedata(x,y, -np.arctan(m) )  # rotate data to have flat surface, \n                                           # interesting for surface roughness\n    p.subplot(512 )\n    p.plot(x1,y1)\n\n    x2,y2=rotatedata(x,y, a2)    # rotate data to 'sharpen' histogram\n    p.subplot(513 )\n    p.plot(x2,y2)\n\n    p.subplot(514)\n    p.hist(y2,bins=130)        \n\n    y3=np.diff(y2)\n    p.subplot(515 )\n    p.plot(y3)\n\n    return HTML()\n\ninteract(workit,a2=[-0.002,0.002,0.00001])  \n","2409":"def get_account_data(account):\n    fields = serializers.serialize('python', [account, ])[0]['fields']\n    return {field: str(fields[field]) for field in fields}\n","2410":"import win32gui\nwin = win32gui\nwhile True:\n    print(win.GetWindowText(win.GetActiveWindow()))\n","2411":"import pygame\n\npygame.init()\nscreen = pygame.display.set_mode((400, 400))\nrect = pygame.Rect(180, 180, 20, 20)\nclock = pygame.time.Clock()\nd=1\nwhile True:\n    for e in pygame.event.get(): \n        if e.type == pygame.QUIT:\n            raise\n\n    screen.fill((0, 0, 0))\n    pygame.draw.rect(screen, (255, 255, 255), rect)\n    rect.move_ip(d, 0)\n    if not screen.get_rect().contains(rect):\n        d *= -1\n\n    pos = pygame.mouse.get_pos()\n\n    # print the 'absolute' mouse position (relative to the screen)\n    print 'absoulte:', pos\n\n    # print the mouse position relative to rect \n    print 'to rect:', pos[0] - rect.x, pos[1] - rect.y \n\n    clock.tick(100)\n    pygame.display.flip()\n","2412":"if sys.platform == \"win32\":\n    base = \"Win32GUI\"\n","2413":"if any(obj.type == 'type 1' for obj in object_list):\n    object_list = [obj for obj in object_list if obj.name != 'some_name']\n","2414":"$ for filename in $(seq 20020101 20090726); do wget http:\/\/www.ctrlaltdel-online.com\/comics\/\"$filename\".jpg; done\n","2415":"from os import path\nimport sys\n\nPACKAGE_NAMESPACE = [\"project_name\", \"ext\"]\nVIRTUAL_PACKAGE = '.'.join(PACKAGE_NAMESPACE)\n__import__(VIRTUAL_PACKAGE)\nlocal_package = path.abspath(path.join(*PACKAGE_NAMESPACE))\nsys.modules[VIRTUAL_PACKAGE].__dict__[\"__path__\"].insert(0, local_package)\n","2416":"return render(request, 'cart.html', {'key': value})\n","2417":"import numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.finance import candlestick\nfrom matplotlib.finance import volume_overlay3\nfrom matplotlib.dates import num2date\nfrom matplotlib.dates import date2num\nimport matplotlib.mlab as mlab\nimport datetime\n\ndatafile = 'data.csv'\nr = mlab.csv2rec(datafile, delimiter=';')\n\n# the dates in my example file-set are very sparse (and annoying) change the dates to be sequential\nfor i in range(len(r)-1):\n    r['date'][i+1] = r['date'][i] + datetime.timedelta(days=1)\n\ncandlesticks = zip(date2num(r['date']),r['open'],r['close'],r['max'],r['min'],r['volume'])\n\nfig = plt.figure()\nax = fig.add_subplot(1,1,1)\n\nax.set_ylabel('Quote ($)', size=20)\ncandlestick(ax, candlesticks,width=1,colorup='g', colordown='r')\n\n# shift y-limits of the candlestick plot so that there is space at the bottom for the volume bar chart\npad = 0.25\nyl = ax.get_ylim()\nax.set_ylim(yl[0]-(yl[1]-yl[0])*pad,yl[1])\n\n# create the second axis for the volume bar-plot\nax2 = ax.twinx()\n\n\n# set the position of ax2 so that it is short (y2=0.32) but otherwise the same size as ax\nax2.set_position(matplotlib.transforms.Bbox([[0.125,0.1],[0.9,0.32]]))\n\n# get data from candlesticks for a bar plot\ndates = [x[0] for x in candlesticks]\ndates = np.asarray(dates)\nvolume = [x[5] for x in candlesticks]\nvolume = np.asarray(volume)\n\n# make bar plots and color differently depending on up\/down for the day\npos = r['open']-r['close']<0\nneg = r['open']-r['close']>0\nax2.bar(dates[pos],volume[pos],color='green',width=1,align='center')\nax2.bar(dates[neg],volume[neg],color='red',width=1,align='center')\n\n#scale the x-axis tight\nax2.set_xlim(min(dates),max(dates))\n# the y-ticks for the bar were too dense, keep only every third one\nyticks = ax2.get_yticks()\nax2.set_yticks(yticks[::3])\n\nax2.yaxis.set_label_position(\"right\")\nax2.set_ylabel('Volume', size=20)\n\n# format the x-ticks with a human-readable date. \nxt = ax.get_xticks()\nnew_xticks = [datetime.date.isoformat(num2date(d)) for d in xt]\nax.set_xticklabels(new_xticks,rotation=45, horizontalalignment='right')\n\nplt.ion()\nplt.show()\n","2418":">>> import datetime, pytz\n>>> melbourne = pytz.timezone(\"Australia\/Melbourne\")\n>>> melbourne.utcoffset(datetime.datetime.now())\ndatetime.timedelta(0, 36000)\n\n>>> pacific = pytz.timezone(\"US\/Pacific\")\n>>> pacific.utcoffset(datetime.datetime.now())\ndatetime.timedelta(-1, 61200)\n>>> -1*86400+61200\n-25200\n>>> pacific.utcoffset(datetime.datetime.now()).total_seconds()\n-25200.0\n","2419":">>> get_session('Mmusc20090126', False, True) #doctest: +ELLIPSIS\n<sqlalchemy.orm.session.Session object at 0x...>\n","2420":"@staticmethod\ndef time_method(method):\n    def __wrapper(self, *args, **kwargs):\n        if hasattr(self, '_being_timed'):\n            # We're being timed already; just run the method\n            return method(self, *args, **kwargs)\n        else:\n            # Not timed yet; run the timing code\n            self._being_timed = True  # remember we're being timed\n            try:\n                start = time.time()\n                result = method(self, *args, **kwargs)\n                finish = time.time()\n                sys.stdout.write('instancemethod %s took %0.3f s.\\n' %(\n                    method.__name__, (finish - start)))\n                return result\n            finally:\n                # Done timing, reset to original state\n                del self._being_timed\n    return __wrapper\n","2421":">>> from lxml import etree\n>>> doc = etree.HTML(\"\"\"<html>\n... <head><\/head>\n... <body>\n... <tr>\n... <td class=\"or_q_artist\"><a title=\"[Artist916]\" href=\"http:\/\/rateyourmusic.com\/artist\/ac_dc\" class=\"artist\">AC\/DC<\/a><\/td>\n... <td class=\"or_q_album\"><a title=\"[Album374717]\" href=\"http:\/\/rateyourmusic.com\/release\/album\/ac_dc\/live_f5\/\" class=\"album\">Live<\/a><\/td>\n... <td class=\"or_q_rating\" id=\"rating374717\">4.0<\/td><td class=\"or_q_ownership\" id=\"ownership374717\">CD<\/td>\n... <td class=\"or_q_tags_td\">\n... <\/tr>\n... <\/body>\n... <\/html>\n... \"\"\")\n>>> doc.xpath('\/\/td[@class=\"or_q_artist\"]\/a\/text()|\/\/td[@class=\"or_q_album\"]\/a\/text()')\n['AC\/DC', 'Live']\n","2422":"In [21]: ts = pd.DataFrame(np.random.randn(20, 2), index=pd.DatetimeIndex(start='2014-01-01\n', periods=20, freq='min'))\n\n\nIn [23]: ts.to_csv('tst.csv', date_format='%Y-%m-%d')\n\nIn [24]: !cat tst.csv\n,0,1\n2014-01-01,0.23269024172796468,-0.27276285241328363\n2014-01-01,-2.1271569576784652,-0.08828528516158064\n2014-01-01,-0.7476540707009801,0.4496366704379928\n2014-01-01,-1.278025433730537,1.9559942454312738\n2014-01-01,-0.5197557973521872,-0.38696497057942586\n2014-01-01,1.907212175479462,0.08269395500820262\n2014-01-01,-0.002980557062394977,1.649695381207261\n2014-01-01,-0.9676320141522591,0.549518266575642\n2014-01-01,-1.3499641850605548,-0.11695278340333974\n2014-01-01,0.3281427666328896,0.2290718384099928\n2014-01-01,0.29854271481529915,-1.606564949527949\n2014-01-01,-1.8476324099199142,-1.1062031058677215\n2014-01-01,-0.2625937089406767,0.6743539439246344\n2014-01-01,0.1901494293074155,2.830381213725509\n2014-01-01,-0.16171736635213055,-0.6913561112174935\n2014-01-01,-0.6340530961142582,0.1944027320940862\n2014-01-01,0.1875828513714546,0.3539781699433568\n2014-01-01,1.502398492411021,0.9554844690144768\n2014-01-01,0.40825706445611654,-0.6555754482696242\n2014-01-01,-1.9870063518613181,0.8300825796678137\n","2423":"import src.module.submodule\n\ndef mock_function(parameter = None):\n    return 0\n\ndef test_function_works(monkeypatch):\n    monkeypatch.setattr(\"src.module.submodule.function\",mock_function ]\n    assert src.module.submodule.function(parameter = None) == 0\n","2424":"class MySearchView(SearchView):\n\n    def extra_context(self):\n        return { 'ordered_tasks': ... }\n","2425":">>> import sys\n>>> sys.byteorder\n'little'\n","2426":"my_path = \"some\/path\/blah\"\nos.path.insert(0,my_path)\nimport my_custom_module\n","2427":"def prompt_age(min=11, max=100):\n    while True:\n        try:\n            age = int(raw_input('ENTER YOUR AGE: '))\n        except ValueError:\n            print 'Please enter a valid number'\n            continue\n        if not min <= age <= max:\n            print 'You are too young\/old'\n            continue\n        return age\n","2428":"# Python 3.4\n@asyncio.coroutine\ndef some_coroutine(*some_args, loop=None):\n    while True:\n        [...]\n        result = yield from loop.run_in_executor(\n            None,  # Use the default executor\n            some_blocking_io_call, \n            *some_args)\n        [...]\n\n# Python 3.5\nasync def some_coroutine(*some_args, loop=None):\n    while True:\n        [...]\n        result = await loop.run_in_executor(\n            None,  # Use the default executor\n            some_blocking_io_call, \n            *some_args)\n        [...]\n\nloop = asyncio.get_event_loop()\ncoro = some_coroutine(*some_arguments, loop=loop)\nloop.run_until_complete(coro)\n","2429":"class MyClass(models.Model):\n    # some fields here\n\n    def save(self, *args, **kwargs):\n       # strip spaces here\n       super(MyClass, self).save(*args, **kwargs)\n       # make sure to call parent save method ^\n","2430":"# -*- coding: utf-8 -*-\n\nimport matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pylab as plt\n\nplt.plot(range(10))\n# you might need to change this to be a font that you know works for your gylphs\n# that you have installed\nplt.xlabel(u'\u0648\u064e\u0628\u064e\u0648\u0650\u0651\u0626\u0652\u0646\u0627', name='Arial')\n\nplt.savefig('test.jpg',format='jpg')\n","2431":"from IPython.core.debugger import Tracer\n\ndef my_function():\n    x = 5\n    Tracer()()\n    print 5\n","2432":"from datetime import datetime\n\nstartTime = datetime.now()\n\na=2**1000000-3\nb=a\/13\n\nelapsedTime = datetime.now() - startTime\n\nprint \"Elapsed time %s\\n Number: %s\" % (elapsedTime, b)\n","2433":"from itertools import product\nfrom math import log10\ndef foo(row, col):\n    table = [[0]*col for _ in range(row)]\n    for i, j in product(range(row), range(col)):\n        table[i][j] =  sum(range(i+1, j+2)) if i < j else sum(range(j+1, i+2))\n    _max = max(row, col)\n    _max = int(log10(_max*(_max+1) \/ 2)) + 3\n    formatstr = (\"{{:^{}}}\".format(_max))*col\n    for row in table:\n        print formatstr.format(*row)\n\n\n>>> foo(3,4)\n 1   3   6   10 \n 3   2   5   9  \n 6   5   3   7  \n>>> foo(10,10)\n 1   3   6   10  15  21  28  36  45  55 \n 3   2   5   9   14  20  27  35  44  54 \n 6   5   3   7   12  18  25  33  42  52 \n 10  9   7   4   9   15  22  30  39  49 \n 15  14  12  9   5   11  18  26  35  45 \n 21  20  18  15  11  6   13  21  30  40 \n 28  27  25  22  18  13  7   15  24  34 \n 36  35  33  30  26  21  15  8   17  27 \n 45  44  42  39  35  30  24  17  9   19 \n 55  54  52  49  45  40  34  27  19  10\n","2434":"def sortkey(row):\n    return (row[5], row)\n\ndef unwrap(key):\n    sortkey, row = key\n    return row\n\nfrom itertools import imap\nFILE_LIST = map(file, ['foo.csv', 'bar.csv'])\ninput_iters = imap(sortkey, map(csv.csvreader, FILE_LIST))\noutput_iter = imap(unwrap, heapq.merge(*input_iters))\n","2435":"define([\n    'base\/js\/namespace',\n    'base\/js\/events'\n    ],\n    function(IPython, events) {\n        events.on(\"app_initialized.NotebookApp\",\n            function () {\n                IPython.Cell.options_default.cm_config.extraKeys = {\"Ctrl-,\" : \"toggleComment\"};\n            }\n        );\n    }\n);\n","2436":"import pytest\nimport requests\nfrom hamcrest import *\n\nclass SiteImpl:\n    def __init__(self, url):\n        self.url = url\n\n    def has_valid_cert(self):\n        return requests.get(self.url, verify=True)\n\n@pytest.yield_fixture\ndef site(request):\n    # setUp\n    yield SiteImpl('https:\/\/' + request.param)\n    # tearDown\n\ndef has_status(item):\n    return has_property('status_code', item)\n\n@pytest.mark.parametrize('site', ['google.com', 'github.com'], indirect=True)\ndef test_cert(site):\n    assert_that(site.has_valid_cert(), has_status(200))\n\nif __name__ == '__main__':\n    pytest.main(args=[__file__, '-v'])\n","2437":">>> import requests\n>>> response = requests.get(\"http:\/\/104.71.136.252\/\", timeout=60, verify=False)\n>>> response.raw.version\n10\n>>> response = requests.get(\"http:\/\/stackoverflow.com\", timeout=60, verify=False)\n>>> response.raw.version\n11\n","2438":"class Activity(EmbeddedDocument):\n    user = ReferenceField('Profile')\n    user_unrelated = ReferenceField('Profile')\n    created_date = DateTimeField(default=datetime.datetime.now, required=True)\n","2439":"import pymysql\nfrom bottle import Bottle,run\n\napp = Bottle()\n\n@app.route('\/conn')\ndef conn():\n    yield \"Trying to connect to database...\"\n    try:\n        conn = pymysql.connect(user=\"X\",passwd=\"X\",host=\"X\",port=X,database=\"X\")\n        yield \"Connection succeded\"\n    except:\n        yield \"Oops...connection failed\"\n\nrun(app, host='localhost',port = 8080)\n","2440":">>> s = '''Report:\n\n  Location: (569P,921L)\n\n  Band 1:\n\n    Value: 12'''\n>>> x,y = re.findall(r'\\b\\d+(?=[A-Z])', s)\n>>> print(x,y)\n569 921\n","2441":"class Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n\n\nclass Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True\n    post_id = db.Column(db.Integer, db.ForeignKey(Post.id), nullable=False)\n\n    post = db.relationship(Post, backref='comments')\n","2442":"[compile_catalog]\ndirectory = YOURPROJECT\/locale\ndomain = YOURPROJECT\nstatistics = true\n\n[extract_messages]\nadd_comments = TRANSLATORS:\noutput_file = YOURPROJECT\/locale\/YOURPROJECT.pot\nwidth = 80\n\n[init_catalog]\ndomain = YOURPROJECT\ninput_file = YOURPROJECT\/locale\/YOURPROJECT.pot\noutput_dir = YOURPROJECT\/locale\n\n[update_catalog]\ndomain = YOURPROJECT\ninput_file = YOURPROJECT\/locale\/YOURPROJECT.pot\noutput_dir = YOURPROJECT\/locale\nprevious = true\n","2443":">>> list1 = ['f', 'o', 'o']\n>>> list2 = ['hello', 'world']\n>>> result = [None]*(len(list1)+len(list2))\n>>> result[::2] = list1\n>>> result[1::2] = list2\n>>> result\n['f', 'hello', 'o', 'world', 'o']\n","2444":"from collections import OrderedDict\n\nannotations = [OrderedDict([('ID', i + 1),     # need to initialize with a list of tuples\n                            ('NAME', 'Tag Name'),   # to preserve the order of the items\n                            ('CONTENT', 'Note Content: This space will have a lot of text'),\n                            ('URL', 'ref address'),\n                            ('URL Info', 'url info')])\n               for i in range(10)]\n\nfor i, dct in enumerate(annotations):\n    print(\"Annotation #{}\".format(i+1))\n    for key, value in dct.items():\n        print(\"{}: {}\".format(key, value))\n    print()\n","2445":"r_old = old_w \/ old_h\nr_new = new_w \/ new_h\n\nif (r_old > r_new) then\n   w = new_w              \/\/ width of mapped rect\n   h = w \/ r_old          \/\/ height of mapped rect\n   x = 0                  \/\/ x-coord of mapped rect\n   y = (new_h - h) \/ 2    \/\/ y-coord of centered mapped rect\nelse\n   h = new_h\n   w = h * r_old\n   y = 0\n   x = (new_w - w) \/ 2\nendif\n","2446":"return Response(my_date, mimetype, {'Content-Disposition':'attachment'})\n","2447":"def convert_bng(double[::1] x, double[::1] y):\n  # I'm assuming that the data is double, not float, but it's easy changed\n  # here the [::1] promises it's continuous in memory\n  cdef _FFIArray x_ffi, y_ffi\n  # get a pointer to the data, and cast it to void*\n  x_ffi.data = <void*>&x[0]\n  x_ffi.len = x.shape[0] # possibly *sizeof(double) - depends on the C api\n\n  # repeat for y\n  y_ffi.data = <void*>&y[0]\n  y_ffi.len = y.shape[0]\n\n  cdef _Result_Tuple result = convert_to_bng_threaded(x_ffi, y_ffi)\n\n  # get data pointers for the two result arrays\n  cdef double* e_ptr = <double*>(result.e.data)\n  cdef double* n_ptr = <double*>(result.n.data)\n  # now view your output arrays using memoryviews\n  # you need to tell it the length (this is how many doubles the contain)\n  cdef double[::1] e = <double[:result.e.len:1]>e_ptr\n  cdef double[::1] n = <double[:result.n.len:1]>n_ptr\n\n  # create a numpy copy of the two arrays\n  import numpy as np\n  e_numpy = np.copy(e)\n  n_numpy = np.copy(n)\n\n  # you can now free your two returned arrays\n  # I assume this is done with drop_float_array\n  drop_float_array(result.e,result.n)\n\n  # return as tuple containing two arrays to python\n  return e_numpy, n_numpy\n","2448":">>> a = '{\"code\":\"ok\",\"job\":{\"config\":{\"progress\":{\"message\":\"Reading 2014-03-03__12-57-01-PM.xml\",\"percent\":107,               \"maxmemory\":954,\"memory\":667},\"projectID\":1868117666669}}}'\n\n>>> json.loads(a)['job']['config']['projectID']\n1868117666669\n","2449":"image = Image.open(StringIO.StringIO(image_data))\n","2450":"def isUSER1():\n  env.user=\"USER1\"\n  with settings(abort_on_prompts=True):\n    if env.host.find(\"@\")==-1:\n      try :\n        sudo('whoami')\n        env.hosts.remove(env.host)\n        fullhost=env.user+'@'+env.host\n        env.hosts.append(fullhost)\n      except :\n        pass\n","2451":"from kafka import KafkaClient\nfrom kafka.protocol.offset import OffsetRequest, OffsetResetStrategy\nfrom kafka.common import OffsetRequestPayload\n\nclient = KafkaClient(brokers)\n\npartitions = client.topic_partitions[topic]\noffset_requests = [OffsetRequestPayload(topic, p, -1, 1) for p in partitions.keys()]\n\noffsets_responses = client.send_offset_request(offset_requests)\n\nfor r in offsets_responses:\n    print \"partition = %s, offset = %s\"%(r.partition, r.offsets[0])\n","2452":"INPUT = 'file.txt'\nOUTPUT = 'calc.txt'\n\ndef main():\n    with open(INPUT, 'r') as reader, open(OUTPUT, 'a') as writer:\n        last_value = 0\n        for line in reader:\n            column_1, *remaining_columns = map(float, line.split())\n            column_2 = column_1 - last_value\n            last_value = column_1\n            print(column_1, column_2, sep='\\t', file=writer)\n\nif __name__ == '__main__':\n    main()\n","2453":"import threading, time\nfrom msvcrt import getch\n\nkey = \"lol\"\n\ndef thread1():\n    global key\n    lock = threading.Lock()\n    while True:\n        with lock:\n            key = getch()\n\nthreading.Thread(target = thread1).start()\n\nwhile True:\n    time.sleep(1)\n    print(key)\n","2454":"class Person(models.Model):\n   name = models.CharField(max_length=20)\n   lastname = models.CharField(max_length=20)\n   job = models.CharField(max_length=20)\n   salary = models.IntegerField()\n\n   class Meta:\n       abstract = True\n\n\nclass Person1(Person):\n    ...\n","2455":"import re\n\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium import webdriver\nfrom selenium.webdriver.support.wait import WebDriverWait\n\n\nbrowser = webdriver.Firefox()\nbrowser.get('http:\/\/www.spokeo.com\/search?q=Joe+Henderson,+Phoenix,+AZ&sao7=t104#:18643819031')\n\nWebDriverWait(browser, 10).until(EC.presence_of_element_located((By.ID, \"profile_details_section_header\")))\ncontent = browser.page_source\n\nm_obj = re.search(r\"(\\(\\d{3}\\)\\s\\d{3}-\\*{4})\", content)\nif m_obj:    \n    print m_obj.group(0)\n\nbrowser.quit()\n","2456":"python\nPython 2.6.6 (r266:84292, May 10 2011, 11:07:28) \n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> MAIL_SERVER = 'smtp.domain.com'\n>>> TO_ADDRESS = 'you@gmail.com'\n>>> FROM_ADDRESS = 'email@domain.com'\n>>> REPLY_TO_ADDRESS = 'email2@domain2.com'\n>>> import smtplib\n>>> import email.mime.multipart\n>>> msg = email.mime.multipart.MIMEMultipart()\n>>> msg['to'] = TO_ADDRESS\n>>> msg['from'] = FROM_ADDRESS\n>>> msg['subject'] = 'testing reply-to header'\n>>> msg.add_header('reply-to', REPLY_TO_ADDRESS)\n>>> server = smtplib.SMTP(MAIL_SERVER)\n>>> server.sendmail(msg['from'], [msg['to']], msg.as_string())\n{}\n","2457":">>> a = (2,3)\n>>> b = (2,3,)\n>>> c = 2,3\n>>> a==b\nTrue\n>>> a==c\nTrue\n>>> b==c\nTrue\n>>> d = 2,3,\n>>> a==d\nTrue\n","2458":"headers = {\n    'User-Agent': 'My User Agent 1.0',\n    'From': 'youremail@domain.com'  # This is another valid field\n}\n\nresponse = requests.get(url, headers=headers)\n","2459":"from scripttest import TestFileEnvironment\n\nenv = TestFileEnvironment('.\/scratch')\n\ndef test_script():\n    env.reset()\n    result = env.run('do_awesome_thing testfile --with extra_win --file %s' % filename)\n    # or use a list like ['do_awesome_thing', 'testfile', ...]\n    assert result.stdout.startswith('Creating awesome file')\n    assert filename in result.files_created\n","2460":"import re\nimport sys\nimport time\n\n# Tested with PySide 1.0.9, changing imports to PyQt should work identically\nfrom PySide.QtCore import Qt, QUrl\nfrom PySide.QtGui import QApplication, QImage, QPainter\nfrom PySide.QtWebKit import QWebPage, QWebSettings\n\n\ndef os_safe_name(url):\n    url = re.sub(\"[^a-zA-Z0-9_-]+\", \"_\", url)\n    url = re.sub(\"_{2,}\", \"_\", url)\n    return url\n\n\nclass Render(QWebPage):\n    def __init__(self, url):\n        QWebPage.__init__(self)\n\n        self.url = url\n        self.finished = False\n\n        # Settings\n        s = self.settings()\n        #s.setAttribute(QWebSettings.AutoLoadImages, False)\n        s.setAttribute(QWebSettings.JavascriptCanOpenWindows, False)\n        s.setAttribute(QWebSettings.PluginsEnabled, True)\n\n        #self.mainFrame().setScrollBarPolicy(Qt.Vertical, Qt.ScrollBarAlwaysOff)\n        self.mainFrame().setScrollBarPolicy(Qt.Horizontal, Qt.ScrollBarAlwaysOff)\n\n        # When page is loaded, callback saves image to file\n        self.loadFinished.connect(self._loadFinished)\n\n        self.mainFrame().load(QUrl(url))\n\n    def _loadFinished(self, result):\n        frame = self.mainFrame()\n        size = frame.contentsSize()\n        size.setWidth(1366)\n        self.setViewportSize(size)\n\n        image = QImage(self.viewportSize(), QImage.Format_ARGB32)\n\n        painter = QPainter(image)\n        frame.render(painter)\n        painter.end()\n\n        self.filepath = \"output\/%s.png\" % os_safe_name(self.url)\n        image.save(self.filepath)\n\n        self.finished = True\n\n\ndef run(url, app = None):\n    if app is None:\n        app = QApplication(sys.argv)\n\n    r = Render(url)\n\n    while not r.finished:\n        app.processEvents()\n        time.sleep(0.01)\n\n    return r.filepath\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n\n    print run(\"http:\/\/stackoverflow.com\", app=app)\n    print run(\"http:\/\/google.com\", app=app)\n","2461":"def test(request):\n    obj2 = Student.objects.get(name='john')\n    classes_name = obj2._meta.get_field('classes').related_model.__name__\n    return render(request, 'test\/list.html',\n                  {'obj2':obj2, 'classes_name': classes_name})\n","2462":"import subprocess\nimport os.path\n\ndef start_editor(editor,file_name):\n\n    if not os.path.isfile(file_name): # If file doesn't exist, create it\n        with open(file_name,'w'): \n            pass\n\n    command_line=editor+' '+file_name # Add any desired command line args\n    p = subprocess.Popen(command_line)\n    p.wait()\n\nfile_name='test.txt' # Probably known from elsewhere\neditor='notepad.exe' # Read from environment variable if desired\n\nstart_editor(editor,file_name)\n\nwith open(file_name,'r') as f: # Do something with the file, just an example here\n    for line in f:\n        print line\n","2463":"def spaces(sentences):\n  textList = sentences.split('. ')\n  whiteList = [whitespaces.count(' ') for whitespaces in textList]\n\n  return max(whiteList)\n\nprint(spaces(sentences))\n","2464":"## Explore the data (line 27)\ndata = pd.read_table('u.data', header=None)  # header=None avoid getting the columns automatically\ndata.columns = ['userID', 'itemID',\n                'rating', 'timestamp']       # Manually set the columns.\ndata = data.drop('timestamp', axis=1)        # Continue with regular work.\n\n...\n\n## Load user information (line 75)\nusers_info = pd.read_table('u.user', sep='|', header=None)\nusers_info.columns = ['useID', 'age', 'gender',\n                      'occupation' 'zipcode']\nusers_info = users_info.set_index('userID')\n\n...\n\n## Load movie information (line 88)\nmovies_info = pd.read_table('u.item', sep='|', header=None)\nmovies_info.columns = ['movieID', 'movie title', 'release date',\n                       'video release date', 'IMDb URL', 'unknown',\n                       'Action', 'Adventure', 'Animation', \"Children's\",\n                       'Comedy', 'Crime', 'Documentary', 'Drama',\n                       'Fantasy', 'Film-Noir', 'Horror', 'Musical',\n                       'Mystery', 'Romance', 'Sci-Fi',' Thriller',\n                       'War', 'Western']\nmovies_info = movies_info.set_index('movieID')#.drop(low_count_movies)\n","2465":"import collections\n\nval_map = collections.defaultdict(list)\nfor k,v in myRackDict.items():\n    val_map[v].append(k)\n","2466":"report_tuples = [\n    ('http:\/\/www.myreport.com\/report1', report1_date_object_or_string),\n    ('http:\/\/www.myreport.com\/report2', report2_date_object_or_string),\n    ('http:\/\/www.myreport.com\/report3', report3_date_object_or_string),\n]\nsorted(report_tuples, key=lambda reports: reports[1])   # sort by date\nhtml = '<html><body>' #add anything else in here or even better \n                      #use a template that you read and complement\nlastDate = None\nfor r in report_tuples:\n    if not lastDate or not lastDate == r[1]:\n        html += '<h3>%s<\/h3>' % (str(r[1]))\n    html += '<a href=\"%s\">Your Report Title<\/a>' % (r[0])\n\nreturn html #or even better, write it to the disk.\n","2467":"def get_item_by_label(self, tree, search_text, root_item):\n    item, cookie = tree.GetFirstChild(root_item)\n\n    while item.IsOk():\n        text = tree.GetItemText(item)\n        if text.lower() == search_text.lower():\n            return item\n        if tree.ItemHasChildren(item):\n            match = self.get_item_by_label(tree, search_text, item)\n            if match.IsOk():\n                return match\n        item, cookie = tree.GetNextChild(root_item, cookie)\n\n    return wx.TreeItemId()\n\nresult = get_item_by_label(tree, 'MyStories', tree.GetRootItem())\nif result.IsOk():\n    print('We have a match!')\n","2468":"self.app.conf['CELERYBEAT_SCHEDULE']\n","2469":"import datetime\nax.plot_date([d.astype(datetime.datetime) for d in data['date']], data['count'])\n","2470":"class UserProfile(models.Model):\n    user = models.OneToOneField(User)\n    website = models.URLField()\n\n\nclass Mobile(models.Model):\n    phone_number = models.CharField(min_length = 7, max_length = 20)\n    description = models.CharField(min_length = 7, max_length = 20)\n    user_profile = models.ForeignKey(UserProfile)\n","2471":"import tkinter as tk\n\nCORRECT_ANSWER = 'Some answer'\n\ndef callback():\n\n    if var.get() != CORRECT_ANSWER:\n        for i in range(10, 50):\n            canvas.move(text, -i if i% 2 == 0 else i, 0)\n            canvas.update()\n            canvas.move(text, i if i % 2 == 0 else -i, 0)                     \n            canvas.update()\n\nif __name__ == '__main__':\n\n    root = tk.Tk()\n    var = tk.StringVar()\n    canvas = tk.Canvas(root, bg=\"black\")\n    canvas.pack(fill=tk.BOTH, expand=1)\n    text = canvas.create_text(200, 100, text='Enter the answer to this question.',\n        fill='white')\n    entry = tk.Entry(root, textvariable = var)\n    entry.pack(side=tk.LEFT, fill=tk.X, expand=1)\n    submit = tk.Button(root, text='Submit', command=callback)\n    submit.pack(side=tk.LEFT, fill=tk.X, expand=1)\n    root.mainloop()\n","2472":"binned = np.full((bin_idx[-1]+1, np.max(col_idx)+1), np.nan)\nbinned[bin_idx, col_idx] = x\n","2473":"return wireAmpacityTable[pos1][1]\n","2474":">>> s = \"how much for the maple syrup? $20.99? That's ricidulous!!!\"\n>>> re.sub(r'[^\\w]', ' ', s)\n'how much for the maple syrup   20 99  That s ricidulous   '\n","2475":"import numpy as np\nfrom scipy.linalg import schur\n\na = np.array([[ 1., 2., 3.], [4., 5., 6.], [7., 8., 9.]])\nu, q = schur(a) # q is the unitary matrix, u is upper triangular\n\nrepr(u)\n# array([[  1.61168440e+01,   4.89897949e+00,   1.58820582e-15],\n#        [  0.00000000e+00,  -1.11684397e+00,  -1.11643184e-15],\n#        [  0.00000000e+00,   0.00000000e+00,  -1.30367773e-15]])\n","2476":"<ul id=\"theSortableStuff\">\n{% for item in things_to_sort %}\n    <li id=\"item-{{ item.id }}\">{{ item.name }}<\/li>\n{% endfor %}\n<\/ul>\n\n<script>\nvar $sortables = $(\"#theSortableStuff\").sortable({\n  stop: function() {\n    var sortedItems = $sortables.sortable(\"toArray\");\n    \/\/ Update some form in the DOM or use AJAX to invoke a server-side update\n  }\n});\n<\/script>\n","2477":">>> \"www.example.com\" in \"http:\/\/www.example.com\/aaa\/bbb\/ccc\"\nTrue\n","2478":"hmag = np.array(hmag)\njmag = np.array(jmah)\n\ncolorjh = jmag - hmag\nidx_c = (colorjh > 0) & (colorjh < 1) # where condition on c is met\nidx_h = (hmag > 10) & (hmag < 13) # where condition on h is met\nidx = idx_c & idx_h # where both conditions are met\n\nplt.scatter(colorjh[idx], hmag[idx], c='g', s=1, alpha=0.05)\n","2479":"photo = tkinter.PhotoImage(file = '.\/Images\/img1.gif')\nroot.geometry(\"450x450\")\nroot.update()\nimg = canvas.create_image(225,225, image=photo)\nroot.after(20000, lambda: canvas.delete(img)) # 20,000 milli seconds = 20 seconds\nroot.mainloop()\n","2480":"from random import randrange\ndef lowHigh():\n    l = input (\"Please input the low number range.\")\n    numl = eval(l)\n    h = input (\"Please input the high number range.\")\n    numh = eval(h)\n    lowest = l\n    highest = h\n    while True:\n        guess = randrange(lowest,highest+1)\n        print (guess)\n        ask = input(\"Is this number correct? y for yes or n for no.\")\n        if ask == 'y':\n            print(\"Yay! I guessed right!\")\n            break\n        else:\n            lowOrHigh = input (\"Is this number too high or low? h for high, l for low.\")\n            if lowOrHigh == 'h':\n               highest = guess - 1\n            else:\n               lowest = guess\n","2481":"import sys    \nsys._getframe(number)\n","2482":"from Tkinter import *\n\ncb_strings = ['item 1', 'item 2', 'item 3', 'item 4']\n\ndef sel():\n   print \"You selected the option \" + str(var.get())\n\nroot = Tk()\nvar = StringVar()\nvar.set(cb_strings[0])\n\nfor item in cb_strings:\n    button = Radiobutton(root, text=item, variable=var, value=item, command=sel)\n    button.pack(anchor=W)\n\nroot.mainloop()\n","2483":"In [230]: s = 'Website is: http:\/\/www.somesite.com '\nIn [231]: re.findall('Website is:\\s+(\\S+)', s)\nOut[231]: ['http:\/\/www.somesite.com']\n","2484":"b = Element(\"Batch\")\nb.append(Attribute(\"OnError\",\"Continue\")).append(Attribute(\"ListVersion\",\"3\"))\nbm= Element(\"Method\")\nbm.append(Attribute(\"ID\",\"1\")).append(Attribute(\"Cmd\",\"Update\"))\nbm.append(Element(\"Field\").append(Attribute(\"Name\",\"ID\")).setText(''))\nbm.append(Element('Field').append(Attribute('Name','FileRef')).setText('http:\/\/.....'))\nbm.append(Element('Field').append(Attribute('Name','Jurisdiction')).setText('UK'))\nbm.append(Element('Field').append(Attribute('Name','Desk')).setText('Structured Equity Derivatives'))\nbm.append(Element('Field').append(Attribute('Name','Business Area')).setText('Back Office'))\nbm.append(Element('Field').append(Attribute('Name','Title')).setText('whatever'))\nb.append(bm)\nu = Element(\"ns1:updates\")\nu.append(b)\nc.service.UpdateListItems(\"Reports\",u)\n","2485":"states = [gtk.STATE_NORMAL, gtk.STATE_ACTIVE, gtk.STATE_PRELIGHT,\n          gtk.STATE_SELECTED, gtk.STATE_INSENSITIVE]\n\nfor state in states:\n    button.modify_bg(state, gtk.gdk.color_parse(\"Green\"))\n","2486":"ax.set_rasterization_zorder(1) \n","2487":"def nohsps(input):\n    count=0\n    for line in input:\n        if line.startswith('AJ000012.1'):\n        count=count+1\n    return count\n","2488":"existing_set = {os.path.basename(f) for f in existing_list}  # set comprehension, python2.7+\n# alternatively:  set(os.path.basename(f) for f in existing_list)\n\nremaining_list = [f for f in all_list if f not in existing_set]\n","2489":"class KFold(_BaseKFold):\n    \"\"\"K-Folds cross validation iterator.\n    Provides train\/test indices to split data in train test sets. Split\n    dataset into k consecutive folds (without shuffling).\n    Each fold is then used a validation set once while the k - 1 remaining\n    fold form the training set.\n    Parameters\n    ----------\n    n : int\n        Total number of elements.\n    n_folds : int, default=3\n        Number of folds. Must be at least 2.\n    shuffle : boolean, optional\n        Whether to shuffle the data before splitting into batches.\n    random_state : None, int or RandomState\n        Pseudo-random number generator state used for random\n        sampling. If None, use default numpy RNG for shuffling\n    Examples\n    --------\n    >>> from sklearn import cross_validation\n    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n    >>> y = np.array([1, 2, 3, 4])\n    >>> kf = cross_validation.KFold(4, n_folds=2)\n    >>> len(kf)\n    2\n    >>> print(kf)  # doctest: +NORMALIZE_WHITESPACE\n    sklearn.cross_validation.KFold(n=4, n_folds=2, shuffle=False,\n                                   random_state=None)\n    >>> for train_index, test_index in kf:\n    ...    print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    ...    X_train, X_test = X[train_index], X[test_index]\n    ...    y_train, y_test = y[train_index], y[test_index]\n    TRAIN: [2 3] TEST: [0 1]\n    TRAIN: [0 1] TEST: [2 3]\n    Notes\n    -----\n    The first n % n_folds folds have size n \/\/ n_folds + 1, other folds have\n    size n \/\/ n_folds.\n    See also\n    --------\n    StratifiedKFold: take label information into account to avoid building\n    folds with imbalanced class distributions (for binary or multiclass\n    classification tasks).\n    \"\"\"\n\n    def __init__(self, n, n_folds=3, shuffle=False,\n                 random_state=None):\n        super(KFold, self).__init__(n, n_folds, shuffle, random_state)\n        self.idxs = np.arange(n)\n        if shuffle:\n            rng = check_random_state(self.random_state)\n            rng.shuffle(self.idxs)\n\n    def _iter_test_indices(self):\n        n = self.n\n        n_folds = self.n_folds\n        fold_sizes = (n \/\/ n_folds) * np.ones(n_folds, dtype=np.int)\n        fold_sizes[:n % n_folds] += 1\n        current = 0\n        for fold_size in fold_sizes:\n            start, stop = current, current + fold_size\n            yield self.idxs[start:stop]\n            current = stop\n\n    def __repr__(self):\n        return '%s.%s(n=%i, n_folds=%i, shuffle=%s, random_state=%s)' % (\n            self.__class__.__module__,\n            self.__class__.__name__,\n            self.n,\n            self.n_folds,\n            self.shuffle,\n            self.random_state,\n        )\n\n    def __len__(self):\n        return self.n_folds\n","2490":"data_files = []\ndirectories = glob.glob('data\/subfolder?\/subfolder??\/')\nfor directory in directories:\n    files = glob.glob(directory+'*')\n    data_files.append((directory, files))\n# then pass data_files to setup()\n","2491":"B = [5,-4,5,-6]\ny = [\n        [0,1,0,1],\n        [0,0,0,0],\n        [0,0,0,1],\n        [0,0,0,0],\n    ]\nx = []\nfor i, row in enumerate(y):\n    temp = []\n    for j, col in enumerate(row):\n        if col != 0:\n            temp.append(str(col) + '*x' + str(i) + str(j))\n        else:\n            temp.append(col)\n    x.append(temp)\n\n#for one in x:\n#    print one\n\n\nequ = []\nfor i in xrange(4):\n    temp1 = []\n    temp2 = []\n    for j in xrange(4):\n        temp1.append(x[i][j])\n        temp2.append(x[j][i])\n    temp2.append(B[i])\n    equ.append(tuple(temp1 + temp2))\n\nequtions = []\nfor one in equ:\n    s = '%s + %s + %s + %s - %s - %s - %s - %s = %s' % one\n    equtions.append(s)\n\nfor one in equtions:\n    print one\n\nimport re\nfrom copy import deepcopy\n\nequ_bak = deepcopy(equtions)\n\np_var = re.compile(r'x\\d\\d')\nvars = set([])\nfor one in equ_bak:\n    m = p_var.findall(one)\n    vars |= set(m)\nvars = sorted(list(vars))\n\np_ef = re.compile(r'([+-]* *\\d*)\\*(x\\d\\d)')\neffs = []\nfor one in equ_bak:\n    m = p_ef.findall(one)\n    #print m\n    temp = [0] * len(vars)\n    for num, var in m:\n        try:\n            temp[vars.index(var)] = float(num.replace(' ', ''))\n        except:\n            pass\n    effs.append(tuple(temp))\n\n#for one in effs:\n#    print one\n\nimport numpy as np\nA = np.array(effs)\nx = np.linalg.lstsq(A,B)\nprint vars\nprint x[0]\n","2492":"for key, val in zip(jobids, jobdeps):\n    if key == '0':\n        print val\n","2493":"#include <functional>\n#include <string>\n#include <unordered_map>\n\nstd::function<std::string(std::string)>\nmaketrans(const std::string& from, const std::string& to) {\n    std::unordered_map<char, char> map;\n    for (std::string::size_type i = 0;\n         i != std::min(from.size(), to.size()); ++i) {\n        map[from[i]] = to[i];\n    }\n    return [=](std::string s) {\n        for (auto& c : s) {\n            const auto mapped_c = map.find(c);\n            if (mapped_c != map.end()) {\n                c = mapped_c->second;\n            }\n        }\n        return s;\n    };\n}\n\n#include <iostream>\nint main() {\n    const std::string intab = \"aeiou\";\n    const std::string outtab = \"12345\";\n    const auto translate = maketrans(intab, outtab);\n\n    const std::string str = \"this is string example....wow!!!\";\n    std::cout << translate(str) << std::endl;\n    return 0;\n}\n","2494":"from __future__ import print_function\nimport time\nimport sys\n\nprint(\".\", end=\"\\r\")\nsys.stdout.flush()\ntime.sleep(1)\nprint(\"..\", end=\"\\r\")\nsys.stdout.flush()\ntime.sleep(1)\nprint(\"...\")\nsys.stdout.flush()\n","2495":"    list(cf.get_range().get_keys())\n","2496":"a <- matrix(c(1,2,3,4), 2, byrow=TRUE)\nb <- array(t(a), dim=c(2,1,2))\nb\n","2497":"secsAfterADEpoch = float(your_weird_time) \/ 10000000.0 # seconds since jan 1st 1601\nADToUnixConvertor = ((1970-1601) * 365.242190) * 86400 # unix epoch - AD epoch * number of tropical days * seconds in a day\nunixified = (secsAfterADEpoch-ADToUnixConvertor)+31800 # unix Timestamp version of AD timestamp + correction time\n","2498":"In [4]: df['label'] = 'F'\n\nIn [33]: df.loc[df[df['V1'] > df['V1'].mean()].sample(1).index,'label'] = 'T'\n\nIn [34]: df.loc[df[df['V1'] <= df['V1'].mean()].sample(1).index,'label'] = 'T'\n\nIn [35]: df\nOut[35]:\n   V1 label\n0   1     T\n1   2     F\n2   3     F\n3   4     F\n4   5     T\n","2499":"import matplotlib.pyplot as plt\n\n# Turn on LaTeX formatting for text    \nplt.rcParams['text.usetex']=True\n\n# Place the command in the text.latex.preamble using rcParams\nplt.rcParams['text.latex.preamble']=r'\\makeatletter \\newcommand*{\\rom}[1]{\\expandafter\\@slowromancap\\romannumeral #1@} \\makeatother'\n\nfig,ax = plt.subplots(1)\n\n# Lets try it out. Need to use a 'raw' string to escape \n# the LaTeX command properly (preface string with r)\nax.text(0.2,0.2,r'\\rom{28}')\n\n# And to use a variable as the roman numeral, you need \n# to use double braces inside the LaTeX braces:\nfor i in range(1,10):\n    ax.text(0.5,float(i)\/10.,r'\\rom{{{}}}'.format(i))\n\nplt.show()\n"}}